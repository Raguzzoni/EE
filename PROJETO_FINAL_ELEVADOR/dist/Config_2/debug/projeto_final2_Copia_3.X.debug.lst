

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri Jun 20 01:23:14 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK2,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	inittext,global,class=CODE,space=0,delta=2
    18                           	psect	clrtext,global,class=CODE,space=0,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=1
    54                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2,group=1
    60                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,space=0,delta=2
    63                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2,group=1
    70                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2,group=1
    71                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2,group=1
    72                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2,group=1
    73                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2,group=1
    74                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2,group=1
    75                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,space=0,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,space=0,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,space=0,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,space=0,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,space=0,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,space=0,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,space=0,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,space=0,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,space=0,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,space=0,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,space=0,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,space=0,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,space=0,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,space=0,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,space=0,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,space=0,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,space=0,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,space=0,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,space=0,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,space=0,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,space=0,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,space=0,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,space=0,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,space=0,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,space=0,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,space=0,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,space=0,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,space=0,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,space=0,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,space=0,merge=1,delta=2
   106                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   107                           	dabs	1,0x7E,2
   108     0000                     
   109                           ; Generated 27/03/2025 GMT
   110                           ; 
   111                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution. Publication is not required when
   125                           ;        this file is used in an embedded application.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC16F1827 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143     0008                     bsr             equ	8
   144     0005                     fsr0h           equ	5
   145     0004                     fsr0l           equ	4
   146     0007                     fsr1h           equ	7
   147     0006                     fsr1l           equ	6
   148     0000                     indf            equ	0
   149     0000                     indf0           equ	0
   150     0001                     indf1           equ	1
   151     000B                     intcon          equ	11
   152     0002                     pc              equ	2
   153     0002                     pcl             equ	2
   154     000A                     pclath          equ	10
   155     0003                     status          equ	3
   156     0009                     wreg            equ	9
   157     0000                     INDF0           equ	0	;# 
   158     0001                     INDF1           equ	1	;# 
   159     0002                     PCL             equ	2	;# 
   160     0003                     STATUS          equ	3	;# 
   161     0004                     FSR0L           equ	4	;# 
   162     0005                     FSR0H           equ	5	;# 
   163     0006                     FSR1L           equ	6	;# 
   164     0007                     FSR1H           equ	7	;# 
   165     0008                     BSR             equ	8	;# 
   166     0009                     WREG            equ	9	;# 
   167     000A                     PCLATH          equ	10	;# 
   168     000B                     INTCON          equ	11	;# 
   169     000C                     PORTA           equ	12	;# 
   170     000D                     PORTB           equ	13	;# 
   171     0011                     PIR1            equ	17	;# 
   172     0012                     PIR2            equ	18	;# 
   173     0013                     PIR3            equ	19	;# 
   174     0014                     PIR4            equ	20	;# 
   175     0015                     TMR0            equ	21	;# 
   176     0016                     TMR1            equ	22	;# 
   177     0016                     TMR1L           equ	22	;# 
   178     0017                     TMR1H           equ	23	;# 
   179     0018                     T1CON           equ	24	;# 
   180     0019                     T1GCON          equ	25	;# 
   181     001A                     TMR2            equ	26	;# 
   182     001B                     PR2             equ	27	;# 
   183     001C                     T2CON           equ	28	;# 
   184     001E                     CPSCON0         equ	30	;# 
   185     001F                     CPSCON1         equ	31	;# 
   186     008C                     TRISA           equ	140	;# 
   187     008D                     TRISB           equ	141	;# 
   188     0091                     PIE1            equ	145	;# 
   189     0092                     PIE2            equ	146	;# 
   190     0093                     PIE3            equ	147	;# 
   191     0094                     PIE4            equ	148	;# 
   192     0095                     OPTION_REG      equ	149	;# 
   193     0096                     PCON            equ	150	;# 
   194     0097                     WDTCON          equ	151	;# 
   195     0098                     OSCTUNE         equ	152	;# 
   196     0099                     OSCCON          equ	153	;# 
   197     009A                     OSCSTAT         equ	154	;# 
   198     009B                     ADRES           equ	155	;# 
   199     009B                     ADRESL          equ	155	;# 
   200     009C                     ADRESH          equ	156	;# 
   201     009D                     ADCON0          equ	157	;# 
   202     009E                     ADCON1          equ	158	;# 
   203     010C                     LATA            equ	268	;# 
   204     010D                     LATB            equ	269	;# 
   205     0111                     CM1CON0         equ	273	;# 
   206     0112                     CM1CON1         equ	274	;# 
   207     0113                     CM2CON0         equ	275	;# 
   208     0114                     CM2CON1         equ	276	;# 
   209     0115                     CMOUT           equ	277	;# 
   210     0116                     BORCON          equ	278	;# 
   211     0117                     FVRCON          equ	279	;# 
   212     0118                     DACCON0         equ	280	;# 
   213     0119                     DACCON1         equ	281	;# 
   214     011A                     SRCON0          equ	282	;# 
   215     011B                     SRCON1          equ	283	;# 
   216     011D                     APFCON0         equ	285	;# 
   217     011E                     APFCON1         equ	286	;# 
   218     018C                     ANSELA          equ	396	;# 
   219     018D                     ANSELB          equ	397	;# 
   220     0191                     EEADR           equ	401	;# 
   221     0191                     EEADRL          equ	401	;# 
   222     0192                     EEADRH          equ	402	;# 
   223     0193                     EEDAT           equ	403	;# 
   224     0193                     EEDATL          equ	403	;# 
   225     0193                     EEDATA          equ	403	;# 
   226     0194                     EEDATH          equ	404	;# 
   227     0195                     EECON1          equ	405	;# 
   228     0196                     EECON2          equ	406	;# 
   229     0199                     RCREG           equ	409	;# 
   230     019A                     TXREG           equ	410	;# 
   231     019B                     SP1BRG          equ	411	;# 
   232     019B                     SP1BRGL         equ	411	;# 
   233     019B                     SPBRG           equ	411	;# 
   234     019B                     SPBRGL          equ	411	;# 
   235     019C                     SP1BRGH         equ	412	;# 
   236     019C                     SPBRGH          equ	412	;# 
   237     019D                     RCSTA           equ	413	;# 
   238     019E                     TXSTA           equ	414	;# 
   239     019F                     BAUDCON         equ	415	;# 
   240     020C                     WPUA            equ	524	;# 
   241     020D                     WPUB            equ	525	;# 
   242     0211                     SSP1BUF         equ	529	;# 
   243     0211                     SSPBUF          equ	529	;# 
   244     0212                     SSP1ADD         equ	530	;# 
   245     0212                     SSPADD          equ	530	;# 
   246     0213                     SSP1MSK         equ	531	;# 
   247     0213                     SSPMSK          equ	531	;# 
   248     0214                     SSP1STAT        equ	532	;# 
   249     0214                     SSPSTAT         equ	532	;# 
   250     0215                     SSP1CON1        equ	533	;# 
   251     0215                     SSPCON1         equ	533	;# 
   252     0215                     SSPCON          equ	533	;# 
   253     0216                     SSP1CON2        equ	534	;# 
   254     0216                     SSPCON2         equ	534	;# 
   255     0217                     SSP1CON3        equ	535	;# 
   256     0217                     SSPCON3         equ	535	;# 
   257     0219                     SSP2BUF         equ	537	;# 
   258     021A                     SSP2ADD         equ	538	;# 
   259     021B                     SSP2MSK         equ	539	;# 
   260     021C                     SSP2STAT        equ	540	;# 
   261     021D                     SSP2CON1        equ	541	;# 
   262     021E                     SSP2CON2        equ	542	;# 
   263     021F                     SSP2CON3        equ	543	;# 
   264     0291                     CCPR1           equ	657	;# 
   265     0291                     CCPR1L          equ	657	;# 
   266     0292                     CCPR1H          equ	658	;# 
   267     0293                     CCP1CON         equ	659	;# 
   268     0294                     PWM1CON         equ	660	;# 
   269     0295                     CCP1AS          equ	661	;# 
   270     0295                     ECCP1AS         equ	661	;# 
   271     0296                     PSTR1CON        equ	662	;# 
   272     0298                     CCPR2           equ	664	;# 
   273     0298                     CCPR2L          equ	664	;# 
   274     0299                     CCPR2H          equ	665	;# 
   275     029A                     CCP2CON         equ	666	;# 
   276     029B                     PWM2CON         equ	667	;# 
   277     029C                     CCP2AS          equ	668	;# 
   278     029C                     ECCP2AS         equ	668	;# 
   279     029D                     PSTR2CON        equ	669	;# 
   280     029E                     CCPTMRS         equ	670	;# 
   281     029E                     CCPTMRS0        equ	670	;# 
   282     0311                     CCPR3           equ	785	;# 
   283     0311                     CCPR3L          equ	785	;# 
   284     0312                     CCPR3H          equ	786	;# 
   285     0313                     CCP3CON         equ	787	;# 
   286     0318                     CCPR4           equ	792	;# 
   287     0318                     CCPR4L          equ	792	;# 
   288     0319                     CCPR4H          equ	793	;# 
   289     031A                     CCP4CON         equ	794	;# 
   290     0394                     IOCBP           equ	916	;# 
   291     0395                     IOCBN           equ	917	;# 
   292     0396                     IOCBF           equ	918	;# 
   293     039A                     CLKRCON         equ	922	;# 
   294     039C                     MDCON           equ	924	;# 
   295     039D                     MDSRC           equ	925	;# 
   296     039E                     MDCARL          equ	926	;# 
   297     039F                     MDCARH          equ	927	;# 
   298     0415                     TMR4            equ	1045	;# 
   299     0416                     PR4             equ	1046	;# 
   300     0417                     T4CON           equ	1047	;# 
   301     041C                     TMR6            equ	1052	;# 
   302     041D                     PR6             equ	1053	;# 
   303     041E                     T6CON           equ	1054	;# 
   304     0FE4                     STATUS_SHAD     equ	4068	;# 
   305     0FE5                     WREG_SHAD       equ	4069	;# 
   306     0FE6                     BSR_SHAD        equ	4070	;# 
   307     0FE7                     PCLATH_SHAD     equ	4071	;# 
   308     0FE8                     FSR0L_SHAD      equ	4072	;# 
   309     0FE9                     FSR0H_SHAD      equ	4073	;# 
   310     0FEA                     FSR1L_SHAD      equ	4074	;# 
   311     0FEB                     FSR1H_SHAD      equ	4075	;# 
   312     0FED                     STKPTR          equ	4077	;# 
   313     0FEE                     TOSL            equ	4078	;# 
   314     0FEF                     TOSH            equ	4079	;# 
   315     0000                     INDF0           equ	0	;# 
   316     0001                     INDF1           equ	1	;# 
   317     0002                     PCL             equ	2	;# 
   318     0003                     STATUS          equ	3	;# 
   319     0004                     FSR0L           equ	4	;# 
   320     0005                     FSR0H           equ	5	;# 
   321     0006                     FSR1L           equ	6	;# 
   322     0007                     FSR1H           equ	7	;# 
   323     0008                     BSR             equ	8	;# 
   324     0009                     WREG            equ	9	;# 
   325     000A                     PCLATH          equ	10	;# 
   326     000B                     INTCON          equ	11	;# 
   327     000C                     PORTA           equ	12	;# 
   328     000D                     PORTB           equ	13	;# 
   329     0011                     PIR1            equ	17	;# 
   330     0012                     PIR2            equ	18	;# 
   331     0013                     PIR3            equ	19	;# 
   332     0014                     PIR4            equ	20	;# 
   333     0015                     TMR0            equ	21	;# 
   334     0016                     TMR1            equ	22	;# 
   335     0016                     TMR1L           equ	22	;# 
   336     0017                     TMR1H           equ	23	;# 
   337     0018                     T1CON           equ	24	;# 
   338     0019                     T1GCON          equ	25	;# 
   339     001A                     TMR2            equ	26	;# 
   340     001B                     PR2             equ	27	;# 
   341     001C                     T2CON           equ	28	;# 
   342     001E                     CPSCON0         equ	30	;# 
   343     001F                     CPSCON1         equ	31	;# 
   344     008C                     TRISA           equ	140	;# 
   345     008D                     TRISB           equ	141	;# 
   346     0091                     PIE1            equ	145	;# 
   347     0092                     PIE2            equ	146	;# 
   348     0093                     PIE3            equ	147	;# 
   349     0094                     PIE4            equ	148	;# 
   350     0095                     OPTION_REG      equ	149	;# 
   351     0096                     PCON            equ	150	;# 
   352     0097                     WDTCON          equ	151	;# 
   353     0098                     OSCTUNE         equ	152	;# 
   354     0099                     OSCCON          equ	153	;# 
   355     009A                     OSCSTAT         equ	154	;# 
   356     009B                     ADRES           equ	155	;# 
   357     009B                     ADRESL          equ	155	;# 
   358     009C                     ADRESH          equ	156	;# 
   359     009D                     ADCON0          equ	157	;# 
   360     009E                     ADCON1          equ	158	;# 
   361     010C                     LATA            equ	268	;# 
   362     010D                     LATB            equ	269	;# 
   363     0111                     CM1CON0         equ	273	;# 
   364     0112                     CM1CON1         equ	274	;# 
   365     0113                     CM2CON0         equ	275	;# 
   366     0114                     CM2CON1         equ	276	;# 
   367     0115                     CMOUT           equ	277	;# 
   368     0116                     BORCON          equ	278	;# 
   369     0117                     FVRCON          equ	279	;# 
   370     0118                     DACCON0         equ	280	;# 
   371     0119                     DACCON1         equ	281	;# 
   372     011A                     SRCON0          equ	282	;# 
   373     011B                     SRCON1          equ	283	;# 
   374     011D                     APFCON0         equ	285	;# 
   375     011E                     APFCON1         equ	286	;# 
   376     018C                     ANSELA          equ	396	;# 
   377     018D                     ANSELB          equ	397	;# 
   378     0191                     EEADR           equ	401	;# 
   379     0191                     EEADRL          equ	401	;# 
   380     0192                     EEADRH          equ	402	;# 
   381     0193                     EEDAT           equ	403	;# 
   382     0193                     EEDATL          equ	403	;# 
   383     0193                     EEDATA          equ	403	;# 
   384     0194                     EEDATH          equ	404	;# 
   385     0195                     EECON1          equ	405	;# 
   386     0196                     EECON2          equ	406	;# 
   387     0199                     RCREG           equ	409	;# 
   388     019A                     TXREG           equ	410	;# 
   389     019B                     SP1BRG          equ	411	;# 
   390     019B                     SP1BRGL         equ	411	;# 
   391     019B                     SPBRG           equ	411	;# 
   392     019B                     SPBRGL          equ	411	;# 
   393     019C                     SP1BRGH         equ	412	;# 
   394     019C                     SPBRGH          equ	412	;# 
   395     019D                     RCSTA           equ	413	;# 
   396     019E                     TXSTA           equ	414	;# 
   397     019F                     BAUDCON         equ	415	;# 
   398     020C                     WPUA            equ	524	;# 
   399     020D                     WPUB            equ	525	;# 
   400     0211                     SSP1BUF         equ	529	;# 
   401     0211                     SSPBUF          equ	529	;# 
   402     0212                     SSP1ADD         equ	530	;# 
   403     0212                     SSPADD          equ	530	;# 
   404     0213                     SSP1MSK         equ	531	;# 
   405     0213                     SSPMSK          equ	531	;# 
   406     0214                     SSP1STAT        equ	532	;# 
   407     0214                     SSPSTAT         equ	532	;# 
   408     0215                     SSP1CON1        equ	533	;# 
   409     0215                     SSPCON1         equ	533	;# 
   410     0215                     SSPCON          equ	533	;# 
   411     0216                     SSP1CON2        equ	534	;# 
   412     0216                     SSPCON2         equ	534	;# 
   413     0217                     SSP1CON3        equ	535	;# 
   414     0217                     SSPCON3         equ	535	;# 
   415     0219                     SSP2BUF         equ	537	;# 
   416     021A                     SSP2ADD         equ	538	;# 
   417     021B                     SSP2MSK         equ	539	;# 
   418     021C                     SSP2STAT        equ	540	;# 
   419     021D                     SSP2CON1        equ	541	;# 
   420     021E                     SSP2CON2        equ	542	;# 
   421     021F                     SSP2CON3        equ	543	;# 
   422     0291                     CCPR1           equ	657	;# 
   423     0291                     CCPR1L          equ	657	;# 
   424     0292                     CCPR1H          equ	658	;# 
   425     0293                     CCP1CON         equ	659	;# 
   426     0294                     PWM1CON         equ	660	;# 
   427     0295                     CCP1AS          equ	661	;# 
   428     0295                     ECCP1AS         equ	661	;# 
   429     0296                     PSTR1CON        equ	662	;# 
   430     0298                     CCPR2           equ	664	;# 
   431     0298                     CCPR2L          equ	664	;# 
   432     0299                     CCPR2H          equ	665	;# 
   433     029A                     CCP2CON         equ	666	;# 
   434     029B                     PWM2CON         equ	667	;# 
   435     029C                     CCP2AS          equ	668	;# 
   436     029C                     ECCP2AS         equ	668	;# 
   437     029D                     PSTR2CON        equ	669	;# 
   438     029E                     CCPTMRS         equ	670	;# 
   439     029E                     CCPTMRS0        equ	670	;# 
   440     0311                     CCPR3           equ	785	;# 
   441     0311                     CCPR3L          equ	785	;# 
   442     0312                     CCPR3H          equ	786	;# 
   443     0313                     CCP3CON         equ	787	;# 
   444     0318                     CCPR4           equ	792	;# 
   445     0318                     CCPR4L          equ	792	;# 
   446     0319                     CCPR4H          equ	793	;# 
   447     031A                     CCP4CON         equ	794	;# 
   448     0394                     IOCBP           equ	916	;# 
   449     0395                     IOCBN           equ	917	;# 
   450     0396                     IOCBF           equ	918	;# 
   451     039A                     CLKRCON         equ	922	;# 
   452     039C                     MDCON           equ	924	;# 
   453     039D                     MDSRC           equ	925	;# 
   454     039E                     MDCARL          equ	926	;# 
   455     039F                     MDCARH          equ	927	;# 
   456     0415                     TMR4            equ	1045	;# 
   457     0416                     PR4             equ	1046	;# 
   458     0417                     T4CON           equ	1047	;# 
   459     041C                     TMR6            equ	1052	;# 
   460     041D                     PR6             equ	1053	;# 
   461     041E                     T6CON           equ	1054	;# 
   462     0FE4                     STATUS_SHAD     equ	4068	;# 
   463     0FE5                     WREG_SHAD       equ	4069	;# 
   464     0FE6                     BSR_SHAD        equ	4070	;# 
   465     0FE7                     PCLATH_SHAD     equ	4071	;# 
   466     0FE8                     FSR0L_SHAD      equ	4072	;# 
   467     0FE9                     FSR0H_SHAD      equ	4073	;# 
   468     0FEA                     FSR1L_SHAD      equ	4074	;# 
   469     0FEB                     FSR1H_SHAD      equ	4075	;# 
   470     0FED                     STKPTR          equ	4077	;# 
   471     0FEE                     TOSL            equ	4078	;# 
   472     0FEF                     TOSH            equ	4079	;# 
   473     0000                     INDF0           equ	0	;# 
   474     0001                     INDF1           equ	1	;# 
   475     0002                     PCL             equ	2	;# 
   476     0003                     STATUS          equ	3	;# 
   477     0004                     FSR0L           equ	4	;# 
   478     0005                     FSR0H           equ	5	;# 
   479     0006                     FSR1L           equ	6	;# 
   480     0007                     FSR1H           equ	7	;# 
   481     0008                     BSR             equ	8	;# 
   482     0009                     WREG            equ	9	;# 
   483     000A                     PCLATH          equ	10	;# 
   484     000B                     INTCON          equ	11	;# 
   485     000C                     PORTA           equ	12	;# 
   486     000D                     PORTB           equ	13	;# 
   487     0011                     PIR1            equ	17	;# 
   488     0012                     PIR2            equ	18	;# 
   489     0013                     PIR3            equ	19	;# 
   490     0014                     PIR4            equ	20	;# 
   491     0015                     TMR0            equ	21	;# 
   492     0016                     TMR1            equ	22	;# 
   493     0016                     TMR1L           equ	22	;# 
   494     0017                     TMR1H           equ	23	;# 
   495     0018                     T1CON           equ	24	;# 
   496     0019                     T1GCON          equ	25	;# 
   497     001A                     TMR2            equ	26	;# 
   498     001B                     PR2             equ	27	;# 
   499     001C                     T2CON           equ	28	;# 
   500     001E                     CPSCON0         equ	30	;# 
   501     001F                     CPSCON1         equ	31	;# 
   502     008C                     TRISA           equ	140	;# 
   503     008D                     TRISB           equ	141	;# 
   504     0091                     PIE1            equ	145	;# 
   505     0092                     PIE2            equ	146	;# 
   506     0093                     PIE3            equ	147	;# 
   507     0094                     PIE4            equ	148	;# 
   508     0095                     OPTION_REG      equ	149	;# 
   509     0096                     PCON            equ	150	;# 
   510     0097                     WDTCON          equ	151	;# 
   511     0098                     OSCTUNE         equ	152	;# 
   512     0099                     OSCCON          equ	153	;# 
   513     009A                     OSCSTAT         equ	154	;# 
   514     009B                     ADRES           equ	155	;# 
   515     009B                     ADRESL          equ	155	;# 
   516     009C                     ADRESH          equ	156	;# 
   517     009D                     ADCON0          equ	157	;# 
   518     009E                     ADCON1          equ	158	;# 
   519     010C                     LATA            equ	268	;# 
   520     010D                     LATB            equ	269	;# 
   521     0111                     CM1CON0         equ	273	;# 
   522     0112                     CM1CON1         equ	274	;# 
   523     0113                     CM2CON0         equ	275	;# 
   524     0114                     CM2CON1         equ	276	;# 
   525     0115                     CMOUT           equ	277	;# 
   526     0116                     BORCON          equ	278	;# 
   527     0117                     FVRCON          equ	279	;# 
   528     0118                     DACCON0         equ	280	;# 
   529     0119                     DACCON1         equ	281	;# 
   530     011A                     SRCON0          equ	282	;# 
   531     011B                     SRCON1          equ	283	;# 
   532     011D                     APFCON0         equ	285	;# 
   533     011E                     APFCON1         equ	286	;# 
   534     018C                     ANSELA          equ	396	;# 
   535     018D                     ANSELB          equ	397	;# 
   536     0191                     EEADR           equ	401	;# 
   537     0191                     EEADRL          equ	401	;# 
   538     0192                     EEADRH          equ	402	;# 
   539     0193                     EEDAT           equ	403	;# 
   540     0193                     EEDATL          equ	403	;# 
   541     0193                     EEDATA          equ	403	;# 
   542     0194                     EEDATH          equ	404	;# 
   543     0195                     EECON1          equ	405	;# 
   544     0196                     EECON2          equ	406	;# 
   545     0199                     RCREG           equ	409	;# 
   546     019A                     TXREG           equ	410	;# 
   547     019B                     SP1BRG          equ	411	;# 
   548     019B                     SP1BRGL         equ	411	;# 
   549     019B                     SPBRG           equ	411	;# 
   550     019B                     SPBRGL          equ	411	;# 
   551     019C                     SP1BRGH         equ	412	;# 
   552     019C                     SPBRGH          equ	412	;# 
   553     019D                     RCSTA           equ	413	;# 
   554     019E                     TXSTA           equ	414	;# 
   555     019F                     BAUDCON         equ	415	;# 
   556     020C                     WPUA            equ	524	;# 
   557     020D                     WPUB            equ	525	;# 
   558     0211                     SSP1BUF         equ	529	;# 
   559     0211                     SSPBUF          equ	529	;# 
   560     0212                     SSP1ADD         equ	530	;# 
   561     0212                     SSPADD          equ	530	;# 
   562     0213                     SSP1MSK         equ	531	;# 
   563     0213                     SSPMSK          equ	531	;# 
   564     0214                     SSP1STAT        equ	532	;# 
   565     0214                     SSPSTAT         equ	532	;# 
   566     0215                     SSP1CON1        equ	533	;# 
   567     0215                     SSPCON1         equ	533	;# 
   568     0215                     SSPCON          equ	533	;# 
   569     0216                     SSP1CON2        equ	534	;# 
   570     0216                     SSPCON2         equ	534	;# 
   571     0217                     SSP1CON3        equ	535	;# 
   572     0217                     SSPCON3         equ	535	;# 
   573     0219                     SSP2BUF         equ	537	;# 
   574     021A                     SSP2ADD         equ	538	;# 
   575     021B                     SSP2MSK         equ	539	;# 
   576     021C                     SSP2STAT        equ	540	;# 
   577     021D                     SSP2CON1        equ	541	;# 
   578     021E                     SSP2CON2        equ	542	;# 
   579     021F                     SSP2CON3        equ	543	;# 
   580     0291                     CCPR1           equ	657	;# 
   581     0291                     CCPR1L          equ	657	;# 
   582     0292                     CCPR1H          equ	658	;# 
   583     0293                     CCP1CON         equ	659	;# 
   584     0294                     PWM1CON         equ	660	;# 
   585     0295                     CCP1AS          equ	661	;# 
   586     0295                     ECCP1AS         equ	661	;# 
   587     0296                     PSTR1CON        equ	662	;# 
   588     0298                     CCPR2           equ	664	;# 
   589     0298                     CCPR2L          equ	664	;# 
   590     0299                     CCPR2H          equ	665	;# 
   591     029A                     CCP2CON         equ	666	;# 
   592     029B                     PWM2CON         equ	667	;# 
   593     029C                     CCP2AS          equ	668	;# 
   594     029C                     ECCP2AS         equ	668	;# 
   595     029D                     PSTR2CON        equ	669	;# 
   596     029E                     CCPTMRS         equ	670	;# 
   597     029E                     CCPTMRS0        equ	670	;# 
   598     0311                     CCPR3           equ	785	;# 
   599     0311                     CCPR3L          equ	785	;# 
   600     0312                     CCPR3H          equ	786	;# 
   601     0313                     CCP3CON         equ	787	;# 
   602     0318                     CCPR4           equ	792	;# 
   603     0318                     CCPR4L          equ	792	;# 
   604     0319                     CCPR4H          equ	793	;# 
   605     031A                     CCP4CON         equ	794	;# 
   606     0394                     IOCBP           equ	916	;# 
   607     0395                     IOCBN           equ	917	;# 
   608     0396                     IOCBF           equ	918	;# 
   609     039A                     CLKRCON         equ	922	;# 
   610     039C                     MDCON           equ	924	;# 
   611     039D                     MDSRC           equ	925	;# 
   612     039E                     MDCARL          equ	926	;# 
   613     039F                     MDCARH          equ	927	;# 
   614     0415                     TMR4            equ	1045	;# 
   615     0416                     PR4             equ	1046	;# 
   616     0417                     T4CON           equ	1047	;# 
   617     041C                     TMR6            equ	1052	;# 
   618     041D                     PR6             equ	1053	;# 
   619     041E                     T6CON           equ	1054	;# 
   620     0FE4                     STATUS_SHAD     equ	4068	;# 
   621     0FE5                     WREG_SHAD       equ	4069	;# 
   622     0FE6                     BSR_SHAD        equ	4070	;# 
   623     0FE7                     PCLATH_SHAD     equ	4071	;# 
   624     0FE8                     FSR0L_SHAD      equ	4072	;# 
   625     0FE9                     FSR0H_SHAD      equ	4073	;# 
   626     0FEA                     FSR1L_SHAD      equ	4074	;# 
   627     0FEB                     FSR1H_SHAD      equ	4075	;# 
   628     0FED                     STKPTR          equ	4077	;# 
   629     0FEE                     TOSL            equ	4078	;# 
   630     0FEF                     TOSH            equ	4079	;# 
   631     0000                     INDF0           equ	0	;# 
   632     0001                     INDF1           equ	1	;# 
   633     0002                     PCL             equ	2	;# 
   634     0003                     STATUS          equ	3	;# 
   635     0004                     FSR0L           equ	4	;# 
   636     0005                     FSR0H           equ	5	;# 
   637     0006                     FSR1L           equ	6	;# 
   638     0007                     FSR1H           equ	7	;# 
   639     0008                     BSR             equ	8	;# 
   640     0009                     WREG            equ	9	;# 
   641     000A                     PCLATH          equ	10	;# 
   642     000B                     INTCON          equ	11	;# 
   643     000C                     PORTA           equ	12	;# 
   644     000D                     PORTB           equ	13	;# 
   645     0011                     PIR1            equ	17	;# 
   646     0012                     PIR2            equ	18	;# 
   647     0013                     PIR3            equ	19	;# 
   648     0014                     PIR4            equ	20	;# 
   649     0015                     TMR0            equ	21	;# 
   650     0016                     TMR1            equ	22	;# 
   651     0016                     TMR1L           equ	22	;# 
   652     0017                     TMR1H           equ	23	;# 
   653     0018                     T1CON           equ	24	;# 
   654     0019                     T1GCON          equ	25	;# 
   655     001A                     TMR2            equ	26	;# 
   656     001B                     PR2             equ	27	;# 
   657     001C                     T2CON           equ	28	;# 
   658     001E                     CPSCON0         equ	30	;# 
   659     001F                     CPSCON1         equ	31	;# 
   660     008C                     TRISA           equ	140	;# 
   661     008D                     TRISB           equ	141	;# 
   662     0091                     PIE1            equ	145	;# 
   663     0092                     PIE2            equ	146	;# 
   664     0093                     PIE3            equ	147	;# 
   665     0094                     PIE4            equ	148	;# 
   666     0095                     OPTION_REG      equ	149	;# 
   667     0096                     PCON            equ	150	;# 
   668     0097                     WDTCON          equ	151	;# 
   669     0098                     OSCTUNE         equ	152	;# 
   670     0099                     OSCCON          equ	153	;# 
   671     009A                     OSCSTAT         equ	154	;# 
   672     009B                     ADRES           equ	155	;# 
   673     009B                     ADRESL          equ	155	;# 
   674     009C                     ADRESH          equ	156	;# 
   675     009D                     ADCON0          equ	157	;# 
   676     009E                     ADCON1          equ	158	;# 
   677     010C                     LATA            equ	268	;# 
   678     010D                     LATB            equ	269	;# 
   679     0111                     CM1CON0         equ	273	;# 
   680     0112                     CM1CON1         equ	274	;# 
   681     0113                     CM2CON0         equ	275	;# 
   682     0114                     CM2CON1         equ	276	;# 
   683     0115                     CMOUT           equ	277	;# 
   684     0116                     BORCON          equ	278	;# 
   685     0117                     FVRCON          equ	279	;# 
   686     0118                     DACCON0         equ	280	;# 
   687     0119                     DACCON1         equ	281	;# 
   688     011A                     SRCON0          equ	282	;# 
   689     011B                     SRCON1          equ	283	;# 
   690     011D                     APFCON0         equ	285	;# 
   691     011E                     APFCON1         equ	286	;# 
   692     018C                     ANSELA          equ	396	;# 
   693     018D                     ANSELB          equ	397	;# 
   694     0191                     EEADR           equ	401	;# 
   695     0191                     EEADRL          equ	401	;# 
   696     0192                     EEADRH          equ	402	;# 
   697     0193                     EEDAT           equ	403	;# 
   698     0193                     EEDATL          equ	403	;# 
   699     0193                     EEDATA          equ	403	;# 
   700     0194                     EEDATH          equ	404	;# 
   701     0195                     EECON1          equ	405	;# 
   702     0196                     EECON2          equ	406	;# 
   703     0199                     RCREG           equ	409	;# 
   704     019A                     TXREG           equ	410	;# 
   705     019B                     SP1BRG          equ	411	;# 
   706     019B                     SP1BRGL         equ	411	;# 
   707     019B                     SPBRG           equ	411	;# 
   708     019B                     SPBRGL          equ	411	;# 
   709     019C                     SP1BRGH         equ	412	;# 
   710     019C                     SPBRGH          equ	412	;# 
   711     019D                     RCSTA           equ	413	;# 
   712     019E                     TXSTA           equ	414	;# 
   713     019F                     BAUDCON         equ	415	;# 
   714     020C                     WPUA            equ	524	;# 
   715     020D                     WPUB            equ	525	;# 
   716     0211                     SSP1BUF         equ	529	;# 
   717     0211                     SSPBUF          equ	529	;# 
   718     0212                     SSP1ADD         equ	530	;# 
   719     0212                     SSPADD          equ	530	;# 
   720     0213                     SSP1MSK         equ	531	;# 
   721     0213                     SSPMSK          equ	531	;# 
   722     0214                     SSP1STAT        equ	532	;# 
   723     0214                     SSPSTAT         equ	532	;# 
   724     0215                     SSP1CON1        equ	533	;# 
   725     0215                     SSPCON1         equ	533	;# 
   726     0215                     SSPCON          equ	533	;# 
   727     0216                     SSP1CON2        equ	534	;# 
   728     0216                     SSPCON2         equ	534	;# 
   729     0217                     SSP1CON3        equ	535	;# 
   730     0217                     SSPCON3         equ	535	;# 
   731     0219                     SSP2BUF         equ	537	;# 
   732     021A                     SSP2ADD         equ	538	;# 
   733     021B                     SSP2MSK         equ	539	;# 
   734     021C                     SSP2STAT        equ	540	;# 
   735     021D                     SSP2CON1        equ	541	;# 
   736     021E                     SSP2CON2        equ	542	;# 
   737     021F                     SSP2CON3        equ	543	;# 
   738     0291                     CCPR1           equ	657	;# 
   739     0291                     CCPR1L          equ	657	;# 
   740     0292                     CCPR1H          equ	658	;# 
   741     0293                     CCP1CON         equ	659	;# 
   742     0294                     PWM1CON         equ	660	;# 
   743     0295                     CCP1AS          equ	661	;# 
   744     0295                     ECCP1AS         equ	661	;# 
   745     0296                     PSTR1CON        equ	662	;# 
   746     0298                     CCPR2           equ	664	;# 
   747     0298                     CCPR2L          equ	664	;# 
   748     0299                     CCPR2H          equ	665	;# 
   749     029A                     CCP2CON         equ	666	;# 
   750     029B                     PWM2CON         equ	667	;# 
   751     029C                     CCP2AS          equ	668	;# 
   752     029C                     ECCP2AS         equ	668	;# 
   753     029D                     PSTR2CON        equ	669	;# 
   754     029E                     CCPTMRS         equ	670	;# 
   755     029E                     CCPTMRS0        equ	670	;# 
   756     0311                     CCPR3           equ	785	;# 
   757     0311                     CCPR3L          equ	785	;# 
   758     0312                     CCPR3H          equ	786	;# 
   759     0313                     CCP3CON         equ	787	;# 
   760     0318                     CCPR4           equ	792	;# 
   761     0318                     CCPR4L          equ	792	;# 
   762     0319                     CCPR4H          equ	793	;# 
   763     031A                     CCP4CON         equ	794	;# 
   764     0394                     IOCBP           equ	916	;# 
   765     0395                     IOCBN           equ	917	;# 
   766     0396                     IOCBF           equ	918	;# 
   767     039A                     CLKRCON         equ	922	;# 
   768     039C                     MDCON           equ	924	;# 
   769     039D                     MDSRC           equ	925	;# 
   770     039E                     MDCARL          equ	926	;# 
   771     039F                     MDCARH          equ	927	;# 
   772     0415                     TMR4            equ	1045	;# 
   773     0416                     PR4             equ	1046	;# 
   774     0417                     T4CON           equ	1047	;# 
   775     041C                     TMR6            equ	1052	;# 
   776     041D                     PR6             equ	1053	;# 
   777     041E                     T6CON           equ	1054	;# 
   778     0FE4                     STATUS_SHAD     equ	4068	;# 
   779     0FE5                     WREG_SHAD       equ	4069	;# 
   780     0FE6                     BSR_SHAD        equ	4070	;# 
   781     0FE7                     PCLATH_SHAD     equ	4071	;# 
   782     0FE8                     FSR0L_SHAD      equ	4072	;# 
   783     0FE9                     FSR0H_SHAD      equ	4073	;# 
   784     0FEA                     FSR1L_SHAD      equ	4074	;# 
   785     0FEB                     FSR1H_SHAD      equ	4075	;# 
   786     0FED                     STKPTR          equ	4077	;# 
   787     0FEE                     TOSL            equ	4078	;# 
   788     0FEF                     TOSH            equ	4079	;# 
   789     0000                     INDF0           equ	0	;# 
   790     0001                     INDF1           equ	1	;# 
   791     0002                     PCL             equ	2	;# 
   792     0003                     STATUS          equ	3	;# 
   793     0004                     FSR0L           equ	4	;# 
   794     0005                     FSR0H           equ	5	;# 
   795     0006                     FSR1L           equ	6	;# 
   796     0007                     FSR1H           equ	7	;# 
   797     0008                     BSR             equ	8	;# 
   798     0009                     WREG            equ	9	;# 
   799     000A                     PCLATH          equ	10	;# 
   800     000B                     INTCON          equ	11	;# 
   801     000C                     PORTA           equ	12	;# 
   802     000D                     PORTB           equ	13	;# 
   803     0011                     PIR1            equ	17	;# 
   804     0012                     PIR2            equ	18	;# 
   805     0013                     PIR3            equ	19	;# 
   806     0014                     PIR4            equ	20	;# 
   807     0015                     TMR0            equ	21	;# 
   808     0016                     TMR1            equ	22	;# 
   809     0016                     TMR1L           equ	22	;# 
   810     0017                     TMR1H           equ	23	;# 
   811     0018                     T1CON           equ	24	;# 
   812     0019                     T1GCON          equ	25	;# 
   813     001A                     TMR2            equ	26	;# 
   814     001B                     PR2             equ	27	;# 
   815     001C                     T2CON           equ	28	;# 
   816     001E                     CPSCON0         equ	30	;# 
   817     001F                     CPSCON1         equ	31	;# 
   818     008C                     TRISA           equ	140	;# 
   819     008D                     TRISB           equ	141	;# 
   820     0091                     PIE1            equ	145	;# 
   821     0092                     PIE2            equ	146	;# 
   822     0093                     PIE3            equ	147	;# 
   823     0094                     PIE4            equ	148	;# 
   824     0095                     OPTION_REG      equ	149	;# 
   825     0096                     PCON            equ	150	;# 
   826     0097                     WDTCON          equ	151	;# 
   827     0098                     OSCTUNE         equ	152	;# 
   828     0099                     OSCCON          equ	153	;# 
   829     009A                     OSCSTAT         equ	154	;# 
   830     009B                     ADRES           equ	155	;# 
   831     009B                     ADRESL          equ	155	;# 
   832     009C                     ADRESH          equ	156	;# 
   833     009D                     ADCON0          equ	157	;# 
   834     009E                     ADCON1          equ	158	;# 
   835     010C                     LATA            equ	268	;# 
   836     010D                     LATB            equ	269	;# 
   837     0111                     CM1CON0         equ	273	;# 
   838     0112                     CM1CON1         equ	274	;# 
   839     0113                     CM2CON0         equ	275	;# 
   840     0114                     CM2CON1         equ	276	;# 
   841     0115                     CMOUT           equ	277	;# 
   842     0116                     BORCON          equ	278	;# 
   843     0117                     FVRCON          equ	279	;# 
   844     0118                     DACCON0         equ	280	;# 
   845     0119                     DACCON1         equ	281	;# 
   846     011A                     SRCON0          equ	282	;# 
   847     011B                     SRCON1          equ	283	;# 
   848     011D                     APFCON0         equ	285	;# 
   849     011E                     APFCON1         equ	286	;# 
   850     018C                     ANSELA          equ	396	;# 
   851     018D                     ANSELB          equ	397	;# 
   852     0191                     EEADR           equ	401	;# 
   853     0191                     EEADRL          equ	401	;# 
   854     0192                     EEADRH          equ	402	;# 
   855     0193                     EEDAT           equ	403	;# 
   856     0193                     EEDATL          equ	403	;# 
   857     0193                     EEDATA          equ	403	;# 
   858     0194                     EEDATH          equ	404	;# 
   859     0195                     EECON1          equ	405	;# 
   860     0196                     EECON2          equ	406	;# 
   861     0199                     RCREG           equ	409	;# 
   862     019A                     TXREG           equ	410	;# 
   863     019B                     SP1BRG          equ	411	;# 
   864     019B                     SP1BRGL         equ	411	;# 
   865     019B                     SPBRG           equ	411	;# 
   866     019B                     SPBRGL          equ	411	;# 
   867     019C                     SP1BRGH         equ	412	;# 
   868     019C                     SPBRGH          equ	412	;# 
   869     019D                     RCSTA           equ	413	;# 
   870     019E                     TXSTA           equ	414	;# 
   871     019F                     BAUDCON         equ	415	;# 
   872     020C                     WPUA            equ	524	;# 
   873     020D                     WPUB            equ	525	;# 
   874     0211                     SSP1BUF         equ	529	;# 
   875     0211                     SSPBUF          equ	529	;# 
   876     0212                     SSP1ADD         equ	530	;# 
   877     0212                     SSPADD          equ	530	;# 
   878     0213                     SSP1MSK         equ	531	;# 
   879     0213                     SSPMSK          equ	531	;# 
   880     0214                     SSP1STAT        equ	532	;# 
   881     0214                     SSPSTAT         equ	532	;# 
   882     0215                     SSP1CON1        equ	533	;# 
   883     0215                     SSPCON1         equ	533	;# 
   884     0215                     SSPCON          equ	533	;# 
   885     0216                     SSP1CON2        equ	534	;# 
   886     0216                     SSPCON2         equ	534	;# 
   887     0217                     SSP1CON3        equ	535	;# 
   888     0217                     SSPCON3         equ	535	;# 
   889     0219                     SSP2BUF         equ	537	;# 
   890     021A                     SSP2ADD         equ	538	;# 
   891     021B                     SSP2MSK         equ	539	;# 
   892     021C                     SSP2STAT        equ	540	;# 
   893     021D                     SSP2CON1        equ	541	;# 
   894     021E                     SSP2CON2        equ	542	;# 
   895     021F                     SSP2CON3        equ	543	;# 
   896     0291                     CCPR1           equ	657	;# 
   897     0291                     CCPR1L          equ	657	;# 
   898     0292                     CCPR1H          equ	658	;# 
   899     0293                     CCP1CON         equ	659	;# 
   900     0294                     PWM1CON         equ	660	;# 
   901     0295                     CCP1AS          equ	661	;# 
   902     0295                     ECCP1AS         equ	661	;# 
   903     0296                     PSTR1CON        equ	662	;# 
   904     0298                     CCPR2           equ	664	;# 
   905     0298                     CCPR2L          equ	664	;# 
   906     0299                     CCPR2H          equ	665	;# 
   907     029A                     CCP2CON         equ	666	;# 
   908     029B                     PWM2CON         equ	667	;# 
   909     029C                     CCP2AS          equ	668	;# 
   910     029C                     ECCP2AS         equ	668	;# 
   911     029D                     PSTR2CON        equ	669	;# 
   912     029E                     CCPTMRS         equ	670	;# 
   913     029E                     CCPTMRS0        equ	670	;# 
   914     0311                     CCPR3           equ	785	;# 
   915     0311                     CCPR3L          equ	785	;# 
   916     0312                     CCPR3H          equ	786	;# 
   917     0313                     CCP3CON         equ	787	;# 
   918     0318                     CCPR4           equ	792	;# 
   919     0318                     CCPR4L          equ	792	;# 
   920     0319                     CCPR4H          equ	793	;# 
   921     031A                     CCP4CON         equ	794	;# 
   922     0394                     IOCBP           equ	916	;# 
   923     0395                     IOCBN           equ	917	;# 
   924     0396                     IOCBF           equ	918	;# 
   925     039A                     CLKRCON         equ	922	;# 
   926     039C                     MDCON           equ	924	;# 
   927     039D                     MDSRC           equ	925	;# 
   928     039E                     MDCARL          equ	926	;# 
   929     039F                     MDCARH          equ	927	;# 
   930     0415                     TMR4            equ	1045	;# 
   931     0416                     PR4             equ	1046	;# 
   932     0417                     T4CON           equ	1047	;# 
   933     041C                     TMR6            equ	1052	;# 
   934     041D                     PR6             equ	1053	;# 
   935     041E                     T6CON           equ	1054	;# 
   936     0FE4                     STATUS_SHAD     equ	4068	;# 
   937     0FE5                     WREG_SHAD       equ	4069	;# 
   938     0FE6                     BSR_SHAD        equ	4070	;# 
   939     0FE7                     PCLATH_SHAD     equ	4071	;# 
   940     0FE8                     FSR0L_SHAD      equ	4072	;# 
   941     0FE9                     FSR0H_SHAD      equ	4073	;# 
   942     0FEA                     FSR1L_SHAD      equ	4074	;# 
   943     0FEB                     FSR1H_SHAD      equ	4075	;# 
   944     0FED                     STKPTR          equ	4077	;# 
   945     0FEE                     TOSL            equ	4078	;# 
   946     0FEF                     TOSH            equ	4079	;# 
   947     0000                     INDF0           equ	0	;# 
   948     0001                     INDF1           equ	1	;# 
   949     0002                     PCL             equ	2	;# 
   950     0003                     STATUS          equ	3	;# 
   951     0004                     FSR0L           equ	4	;# 
   952     0005                     FSR0H           equ	5	;# 
   953     0006                     FSR1L           equ	6	;# 
   954     0007                     FSR1H           equ	7	;# 
   955     0008                     BSR             equ	8	;# 
   956     0009                     WREG            equ	9	;# 
   957     000A                     PCLATH          equ	10	;# 
   958     000B                     INTCON          equ	11	;# 
   959     000C                     PORTA           equ	12	;# 
   960     000D                     PORTB           equ	13	;# 
   961     0011                     PIR1            equ	17	;# 
   962     0012                     PIR2            equ	18	;# 
   963     0013                     PIR3            equ	19	;# 
   964     0014                     PIR4            equ	20	;# 
   965     0015                     TMR0            equ	21	;# 
   966     0016                     TMR1            equ	22	;# 
   967     0016                     TMR1L           equ	22	;# 
   968     0017                     TMR1H           equ	23	;# 
   969     0018                     T1CON           equ	24	;# 
   970     0019                     T1GCON          equ	25	;# 
   971     001A                     TMR2            equ	26	;# 
   972     001B                     PR2             equ	27	;# 
   973     001C                     T2CON           equ	28	;# 
   974     001E                     CPSCON0         equ	30	;# 
   975     001F                     CPSCON1         equ	31	;# 
   976     008C                     TRISA           equ	140	;# 
   977     008D                     TRISB           equ	141	;# 
   978     0091                     PIE1            equ	145	;# 
   979     0092                     PIE2            equ	146	;# 
   980     0093                     PIE3            equ	147	;# 
   981     0094                     PIE4            equ	148	;# 
   982     0095                     OPTION_REG      equ	149	;# 
   983     0096                     PCON            equ	150	;# 
   984     0097                     WDTCON          equ	151	;# 
   985     0098                     OSCTUNE         equ	152	;# 
   986     0099                     OSCCON          equ	153	;# 
   987     009A                     OSCSTAT         equ	154	;# 
   988     009B                     ADRES           equ	155	;# 
   989     009B                     ADRESL          equ	155	;# 
   990     009C                     ADRESH          equ	156	;# 
   991     009D                     ADCON0          equ	157	;# 
   992     009E                     ADCON1          equ	158	;# 
   993     010C                     LATA            equ	268	;# 
   994     010D                     LATB            equ	269	;# 
   995     0111                     CM1CON0         equ	273	;# 
   996     0112                     CM1CON1         equ	274	;# 
   997     0113                     CM2CON0         equ	275	;# 
   998     0114                     CM2CON1         equ	276	;# 
   999     0115                     CMOUT           equ	277	;# 
  1000     0116                     BORCON          equ	278	;# 
  1001     0117                     FVRCON          equ	279	;# 
  1002     0118                     DACCON0         equ	280	;# 
  1003     0119                     DACCON1         equ	281	;# 
  1004     011A                     SRCON0          equ	282	;# 
  1005     011B                     SRCON1          equ	283	;# 
  1006     011D                     APFCON0         equ	285	;# 
  1007     011E                     APFCON1         equ	286	;# 
  1008     018C                     ANSELA          equ	396	;# 
  1009     018D                     ANSELB          equ	397	;# 
  1010     0191                     EEADR           equ	401	;# 
  1011     0191                     EEADRL          equ	401	;# 
  1012     0192                     EEADRH          equ	402	;# 
  1013     0193                     EEDAT           equ	403	;# 
  1014     0193                     EEDATL          equ	403	;# 
  1015     0193                     EEDATA          equ	403	;# 
  1016     0194                     EEDATH          equ	404	;# 
  1017     0195                     EECON1          equ	405	;# 
  1018     0196                     EECON2          equ	406	;# 
  1019     0199                     RCREG           equ	409	;# 
  1020     019A                     TXREG           equ	410	;# 
  1021     019B                     SP1BRG          equ	411	;# 
  1022     019B                     SP1BRGL         equ	411	;# 
  1023     019B                     SPBRG           equ	411	;# 
  1024     019B                     SPBRGL          equ	411	;# 
  1025     019C                     SP1BRGH         equ	412	;# 
  1026     019C                     SPBRGH          equ	412	;# 
  1027     019D                     RCSTA           equ	413	;# 
  1028     019E                     TXSTA           equ	414	;# 
  1029     019F                     BAUDCON         equ	415	;# 
  1030     020C                     WPUA            equ	524	;# 
  1031     020D                     WPUB            equ	525	;# 
  1032     0211                     SSP1BUF         equ	529	;# 
  1033     0211                     SSPBUF          equ	529	;# 
  1034     0212                     SSP1ADD         equ	530	;# 
  1035     0212                     SSPADD          equ	530	;# 
  1036     0213                     SSP1MSK         equ	531	;# 
  1037     0213                     SSPMSK          equ	531	;# 
  1038     0214                     SSP1STAT        equ	532	;# 
  1039     0214                     SSPSTAT         equ	532	;# 
  1040     0215                     SSP1CON1        equ	533	;# 
  1041     0215                     SSPCON1         equ	533	;# 
  1042     0215                     SSPCON          equ	533	;# 
  1043     0216                     SSP1CON2        equ	534	;# 
  1044     0216                     SSPCON2         equ	534	;# 
  1045     0217                     SSP1CON3        equ	535	;# 
  1046     0217                     SSPCON3         equ	535	;# 
  1047     0219                     SSP2BUF         equ	537	;# 
  1048     021A                     SSP2ADD         equ	538	;# 
  1049     021B                     SSP2MSK         equ	539	;# 
  1050     021C                     SSP2STAT        equ	540	;# 
  1051     021D                     SSP2CON1        equ	541	;# 
  1052     021E                     SSP2CON2        equ	542	;# 
  1053     021F                     SSP2CON3        equ	543	;# 
  1054     0291                     CCPR1           equ	657	;# 
  1055     0291                     CCPR1L          equ	657	;# 
  1056     0292                     CCPR1H          equ	658	;# 
  1057     0293                     CCP1CON         equ	659	;# 
  1058     0294                     PWM1CON         equ	660	;# 
  1059     0295                     CCP1AS          equ	661	;# 
  1060     0295                     ECCP1AS         equ	661	;# 
  1061     0296                     PSTR1CON        equ	662	;# 
  1062     0298                     CCPR2           equ	664	;# 
  1063     0298                     CCPR2L          equ	664	;# 
  1064     0299                     CCPR2H          equ	665	;# 
  1065     029A                     CCP2CON         equ	666	;# 
  1066     029B                     PWM2CON         equ	667	;# 
  1067     029C                     CCP2AS          equ	668	;# 
  1068     029C                     ECCP2AS         equ	668	;# 
  1069     029D                     PSTR2CON        equ	669	;# 
  1070     029E                     CCPTMRS         equ	670	;# 
  1071     029E                     CCPTMRS0        equ	670	;# 
  1072     0311                     CCPR3           equ	785	;# 
  1073     0311                     CCPR3L          equ	785	;# 
  1074     0312                     CCPR3H          equ	786	;# 
  1075     0313                     CCP3CON         equ	787	;# 
  1076     0318                     CCPR4           equ	792	;# 
  1077     0318                     CCPR4L          equ	792	;# 
  1078     0319                     CCPR4H          equ	793	;# 
  1079     031A                     CCP4CON         equ	794	;# 
  1080     0394                     IOCBP           equ	916	;# 
  1081     0395                     IOCBN           equ	917	;# 
  1082     0396                     IOCBF           equ	918	;# 
  1083     039A                     CLKRCON         equ	922	;# 
  1084     039C                     MDCON           equ	924	;# 
  1085     039D                     MDSRC           equ	925	;# 
  1086     039E                     MDCARL          equ	926	;# 
  1087     039F                     MDCARH          equ	927	;# 
  1088     0415                     TMR4            equ	1045	;# 
  1089     0416                     PR4             equ	1046	;# 
  1090     0417                     T4CON           equ	1047	;# 
  1091     041C                     TMR6            equ	1052	;# 
  1092     041D                     PR6             equ	1053	;# 
  1093     041E                     T6CON           equ	1054	;# 
  1094     0FE4                     STATUS_SHAD     equ	4068	;# 
  1095     0FE5                     WREG_SHAD       equ	4069	;# 
  1096     0FE6                     BSR_SHAD        equ	4070	;# 
  1097     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1098     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1099     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1100     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1101     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1102     0FED                     STKPTR          equ	4077	;# 
  1103     0FEE                     TOSL            equ	4078	;# 
  1104     0FEF                     TOSH            equ	4079	;# 
  1105     0000                     INDF0           equ	0	;# 
  1106     0001                     INDF1           equ	1	;# 
  1107     0002                     PCL             equ	2	;# 
  1108     0003                     STATUS          equ	3	;# 
  1109     0004                     FSR0L           equ	4	;# 
  1110     0005                     FSR0H           equ	5	;# 
  1111     0006                     FSR1L           equ	6	;# 
  1112     0007                     FSR1H           equ	7	;# 
  1113     0008                     BSR             equ	8	;# 
  1114     0009                     WREG            equ	9	;# 
  1115     000A                     PCLATH          equ	10	;# 
  1116     000B                     INTCON          equ	11	;# 
  1117     000C                     PORTA           equ	12	;# 
  1118     000D                     PORTB           equ	13	;# 
  1119     0011                     PIR1            equ	17	;# 
  1120     0012                     PIR2            equ	18	;# 
  1121     0013                     PIR3            equ	19	;# 
  1122     0014                     PIR4            equ	20	;# 
  1123     0015                     TMR0            equ	21	;# 
  1124     0016                     TMR1            equ	22	;# 
  1125     0016                     TMR1L           equ	22	;# 
  1126     0017                     TMR1H           equ	23	;# 
  1127     0018                     T1CON           equ	24	;# 
  1128     0019                     T1GCON          equ	25	;# 
  1129     001A                     TMR2            equ	26	;# 
  1130     001B                     PR2             equ	27	;# 
  1131     001C                     T2CON           equ	28	;# 
  1132     001E                     CPSCON0         equ	30	;# 
  1133     001F                     CPSCON1         equ	31	;# 
  1134     008C                     TRISA           equ	140	;# 
  1135     008D                     TRISB           equ	141	;# 
  1136     0091                     PIE1            equ	145	;# 
  1137     0092                     PIE2            equ	146	;# 
  1138     0093                     PIE3            equ	147	;# 
  1139     0094                     PIE4            equ	148	;# 
  1140     0095                     OPTION_REG      equ	149	;# 
  1141     0096                     PCON            equ	150	;# 
  1142     0097                     WDTCON          equ	151	;# 
  1143     0098                     OSCTUNE         equ	152	;# 
  1144     0099                     OSCCON          equ	153	;# 
  1145     009A                     OSCSTAT         equ	154	;# 
  1146     009B                     ADRES           equ	155	;# 
  1147     009B                     ADRESL          equ	155	;# 
  1148     009C                     ADRESH          equ	156	;# 
  1149     009D                     ADCON0          equ	157	;# 
  1150     009E                     ADCON1          equ	158	;# 
  1151     010C                     LATA            equ	268	;# 
  1152     010D                     LATB            equ	269	;# 
  1153     0111                     CM1CON0         equ	273	;# 
  1154     0112                     CM1CON1         equ	274	;# 
  1155     0113                     CM2CON0         equ	275	;# 
  1156     0114                     CM2CON1         equ	276	;# 
  1157     0115                     CMOUT           equ	277	;# 
  1158     0116                     BORCON          equ	278	;# 
  1159     0117                     FVRCON          equ	279	;# 
  1160     0118                     DACCON0         equ	280	;# 
  1161     0119                     DACCON1         equ	281	;# 
  1162     011A                     SRCON0          equ	282	;# 
  1163     011B                     SRCON1          equ	283	;# 
  1164     011D                     APFCON0         equ	285	;# 
  1165     011E                     APFCON1         equ	286	;# 
  1166     018C                     ANSELA          equ	396	;# 
  1167     018D                     ANSELB          equ	397	;# 
  1168     0191                     EEADR           equ	401	;# 
  1169     0191                     EEADRL          equ	401	;# 
  1170     0192                     EEADRH          equ	402	;# 
  1171     0193                     EEDAT           equ	403	;# 
  1172     0193                     EEDATL          equ	403	;# 
  1173     0193                     EEDATA          equ	403	;# 
  1174     0194                     EEDATH          equ	404	;# 
  1175     0195                     EECON1          equ	405	;# 
  1176     0196                     EECON2          equ	406	;# 
  1177     0199                     RCREG           equ	409	;# 
  1178     019A                     TXREG           equ	410	;# 
  1179     019B                     SP1BRG          equ	411	;# 
  1180     019B                     SP1BRGL         equ	411	;# 
  1181     019B                     SPBRG           equ	411	;# 
  1182     019B                     SPBRGL          equ	411	;# 
  1183     019C                     SP1BRGH         equ	412	;# 
  1184     019C                     SPBRGH          equ	412	;# 
  1185     019D                     RCSTA           equ	413	;# 
  1186     019E                     TXSTA           equ	414	;# 
  1187     019F                     BAUDCON         equ	415	;# 
  1188     020C                     WPUA            equ	524	;# 
  1189     020D                     WPUB            equ	525	;# 
  1190     0211                     SSP1BUF         equ	529	;# 
  1191     0211                     SSPBUF          equ	529	;# 
  1192     0212                     SSP1ADD         equ	530	;# 
  1193     0212                     SSPADD          equ	530	;# 
  1194     0213                     SSP1MSK         equ	531	;# 
  1195     0213                     SSPMSK          equ	531	;# 
  1196     0214                     SSP1STAT        equ	532	;# 
  1197     0214                     SSPSTAT         equ	532	;# 
  1198     0215                     SSP1CON1        equ	533	;# 
  1199     0215                     SSPCON1         equ	533	;# 
  1200     0215                     SSPCON          equ	533	;# 
  1201     0216                     SSP1CON2        equ	534	;# 
  1202     0216                     SSPCON2         equ	534	;# 
  1203     0217                     SSP1CON3        equ	535	;# 
  1204     0217                     SSPCON3         equ	535	;# 
  1205     0219                     SSP2BUF         equ	537	;# 
  1206     021A                     SSP2ADD         equ	538	;# 
  1207     021B                     SSP2MSK         equ	539	;# 
  1208     021C                     SSP2STAT        equ	540	;# 
  1209     021D                     SSP2CON1        equ	541	;# 
  1210     021E                     SSP2CON2        equ	542	;# 
  1211     021F                     SSP2CON3        equ	543	;# 
  1212     0291                     CCPR1           equ	657	;# 
  1213     0291                     CCPR1L          equ	657	;# 
  1214     0292                     CCPR1H          equ	658	;# 
  1215     0293                     CCP1CON         equ	659	;# 
  1216     0294                     PWM1CON         equ	660	;# 
  1217     0295                     CCP1AS          equ	661	;# 
  1218     0295                     ECCP1AS         equ	661	;# 
  1219     0296                     PSTR1CON        equ	662	;# 
  1220     0298                     CCPR2           equ	664	;# 
  1221     0298                     CCPR2L          equ	664	;# 
  1222     0299                     CCPR2H          equ	665	;# 
  1223     029A                     CCP2CON         equ	666	;# 
  1224     029B                     PWM2CON         equ	667	;# 
  1225     029C                     CCP2AS          equ	668	;# 
  1226     029C                     ECCP2AS         equ	668	;# 
  1227     029D                     PSTR2CON        equ	669	;# 
  1228     029E                     CCPTMRS         equ	670	;# 
  1229     029E                     CCPTMRS0        equ	670	;# 
  1230     0311                     CCPR3           equ	785	;# 
  1231     0311                     CCPR3L          equ	785	;# 
  1232     0312                     CCPR3H          equ	786	;# 
  1233     0313                     CCP3CON         equ	787	;# 
  1234     0318                     CCPR4           equ	792	;# 
  1235     0318                     CCPR4L          equ	792	;# 
  1236     0319                     CCPR4H          equ	793	;# 
  1237     031A                     CCP4CON         equ	794	;# 
  1238     0394                     IOCBP           equ	916	;# 
  1239     0395                     IOCBN           equ	917	;# 
  1240     0396                     IOCBF           equ	918	;# 
  1241     039A                     CLKRCON         equ	922	;# 
  1242     039C                     MDCON           equ	924	;# 
  1243     039D                     MDSRC           equ	925	;# 
  1244     039E                     MDCARL          equ	926	;# 
  1245     039F                     MDCARH          equ	927	;# 
  1246     0415                     TMR4            equ	1045	;# 
  1247     0416                     PR4             equ	1046	;# 
  1248     0417                     T4CON           equ	1047	;# 
  1249     041C                     TMR6            equ	1052	;# 
  1250     041D                     PR6             equ	1053	;# 
  1251     041E                     T6CON           equ	1054	;# 
  1252     0FE4                     STATUS_SHAD     equ	4068	;# 
  1253     0FE5                     WREG_SHAD       equ	4069	;# 
  1254     0FE6                     BSR_SHAD        equ	4070	;# 
  1255     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1256     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1257     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1258     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1259     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1260     0FED                     STKPTR          equ	4077	;# 
  1261     0FEE                     TOSL            equ	4078	;# 
  1262     0FEF                     TOSH            equ	4079	;# 
  1263     0000                     INDF0           equ	0	;# 
  1264     0001                     INDF1           equ	1	;# 
  1265     0002                     PCL             equ	2	;# 
  1266     0003                     STATUS          equ	3	;# 
  1267     0004                     FSR0L           equ	4	;# 
  1268     0005                     FSR0H           equ	5	;# 
  1269     0006                     FSR1L           equ	6	;# 
  1270     0007                     FSR1H           equ	7	;# 
  1271     0008                     BSR             equ	8	;# 
  1272     0009                     WREG            equ	9	;# 
  1273     000A                     PCLATH          equ	10	;# 
  1274     000B                     INTCON          equ	11	;# 
  1275     000C                     PORTA           equ	12	;# 
  1276     000D                     PORTB           equ	13	;# 
  1277     0011                     PIR1            equ	17	;# 
  1278     0012                     PIR2            equ	18	;# 
  1279     0013                     PIR3            equ	19	;# 
  1280     0014                     PIR4            equ	20	;# 
  1281     0015                     TMR0            equ	21	;# 
  1282     0016                     TMR1            equ	22	;# 
  1283     0016                     TMR1L           equ	22	;# 
  1284     0017                     TMR1H           equ	23	;# 
  1285     0018                     T1CON           equ	24	;# 
  1286     0019                     T1GCON          equ	25	;# 
  1287     001A                     TMR2            equ	26	;# 
  1288     001B                     PR2             equ	27	;# 
  1289     001C                     T2CON           equ	28	;# 
  1290     001E                     CPSCON0         equ	30	;# 
  1291     001F                     CPSCON1         equ	31	;# 
  1292     008C                     TRISA           equ	140	;# 
  1293     008D                     TRISB           equ	141	;# 
  1294     0091                     PIE1            equ	145	;# 
  1295     0092                     PIE2            equ	146	;# 
  1296     0093                     PIE3            equ	147	;# 
  1297     0094                     PIE4            equ	148	;# 
  1298     0095                     OPTION_REG      equ	149	;# 
  1299     0096                     PCON            equ	150	;# 
  1300     0097                     WDTCON          equ	151	;# 
  1301     0098                     OSCTUNE         equ	152	;# 
  1302     0099                     OSCCON          equ	153	;# 
  1303     009A                     OSCSTAT         equ	154	;# 
  1304     009B                     ADRES           equ	155	;# 
  1305     009B                     ADRESL          equ	155	;# 
  1306     009C                     ADRESH          equ	156	;# 
  1307     009D                     ADCON0          equ	157	;# 
  1308     009E                     ADCON1          equ	158	;# 
  1309     010C                     LATA            equ	268	;# 
  1310     010D                     LATB            equ	269	;# 
  1311     0111                     CM1CON0         equ	273	;# 
  1312     0112                     CM1CON1         equ	274	;# 
  1313     0113                     CM2CON0         equ	275	;# 
  1314     0114                     CM2CON1         equ	276	;# 
  1315     0115                     CMOUT           equ	277	;# 
  1316     0116                     BORCON          equ	278	;# 
  1317     0117                     FVRCON          equ	279	;# 
  1318     0118                     DACCON0         equ	280	;# 
  1319     0119                     DACCON1         equ	281	;# 
  1320     011A                     SRCON0          equ	282	;# 
  1321     011B                     SRCON1          equ	283	;# 
  1322     011D                     APFCON0         equ	285	;# 
  1323     011E                     APFCON1         equ	286	;# 
  1324     018C                     ANSELA          equ	396	;# 
  1325     018D                     ANSELB          equ	397	;# 
  1326     0191                     EEADR           equ	401	;# 
  1327     0191                     EEADRL          equ	401	;# 
  1328     0192                     EEADRH          equ	402	;# 
  1329     0193                     EEDAT           equ	403	;# 
  1330     0193                     EEDATL          equ	403	;# 
  1331     0193                     EEDATA          equ	403	;# 
  1332     0194                     EEDATH          equ	404	;# 
  1333     0195                     EECON1          equ	405	;# 
  1334     0196                     EECON2          equ	406	;# 
  1335     0199                     RCREG           equ	409	;# 
  1336     019A                     TXREG           equ	410	;# 
  1337     019B                     SP1BRG          equ	411	;# 
  1338     019B                     SP1BRGL         equ	411	;# 
  1339     019B                     SPBRG           equ	411	;# 
  1340     019B                     SPBRGL          equ	411	;# 
  1341     019C                     SP1BRGH         equ	412	;# 
  1342     019C                     SPBRGH          equ	412	;# 
  1343     019D                     RCSTA           equ	413	;# 
  1344     019E                     TXSTA           equ	414	;# 
  1345     019F                     BAUDCON         equ	415	;# 
  1346     020C                     WPUA            equ	524	;# 
  1347     020D                     WPUB            equ	525	;# 
  1348     0211                     SSP1BUF         equ	529	;# 
  1349     0211                     SSPBUF          equ	529	;# 
  1350     0212                     SSP1ADD         equ	530	;# 
  1351     0212                     SSPADD          equ	530	;# 
  1352     0213                     SSP1MSK         equ	531	;# 
  1353     0213                     SSPMSK          equ	531	;# 
  1354     0214                     SSP1STAT        equ	532	;# 
  1355     0214                     SSPSTAT         equ	532	;# 
  1356     0215                     SSP1CON1        equ	533	;# 
  1357     0215                     SSPCON1         equ	533	;# 
  1358     0215                     SSPCON          equ	533	;# 
  1359     0216                     SSP1CON2        equ	534	;# 
  1360     0216                     SSPCON2         equ	534	;# 
  1361     0217                     SSP1CON3        equ	535	;# 
  1362     0217                     SSPCON3         equ	535	;# 
  1363     0219                     SSP2BUF         equ	537	;# 
  1364     021A                     SSP2ADD         equ	538	;# 
  1365     021B                     SSP2MSK         equ	539	;# 
  1366     021C                     SSP2STAT        equ	540	;# 
  1367     021D                     SSP2CON1        equ	541	;# 
  1368     021E                     SSP2CON2        equ	542	;# 
  1369     021F                     SSP2CON3        equ	543	;# 
  1370     0291                     CCPR1           equ	657	;# 
  1371     0291                     CCPR1L          equ	657	;# 
  1372     0292                     CCPR1H          equ	658	;# 
  1373     0293                     CCP1CON         equ	659	;# 
  1374     0294                     PWM1CON         equ	660	;# 
  1375     0295                     CCP1AS          equ	661	;# 
  1376     0295                     ECCP1AS         equ	661	;# 
  1377     0296                     PSTR1CON        equ	662	;# 
  1378     0298                     CCPR2           equ	664	;# 
  1379     0298                     CCPR2L          equ	664	;# 
  1380     0299                     CCPR2H          equ	665	;# 
  1381     029A                     CCP2CON         equ	666	;# 
  1382     029B                     PWM2CON         equ	667	;# 
  1383     029C                     CCP2AS          equ	668	;# 
  1384     029C                     ECCP2AS         equ	668	;# 
  1385     029D                     PSTR2CON        equ	669	;# 
  1386     029E                     CCPTMRS         equ	670	;# 
  1387     029E                     CCPTMRS0        equ	670	;# 
  1388     0311                     CCPR3           equ	785	;# 
  1389     0311                     CCPR3L          equ	785	;# 
  1390     0312                     CCPR3H          equ	786	;# 
  1391     0313                     CCP3CON         equ	787	;# 
  1392     0318                     CCPR4           equ	792	;# 
  1393     0318                     CCPR4L          equ	792	;# 
  1394     0319                     CCPR4H          equ	793	;# 
  1395     031A                     CCP4CON         equ	794	;# 
  1396     0394                     IOCBP           equ	916	;# 
  1397     0395                     IOCBN           equ	917	;# 
  1398     0396                     IOCBF           equ	918	;# 
  1399     039A                     CLKRCON         equ	922	;# 
  1400     039C                     MDCON           equ	924	;# 
  1401     039D                     MDSRC           equ	925	;# 
  1402     039E                     MDCARL          equ	926	;# 
  1403     039F                     MDCARH          equ	927	;# 
  1404     0415                     TMR4            equ	1045	;# 
  1405     0416                     PR4             equ	1046	;# 
  1406     0417                     T4CON           equ	1047	;# 
  1407     041C                     TMR6            equ	1052	;# 
  1408     041D                     PR6             equ	1053	;# 
  1409     041E                     T6CON           equ	1054	;# 
  1410     0FE4                     STATUS_SHAD     equ	4068	;# 
  1411     0FE5                     WREG_SHAD       equ	4069	;# 
  1412     0FE6                     BSR_SHAD        equ	4070	;# 
  1413     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1414     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1415     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1416     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1417     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1418     0FED                     STKPTR          equ	4077	;# 
  1419     0FEE                     TOSL            equ	4078	;# 
  1420     0FEF                     TOSH            equ	4079	;# 
  1421     0000                     INDF0           equ	0	;# 
  1422     0001                     INDF1           equ	1	;# 
  1423     0002                     PCL             equ	2	;# 
  1424     0003                     STATUS          equ	3	;# 
  1425     0004                     FSR0L           equ	4	;# 
  1426     0005                     FSR0H           equ	5	;# 
  1427     0006                     FSR1L           equ	6	;# 
  1428     0007                     FSR1H           equ	7	;# 
  1429     0008                     BSR             equ	8	;# 
  1430     0009                     WREG            equ	9	;# 
  1431     000A                     PCLATH          equ	10	;# 
  1432     000B                     INTCON          equ	11	;# 
  1433     000C                     PORTA           equ	12	;# 
  1434     000D                     PORTB           equ	13	;# 
  1435     0011                     PIR1            equ	17	;# 
  1436     0012                     PIR2            equ	18	;# 
  1437     0013                     PIR3            equ	19	;# 
  1438     0014                     PIR4            equ	20	;# 
  1439     0015                     TMR0            equ	21	;# 
  1440     0016                     TMR1            equ	22	;# 
  1441     0016                     TMR1L           equ	22	;# 
  1442     0017                     TMR1H           equ	23	;# 
  1443     0018                     T1CON           equ	24	;# 
  1444     0019                     T1GCON          equ	25	;# 
  1445     001A                     TMR2            equ	26	;# 
  1446     001B                     PR2             equ	27	;# 
  1447     001C                     T2CON           equ	28	;# 
  1448     001E                     CPSCON0         equ	30	;# 
  1449     001F                     CPSCON1         equ	31	;# 
  1450     008C                     TRISA           equ	140	;# 
  1451     008D                     TRISB           equ	141	;# 
  1452     0091                     PIE1            equ	145	;# 
  1453     0092                     PIE2            equ	146	;# 
  1454     0093                     PIE3            equ	147	;# 
  1455     0094                     PIE4            equ	148	;# 
  1456     0095                     OPTION_REG      equ	149	;# 
  1457     0096                     PCON            equ	150	;# 
  1458     0097                     WDTCON          equ	151	;# 
  1459     0098                     OSCTUNE         equ	152	;# 
  1460     0099                     OSCCON          equ	153	;# 
  1461     009A                     OSCSTAT         equ	154	;# 
  1462     009B                     ADRES           equ	155	;# 
  1463     009B                     ADRESL          equ	155	;# 
  1464     009C                     ADRESH          equ	156	;# 
  1465     009D                     ADCON0          equ	157	;# 
  1466     009E                     ADCON1          equ	158	;# 
  1467     010C                     LATA            equ	268	;# 
  1468     010D                     LATB            equ	269	;# 
  1469     0111                     CM1CON0         equ	273	;# 
  1470     0112                     CM1CON1         equ	274	;# 
  1471     0113                     CM2CON0         equ	275	;# 
  1472     0114                     CM2CON1         equ	276	;# 
  1473     0115                     CMOUT           equ	277	;# 
  1474     0116                     BORCON          equ	278	;# 
  1475     0117                     FVRCON          equ	279	;# 
  1476     0118                     DACCON0         equ	280	;# 
  1477     0119                     DACCON1         equ	281	;# 
  1478     011A                     SRCON0          equ	282	;# 
  1479     011B                     SRCON1          equ	283	;# 
  1480     011D                     APFCON0         equ	285	;# 
  1481     011E                     APFCON1         equ	286	;# 
  1482     018C                     ANSELA          equ	396	;# 
  1483     018D                     ANSELB          equ	397	;# 
  1484     0191                     EEADR           equ	401	;# 
  1485     0191                     EEADRL          equ	401	;# 
  1486     0192                     EEADRH          equ	402	;# 
  1487     0193                     EEDAT           equ	403	;# 
  1488     0193                     EEDATL          equ	403	;# 
  1489     0193                     EEDATA          equ	403	;# 
  1490     0194                     EEDATH          equ	404	;# 
  1491     0195                     EECON1          equ	405	;# 
  1492     0196                     EECON2          equ	406	;# 
  1493     0199                     RCREG           equ	409	;# 
  1494     019A                     TXREG           equ	410	;# 
  1495     019B                     SP1BRG          equ	411	;# 
  1496     019B                     SP1BRGL         equ	411	;# 
  1497     019B                     SPBRG           equ	411	;# 
  1498     019B                     SPBRGL          equ	411	;# 
  1499     019C                     SP1BRGH         equ	412	;# 
  1500     019C                     SPBRGH          equ	412	;# 
  1501     019D                     RCSTA           equ	413	;# 
  1502     019E                     TXSTA           equ	414	;# 
  1503     019F                     BAUDCON         equ	415	;# 
  1504     020C                     WPUA            equ	524	;# 
  1505     020D                     WPUB            equ	525	;# 
  1506     0211                     SSP1BUF         equ	529	;# 
  1507     0211                     SSPBUF          equ	529	;# 
  1508     0212                     SSP1ADD         equ	530	;# 
  1509     0212                     SSPADD          equ	530	;# 
  1510     0213                     SSP1MSK         equ	531	;# 
  1511     0213                     SSPMSK          equ	531	;# 
  1512     0214                     SSP1STAT        equ	532	;# 
  1513     0214                     SSPSTAT         equ	532	;# 
  1514     0215                     SSP1CON1        equ	533	;# 
  1515     0215                     SSPCON1         equ	533	;# 
  1516     0215                     SSPCON          equ	533	;# 
  1517     0216                     SSP1CON2        equ	534	;# 
  1518     0216                     SSPCON2         equ	534	;# 
  1519     0217                     SSP1CON3        equ	535	;# 
  1520     0217                     SSPCON3         equ	535	;# 
  1521     0219                     SSP2BUF         equ	537	;# 
  1522     021A                     SSP2ADD         equ	538	;# 
  1523     021B                     SSP2MSK         equ	539	;# 
  1524     021C                     SSP2STAT        equ	540	;# 
  1525     021D                     SSP2CON1        equ	541	;# 
  1526     021E                     SSP2CON2        equ	542	;# 
  1527     021F                     SSP2CON3        equ	543	;# 
  1528     0291                     CCPR1           equ	657	;# 
  1529     0291                     CCPR1L          equ	657	;# 
  1530     0292                     CCPR1H          equ	658	;# 
  1531     0293                     CCP1CON         equ	659	;# 
  1532     0294                     PWM1CON         equ	660	;# 
  1533     0295                     CCP1AS          equ	661	;# 
  1534     0295                     ECCP1AS         equ	661	;# 
  1535     0296                     PSTR1CON        equ	662	;# 
  1536     0298                     CCPR2           equ	664	;# 
  1537     0298                     CCPR2L          equ	664	;# 
  1538     0299                     CCPR2H          equ	665	;# 
  1539     029A                     CCP2CON         equ	666	;# 
  1540     029B                     PWM2CON         equ	667	;# 
  1541     029C                     CCP2AS          equ	668	;# 
  1542     029C                     ECCP2AS         equ	668	;# 
  1543     029D                     PSTR2CON        equ	669	;# 
  1544     029E                     CCPTMRS         equ	670	;# 
  1545     029E                     CCPTMRS0        equ	670	;# 
  1546     0311                     CCPR3           equ	785	;# 
  1547     0311                     CCPR3L          equ	785	;# 
  1548     0312                     CCPR3H          equ	786	;# 
  1549     0313                     CCP3CON         equ	787	;# 
  1550     0318                     CCPR4           equ	792	;# 
  1551     0318                     CCPR4L          equ	792	;# 
  1552     0319                     CCPR4H          equ	793	;# 
  1553     031A                     CCP4CON         equ	794	;# 
  1554     0394                     IOCBP           equ	916	;# 
  1555     0395                     IOCBN           equ	917	;# 
  1556     0396                     IOCBF           equ	918	;# 
  1557     039A                     CLKRCON         equ	922	;# 
  1558     039C                     MDCON           equ	924	;# 
  1559     039D                     MDSRC           equ	925	;# 
  1560     039E                     MDCARL          equ	926	;# 
  1561     039F                     MDCARH          equ	927	;# 
  1562     0415                     TMR4            equ	1045	;# 
  1563     0416                     PR4             equ	1046	;# 
  1564     0417                     T4CON           equ	1047	;# 
  1565     041C                     TMR6            equ	1052	;# 
  1566     041D                     PR6             equ	1053	;# 
  1567     041E                     T6CON           equ	1054	;# 
  1568     0FE4                     STATUS_SHAD     equ	4068	;# 
  1569     0FE5                     WREG_SHAD       equ	4069	;# 
  1570     0FE6                     BSR_SHAD        equ	4070	;# 
  1571     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1572     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1573     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1574     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1575     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1576     0FED                     STKPTR          equ	4077	;# 
  1577     0FEE                     TOSL            equ	4078	;# 
  1578     0FEF                     TOSH            equ	4079	;# 
  1579     0000                     INDF0           equ	0	;# 
  1580     0001                     INDF1           equ	1	;# 
  1581     0002                     PCL             equ	2	;# 
  1582     0003                     STATUS          equ	3	;# 
  1583     0004                     FSR0L           equ	4	;# 
  1584     0005                     FSR0H           equ	5	;# 
  1585     0006                     FSR1L           equ	6	;# 
  1586     0007                     FSR1H           equ	7	;# 
  1587     0008                     BSR             equ	8	;# 
  1588     0009                     WREG            equ	9	;# 
  1589     000A                     PCLATH          equ	10	;# 
  1590     000B                     INTCON          equ	11	;# 
  1591     000C                     PORTA           equ	12	;# 
  1592     000D                     PORTB           equ	13	;# 
  1593     0011                     PIR1            equ	17	;# 
  1594     0012                     PIR2            equ	18	;# 
  1595     0013                     PIR3            equ	19	;# 
  1596     0014                     PIR4            equ	20	;# 
  1597     0015                     TMR0            equ	21	;# 
  1598     0016                     TMR1            equ	22	;# 
  1599     0016                     TMR1L           equ	22	;# 
  1600     0017                     TMR1H           equ	23	;# 
  1601     0018                     T1CON           equ	24	;# 
  1602     0019                     T1GCON          equ	25	;# 
  1603     001A                     TMR2            equ	26	;# 
  1604     001B                     PR2             equ	27	;# 
  1605     001C                     T2CON           equ	28	;# 
  1606     001E                     CPSCON0         equ	30	;# 
  1607     001F                     CPSCON1         equ	31	;# 
  1608     008C                     TRISA           equ	140	;# 
  1609     008D                     TRISB           equ	141	;# 
  1610     0091                     PIE1            equ	145	;# 
  1611     0092                     PIE2            equ	146	;# 
  1612     0093                     PIE3            equ	147	;# 
  1613     0094                     PIE4            equ	148	;# 
  1614     0095                     OPTION_REG      equ	149	;# 
  1615     0096                     PCON            equ	150	;# 
  1616     0097                     WDTCON          equ	151	;# 
  1617     0098                     OSCTUNE         equ	152	;# 
  1618     0099                     OSCCON          equ	153	;# 
  1619     009A                     OSCSTAT         equ	154	;# 
  1620     009B                     ADRES           equ	155	;# 
  1621     009B                     ADRESL          equ	155	;# 
  1622     009C                     ADRESH          equ	156	;# 
  1623     009D                     ADCON0          equ	157	;# 
  1624     009E                     ADCON1          equ	158	;# 
  1625     010C                     LATA            equ	268	;# 
  1626     010D                     LATB            equ	269	;# 
  1627     0111                     CM1CON0         equ	273	;# 
  1628     0112                     CM1CON1         equ	274	;# 
  1629     0113                     CM2CON0         equ	275	;# 
  1630     0114                     CM2CON1         equ	276	;# 
  1631     0115                     CMOUT           equ	277	;# 
  1632     0116                     BORCON          equ	278	;# 
  1633     0117                     FVRCON          equ	279	;# 
  1634     0118                     DACCON0         equ	280	;# 
  1635     0119                     DACCON1         equ	281	;# 
  1636     011A                     SRCON0          equ	282	;# 
  1637     011B                     SRCON1          equ	283	;# 
  1638     011D                     APFCON0         equ	285	;# 
  1639     011E                     APFCON1         equ	286	;# 
  1640     018C                     ANSELA          equ	396	;# 
  1641     018D                     ANSELB          equ	397	;# 
  1642     0191                     EEADR           equ	401	;# 
  1643     0191                     EEADRL          equ	401	;# 
  1644     0192                     EEADRH          equ	402	;# 
  1645     0193                     EEDAT           equ	403	;# 
  1646     0193                     EEDATL          equ	403	;# 
  1647     0193                     EEDATA          equ	403	;# 
  1648     0194                     EEDATH          equ	404	;# 
  1649     0195                     EECON1          equ	405	;# 
  1650     0196                     EECON2          equ	406	;# 
  1651     0199                     RCREG           equ	409	;# 
  1652     019A                     TXREG           equ	410	;# 
  1653     019B                     SP1BRG          equ	411	;# 
  1654     019B                     SP1BRGL         equ	411	;# 
  1655     019B                     SPBRG           equ	411	;# 
  1656     019B                     SPBRGL          equ	411	;# 
  1657     019C                     SP1BRGH         equ	412	;# 
  1658     019C                     SPBRGH          equ	412	;# 
  1659     019D                     RCSTA           equ	413	;# 
  1660     019E                     TXSTA           equ	414	;# 
  1661     019F                     BAUDCON         equ	415	;# 
  1662     020C                     WPUA            equ	524	;# 
  1663     020D                     WPUB            equ	525	;# 
  1664     0211                     SSP1BUF         equ	529	;# 
  1665     0211                     SSPBUF          equ	529	;# 
  1666     0212                     SSP1ADD         equ	530	;# 
  1667     0212                     SSPADD          equ	530	;# 
  1668     0213                     SSP1MSK         equ	531	;# 
  1669     0213                     SSPMSK          equ	531	;# 
  1670     0214                     SSP1STAT        equ	532	;# 
  1671     0214                     SSPSTAT         equ	532	;# 
  1672     0215                     SSP1CON1        equ	533	;# 
  1673     0215                     SSPCON1         equ	533	;# 
  1674     0215                     SSPCON          equ	533	;# 
  1675     0216                     SSP1CON2        equ	534	;# 
  1676     0216                     SSPCON2         equ	534	;# 
  1677     0217                     SSP1CON3        equ	535	;# 
  1678     0217                     SSPCON3         equ	535	;# 
  1679     0219                     SSP2BUF         equ	537	;# 
  1680     021A                     SSP2ADD         equ	538	;# 
  1681     021B                     SSP2MSK         equ	539	;# 
  1682     021C                     SSP2STAT        equ	540	;# 
  1683     021D                     SSP2CON1        equ	541	;# 
  1684     021E                     SSP2CON2        equ	542	;# 
  1685     021F                     SSP2CON3        equ	543	;# 
  1686     0291                     CCPR1           equ	657	;# 
  1687     0291                     CCPR1L          equ	657	;# 
  1688     0292                     CCPR1H          equ	658	;# 
  1689     0293                     CCP1CON         equ	659	;# 
  1690     0294                     PWM1CON         equ	660	;# 
  1691     0295                     CCP1AS          equ	661	;# 
  1692     0295                     ECCP1AS         equ	661	;# 
  1693     0296                     PSTR1CON        equ	662	;# 
  1694     0298                     CCPR2           equ	664	;# 
  1695     0298                     CCPR2L          equ	664	;# 
  1696     0299                     CCPR2H          equ	665	;# 
  1697     029A                     CCP2CON         equ	666	;# 
  1698     029B                     PWM2CON         equ	667	;# 
  1699     029C                     CCP2AS          equ	668	;# 
  1700     029C                     ECCP2AS         equ	668	;# 
  1701     029D                     PSTR2CON        equ	669	;# 
  1702     029E                     CCPTMRS         equ	670	;# 
  1703     029E                     CCPTMRS0        equ	670	;# 
  1704     0311                     CCPR3           equ	785	;# 
  1705     0311                     CCPR3L          equ	785	;# 
  1706     0312                     CCPR3H          equ	786	;# 
  1707     0313                     CCP3CON         equ	787	;# 
  1708     0318                     CCPR4           equ	792	;# 
  1709     0318                     CCPR4L          equ	792	;# 
  1710     0319                     CCPR4H          equ	793	;# 
  1711     031A                     CCP4CON         equ	794	;# 
  1712     0394                     IOCBP           equ	916	;# 
  1713     0395                     IOCBN           equ	917	;# 
  1714     0396                     IOCBF           equ	918	;# 
  1715     039A                     CLKRCON         equ	922	;# 
  1716     039C                     MDCON           equ	924	;# 
  1717     039D                     MDSRC           equ	925	;# 
  1718     039E                     MDCARL          equ	926	;# 
  1719     039F                     MDCARH          equ	927	;# 
  1720     0415                     TMR4            equ	1045	;# 
  1721     0416                     PR4             equ	1046	;# 
  1722     0417                     T4CON           equ	1047	;# 
  1723     041C                     TMR6            equ	1052	;# 
  1724     041D                     PR6             equ	1053	;# 
  1725     041E                     T6CON           equ	1054	;# 
  1726     0FE4                     STATUS_SHAD     equ	4068	;# 
  1727     0FE5                     WREG_SHAD       equ	4069	;# 
  1728     0FE6                     BSR_SHAD        equ	4070	;# 
  1729     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1730     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1731     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1732     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1733     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1734     0FED                     STKPTR          equ	4077	;# 
  1735     0FEE                     TOSL            equ	4078	;# 
  1736     0FEF                     TOSH            equ	4079	;# 
  1737     0000                     INDF0           equ	0	;# 
  1738     0001                     INDF1           equ	1	;# 
  1739     0002                     PCL             equ	2	;# 
  1740     0003                     STATUS          equ	3	;# 
  1741     0004                     FSR0L           equ	4	;# 
  1742     0005                     FSR0H           equ	5	;# 
  1743     0006                     FSR1L           equ	6	;# 
  1744     0007                     FSR1H           equ	7	;# 
  1745     0008                     BSR             equ	8	;# 
  1746     0009                     WREG            equ	9	;# 
  1747     000A                     PCLATH          equ	10	;# 
  1748     000B                     INTCON          equ	11	;# 
  1749     000C                     PORTA           equ	12	;# 
  1750     000D                     PORTB           equ	13	;# 
  1751     0011                     PIR1            equ	17	;# 
  1752     0012                     PIR2            equ	18	;# 
  1753     0013                     PIR3            equ	19	;# 
  1754     0014                     PIR4            equ	20	;# 
  1755     0015                     TMR0            equ	21	;# 
  1756     0016                     TMR1            equ	22	;# 
  1757     0016                     TMR1L           equ	22	;# 
  1758     0017                     TMR1H           equ	23	;# 
  1759     0018                     T1CON           equ	24	;# 
  1760     0019                     T1GCON          equ	25	;# 
  1761     001A                     TMR2            equ	26	;# 
  1762     001B                     PR2             equ	27	;# 
  1763     001C                     T2CON           equ	28	;# 
  1764     001E                     CPSCON0         equ	30	;# 
  1765     001F                     CPSCON1         equ	31	;# 
  1766     008C                     TRISA           equ	140	;# 
  1767     008D                     TRISB           equ	141	;# 
  1768     0091                     PIE1            equ	145	;# 
  1769     0092                     PIE2            equ	146	;# 
  1770     0093                     PIE3            equ	147	;# 
  1771     0094                     PIE4            equ	148	;# 
  1772     0095                     OPTION_REG      equ	149	;# 
  1773     0096                     PCON            equ	150	;# 
  1774     0097                     WDTCON          equ	151	;# 
  1775     0098                     OSCTUNE         equ	152	;# 
  1776     0099                     OSCCON          equ	153	;# 
  1777     009A                     OSCSTAT         equ	154	;# 
  1778     009B                     ADRES           equ	155	;# 
  1779     009B                     ADRESL          equ	155	;# 
  1780     009C                     ADRESH          equ	156	;# 
  1781     009D                     ADCON0          equ	157	;# 
  1782     009E                     ADCON1          equ	158	;# 
  1783     010C                     LATA            equ	268	;# 
  1784     010D                     LATB            equ	269	;# 
  1785     0111                     CM1CON0         equ	273	;# 
  1786     0112                     CM1CON1         equ	274	;# 
  1787     0113                     CM2CON0         equ	275	;# 
  1788     0114                     CM2CON1         equ	276	;# 
  1789     0115                     CMOUT           equ	277	;# 
  1790     0116                     BORCON          equ	278	;# 
  1791     0117                     FVRCON          equ	279	;# 
  1792     0118                     DACCON0         equ	280	;# 
  1793     0119                     DACCON1         equ	281	;# 
  1794     011A                     SRCON0          equ	282	;# 
  1795     011B                     SRCON1          equ	283	;# 
  1796     011D                     APFCON0         equ	285	;# 
  1797     011E                     APFCON1         equ	286	;# 
  1798     018C                     ANSELA          equ	396	;# 
  1799     018D                     ANSELB          equ	397	;# 
  1800     0191                     EEADR           equ	401	;# 
  1801     0191                     EEADRL          equ	401	;# 
  1802     0192                     EEADRH          equ	402	;# 
  1803     0193                     EEDAT           equ	403	;# 
  1804     0193                     EEDATL          equ	403	;# 
  1805     0193                     EEDATA          equ	403	;# 
  1806     0194                     EEDATH          equ	404	;# 
  1807     0195                     EECON1          equ	405	;# 
  1808     0196                     EECON2          equ	406	;# 
  1809     0199                     RCREG           equ	409	;# 
  1810     019A                     TXREG           equ	410	;# 
  1811     019B                     SP1BRG          equ	411	;# 
  1812     019B                     SP1BRGL         equ	411	;# 
  1813     019B                     SPBRG           equ	411	;# 
  1814     019B                     SPBRGL          equ	411	;# 
  1815     019C                     SP1BRGH         equ	412	;# 
  1816     019C                     SPBRGH          equ	412	;# 
  1817     019D                     RCSTA           equ	413	;# 
  1818     019E                     TXSTA           equ	414	;# 
  1819     019F                     BAUDCON         equ	415	;# 
  1820     020C                     WPUA            equ	524	;# 
  1821     020D                     WPUB            equ	525	;# 
  1822     0211                     SSP1BUF         equ	529	;# 
  1823     0211                     SSPBUF          equ	529	;# 
  1824     0212                     SSP1ADD         equ	530	;# 
  1825     0212                     SSPADD          equ	530	;# 
  1826     0213                     SSP1MSK         equ	531	;# 
  1827     0213                     SSPMSK          equ	531	;# 
  1828     0214                     SSP1STAT        equ	532	;# 
  1829     0214                     SSPSTAT         equ	532	;# 
  1830     0215                     SSP1CON1        equ	533	;# 
  1831     0215                     SSPCON1         equ	533	;# 
  1832     0215                     SSPCON          equ	533	;# 
  1833     0216                     SSP1CON2        equ	534	;# 
  1834     0216                     SSPCON2         equ	534	;# 
  1835     0217                     SSP1CON3        equ	535	;# 
  1836     0217                     SSPCON3         equ	535	;# 
  1837     0219                     SSP2BUF         equ	537	;# 
  1838     021A                     SSP2ADD         equ	538	;# 
  1839     021B                     SSP2MSK         equ	539	;# 
  1840     021C                     SSP2STAT        equ	540	;# 
  1841     021D                     SSP2CON1        equ	541	;# 
  1842     021E                     SSP2CON2        equ	542	;# 
  1843     021F                     SSP2CON3        equ	543	;# 
  1844     0291                     CCPR1           equ	657	;# 
  1845     0291                     CCPR1L          equ	657	;# 
  1846     0292                     CCPR1H          equ	658	;# 
  1847     0293                     CCP1CON         equ	659	;# 
  1848     0294                     PWM1CON         equ	660	;# 
  1849     0295                     CCP1AS          equ	661	;# 
  1850     0295                     ECCP1AS         equ	661	;# 
  1851     0296                     PSTR1CON        equ	662	;# 
  1852     0298                     CCPR2           equ	664	;# 
  1853     0298                     CCPR2L          equ	664	;# 
  1854     0299                     CCPR2H          equ	665	;# 
  1855     029A                     CCP2CON         equ	666	;# 
  1856     029B                     PWM2CON         equ	667	;# 
  1857     029C                     CCP2AS          equ	668	;# 
  1858     029C                     ECCP2AS         equ	668	;# 
  1859     029D                     PSTR2CON        equ	669	;# 
  1860     029E                     CCPTMRS         equ	670	;# 
  1861     029E                     CCPTMRS0        equ	670	;# 
  1862     0311                     CCPR3           equ	785	;# 
  1863     0311                     CCPR3L          equ	785	;# 
  1864     0312                     CCPR3H          equ	786	;# 
  1865     0313                     CCP3CON         equ	787	;# 
  1866     0318                     CCPR4           equ	792	;# 
  1867     0318                     CCPR4L          equ	792	;# 
  1868     0319                     CCPR4H          equ	793	;# 
  1869     031A                     CCP4CON         equ	794	;# 
  1870     0394                     IOCBP           equ	916	;# 
  1871     0395                     IOCBN           equ	917	;# 
  1872     0396                     IOCBF           equ	918	;# 
  1873     039A                     CLKRCON         equ	922	;# 
  1874     039C                     MDCON           equ	924	;# 
  1875     039D                     MDSRC           equ	925	;# 
  1876     039E                     MDCARL          equ	926	;# 
  1877     039F                     MDCARH          equ	927	;# 
  1878     0415                     TMR4            equ	1045	;# 
  1879     0416                     PR4             equ	1046	;# 
  1880     0417                     T4CON           equ	1047	;# 
  1881     041C                     TMR6            equ	1052	;# 
  1882     041D                     PR6             equ	1053	;# 
  1883     041E                     T6CON           equ	1054	;# 
  1884     0FE4                     STATUS_SHAD     equ	4068	;# 
  1885     0FE5                     WREG_SHAD       equ	4069	;# 
  1886     0FE6                     BSR_SHAD        equ	4070	;# 
  1887     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1888     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1889     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1890     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1891     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1892     0FED                     STKPTR          equ	4077	;# 
  1893     0FEE                     TOSL            equ	4078	;# 
  1894     0FEF                     TOSH            equ	4079	;# 
  1895     0000                     INDF0           equ	0	;# 
  1896     0001                     INDF1           equ	1	;# 
  1897     0002                     PCL             equ	2	;# 
  1898     0003                     STATUS          equ	3	;# 
  1899     0004                     FSR0L           equ	4	;# 
  1900     0005                     FSR0H           equ	5	;# 
  1901     0006                     FSR1L           equ	6	;# 
  1902     0007                     FSR1H           equ	7	;# 
  1903     0008                     BSR             equ	8	;# 
  1904     0009                     WREG            equ	9	;# 
  1905     000A                     PCLATH          equ	10	;# 
  1906     000B                     INTCON          equ	11	;# 
  1907     000C                     PORTA           equ	12	;# 
  1908     000D                     PORTB           equ	13	;# 
  1909     0011                     PIR1            equ	17	;# 
  1910     0012                     PIR2            equ	18	;# 
  1911     0013                     PIR3            equ	19	;# 
  1912     0014                     PIR4            equ	20	;# 
  1913     0015                     TMR0            equ	21	;# 
  1914     0016                     TMR1            equ	22	;# 
  1915     0016                     TMR1L           equ	22	;# 
  1916     0017                     TMR1H           equ	23	;# 
  1917     0018                     T1CON           equ	24	;# 
  1918     0019                     T1GCON          equ	25	;# 
  1919     001A                     TMR2            equ	26	;# 
  1920     001B                     PR2             equ	27	;# 
  1921     001C                     T2CON           equ	28	;# 
  1922     001E                     CPSCON0         equ	30	;# 
  1923     001F                     CPSCON1         equ	31	;# 
  1924     008C                     TRISA           equ	140	;# 
  1925     008D                     TRISB           equ	141	;# 
  1926     0091                     PIE1            equ	145	;# 
  1927     0092                     PIE2            equ	146	;# 
  1928     0093                     PIE3            equ	147	;# 
  1929     0094                     PIE4            equ	148	;# 
  1930     0095                     OPTION_REG      equ	149	;# 
  1931     0096                     PCON            equ	150	;# 
  1932     0097                     WDTCON          equ	151	;# 
  1933     0098                     OSCTUNE         equ	152	;# 
  1934     0099                     OSCCON          equ	153	;# 
  1935     009A                     OSCSTAT         equ	154	;# 
  1936     009B                     ADRES           equ	155	;# 
  1937     009B                     ADRESL          equ	155	;# 
  1938     009C                     ADRESH          equ	156	;# 
  1939     009D                     ADCON0          equ	157	;# 
  1940     009E                     ADCON1          equ	158	;# 
  1941     010C                     LATA            equ	268	;# 
  1942     010D                     LATB            equ	269	;# 
  1943     0111                     CM1CON0         equ	273	;# 
  1944     0112                     CM1CON1         equ	274	;# 
  1945     0113                     CM2CON0         equ	275	;# 
  1946     0114                     CM2CON1         equ	276	;# 
  1947     0115                     CMOUT           equ	277	;# 
  1948     0116                     BORCON          equ	278	;# 
  1949     0117                     FVRCON          equ	279	;# 
  1950     0118                     DACCON0         equ	280	;# 
  1951     0119                     DACCON1         equ	281	;# 
  1952     011A                     SRCON0          equ	282	;# 
  1953     011B                     SRCON1          equ	283	;# 
  1954     011D                     APFCON0         equ	285	;# 
  1955     011E                     APFCON1         equ	286	;# 
  1956     018C                     ANSELA          equ	396	;# 
  1957     018D                     ANSELB          equ	397	;# 
  1958     0191                     EEADR           equ	401	;# 
  1959     0191                     EEADRL          equ	401	;# 
  1960     0192                     EEADRH          equ	402	;# 
  1961     0193                     EEDAT           equ	403	;# 
  1962     0193                     EEDATL          equ	403	;# 
  1963     0193                     EEDATA          equ	403	;# 
  1964     0194                     EEDATH          equ	404	;# 
  1965     0195                     EECON1          equ	405	;# 
  1966     0196                     EECON2          equ	406	;# 
  1967     0199                     RCREG           equ	409	;# 
  1968     019A                     TXREG           equ	410	;# 
  1969     019B                     SP1BRG          equ	411	;# 
  1970     019B                     SP1BRGL         equ	411	;# 
  1971     019B                     SPBRG           equ	411	;# 
  1972     019B                     SPBRGL          equ	411	;# 
  1973     019C                     SP1BRGH         equ	412	;# 
  1974     019C                     SPBRGH          equ	412	;# 
  1975     019D                     RCSTA           equ	413	;# 
  1976     019E                     TXSTA           equ	414	;# 
  1977     019F                     BAUDCON         equ	415	;# 
  1978     020C                     WPUA            equ	524	;# 
  1979     020D                     WPUB            equ	525	;# 
  1980     0211                     SSP1BUF         equ	529	;# 
  1981     0211                     SSPBUF          equ	529	;# 
  1982     0212                     SSP1ADD         equ	530	;# 
  1983     0212                     SSPADD          equ	530	;# 
  1984     0213                     SSP1MSK         equ	531	;# 
  1985     0213                     SSPMSK          equ	531	;# 
  1986     0214                     SSP1STAT        equ	532	;# 
  1987     0214                     SSPSTAT         equ	532	;# 
  1988     0215                     SSP1CON1        equ	533	;# 
  1989     0215                     SSPCON1         equ	533	;# 
  1990     0215                     SSPCON          equ	533	;# 
  1991     0216                     SSP1CON2        equ	534	;# 
  1992     0216                     SSPCON2         equ	534	;# 
  1993     0217                     SSP1CON3        equ	535	;# 
  1994     0217                     SSPCON3         equ	535	;# 
  1995     0219                     SSP2BUF         equ	537	;# 
  1996     021A                     SSP2ADD         equ	538	;# 
  1997     021B                     SSP2MSK         equ	539	;# 
  1998     021C                     SSP2STAT        equ	540	;# 
  1999     021D                     SSP2CON1        equ	541	;# 
  2000     021E                     SSP2CON2        equ	542	;# 
  2001     021F                     SSP2CON3        equ	543	;# 
  2002     0291                     CCPR1           equ	657	;# 
  2003     0291                     CCPR1L          equ	657	;# 
  2004     0292                     CCPR1H          equ	658	;# 
  2005     0293                     CCP1CON         equ	659	;# 
  2006     0294                     PWM1CON         equ	660	;# 
  2007     0295                     CCP1AS          equ	661	;# 
  2008     0295                     ECCP1AS         equ	661	;# 
  2009     0296                     PSTR1CON        equ	662	;# 
  2010     0298                     CCPR2           equ	664	;# 
  2011     0298                     CCPR2L          equ	664	;# 
  2012     0299                     CCPR2H          equ	665	;# 
  2013     029A                     CCP2CON         equ	666	;# 
  2014     029B                     PWM2CON         equ	667	;# 
  2015     029C                     CCP2AS          equ	668	;# 
  2016     029C                     ECCP2AS         equ	668	;# 
  2017     029D                     PSTR2CON        equ	669	;# 
  2018     029E                     CCPTMRS         equ	670	;# 
  2019     029E                     CCPTMRS0        equ	670	;# 
  2020     0311                     CCPR3           equ	785	;# 
  2021     0311                     CCPR3L          equ	785	;# 
  2022     0312                     CCPR3H          equ	786	;# 
  2023     0313                     CCP3CON         equ	787	;# 
  2024     0318                     CCPR4           equ	792	;# 
  2025     0318                     CCPR4L          equ	792	;# 
  2026     0319                     CCPR4H          equ	793	;# 
  2027     031A                     CCP4CON         equ	794	;# 
  2028     0394                     IOCBP           equ	916	;# 
  2029     0395                     IOCBN           equ	917	;# 
  2030     0396                     IOCBF           equ	918	;# 
  2031     039A                     CLKRCON         equ	922	;# 
  2032     039C                     MDCON           equ	924	;# 
  2033     039D                     MDSRC           equ	925	;# 
  2034     039E                     MDCARL          equ	926	;# 
  2035     039F                     MDCARH          equ	927	;# 
  2036     0415                     TMR4            equ	1045	;# 
  2037     0416                     PR4             equ	1046	;# 
  2038     0417                     T4CON           equ	1047	;# 
  2039     041C                     TMR6            equ	1052	;# 
  2040     041D                     PR6             equ	1053	;# 
  2041     041E                     T6CON           equ	1054	;# 
  2042     0FE4                     STATUS_SHAD     equ	4068	;# 
  2043     0FE5                     WREG_SHAD       equ	4069	;# 
  2044     0FE6                     BSR_SHAD        equ	4070	;# 
  2045     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2046     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2047     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2048     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2049     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2050     0FED                     STKPTR          equ	4077	;# 
  2051     0FEE                     TOSL            equ	4078	;# 
  2052     0FEF                     TOSH            equ	4079	;# 
  2053     0000                     INDF0           equ	0	;# 
  2054     0001                     INDF1           equ	1	;# 
  2055     0002                     PCL             equ	2	;# 
  2056     0003                     STATUS          equ	3	;# 
  2057     0004                     FSR0L           equ	4	;# 
  2058     0005                     FSR0H           equ	5	;# 
  2059     0006                     FSR1L           equ	6	;# 
  2060     0007                     FSR1H           equ	7	;# 
  2061     0008                     BSR             equ	8	;# 
  2062     0009                     WREG            equ	9	;# 
  2063     000A                     PCLATH          equ	10	;# 
  2064     000B                     INTCON          equ	11	;# 
  2065     000C                     PORTA           equ	12	;# 
  2066     000D                     PORTB           equ	13	;# 
  2067     0011                     PIR1            equ	17	;# 
  2068     0012                     PIR2            equ	18	;# 
  2069     0013                     PIR3            equ	19	;# 
  2070     0014                     PIR4            equ	20	;# 
  2071     0015                     TMR0            equ	21	;# 
  2072     0016                     TMR1            equ	22	;# 
  2073     0016                     TMR1L           equ	22	;# 
  2074     0017                     TMR1H           equ	23	;# 
  2075     0018                     T1CON           equ	24	;# 
  2076     0019                     T1GCON          equ	25	;# 
  2077     001A                     TMR2            equ	26	;# 
  2078     001B                     PR2             equ	27	;# 
  2079     001C                     T2CON           equ	28	;# 
  2080     001E                     CPSCON0         equ	30	;# 
  2081     001F                     CPSCON1         equ	31	;# 
  2082     008C                     TRISA           equ	140	;# 
  2083     008D                     TRISB           equ	141	;# 
  2084     0091                     PIE1            equ	145	;# 
  2085     0092                     PIE2            equ	146	;# 
  2086     0093                     PIE3            equ	147	;# 
  2087     0094                     PIE4            equ	148	;# 
  2088     0095                     OPTION_REG      equ	149	;# 
  2089     0096                     PCON            equ	150	;# 
  2090     0097                     WDTCON          equ	151	;# 
  2091     0098                     OSCTUNE         equ	152	;# 
  2092     0099                     OSCCON          equ	153	;# 
  2093     009A                     OSCSTAT         equ	154	;# 
  2094     009B                     ADRES           equ	155	;# 
  2095     009B                     ADRESL          equ	155	;# 
  2096     009C                     ADRESH          equ	156	;# 
  2097     009D                     ADCON0          equ	157	;# 
  2098     009E                     ADCON1          equ	158	;# 
  2099     010C                     LATA            equ	268	;# 
  2100     010D                     LATB            equ	269	;# 
  2101     0111                     CM1CON0         equ	273	;# 
  2102     0112                     CM1CON1         equ	274	;# 
  2103     0113                     CM2CON0         equ	275	;# 
  2104     0114                     CM2CON1         equ	276	;# 
  2105     0115                     CMOUT           equ	277	;# 
  2106     0116                     BORCON          equ	278	;# 
  2107     0117                     FVRCON          equ	279	;# 
  2108     0118                     DACCON0         equ	280	;# 
  2109     0119                     DACCON1         equ	281	;# 
  2110     011A                     SRCON0          equ	282	;# 
  2111     011B                     SRCON1          equ	283	;# 
  2112     011D                     APFCON0         equ	285	;# 
  2113     011E                     APFCON1         equ	286	;# 
  2114     018C                     ANSELA          equ	396	;# 
  2115     018D                     ANSELB          equ	397	;# 
  2116     0191                     EEADR           equ	401	;# 
  2117     0191                     EEADRL          equ	401	;# 
  2118     0192                     EEADRH          equ	402	;# 
  2119     0193                     EEDAT           equ	403	;# 
  2120     0193                     EEDATL          equ	403	;# 
  2121     0193                     EEDATA          equ	403	;# 
  2122     0194                     EEDATH          equ	404	;# 
  2123     0195                     EECON1          equ	405	;# 
  2124     0196                     EECON2          equ	406	;# 
  2125     0199                     RCREG           equ	409	;# 
  2126     019A                     TXREG           equ	410	;# 
  2127     019B                     SP1BRG          equ	411	;# 
  2128     019B                     SP1BRGL         equ	411	;# 
  2129     019B                     SPBRG           equ	411	;# 
  2130     019B                     SPBRGL          equ	411	;# 
  2131     019C                     SP1BRGH         equ	412	;# 
  2132     019C                     SPBRGH          equ	412	;# 
  2133     019D                     RCSTA           equ	413	;# 
  2134     019E                     TXSTA           equ	414	;# 
  2135     019F                     BAUDCON         equ	415	;# 
  2136     020C                     WPUA            equ	524	;# 
  2137     020D                     WPUB            equ	525	;# 
  2138     0211                     SSP1BUF         equ	529	;# 
  2139     0211                     SSPBUF          equ	529	;# 
  2140     0212                     SSP1ADD         equ	530	;# 
  2141     0212                     SSPADD          equ	530	;# 
  2142     0213                     SSP1MSK         equ	531	;# 
  2143     0213                     SSPMSK          equ	531	;# 
  2144     0214                     SSP1STAT        equ	532	;# 
  2145     0214                     SSPSTAT         equ	532	;# 
  2146     0215                     SSP1CON1        equ	533	;# 
  2147     0215                     SSPCON1         equ	533	;# 
  2148     0215                     SSPCON          equ	533	;# 
  2149     0216                     SSP1CON2        equ	534	;# 
  2150     0216                     SSPCON2         equ	534	;# 
  2151     0217                     SSP1CON3        equ	535	;# 
  2152     0217                     SSPCON3         equ	535	;# 
  2153     0219                     SSP2BUF         equ	537	;# 
  2154     021A                     SSP2ADD         equ	538	;# 
  2155     021B                     SSP2MSK         equ	539	;# 
  2156     021C                     SSP2STAT        equ	540	;# 
  2157     021D                     SSP2CON1        equ	541	;# 
  2158     021E                     SSP2CON2        equ	542	;# 
  2159     021F                     SSP2CON3        equ	543	;# 
  2160     0291                     CCPR1           equ	657	;# 
  2161     0291                     CCPR1L          equ	657	;# 
  2162     0292                     CCPR1H          equ	658	;# 
  2163     0293                     CCP1CON         equ	659	;# 
  2164     0294                     PWM1CON         equ	660	;# 
  2165     0295                     CCP1AS          equ	661	;# 
  2166     0295                     ECCP1AS         equ	661	;# 
  2167     0296                     PSTR1CON        equ	662	;# 
  2168     0298                     CCPR2           equ	664	;# 
  2169     0298                     CCPR2L          equ	664	;# 
  2170     0299                     CCPR2H          equ	665	;# 
  2171     029A                     CCP2CON         equ	666	;# 
  2172     029B                     PWM2CON         equ	667	;# 
  2173     029C                     CCP2AS          equ	668	;# 
  2174     029C                     ECCP2AS         equ	668	;# 
  2175     029D                     PSTR2CON        equ	669	;# 
  2176     029E                     CCPTMRS         equ	670	;# 
  2177     029E                     CCPTMRS0        equ	670	;# 
  2178     0311                     CCPR3           equ	785	;# 
  2179     0311                     CCPR3L          equ	785	;# 
  2180     0312                     CCPR3H          equ	786	;# 
  2181     0313                     CCP3CON         equ	787	;# 
  2182     0318                     CCPR4           equ	792	;# 
  2183     0318                     CCPR4L          equ	792	;# 
  2184     0319                     CCPR4H          equ	793	;# 
  2185     031A                     CCP4CON         equ	794	;# 
  2186     0394                     IOCBP           equ	916	;# 
  2187     0395                     IOCBN           equ	917	;# 
  2188     0396                     IOCBF           equ	918	;# 
  2189     039A                     CLKRCON         equ	922	;# 
  2190     039C                     MDCON           equ	924	;# 
  2191     039D                     MDSRC           equ	925	;# 
  2192     039E                     MDCARL          equ	926	;# 
  2193     039F                     MDCARH          equ	927	;# 
  2194     0415                     TMR4            equ	1045	;# 
  2195     0416                     PR4             equ	1046	;# 
  2196     0417                     T4CON           equ	1047	;# 
  2197     041C                     TMR6            equ	1052	;# 
  2198     041D                     PR6             equ	1053	;# 
  2199     041E                     T6CON           equ	1054	;# 
  2200     0FE4                     STATUS_SHAD     equ	4068	;# 
  2201     0FE5                     WREG_SHAD       equ	4069	;# 
  2202     0FE6                     BSR_SHAD        equ	4070	;# 
  2203     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2204     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2205     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2206     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2207     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2208     0FED                     STKPTR          equ	4077	;# 
  2209     0FEE                     TOSL            equ	4078	;# 
  2210     0FEF                     TOSH            equ	4079	;# 
  2211     0000                     INDF0           equ	0	;# 
  2212     0001                     INDF1           equ	1	;# 
  2213     0002                     PCL             equ	2	;# 
  2214     0003                     STATUS          equ	3	;# 
  2215     0004                     FSR0L           equ	4	;# 
  2216     0005                     FSR0H           equ	5	;# 
  2217     0006                     FSR1L           equ	6	;# 
  2218     0007                     FSR1H           equ	7	;# 
  2219     0008                     BSR             equ	8	;# 
  2220     0009                     WREG            equ	9	;# 
  2221     000A                     PCLATH          equ	10	;# 
  2222     000B                     INTCON          equ	11	;# 
  2223     000C                     PORTA           equ	12	;# 
  2224     000D                     PORTB           equ	13	;# 
  2225     0011                     PIR1            equ	17	;# 
  2226     0012                     PIR2            equ	18	;# 
  2227     0013                     PIR3            equ	19	;# 
  2228     0014                     PIR4            equ	20	;# 
  2229     0015                     TMR0            equ	21	;# 
  2230     0016                     TMR1            equ	22	;# 
  2231     0016                     TMR1L           equ	22	;# 
  2232     0017                     TMR1H           equ	23	;# 
  2233     0018                     T1CON           equ	24	;# 
  2234     0019                     T1GCON          equ	25	;# 
  2235     001A                     TMR2            equ	26	;# 
  2236     001B                     PR2             equ	27	;# 
  2237     001C                     T2CON           equ	28	;# 
  2238     001E                     CPSCON0         equ	30	;# 
  2239     001F                     CPSCON1         equ	31	;# 
  2240     008C                     TRISA           equ	140	;# 
  2241     008D                     TRISB           equ	141	;# 
  2242     0091                     PIE1            equ	145	;# 
  2243     0092                     PIE2            equ	146	;# 
  2244     0093                     PIE3            equ	147	;# 
  2245     0094                     PIE4            equ	148	;# 
  2246     0095                     OPTION_REG      equ	149	;# 
  2247     0096                     PCON            equ	150	;# 
  2248     0097                     WDTCON          equ	151	;# 
  2249     0098                     OSCTUNE         equ	152	;# 
  2250     0099                     OSCCON          equ	153	;# 
  2251     009A                     OSCSTAT         equ	154	;# 
  2252     009B                     ADRES           equ	155	;# 
  2253     009B                     ADRESL          equ	155	;# 
  2254     009C                     ADRESH          equ	156	;# 
  2255     009D                     ADCON0          equ	157	;# 
  2256     009E                     ADCON1          equ	158	;# 
  2257     010C                     LATA            equ	268	;# 
  2258     010D                     LATB            equ	269	;# 
  2259     0111                     CM1CON0         equ	273	;# 
  2260     0112                     CM1CON1         equ	274	;# 
  2261     0113                     CM2CON0         equ	275	;# 
  2262     0114                     CM2CON1         equ	276	;# 
  2263     0115                     CMOUT           equ	277	;# 
  2264     0116                     BORCON          equ	278	;# 
  2265     0117                     FVRCON          equ	279	;# 
  2266     0118                     DACCON0         equ	280	;# 
  2267     0119                     DACCON1         equ	281	;# 
  2268     011A                     SRCON0          equ	282	;# 
  2269     011B                     SRCON1          equ	283	;# 
  2270     011D                     APFCON0         equ	285	;# 
  2271     011E                     APFCON1         equ	286	;# 
  2272     018C                     ANSELA          equ	396	;# 
  2273     018D                     ANSELB          equ	397	;# 
  2274     0191                     EEADR           equ	401	;# 
  2275     0191                     EEADRL          equ	401	;# 
  2276     0192                     EEADRH          equ	402	;# 
  2277     0193                     EEDAT           equ	403	;# 
  2278     0193                     EEDATL          equ	403	;# 
  2279     0193                     EEDATA          equ	403	;# 
  2280     0194                     EEDATH          equ	404	;# 
  2281     0195                     EECON1          equ	405	;# 
  2282     0196                     EECON2          equ	406	;# 
  2283     0199                     RCREG           equ	409	;# 
  2284     019A                     TXREG           equ	410	;# 
  2285     019B                     SP1BRG          equ	411	;# 
  2286     019B                     SP1BRGL         equ	411	;# 
  2287     019B                     SPBRG           equ	411	;# 
  2288     019B                     SPBRGL          equ	411	;# 
  2289     019C                     SP1BRGH         equ	412	;# 
  2290     019C                     SPBRGH          equ	412	;# 
  2291     019D                     RCSTA           equ	413	;# 
  2292     019E                     TXSTA           equ	414	;# 
  2293     019F                     BAUDCON         equ	415	;# 
  2294     020C                     WPUA            equ	524	;# 
  2295     020D                     WPUB            equ	525	;# 
  2296     0211                     SSP1BUF         equ	529	;# 
  2297     0211                     SSPBUF          equ	529	;# 
  2298     0212                     SSP1ADD         equ	530	;# 
  2299     0212                     SSPADD          equ	530	;# 
  2300     0213                     SSP1MSK         equ	531	;# 
  2301     0213                     SSPMSK          equ	531	;# 
  2302     0214                     SSP1STAT        equ	532	;# 
  2303     0214                     SSPSTAT         equ	532	;# 
  2304     0215                     SSP1CON1        equ	533	;# 
  2305     0215                     SSPCON1         equ	533	;# 
  2306     0215                     SSPCON          equ	533	;# 
  2307     0216                     SSP1CON2        equ	534	;# 
  2308     0216                     SSPCON2         equ	534	;# 
  2309     0217                     SSP1CON3        equ	535	;# 
  2310     0217                     SSPCON3         equ	535	;# 
  2311     0219                     SSP2BUF         equ	537	;# 
  2312     021A                     SSP2ADD         equ	538	;# 
  2313     021B                     SSP2MSK         equ	539	;# 
  2314     021C                     SSP2STAT        equ	540	;# 
  2315     021D                     SSP2CON1        equ	541	;# 
  2316     021E                     SSP2CON2        equ	542	;# 
  2317     021F                     SSP2CON3        equ	543	;# 
  2318     0291                     CCPR1           equ	657	;# 
  2319     0291                     CCPR1L          equ	657	;# 
  2320     0292                     CCPR1H          equ	658	;# 
  2321     0293                     CCP1CON         equ	659	;# 
  2322     0294                     PWM1CON         equ	660	;# 
  2323     0295                     CCP1AS          equ	661	;# 
  2324     0295                     ECCP1AS         equ	661	;# 
  2325     0296                     PSTR1CON        equ	662	;# 
  2326     0298                     CCPR2           equ	664	;# 
  2327     0298                     CCPR2L          equ	664	;# 
  2328     0299                     CCPR2H          equ	665	;# 
  2329     029A                     CCP2CON         equ	666	;# 
  2330     029B                     PWM2CON         equ	667	;# 
  2331     029C                     CCP2AS          equ	668	;# 
  2332     029C                     ECCP2AS         equ	668	;# 
  2333     029D                     PSTR2CON        equ	669	;# 
  2334     029E                     CCPTMRS         equ	670	;# 
  2335     029E                     CCPTMRS0        equ	670	;# 
  2336     0311                     CCPR3           equ	785	;# 
  2337     0311                     CCPR3L          equ	785	;# 
  2338     0312                     CCPR3H          equ	786	;# 
  2339     0313                     CCP3CON         equ	787	;# 
  2340     0318                     CCPR4           equ	792	;# 
  2341     0318                     CCPR4L          equ	792	;# 
  2342     0319                     CCPR4H          equ	793	;# 
  2343     031A                     CCP4CON         equ	794	;# 
  2344     0394                     IOCBP           equ	916	;# 
  2345     0395                     IOCBN           equ	917	;# 
  2346     0396                     IOCBF           equ	918	;# 
  2347     039A                     CLKRCON         equ	922	;# 
  2348     039C                     MDCON           equ	924	;# 
  2349     039D                     MDSRC           equ	925	;# 
  2350     039E                     MDCARL          equ	926	;# 
  2351     039F                     MDCARH          equ	927	;# 
  2352     0415                     TMR4            equ	1045	;# 
  2353     0416                     PR4             equ	1046	;# 
  2354     0417                     T4CON           equ	1047	;# 
  2355     041C                     TMR6            equ	1052	;# 
  2356     041D                     PR6             equ	1053	;# 
  2357     041E                     T6CON           equ	1054	;# 
  2358     0FE4                     STATUS_SHAD     equ	4068	;# 
  2359     0FE5                     WREG_SHAD       equ	4069	;# 
  2360     0FE6                     BSR_SHAD        equ	4070	;# 
  2361     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2362     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2363     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2364     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2365     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2366     0FED                     STKPTR          equ	4077	;# 
  2367     0FEE                     TOSL            equ	4078	;# 
  2368     0FEF                     TOSH            equ	4079	;# 
  2369     0000                     INDF0           equ	0	;# 
  2370     0001                     INDF1           equ	1	;# 
  2371     0002                     PCL             equ	2	;# 
  2372     0003                     STATUS          equ	3	;# 
  2373     0004                     FSR0L           equ	4	;# 
  2374     0005                     FSR0H           equ	5	;# 
  2375     0006                     FSR1L           equ	6	;# 
  2376     0007                     FSR1H           equ	7	;# 
  2377     0008                     BSR             equ	8	;# 
  2378     0009                     WREG            equ	9	;# 
  2379     000A                     PCLATH          equ	10	;# 
  2380     000B                     INTCON          equ	11	;# 
  2381     000C                     PORTA           equ	12	;# 
  2382     000D                     PORTB           equ	13	;# 
  2383     0011                     PIR1            equ	17	;# 
  2384     0012                     PIR2            equ	18	;# 
  2385     0013                     PIR3            equ	19	;# 
  2386     0014                     PIR4            equ	20	;# 
  2387     0015                     TMR0            equ	21	;# 
  2388     0016                     TMR1            equ	22	;# 
  2389     0016                     TMR1L           equ	22	;# 
  2390     0017                     TMR1H           equ	23	;# 
  2391     0018                     T1CON           equ	24	;# 
  2392     0019                     T1GCON          equ	25	;# 
  2393     001A                     TMR2            equ	26	;# 
  2394     001B                     PR2             equ	27	;# 
  2395     001C                     T2CON           equ	28	;# 
  2396     001E                     CPSCON0         equ	30	;# 
  2397     001F                     CPSCON1         equ	31	;# 
  2398     008C                     TRISA           equ	140	;# 
  2399     008D                     TRISB           equ	141	;# 
  2400     0091                     PIE1            equ	145	;# 
  2401     0092                     PIE2            equ	146	;# 
  2402     0093                     PIE3            equ	147	;# 
  2403     0094                     PIE4            equ	148	;# 
  2404     0095                     OPTION_REG      equ	149	;# 
  2405     0096                     PCON            equ	150	;# 
  2406     0097                     WDTCON          equ	151	;# 
  2407     0098                     OSCTUNE         equ	152	;# 
  2408     0099                     OSCCON          equ	153	;# 
  2409     009A                     OSCSTAT         equ	154	;# 
  2410     009B                     ADRES           equ	155	;# 
  2411     009B                     ADRESL          equ	155	;# 
  2412     009C                     ADRESH          equ	156	;# 
  2413     009D                     ADCON0          equ	157	;# 
  2414     009E                     ADCON1          equ	158	;# 
  2415     010C                     LATA            equ	268	;# 
  2416     010D                     LATB            equ	269	;# 
  2417     0111                     CM1CON0         equ	273	;# 
  2418     0112                     CM1CON1         equ	274	;# 
  2419     0113                     CM2CON0         equ	275	;# 
  2420     0114                     CM2CON1         equ	276	;# 
  2421     0115                     CMOUT           equ	277	;# 
  2422     0116                     BORCON          equ	278	;# 
  2423     0117                     FVRCON          equ	279	;# 
  2424     0118                     DACCON0         equ	280	;# 
  2425     0119                     DACCON1         equ	281	;# 
  2426     011A                     SRCON0          equ	282	;# 
  2427     011B                     SRCON1          equ	283	;# 
  2428     011D                     APFCON0         equ	285	;# 
  2429     011E                     APFCON1         equ	286	;# 
  2430     018C                     ANSELA          equ	396	;# 
  2431     018D                     ANSELB          equ	397	;# 
  2432     0191                     EEADR           equ	401	;# 
  2433     0191                     EEADRL          equ	401	;# 
  2434     0192                     EEADRH          equ	402	;# 
  2435     0193                     EEDAT           equ	403	;# 
  2436     0193                     EEDATL          equ	403	;# 
  2437     0193                     EEDATA          equ	403	;# 
  2438     0194                     EEDATH          equ	404	;# 
  2439     0195                     EECON1          equ	405	;# 
  2440     0196                     EECON2          equ	406	;# 
  2441     0199                     RCREG           equ	409	;# 
  2442     019A                     TXREG           equ	410	;# 
  2443     019B                     SP1BRG          equ	411	;# 
  2444     019B                     SP1BRGL         equ	411	;# 
  2445     019B                     SPBRG           equ	411	;# 
  2446     019B                     SPBRGL          equ	411	;# 
  2447     019C                     SP1BRGH         equ	412	;# 
  2448     019C                     SPBRGH          equ	412	;# 
  2449     019D                     RCSTA           equ	413	;# 
  2450     019E                     TXSTA           equ	414	;# 
  2451     019F                     BAUDCON         equ	415	;# 
  2452     020C                     WPUA            equ	524	;# 
  2453     020D                     WPUB            equ	525	;# 
  2454     0211                     SSP1BUF         equ	529	;# 
  2455     0211                     SSPBUF          equ	529	;# 
  2456     0212                     SSP1ADD         equ	530	;# 
  2457     0212                     SSPADD          equ	530	;# 
  2458     0213                     SSP1MSK         equ	531	;# 
  2459     0213                     SSPMSK          equ	531	;# 
  2460     0214                     SSP1STAT        equ	532	;# 
  2461     0214                     SSPSTAT         equ	532	;# 
  2462     0215                     SSP1CON1        equ	533	;# 
  2463     0215                     SSPCON1         equ	533	;# 
  2464     0215                     SSPCON          equ	533	;# 
  2465     0216                     SSP1CON2        equ	534	;# 
  2466     0216                     SSPCON2         equ	534	;# 
  2467     0217                     SSP1CON3        equ	535	;# 
  2468     0217                     SSPCON3         equ	535	;# 
  2469     0219                     SSP2BUF         equ	537	;# 
  2470     021A                     SSP2ADD         equ	538	;# 
  2471     021B                     SSP2MSK         equ	539	;# 
  2472     021C                     SSP2STAT        equ	540	;# 
  2473     021D                     SSP2CON1        equ	541	;# 
  2474     021E                     SSP2CON2        equ	542	;# 
  2475     021F                     SSP2CON3        equ	543	;# 
  2476     0291                     CCPR1           equ	657	;# 
  2477     0291                     CCPR1L          equ	657	;# 
  2478     0292                     CCPR1H          equ	658	;# 
  2479     0293                     CCP1CON         equ	659	;# 
  2480     0294                     PWM1CON         equ	660	;# 
  2481     0295                     CCP1AS          equ	661	;# 
  2482     0295                     ECCP1AS         equ	661	;# 
  2483     0296                     PSTR1CON        equ	662	;# 
  2484     0298                     CCPR2           equ	664	;# 
  2485     0298                     CCPR2L          equ	664	;# 
  2486     0299                     CCPR2H          equ	665	;# 
  2487     029A                     CCP2CON         equ	666	;# 
  2488     029B                     PWM2CON         equ	667	;# 
  2489     029C                     CCP2AS          equ	668	;# 
  2490     029C                     ECCP2AS         equ	668	;# 
  2491     029D                     PSTR2CON        equ	669	;# 
  2492     029E                     CCPTMRS         equ	670	;# 
  2493     029E                     CCPTMRS0        equ	670	;# 
  2494     0311                     CCPR3           equ	785	;# 
  2495     0311                     CCPR3L          equ	785	;# 
  2496     0312                     CCPR3H          equ	786	;# 
  2497     0313                     CCP3CON         equ	787	;# 
  2498     0318                     CCPR4           equ	792	;# 
  2499     0318                     CCPR4L          equ	792	;# 
  2500     0319                     CCPR4H          equ	793	;# 
  2501     031A                     CCP4CON         equ	794	;# 
  2502     0394                     IOCBP           equ	916	;# 
  2503     0395                     IOCBN           equ	917	;# 
  2504     0396                     IOCBF           equ	918	;# 
  2505     039A                     CLKRCON         equ	922	;# 
  2506     039C                     MDCON           equ	924	;# 
  2507     039D                     MDSRC           equ	925	;# 
  2508     039E                     MDCARL          equ	926	;# 
  2509     039F                     MDCARH          equ	927	;# 
  2510     0415                     TMR4            equ	1045	;# 
  2511     0416                     PR4             equ	1046	;# 
  2512     0417                     T4CON           equ	1047	;# 
  2513     041C                     TMR6            equ	1052	;# 
  2514     041D                     PR6             equ	1053	;# 
  2515     041E                     T6CON           equ	1054	;# 
  2516     0FE4                     STATUS_SHAD     equ	4068	;# 
  2517     0FE5                     WREG_SHAD       equ	4069	;# 
  2518     0FE6                     BSR_SHAD        equ	4070	;# 
  2519     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2520     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2521     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2522     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2523     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2524     0FED                     STKPTR          equ	4077	;# 
  2525     0FEE                     TOSL            equ	4078	;# 
  2526     0FEF                     TOSH            equ	4079	;# 
  2527     0000                     INDF0           equ	0	;# 
  2528     0001                     INDF1           equ	1	;# 
  2529     0002                     PCL             equ	2	;# 
  2530     0003                     STATUS          equ	3	;# 
  2531     0004                     FSR0L           equ	4	;# 
  2532     0005                     FSR0H           equ	5	;# 
  2533     0006                     FSR1L           equ	6	;# 
  2534     0007                     FSR1H           equ	7	;# 
  2535     0008                     BSR             equ	8	;# 
  2536     0009                     WREG            equ	9	;# 
  2537     000A                     PCLATH          equ	10	;# 
  2538     000B                     INTCON          equ	11	;# 
  2539     000C                     PORTA           equ	12	;# 
  2540     000D                     PORTB           equ	13	;# 
  2541     0011                     PIR1            equ	17	;# 
  2542     0012                     PIR2            equ	18	;# 
  2543     0013                     PIR3            equ	19	;# 
  2544     0014                     PIR4            equ	20	;# 
  2545     0015                     TMR0            equ	21	;# 
  2546     0016                     TMR1            equ	22	;# 
  2547     0016                     TMR1L           equ	22	;# 
  2548     0017                     TMR1H           equ	23	;# 
  2549     0018                     T1CON           equ	24	;# 
  2550     0019                     T1GCON          equ	25	;# 
  2551     001A                     TMR2            equ	26	;# 
  2552     001B                     PR2             equ	27	;# 
  2553     001C                     T2CON           equ	28	;# 
  2554     001E                     CPSCON0         equ	30	;# 
  2555     001F                     CPSCON1         equ	31	;# 
  2556     008C                     TRISA           equ	140	;# 
  2557     008D                     TRISB           equ	141	;# 
  2558     0091                     PIE1            equ	145	;# 
  2559     0092                     PIE2            equ	146	;# 
  2560     0093                     PIE3            equ	147	;# 
  2561     0094                     PIE4            equ	148	;# 
  2562     0095                     OPTION_REG      equ	149	;# 
  2563     0096                     PCON            equ	150	;# 
  2564     0097                     WDTCON          equ	151	;# 
  2565     0098                     OSCTUNE         equ	152	;# 
  2566     0099                     OSCCON          equ	153	;# 
  2567     009A                     OSCSTAT         equ	154	;# 
  2568     009B                     ADRES           equ	155	;# 
  2569     009B                     ADRESL          equ	155	;# 
  2570     009C                     ADRESH          equ	156	;# 
  2571     009D                     ADCON0          equ	157	;# 
  2572     009E                     ADCON1          equ	158	;# 
  2573     010C                     LATA            equ	268	;# 
  2574     010D                     LATB            equ	269	;# 
  2575     0111                     CM1CON0         equ	273	;# 
  2576     0112                     CM1CON1         equ	274	;# 
  2577     0113                     CM2CON0         equ	275	;# 
  2578     0114                     CM2CON1         equ	276	;# 
  2579     0115                     CMOUT           equ	277	;# 
  2580     0116                     BORCON          equ	278	;# 
  2581     0117                     FVRCON          equ	279	;# 
  2582     0118                     DACCON0         equ	280	;# 
  2583     0119                     DACCON1         equ	281	;# 
  2584     011A                     SRCON0          equ	282	;# 
  2585     011B                     SRCON1          equ	283	;# 
  2586     011D                     APFCON0         equ	285	;# 
  2587     011E                     APFCON1         equ	286	;# 
  2588     018C                     ANSELA          equ	396	;# 
  2589     018D                     ANSELB          equ	397	;# 
  2590     0191                     EEADR           equ	401	;# 
  2591     0191                     EEADRL          equ	401	;# 
  2592     0192                     EEADRH          equ	402	;# 
  2593     0193                     EEDAT           equ	403	;# 
  2594     0193                     EEDATL          equ	403	;# 
  2595     0193                     EEDATA          equ	403	;# 
  2596     0194                     EEDATH          equ	404	;# 
  2597     0195                     EECON1          equ	405	;# 
  2598     0196                     EECON2          equ	406	;# 
  2599     0199                     RCREG           equ	409	;# 
  2600     019A                     TXREG           equ	410	;# 
  2601     019B                     SP1BRG          equ	411	;# 
  2602     019B                     SP1BRGL         equ	411	;# 
  2603     019B                     SPBRG           equ	411	;# 
  2604     019B                     SPBRGL          equ	411	;# 
  2605     019C                     SP1BRGH         equ	412	;# 
  2606     019C                     SPBRGH          equ	412	;# 
  2607     019D                     RCSTA           equ	413	;# 
  2608     019E                     TXSTA           equ	414	;# 
  2609     019F                     BAUDCON         equ	415	;# 
  2610     020C                     WPUA            equ	524	;# 
  2611     020D                     WPUB            equ	525	;# 
  2612     0211                     SSP1BUF         equ	529	;# 
  2613     0211                     SSPBUF          equ	529	;# 
  2614     0212                     SSP1ADD         equ	530	;# 
  2615     0212                     SSPADD          equ	530	;# 
  2616     0213                     SSP1MSK         equ	531	;# 
  2617     0213                     SSPMSK          equ	531	;# 
  2618     0214                     SSP1STAT        equ	532	;# 
  2619     0214                     SSPSTAT         equ	532	;# 
  2620     0215                     SSP1CON1        equ	533	;# 
  2621     0215                     SSPCON1         equ	533	;# 
  2622     0215                     SSPCON          equ	533	;# 
  2623     0216                     SSP1CON2        equ	534	;# 
  2624     0216                     SSPCON2         equ	534	;# 
  2625     0217                     SSP1CON3        equ	535	;# 
  2626     0217                     SSPCON3         equ	535	;# 
  2627     0219                     SSP2BUF         equ	537	;# 
  2628     021A                     SSP2ADD         equ	538	;# 
  2629     021B                     SSP2MSK         equ	539	;# 
  2630     021C                     SSP2STAT        equ	540	;# 
  2631     021D                     SSP2CON1        equ	541	;# 
  2632     021E                     SSP2CON2        equ	542	;# 
  2633     021F                     SSP2CON3        equ	543	;# 
  2634     0291                     CCPR1           equ	657	;# 
  2635     0291                     CCPR1L          equ	657	;# 
  2636     0292                     CCPR1H          equ	658	;# 
  2637     0293                     CCP1CON         equ	659	;# 
  2638     0294                     PWM1CON         equ	660	;# 
  2639     0295                     CCP1AS          equ	661	;# 
  2640     0295                     ECCP1AS         equ	661	;# 
  2641     0296                     PSTR1CON        equ	662	;# 
  2642     0298                     CCPR2           equ	664	;# 
  2643     0298                     CCPR2L          equ	664	;# 
  2644     0299                     CCPR2H          equ	665	;# 
  2645     029A                     CCP2CON         equ	666	;# 
  2646     029B                     PWM2CON         equ	667	;# 
  2647     029C                     CCP2AS          equ	668	;# 
  2648     029C                     ECCP2AS         equ	668	;# 
  2649     029D                     PSTR2CON        equ	669	;# 
  2650     029E                     CCPTMRS         equ	670	;# 
  2651     029E                     CCPTMRS0        equ	670	;# 
  2652     0311                     CCPR3           equ	785	;# 
  2653     0311                     CCPR3L          equ	785	;# 
  2654     0312                     CCPR3H          equ	786	;# 
  2655     0313                     CCP3CON         equ	787	;# 
  2656     0318                     CCPR4           equ	792	;# 
  2657     0318                     CCPR4L          equ	792	;# 
  2658     0319                     CCPR4H          equ	793	;# 
  2659     031A                     CCP4CON         equ	794	;# 
  2660     0394                     IOCBP           equ	916	;# 
  2661     0395                     IOCBN           equ	917	;# 
  2662     0396                     IOCBF           equ	918	;# 
  2663     039A                     CLKRCON         equ	922	;# 
  2664     039C                     MDCON           equ	924	;# 
  2665     039D                     MDSRC           equ	925	;# 
  2666     039E                     MDCARL          equ	926	;# 
  2667     039F                     MDCARH          equ	927	;# 
  2668     0415                     TMR4            equ	1045	;# 
  2669     0416                     PR4             equ	1046	;# 
  2670     0417                     T4CON           equ	1047	;# 
  2671     041C                     TMR6            equ	1052	;# 
  2672     041D                     PR6             equ	1053	;# 
  2673     041E                     T6CON           equ	1054	;# 
  2674     0FE4                     STATUS_SHAD     equ	4068	;# 
  2675     0FE5                     WREG_SHAD       equ	4069	;# 
  2676     0FE6                     BSR_SHAD        equ	4070	;# 
  2677     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2678     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2679     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2680     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2681     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2682     0FED                     STKPTR          equ	4077	;# 
  2683     0FEE                     TOSL            equ	4078	;# 
  2684     0FEF                     TOSH            equ	4079	;# 
  2685                           
  2686                           	psect	idataBANK1
  2687     0D04                     __pidataBANK1:
  2688                           
  2689                           ;initializer for _velocidade_string
  2690     0D04  3430               	retlw	48
  2691     0D05  3430               	retlw	48
  2692     0D06  3430               	retlw	48
  2693     0D07  3400               	retlw	0
  2694                           
  2695                           ;initializer for _position_string
  2696     0D08  3430               	retlw	48
  2697     0D09  3430               	retlw	48
  2698     0D0A  3430               	retlw	48
  2699     0D0B  3400               	retlw	0
  2700                           
  2701                           	psect	idataBANK2
  2702     0E76                     __pidataBANK2:
  2703                           
  2704                           ;initializer for _uart_write_buffer
  2705     0E76  3424               	retlw	36
  2706     0E77  3431               	retlw	49
  2707     0E78  342C               	retlw	44
  2708     0E79  3431               	retlw	49
  2709     0E7A  342C               	retlw	44
  2710     0E7B  3430               	retlw	48
  2711     0E7C  342C               	retlw	44
  2712     0E7D  3430               	retlw	48
  2713     0E7E  3430               	retlw	48
  2714     0E7F  3430               	retlw	48
  2715     0E80  342C               	retlw	44
  2716     0E81  3479               	retlw	121
  2717     0E82  3430               	retlw	48
  2718     0E83  342E               	retlw	46
  2719     0E84  3430               	retlw	48
  2720     0E85  342C               	retlw	44
  2721     0E86  3454               	retlw	84
  2722     0E87  3454               	retlw	84
  2723     0E88  342E               	retlw	46
  2724     0E89  3454               	retlw	84
  2725     0E8A  340D               	retlw	13
  2726                           
  2727                           	psect	stringtext1
  2728     07FE                     __pstringtext1:
  2729     07FE                     _MATRIX_FLOOR:
  2730     07FE  3400               	retlw	0
  2731     07FF  3401               	retlw	1
  2732     0800  34FF               	retlw	255
  2733     0801  3441               	retlw	65
  2734     0802  3471               	retlw	113
  2735     0803  3489               	retlw	137
  2736     0804  3485               	retlw	133
  2737     0805  3443               	retlw	67
  2738     0806  347E               	retlw	126
  2739     0807  3489               	retlw	137
  2740     0808  3489               	retlw	137
  2741     0809  3442               	retlw	66
  2742     080A  3408               	retlw	8
  2743     080B  34FF               	retlw	255
  2744     080C  3448               	retlw	72
  2745     080D  3438               	retlw	56
  2746     080E                     __end_of_MATRIX_FLOOR:
  2747                           
  2748                           	psect	stringtext2
  2749     080E                     __pstringtext2:
  2750     080E                     _MATRIX_CONFIG:
  2751     080E  3409               	retlw	9
  2752     080F  3400               	retlw	0
  2753     0810  340A               	retlw	10
  2754     0811  3400               	retlw	0
  2755     0812  340B               	retlw	11
  2756     0813  3407               	retlw	7
  2757     0814  340C               	retlw	12
  2758     0815  3401               	retlw	1
  2759     0816  340F               	retlw	15
  2760     0817  3401               	retlw	1
  2761     0818  340F               	retlw	15
  2762     0819  3400               	retlw	0
  2763     081A                     __end_of_MATRIX_CONFIG:
  2764                           
  2765                           	psect	stringtext3
  2766     081A                     __pstringtext3:
  2767     081A                     _MATRIX_DIR:
  2768     081A  3440               	retlw	64
  2769     081B  3420               	retlw	32
  2770     081C  3440               	retlw	64
  2771     081D  3440               	retlw	64
  2772     081E  3480               	retlw	128
  2773     081F  3440               	retlw	64
  2774     0820  3440               	retlw	64
  2775     0821  3440               	retlw	64
  2776     0822  3440               	retlw	64
  2777     0823                     __end_of_MATRIX_DIR:
  2778                           
  2779                           	psect	stringtext4
  2780     0823                     __pstringtext4:
  2781     0823                     _FLOORS:
  2782     0823  3400               	retlw	0
  2783     0824  3401               	retlw	1
  2784     0825  3402               	retlw	2
  2785     0826  3403               	retlw	3
  2786     0827  3402               	retlw	2
  2787     0828  3401               	retlw	1
  2788     0829                     __end_of_FLOORS:
  2789                           
  2790                           	psect	stringtext5
  2791     0829                     __pstringtext5:
  2792     0829                     _spi1_configuration:
  2793     0829  3403               	retlw	3
  2794     082A  3440               	retlw	64
  2795     082B  3413               	retlw	19
  2796     082C  3400               	retlw	0
  2797     082D                     __end_of_spi1_configuration:
  2798                           
  2799                           	psect	nvBANK1
  2800     00DA                     __pnvBANK1:
  2801     00DA                     _TMR1_InterruptHandler:
  2802     00DA                     	ds	2
  2803     00DC                     _EUSART_ErrorHandler:
  2804     00DC                     	ds	2
  2805     00DE                     _EUSART_OverrunErrorHandler:
  2806     00DE                     	ds	2
  2807     00E0                     _EUSART_FramingErrorHandler:
  2808     00E0                     	ds	2
  2809     00E2                     _EUSART_RxDefaultInterruptHandler:
  2810     00E2                     	ds	2
  2811     00E4                     _IOCBF3_InterruptHandler:
  2812     00E4                     	ds	2
  2813     00E6                     _IOCBF0_InterruptHandler:
  2814     00E6                     	ds	2
  2815     0015                     _TMR0           set	21
  2816     0018                     _T1CONbits      set	24
  2817     0018                     _T1CON          set	24
  2818     0016                     _TMR1L          set	22
  2819     0017                     _TMR1H          set	23
  2820     0019                     _T1GCON         set	25
  2821     001C                     _T2CON          set	28
  2822     001A                     _TMR2           set	26
  2823     001B                     _PR2            set	27
  2824     0011                     _PIR1bits       set	17
  2825     0012                     _PIR2bits       set	18
  2826     000B                     _INTCONbits     set	11
  2827     0013                     _PIR3bits       set	19
  2828     0095                     _OPTION_REG     set	149
  2829     008D                     _TRISBbits      set	141
  2830     0091                     _PIE1bits       set	145
  2831     0092                     _PIE2bits       set	146
  2832     0095                     _OPTION_REGbits set	149
  2833     008D                     _TRISB          set	141
  2834     008C                     _TRISA          set	140
  2835     0097                     _WDTCON         set	151
  2836     0098                     _OSCTUNE        set	152
  2837     0099                     _OSCCON         set	153
  2838     010D                     _LATBbits       set	269
  2839     0114                     _CM2CON1        set	276
  2840     0113                     _CM2CON0        set	275
  2841     0117                     _FVRCON         set	279
  2842     0112                     _CM1CON1        set	274
  2843     0111                     _CM1CON0        set	273
  2844     011E                     _APFCON1        set	286
  2845     011D                     _APFCON0        set	285
  2846     010D                     _LATB           set	269
  2847     010C                     _LATA           set	268
  2848     0116                     _BORCON         set	278
  2849     010C                     _LATAbits       set	268
  2850     0199                     _RCREG          set	409
  2851     019D                     _RCSTAbits      set	413
  2852     019A                     _TXREG          set	410
  2853     019E                     _TXSTAbits      set	414
  2854     019C                     _SPBRGH         set	412
  2855     019B                     _SPBRGL         set	411
  2856     019E                     _TXSTA          set	414
  2857     019D                     _RCSTA          set	413
  2858     019F                     _BAUDCON        set	415
  2859     018C                     _ANSELA         set	396
  2860     018D                     _ANSELB         set	397
  2861     0211                     _SSP1BUF        set	529
  2862     0216                     _SSP1CON2       set	534
  2863     0215                     _SSP1CON1bits   set	533
  2864     0212                     _SSP1ADD        set	530
  2865     0215                     _SSP1CON1       set	533
  2866     0214                     _SSP1STAT       set	532
  2867     020C                     _WPUA           set	524
  2868     020D                     _WPUB           set	525
  2869     0298                     _CCPR2L         set	664
  2870     0299                     _CCPR2H         set	665
  2871     029A                     _CCP2CON        set	666
  2872     029E                     _CCPTMRS0bits   set	670
  2873     0313                     _CCP3CONbits    set	787
  2874     0312                     _CCPR3H         set	786
  2875     0311                     _CCPR3L         set	785
  2876     0313                     _CCP3CON        set	787
  2877     0394                     _IOCBPbits      set	916
  2878     0395                     _IOCBNbits      set	917
  2879     0396                     _IOCBFbits      set	918
  2880     041E                     _T6CON          set	1054
  2881     041C                     _TMR6           set	1052
  2882     041D                     _PR6            set	1053
  2883                           
  2884                           	psect	cinit
  2885     0041                     start_initialization:	
  2886                           ; #config settings
  2887                           
  2888     0041                     __initialization:
  2889                           
  2890                           ; Initialize objects allocated to BANK1
  2891     0041  3004               	movlw	low __pidataBANK1
  2892     0042  0084               	movwf	4
  2893     0043  308D               	movlw	(high __pidataBANK1)| (0+128)
  2894     0044  0085               	movwf	5
  2895     0045  30E8               	movlw	low __pdataBANK1
  2896     0046  0086               	movwf	6
  2897     0047  3000               	movlw	high __pdataBANK1
  2898     0048  0087               	movwf	7
  2899     0049  3008               	movlw	8
  2900     004A  318C  24E8  3180   	fcall	init_ram
  2901                           
  2902                           ; Initialize objects allocated to BANK2
  2903     004D  3076               	movlw	low __pidataBANK2
  2904     004E  0084               	movwf	4
  2905     004F  308E               	movlw	(high __pidataBANK2)| (0+128)
  2906     0050  0085               	movwf	5
  2907     0051  3020               	movlw	low __pdataBANK2
  2908     0052  0086               	movwf	6
  2909     0053  3001               	movlw	high __pdataBANK2
  2910     0054  0087               	movwf	7
  2911     0055  3015               	movlw	21
  2912     0056  318C  24E8  3180   	fcall	init_ram
  2913                           
  2914                           ; Clear objects allocated to BANK0
  2915     0059  3020               	movlw	low __pbssBANK0
  2916     005A  0084               	movwf	4
  2917     005B  3000               	movlw	high __pbssBANK0
  2918     005C  0085               	movwf	5
  2919     005D  301E               	movlw	30
  2920     005E  318C  24E2  3180   	fcall	clear_ram0
  2921                           
  2922                           ; Clear objects allocated to BANK1
  2923     0061  30A0               	movlw	low __pbssBANK1
  2924     0062  0084               	movwf	4
  2925     0063  3000               	movlw	high __pbssBANK1
  2926     0064  0085               	movwf	5
  2927     0065  3025               	movlw	37
  2928     0066  318C  24E2         	fcall	clear_ram0
  2929     0068                     end_of_initialization:	
  2930                           ;End of C runtime variable initialization code
  2931                           
  2932     0068                     __end_of__initialization:
  2933     0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2934     0069  0020               	movlb	0
  2935     006A  3183  2B0B         	ljmp	_main	;jump to C main() function
  2936                           
  2937                           	psect	bssBANK0
  2938     0020                     __pbssBANK0:
  2939     0020                     _route:
  2940     0020                     	ds	6
  2941     0026                     _uart_read_buffer_count:
  2942     0026                     	ds	2
  2943     0028                     TMR1_ISR@CountCallBack:
  2944     0028                     	ds	2
  2945     002A                     _timer1ReloadVal:
  2946     002A                     	ds	2
  2947     002C                     _velocidade:
  2948     002C                     	ds	2
  2949     002E                     _positionf:
  2950     002E                     	ds	2
  2951     0030                     _position0:
  2952     0030                     	ds	2
  2953     0032                     _position:
  2954     0032                     	ds	2
  2955     0034                     _timer0ReloadVal:
  2956     0034                     	ds	1
  2957     0035                     _eusartRxLastError:
  2958     0035                     	ds	1
  2959     0036                     _eusartRxCount:
  2960     0036                     	ds	1
  2961     0037                     _eusartRxTail:
  2962     0037                     	ds	1
  2963     0038                     _eusartRxHead:
  2964     0038                     	ds	1
  2965     0039                     _idle:
  2966     0039                     	ds	1
  2967     003A                     _stop_2s:
  2968     003A                     	ds	1
  2969     003B                     _next_floor:
  2970     003B                     	ds	1
  2971     003C                     _current_floor:
  2972     003C                     	ds	1
  2973     003D                     _index:
  2974     003D                     	ds	1
  2975                           
  2976                           	psect	bssBANK1
  2977     00A0                     __pbssBANK1:
  2978     00A0                     _uart_read_buffer:
  2979     00A0                     	ds	10
  2980     00AA                     _eusartRxStatusBuffer:
  2981     00AA                     	ds	8
  2982     00B2                     _eusartRxBuffer:
  2983     00B2                     	ds	8
  2984     00BA                     _var:
  2985     00BA                     	ds	7
  2986     00C1                     _descida:
  2987     00C1                     	ds	2
  2988     00C3                     _subida:
  2989     00C3                     	ds	2
  2990                           
  2991                           	psect	dataBANK1
  2992     00E8                     __pdataBANK1:
  2993     00E8                     _velocidade_string:
  2994     00E8                     	ds	4
  2995     00EC                     _position_string:
  2996     00EC                     	ds	4
  2997                           
  2998                           	psect	dataBANK2
  2999     0120                     __pdataBANK2:
  3000     0120                     _uart_write_buffer:
  3001     0120                     	ds	21
  3002                           
  3003                           	psect	inittext
  3004     0CE8                     init_ram:
  3005     0CE8  00FE               	movwf	126
  3006     0CE9                     initloop:
  3007     0CE9  0012               	moviw fsr0++
  3008     0CEA  001E               	movwi fsr1++
  3009     0CEB  0BFE               	decfsz	126,f
  3010     0CEC  2CE9               	goto	initloop
  3011     0CED  3400               	retlw	0
  3012                           
  3013                           	psect	clrtext
  3014     0CE2                     clear_ram0:	
  3015                           ;	Called with FSR0 containing the base address, and
  3016                           ;	WREG with the size to clear
  3017                           
  3018     0CE2  0064               	clrwdt	;clear the watchdog before getting into this loop
  3019     0CE3                     clrloop0:
  3020     0CE3  0180               	clrf	0	;clear RAM location pointed to by FSR
  3021     0CE4  3101               	addfsr 0,1
  3022     0CE5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3023     0CE6  2CE3               	goto	clrloop0	;have we reached the end yet?
  3024     0CE7  3400               	retlw	0	;all done for this memory range, return
  3025                           
  3026                           	psect	cstackBANK2
  3027     0135                     __pcstackBANK2:
  3028     0135                     ??_main:
  3029                           
  3030                           ; 1 bytes @ 0x0
  3031     0135                     	ds	2
  3032     0137                     main@next_index:
  3033                           
  3034                           ; 2 bytes @ 0x2
  3035     0137                     	ds	2
  3036     0139                     main@is_empty:
  3037                           
  3038                           ; 1 bytes @ 0x4
  3039     0139                     	ds	1
  3040                           
  3041                           	psect	cstackBANK1
  3042     00C5                     __pcstackBANK1:
  3043     00C5                     ?_IOCBF0_SetInterruptHandler:
  3044     00C5                     ?_IOCBF3_SetInterruptHandler:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047     00C5                     ?_EUSART_SetRxInterruptHandler:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050     00C5                     ?_EUSART_SetFramingErrorHandler:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053     00C5                     ?_EUSART_SetOverrunErrorHandler:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056     00C5                     ?_EUSART_SetErrorHandler:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059     00C5                     ?_TMR1_SetInterruptHandler:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062     00C5                     ?_SPI1_ExchangeBlock:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065     00C5                     ?___bmul:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068     00C5                     ?___awmod:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071     00C5                     SPI1_ExchangeBlock@block:	
  3072                           ; 2 bytes @ 0x0
  3073                           
  3074     00C5                     TMR0_WriteTimer@timerVal:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077     00C5                     ___bmul@multiplicand:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080     00C5                     IOCBF0_SetInterruptHandler@InterruptHandler:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083     00C5                     IOCBF3_SetInterruptHandler@InterruptHandler:	
  3084                           ; 2 bytes @ 0x0
  3085                           
  3086     00C5                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3087                           ; 2 bytes @ 0x0
  3088                           
  3089     00C5                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3090                           ; 2 bytes @ 0x0
  3091                           
  3092     00C5                     EUSART_SetErrorHandler@interruptHandler:	
  3093                           ; 2 bytes @ 0x0
  3094                           
  3095     00C5                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3096                           ; 2 bytes @ 0x0
  3097                           
  3098     00C5                     TMR1_SetInterruptHandler@InterruptHandler:	
  3099                           ; 2 bytes @ 0x0
  3100                           
  3101     00C5                     ___awmod@divisor:	
  3102                           ; 2 bytes @ 0x0
  3103                           
  3104     00C5                     ??_SPI1_Initialize:	
  3105                           ; 2 bytes @ 0x0
  3106                           
  3107     00C5                     ??_OSCILLATOR_Initialize:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110     00C5                     ??_WDT_Initialize:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113     00C5                     ??_CMP2_Initialize:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116     00C5                     ??_ECCP2_Initialize:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119     00C5                     ??_FVR_Initialize:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122     00C5                     ??_TMR2_Initialize:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125     00C5                     ??_TMR0_Initialize:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128     00C5                     ??_TMR6_Initialize:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131     00C5                     ??_CMP1_Initialize:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134     00C5                     ??_PWM3_Initialize:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137     00C5                     ??_SPI1_Open:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140     00C5                     ??_TMR0_WriteTimer:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143     00C5                     ??_Route_empty:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146                           
  3147                           ; 1 bytes @ 0x0
  3148     00C5                     	ds	1
  3149     00C6                     ___bmul@product:
  3150     00C6                     SPI1_ExchangeBlock@blockSize:	
  3151                           ; 1 bytes @ 0x1
  3152                           
  3153     00C6                     Route_empty@i:	
  3154                           ; 2 bytes @ 0x1
  3155                           
  3156     00C6                     ??___bmul:	
  3157                           ; 2 bytes @ 0x1
  3158                           
  3159                           
  3160                           ; 1 bytes @ 0x1
  3161     00C6                     	ds	1
  3162     00C7                     ___bmul@multiplier:
  3163     00C7                     ___awmod@dividend:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166     00C7                     ??_PIN_MANAGER_Initialize:	
  3167                           ; 2 bytes @ 0x2
  3168                           
  3169     00C7                     ??_TMR1_Initialize:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172     00C7                     ??_EUSART_Initialize:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175     00C7                     ??_IOCBF0_SetInterruptHandler:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178     00C7                     ??_IOCBF3_SetInterruptHandler:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181     00C7                     ??_EUSART_SetRxInterruptHandler:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184     00C7                     ??_EUSART_SetFramingErrorHandler:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187     00C7                     ??_EUSART_SetOverrunErrorHandler:	
  3188                           ; 1 bytes @ 0x2
  3189                           
  3190     00C7                     ??_EUSART_SetErrorHandler:	
  3191                           ; 1 bytes @ 0x2
  3192                           
  3193     00C7                     ??_TMR1_SetInterruptHandler:	
  3194                           ; 1 bytes @ 0x2
  3195                           
  3196     00C7                     ??_SYSTEM_Initialize:	
  3197                           ; 1 bytes @ 0x2
  3198                           
  3199                           
  3200                           ; 1 bytes @ 0x2
  3201     00C7                     	ds	1
  3202     00C8                     SPI1_Open@spi1UniqueConfiguration:
  3203     00C8                     SPI1_ExchangeBlock@data:	
  3204                           ; 1 bytes @ 0x3
  3205                           
  3206     00C8                     ??_SPI1_ExchangeBlock:	
  3207                           ; 1 bytes @ 0x3
  3208                           
  3209                           
  3210                           ; 1 bytes @ 0x3
  3211     00C8                     	ds	1
  3212     00C9                     ?_Tx_spi:
  3213     00C9                     Tx_spi@data:	
  3214                           ; 1 bytes @ 0x4
  3215                           
  3216     00C9                     ___awmod@counter:	
  3217                           ; 1 bytes @ 0x4
  3218                           
  3219     00C9                     ??___awmod:	
  3220                           ; 1 bytes @ 0x4
  3221                           
  3222                           
  3223                           ; 1 bytes @ 0x4
  3224     00C9                     	ds	1
  3225     00CA                     ___awmod@sign:
  3226     00CA                     Tx_spi@dataSize:	
  3227                           ; 1 bytes @ 0x5
  3228                           
  3229                           
  3230                           ; 2 bytes @ 0x5
  3231     00CA                     	ds	1
  3232     00CB                     ??_Next_index:
  3233     00CB                     ??_Next_floor:	
  3234                           ; 1 bytes @ 0x6
  3235                           
  3236                           
  3237                           ; 1 bytes @ 0x6
  3238     00CB                     	ds	1
  3239     00CC                     Ini_matrix@i:
  3240     00CC                     Next_index@index_:	
  3241                           ; 1 bytes @ 0x7
  3242                           
  3243     00CC                     Next_floor@index_:	
  3244                           ; 2 bytes @ 0x7
  3245                           
  3246     00CC                     ??_Matrix_update_dir:	
  3247                           ; 2 bytes @ 0x7
  3248                           
  3249     00CC                     ??_Matrix_update_floor:	
  3250                           ; 1 bytes @ 0x7
  3251                           
  3252     00CC                     ??_Tx_spi:	
  3253                           ; 1 bytes @ 0x7
  3254                           
  3255     00CC                     ??_Ini_matrix:	
  3256                           ; 1 bytes @ 0x7
  3257                           
  3258                           
  3259                           ; 1 bytes @ 0x7
  3260     00CC                     	ds	1
  3261     00CD                     Ini_matrix@data:
  3262     00CD                     Matrix_update_floor@data:	
  3263                           ; 2 bytes @ 0x8
  3264                           
  3265     00CD                     Matrix_update_dir@route_:	
  3266                           ; 2 bytes @ 0x8
  3267                           
  3268                           
  3269                           ; 4 bytes @ 0x8
  3270     00CD                     	ds	1
  3271     00CE                     Next_index@i:
  3272     00CE                     Next_floor@i:	
  3273                           ; 2 bytes @ 0x9
  3274                           
  3275                           
  3276                           ; 2 bytes @ 0x9
  3277     00CE                     	ds	1
  3278     00CF                     Ini_matrix@k:
  3279     00CF                     Matrix_update_floor@display_floor:	
  3280                           ; 1 bytes @ 0xA
  3281                           
  3282                           
  3283                           ; 1 bytes @ 0xA
  3284     00CF                     	ds	1
  3285     00D0                     Ini_matrix@i_1697:
  3286     00D0                     Matrix_update_floor@i:	
  3287                           ; 1 bytes @ 0xB
  3288                           
  3289                           
  3290                           ; 1 bytes @ 0xB
  3291     00D0                     	ds	1
  3292     00D1                     Matrix_update_dir@mask:
  3293                           
  3294                           ; 1 bytes @ 0xC
  3295     00D1                     	ds	1
  3296     00D2                     Matrix_update_dir@display_dir:
  3297                           
  3298                           ; 1 bytes @ 0xD
  3299     00D2                     	ds	1
  3300     00D3                     Matrix_update_dir@data:
  3301                           
  3302                           ; 2 bytes @ 0xE
  3303     00D3                     	ds	2
  3304     00D5                     Matrix_update_dir@i_1708:
  3305                           
  3306                           ; 1 bytes @ 0x10
  3307     00D5                     	ds	1
  3308     00D6                     Matrix_update_dir@i:
  3309                           
  3310                           ; 2 bytes @ 0x11
  3311     00D6                     	ds	2
  3312     00D8                     ??_Motor_Turn_Off:
  3313     00D8                     ??_Motor_Turn_On:	
  3314                           ; 1 bytes @ 0x13
  3315                           
  3316     00D8                     ??_Start:	
  3317                           ; 1 bytes @ 0x13
  3318                           
  3319     00D8                     ??_Idle:	
  3320                           ; 1 bytes @ 0x13
  3321                           
  3322                           
  3323                           ; 1 bytes @ 0x13
  3324     00D8                     	ds	2
  3325                           
  3326                           	psect	cstackCOMMON
  3327     0070                     __pcstackCOMMON:
  3328     0070                     ?_SPI1_Initialize:
  3329     0070                     ?_PIN_MANAGER_Initialize:	
  3330                           ; 1 bytes @ 0x0
  3331                           
  3332     0070                     ?_OSCILLATOR_Initialize:	
  3333                           ; 1 bytes @ 0x0
  3334                           
  3335     0070                     ?_WDT_Initialize:	
  3336                           ; 1 bytes @ 0x0
  3337                           
  3338     0070                     ?_CMP2_Initialize:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341     0070                     ?_ECCP2_Initialize:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344     0070                     ?_FVR_Initialize:	
  3345                           ; 1 bytes @ 0x0
  3346                           
  3347     0070                     ?_TMR2_Initialize:	
  3348                           ; 1 bytes @ 0x0
  3349                           
  3350     0070                     ?_TMR0_Initialize:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353     0070                     ?_TMR6_Initialize:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356     0070                     ?_CMP1_Initialize:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359     0070                     ?_PWM3_Initialize:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362     0070                     ?_TMR1_Initialize:	
  3363                           ; 1 bytes @ 0x0
  3364                           
  3365     0070                     ?_EUSART_Initialize:	
  3366                           ; 1 bytes @ 0x0
  3367                           
  3368     0070                     ?_IOCBF0_DefaultInterruptHandler:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371     0070                     ?_IOCBF3_DefaultInterruptHandler:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374     0070                     ?_IOCBF0_ISR:	
  3375                           ; 1 bytes @ 0x0
  3376                           
  3377     0070                     ?_IOCBF3_ISR:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380     0070                     ?_ECCP2_CaptureISR:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383     0070                     ?_CMP1_ISR:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386     0070                     ?_CMP2_ISR:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389     0070                     ?_TMR1_ISR:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392     0070                     ?_ISR_Floor3:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395     0070                     ?_ISR_Floor4:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398     0070                     ?_EUSART_Receive_ISR:	
  3399                           ; 1 bytes @ 0x0
  3400                           
  3401     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407     0070                     ?_EUSART_DefaultErrorHandler:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410     0070                     ?_EUSART_RxDataHandler:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413     0070                     ?_TMR1_DefaultInterruptHandler:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416     0070                     ?_TMR1_CallBack:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419     0070                     ?_ECCP2_CallBack:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422     0070                     ?_Matrix_update_dir:	
  3423                           ; 1 bytes @ 0x0
  3424                           
  3425     0070                     ?_Matrix_update_floor:	
  3426                           ; 1 bytes @ 0x0
  3427                           
  3428     0070                     ?_SYSTEM_Initialize:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431     0070                     ?_PIN_MANAGER_IOC:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434     0070                     ?_INTERRUPT_InterruptManager:	
  3435                           ; 1 bytes @ 0x0
  3436                           
  3437     0070                     ?_SPI1_Open:	
  3438                           ; 1 bytes @ 0x0
  3439                           
  3440     0070                     ?_EUSART_is_tx_ready:	
  3441                           ; 1 bytes @ 0x0
  3442                           
  3443     0070                     ?_EUSART_Read:	
  3444                           ; 1 bytes @ 0x0
  3445                           
  3446     0070                     ?_EUSART_Write:	
  3447                           ; 1 bytes @ 0x0
  3448                           
  3449     0070                     ?_TMR1_WriteTimer:	
  3450                           ; 1 bytes @ 0x0
  3451                           
  3452     0070                     ?_TMR0_ReadTimer:	
  3453                           ; 1 bytes @ 0x0
  3454                           
  3455     0070                     ?_TMR0_WriteTimer:	
  3456                           ; 1 bytes @ 0x0
  3457                           
  3458     0070                     ?_Motor_Turn_Off:	
  3459                           ; 1 bytes @ 0x0
  3460                           
  3461     0070                     ?_Motor_Turn_On:	
  3462                           ; 1 bytes @ 0x0
  3463                           
  3464     0070                     ?_Read_UART:	
  3465                           ; 1 bytes @ 0x0
  3466                           
  3467     0070                     ?_Update_tx_buffer:	
  3468                           ; 1 bytes @ 0x0
  3469                           
  3470     0070                     ?_Write_UART:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473     0070                     ?_Route_empty:	
  3474                           ; 1 bytes @ 0x0
  3475                           
  3476     0070                     ?_Next_index:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479     0070                     ?_Next_floor:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482     0070                     ?_Start:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485     0070                     ?_Idle:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488     0070                     ?_Ini_matrix:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491     0070                     ?_ISR_Floor2:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494     0070                     ?_ISR_Floor1:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497     0070                     ?_main:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500     0070                     ?___lbdiv:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503     0070                     ?i1_SPI1_ExchangeBlock:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506     0070                     ?i1_TMR0_WriteTimer:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509     0070                     ?i1_Matrix_update_floor:	
  3510                           ; 1 bytes @ 0x0
  3511                           
  3512     0070                     ?i1_Matrix_update_dir:	
  3513                           ; 1 bytes @ 0x0
  3514                           
  3515     0070                     ?i1___bmul:	
  3516                           ; 1 bytes @ 0x0
  3517                           
  3518     0070                     ?i1___awmod:	
  3519                           ; 1 bytes @ 0x0
  3520                           
  3521     0070                     EUSART_Read@readValue:	
  3522                           ; 2 bytes @ 0x0
  3523                           
  3524     0070                     EUSART_Write@txData:	
  3525                           ; 1 bytes @ 0x0
  3526                           
  3527     0070                     TMR0_ReadTimer@readVal:	
  3528                           ; 1 bytes @ 0x0
  3529                           
  3530     0070                     ___lbdiv@divisor:	
  3531                           ; 1 bytes @ 0x0
  3532                           
  3533     0070                     i1SPI1_ExchangeBlock@block:	
  3534                           ; 1 bytes @ 0x0
  3535                           
  3536     0070                     i1TMR0_WriteTimer@timerVal:	
  3537                           ; 1 bytes @ 0x0
  3538                           
  3539     0070                     i1___bmul@multiplicand:	
  3540                           ; 1 bytes @ 0x0
  3541                           
  3542     0070                     TMR1_WriteTimer@timerVal:	
  3543                           ; 1 bytes @ 0x0
  3544                           
  3545     0070                     ECCP2_CallBack@capturedValue:	
  3546                           ; 2 bytes @ 0x0
  3547                           
  3548     0070                     i1___awmod@divisor:	
  3549                           ; 2 bytes @ 0x0
  3550                           
  3551     0070                     ??_IOCBF0_DefaultInterruptHandler:	
  3552                           ; 2 bytes @ 0x0
  3553                           
  3554     0070                     ??_IOCBF3_DefaultInterruptHandler:	
  3555                           ; 1 bytes @ 0x0
  3556                           
  3557     0070                     ??_EUSART_Receive_ISR:	
  3558                           ; 1 bytes @ 0x0
  3559                           
  3560     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3561                           ; 1 bytes @ 0x0
  3562                           
  3563     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3564                           ; 1 bytes @ 0x0
  3565                           
  3566     0070                     ??_EUSART_DefaultErrorHandler:	
  3567                           ; 1 bytes @ 0x0
  3568                           
  3569     0070                     ??_EUSART_RxDataHandler:	
  3570                           ; 1 bytes @ 0x0
  3571                           
  3572     0070                     ??_TMR1_DefaultInterruptHandler:	
  3573                           ; 1 bytes @ 0x0
  3574                           
  3575     0070                     ??_EUSART_is_tx_ready:	
  3576                           ; 1 bytes @ 0x0
  3577                           
  3578     0070                     ??_EUSART_Read:	
  3579                           ; 1 bytes @ 0x0
  3580                           
  3581     0070                     ??_EUSART_Write:	
  3582                           ; 1 bytes @ 0x0
  3583                           
  3584     0070                     ??_TMR0_ReadTimer:	
  3585                           ; 1 bytes @ 0x0
  3586                           
  3587     0070                     ??i1_TMR0_WriteTimer:	
  3588                           ; 1 bytes @ 0x0
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x0
  3592     0070                     	ds	1
  3593     0071                     ?___wmul:
  3594     0071                     ___lbdiv@dividend:	
  3595                           ; 2 bytes @ 0x1
  3596                           
  3597     0071                     i1___bmul@product:	
  3598                           ; 1 bytes @ 0x1
  3599                           
  3600     0071                     ___wmul@multiplier:	
  3601                           ; 1 bytes @ 0x1
  3602                           
  3603     0071                     i1SPI1_ExchangeBlock@blockSize:	
  3604                           ; 2 bytes @ 0x1
  3605                           
  3606     0071                     ??___lbdiv:	
  3607                           ; 2 bytes @ 0x1
  3608                           
  3609     0071                     ??i1___bmul:	
  3610                           ; 1 bytes @ 0x1
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x1
  3614     0071                     	ds	1
  3615     0072                     ___lbdiv@counter:
  3616     0072                     i1___bmul@multiplier:	
  3617                           ; 1 bytes @ 0x2
  3618                           
  3619     0072                     ECCP2_CaptureISR@module:	
  3620                           ; 1 bytes @ 0x2
  3621                           
  3622     0072                     i1___awmod@dividend:	
  3623                           ; 2 bytes @ 0x2
  3624                           
  3625     0072                     ??_ECCP2_CaptureISR:	
  3626                           ; 2 bytes @ 0x2
  3627                           
  3628     0072                     ??_ECCP2_CallBack:	
  3629                           ; 1 bytes @ 0x2
  3630                           
  3631     0072                     ??_TMR1_WriteTimer:	
  3632                           ; 1 bytes @ 0x2
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0x2
  3636     0072                     	ds	1
  3637     0073                     ___lbdiv@quotient:
  3638     0073                     i1SPI1_ExchangeBlock@data:	
  3639                           ; 1 bytes @ 0x3
  3640                           
  3641     0073                     ___wmul@multiplicand:	
  3642                           ; 1 bytes @ 0x3
  3643                           
  3644     0073                     ??i1_SPI1_ExchangeBlock:	
  3645                           ; 2 bytes @ 0x3
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0x3
  3649     0073                     	ds	1
  3650     0074                     ?___lbmod:
  3651     0074                     ?i1_Tx_spi:	
  3652                           ; 1 bytes @ 0x4
  3653                           
  3654     0074                     ___lbmod@divisor:	
  3655                           ; 1 bytes @ 0x4
  3656                           
  3657     0074                     i1Tx_spi@data:	
  3658                           ; 1 bytes @ 0x4
  3659                           
  3660     0074                     i1___awmod@counter:	
  3661                           ; 1 bytes @ 0x4
  3662                           
  3663     0074                     ??i1___awmod:	
  3664                           ; 1 bytes @ 0x4
  3665                           
  3666                           
  3667                           ; 1 bytes @ 0x4
  3668     0074                     	ds	1
  3669     0075                     i1___awmod@sign:
  3670     0075                     ___wmul@product:	
  3671                           ; 1 bytes @ 0x5
  3672                           
  3673     0075                     i1Tx_spi@dataSize:	
  3674                           ; 2 bytes @ 0x5
  3675                           
  3676     0075                     ??___wmul:	
  3677                           ; 2 bytes @ 0x5
  3678                           
  3679     0075                     ??___lbmod:	
  3680                           ; 1 bytes @ 0x5
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x5
  3684     0075                     	ds	1
  3685     0076                     ___lbmod@dividend:
  3686                           
  3687                           ; 1 bytes @ 0x6
  3688     0076                     	ds	1
  3689     0077                     ?___awdiv:
  3690     0077                     ?___lwdiv:	
  3691                           ; 2 bytes @ 0x7
  3692                           
  3693     0077                     ___lbmod@counter:	
  3694                           ; 2 bytes @ 0x7
  3695                           
  3696     0077                     ___awdiv@divisor:	
  3697                           ; 1 bytes @ 0x7
  3698                           
  3699     0077                     ___lwdiv@divisor:	
  3700                           ; 2 bytes @ 0x7
  3701                           
  3702     0077                     ??i1_Tx_spi:	
  3703                           ; 2 bytes @ 0x7
  3704                           
  3705     0077                     ??i1_Matrix_update_floor:	
  3706                           ; 1 bytes @ 0x7
  3707                           
  3708     0077                     ??i1_Matrix_update_dir:	
  3709                           ; 1 bytes @ 0x7
  3710                           
  3711                           
  3712                           ; 1 bytes @ 0x7
  3713     0077                     	ds	1
  3714     0078                     ?_New_request:
  3715     0078                     ___lbmod@rem:	
  3716                           ; 1 bytes @ 0x8
  3717                           
  3718     0078                     New_request@origin:	
  3719                           ; 1 bytes @ 0x8
  3720                           
  3721     0078                     i1Matrix_update_floor@data:	
  3722                           ; 2 bytes @ 0x8
  3723                           
  3724                           
  3725                           ; 2 bytes @ 0x8
  3726     0078                     	ds	1
  3727     0079                     ___awdiv@dividend:
  3728     0079                     ___lwdiv@dividend:	
  3729                           ; 2 bytes @ 0x9
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0x9
  3733     0079                     	ds	1
  3734     007A                     i1Matrix_update_floor@display_floor:
  3735     007A                     New_request@dest:	
  3736                           ; 1 bytes @ 0xA
  3737                           
  3738                           
  3739                           ; 2 bytes @ 0xA
  3740     007A                     	ds	1
  3741     007B                     i1Matrix_update_floor@i:
  3742     007B                     ___lwdiv@quotient:	
  3743                           ; 1 bytes @ 0xB
  3744                           
  3745     007B                     ??___awdiv:	
  3746                           ; 2 bytes @ 0xB
  3747                           
  3748     007B                     ??___lwdiv:	
  3749                           ; 1 bytes @ 0xB
  3750                           
  3751                           
  3752                           ; 1 bytes @ 0xB
  3753     007B                     	ds	1
  3754     007C                     ??_IOCBF0_ISR:
  3755     007C                     ??_IOCBF3_ISR:	
  3756                           ; 1 bytes @ 0xC
  3757                           
  3758     007C                     ??_CMP1_ISR:	
  3759                           ; 1 bytes @ 0xC
  3760                           
  3761     007C                     ??_CMP2_ISR:	
  3762                           ; 1 bytes @ 0xC
  3763                           
  3764     007C                     ??_ISR_Floor3:	
  3765                           ; 1 bytes @ 0xC
  3766                           
  3767     007C                     ??_ISR_Floor4:	
  3768                           ; 1 bytes @ 0xC
  3769                           
  3770     007C                     ??_PIN_MANAGER_IOC:	
  3771                           ; 1 bytes @ 0xC
  3772                           
  3773     007C                     ??_Read_UART:	
  3774                           ; 1 bytes @ 0xC
  3775                           
  3776     007C                     ??_ISR_Floor2:	
  3777                           ; 1 bytes @ 0xC
  3778                           
  3779     007C                     ??_ISR_Floor1:	
  3780                           ; 1 bytes @ 0xC
  3781                           
  3782                           
  3783                           ; 1 bytes @ 0xC
  3784     007C                     	ds	1
  3785     007D                     ___lwdiv@counter:
  3786                           
  3787                           ; 1 bytes @ 0xD
  3788     007D                     	ds	1
  3789     007E                     ??_TMR1_ISR:
  3790     007E                     ??_TMR1_CallBack:	
  3791                           ; 1 bytes @ 0xE
  3792                           
  3793     007E                     ??_INTERRUPT_InterruptManager:	
  3794                           ; 1 bytes @ 0xE
  3795                           
  3796     007E                     ??___lwmod:	
  3797                           ; 1 bytes @ 0xE
  3798                           
  3799                           
  3800                           	psect	cstackBANK0
  3801     003E                     __pcstackBANK0:	
  3802                           ; 1 bytes @ 0xE
  3803                           
  3804     003E                     ?___lwmod:
  3805     003E                     ___awdiv@counter:	
  3806                           ; 2 bytes @ 0x0
  3807                           
  3808     003E                     ___lwmod@divisor:	
  3809                           ; 1 bytes @ 0x0
  3810                           
  3811     003E                     i1Matrix_update_dir@route_:	
  3812                           ; 2 bytes @ 0x0
  3813                           
  3814                           
  3815                           ; 4 bytes @ 0x0
  3816     003E                     	ds	1
  3817     003F                     ___awdiv@sign:
  3818                           
  3819                           ; 1 bytes @ 0x1
  3820     003F                     	ds	1
  3821     0040                     ___awdiv@quotient:
  3822     0040                     ___lwmod@dividend:	
  3823                           ; 2 bytes @ 0x2
  3824                           
  3825                           
  3826                           ; 2 bytes @ 0x2
  3827     0040                     	ds	2
  3828     0042                     ___lwmod@counter:
  3829     0042                     i1Matrix_update_dir@mask:	
  3830                           ; 1 bytes @ 0x4
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x4
  3834     0042                     	ds	1
  3835     0043                     i1Matrix_update_dir@data:
  3836     0043                     ??_Update_tx_buffer:	
  3837                           ; 2 bytes @ 0x5
  3838                           
  3839                           
  3840                           ; 1 bytes @ 0x5
  3841     0043                     	ds	2
  3842     0045                     i1Matrix_update_dir@display_dir:
  3843     0045                     ??_Write_UART:	
  3844                           ; 1 bytes @ 0x7
  3845                           
  3846                           
  3847                           ; 1 bytes @ 0x7
  3848     0045                     	ds	1
  3849     0046                     i1Matrix_update_dir@i_1708:
  3850     0046                     Write_UART@i:	
  3851                           ; 1 bytes @ 0x8
  3852                           
  3853                           
  3854                           ; 2 bytes @ 0x8
  3855     0046                     	ds	1
  3856     0047                     i1Matrix_update_dir@i:
  3857                           
  3858                           ; 2 bytes @ 0x9
  3859     0047                     	ds	2
  3860     0049                     ??_New_request:
  3861                           
  3862                           ; 1 bytes @ 0xB
  3863     0049                     	ds	3
  3864     004C                     New_request@index_ori:
  3865                           
  3866                           ; 2 bytes @ 0xE
  3867     004C                     	ds	2
  3868     004E                     New_request@i:
  3869                           
  3870                           ; 2 bytes @ 0x10
  3871     004E                     	ds	2
  3872     0050                     New_request@i_1650:
  3873                           
  3874                           ; 2 bytes @ 0x12
  3875     0050                     	ds	2
  3876     0052                     New_request@i_1651:
  3877                           
  3878                           ; 2 bytes @ 0x14
  3879     0052                     	ds	2
  3880     0054                     New_request@i_1652:
  3881                           
  3882                           ; 2 bytes @ 0x16
  3883     0054                     	ds	2
  3884     0056                     New_request@index_:
  3885                           
  3886                           ; 2 bytes @ 0x18
  3887     0056                     	ds	2
  3888     0058                     Read_UART@ori:
  3889                           
  3890                           ; 2 bytes @ 0x1A
  3891     0058                     	ds	2
  3892     005A                     Read_UART@dest:
  3893                           
  3894                           ; 2 bytes @ 0x1C
  3895     005A                     	ds	2
  3896                           
  3897                           	psect	maintext
  3898     030B                     __pmaintext:	
  3899 ;;
  3900 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3901 ;;
  3902 ;; *************** function _main *****************
  3903 ;; Defined at:
  3904 ;;		line 328 in file "main.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  is_empty        1    4[BANK2 ] _Bool 
  3909 ;;  next_index      2    2[BANK2 ] int 
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : B1F/0
  3916 ;;		On exit  : 18/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3919 ;;      Params:         0       0       0       0       0       0
  3920 ;;      Locals:         0       0       0       3       0       0
  3921 ;;      Temps:          0       0       0       2       0       0
  3922 ;;      Totals:         0       0       0       5       0       0
  3923 ;;Total ram usage:        5 bytes
  3924 ;; Hardware stack levels required when called: 12
  3925 ;; This function calls:
  3926 ;;		_EUSART_SetRxInterruptHandler
  3927 ;;		_IOCBF0_SetInterruptHandler
  3928 ;;		_IOCBF3_SetInterruptHandler
  3929 ;;		_Idle
  3930 ;;		_Ini_matrix
  3931 ;;		_Motor_Turn_Off
  3932 ;;		_Motor_Turn_On
  3933 ;;		_Next_floor
  3934 ;;		_Next_index
  3935 ;;		_Route_empty
  3936 ;;		_SPI1_Open
  3937 ;;		_SYSTEM_Initialize
  3938 ;;		_Start
  3939 ;;		_TMR1_SetInterruptHandler
  3940 ;; This function is called by:
  3941 ;;		Startup code after reset
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945     030B                     _main:	
  3946                           ;psect for function _main
  3947                           
  3948                           
  3949                           ;main.c: 330:     SYSTEM_Initialize();
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3953     030B  3187  27AA  3183   	fcall	_SYSTEM_Initialize
  3954                           
  3955                           ;main.c: 332:     IOCBF0_SetInterruptHandler(ISR_Floor1);
  3956     030E  302B               	movlw	low _ISR_Floor1
  3957     030F  00C5               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  3958     0310  300E               	movlw	high _ISR_Floor1
  3959     0311  00C6               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3960     0312  318C  24C7  3183   	fcall	_IOCBF0_SetInterruptHandler
  3961                           
  3962                           ;main.c: 333:     IOCBF3_SetInterruptHandler(ISR_Floor2);
  3963     0315  3061               	movlw	low _ISR_Floor2
  3964     0316  00C5               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  3965     0317  300E               	movlw	high _ISR_Floor2
  3966     0318  00C6               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3967     0319  318C  24CC  3183   	fcall	_IOCBF3_SetInterruptHandler
  3968                           
  3969                           ;main.c: 334:     EUSART_SetRxInterruptHandler(Read_UART);
  3970     031C  3083               	movlw	low _Read_UART
  3971     031D  00C5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  3972     031E  3005               	movlw	high _Read_UART
  3973     031F  00C6               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  3974     0320  318C  24C2  3183   	fcall	_EUSART_SetRxInterruptHandler
  3975                           
  3976                           ;main.c: 335:     TMR1_SetInterruptHandler(Write_UART);
  3977     0323  30B4               	movlw	low _Write_UART
  3978     0324  00C5               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  3979     0325  300F               	movlw	high _Write_UART
  3980     0326  00C6               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3981     0327  318C  24D1  3183   	fcall	_TMR1_SetInterruptHandler
  3982     032A  0022               	movlb	2	; select bank2
  3983     032B  148D               	bsf	13,1	;volatile
  3984                           
  3985                           ;main.c: 337:     SPI1_Open(SPI1_DEFAULT);
  3986     032C  3000               	movlw	0
  3987     032D  3184  249D  3183   	fcall	_SPI1_Open
  3988                           
  3989                           ;main.c: 338:     Ini_matrix();
  3990     0330  3186  2648  3183   	fcall	_Ini_matrix
  3991                           
  3992                           ;main.c: 341:     Start();
  3993     0333  318F  2791  3183   	fcall	_Start
  3994                           
  3995                           ;main.c: 343:     (INTCONbits.GIE = 1);
  3996     0336  178B               	bsf	11,7	;volatile
  3997                           
  3998                           ;main.c: 344:     (INTCONbits.PEIE = 1);
  3999     0337  170B               	bsf	11,6	;volatile
  4000     0338  2B97               	goto	l4732
  4001     0339                     l4736:
  4002                           
  4003                           ;main.c: 351:             if(idle){
  4004     0339  0020               	movlb	0	; select bank0
  4005     033A  0839               	movf	_idle,w
  4006     033B  1903               	btfsc	3,2
  4007     033C  2B4E               	goto	l4744
  4008                           
  4009                           ;main.c: 352:                 idle = 0;
  4010     033D  01B9               	clrf	_idle
  4011                           
  4012                           ;main.c: 353:                 Motor_Turn_Off ();
  4013     033E  318D  2552  3183   	fcall	_Motor_Turn_Off
  4014                           
  4015                           ;main.c: 354:                 _delay((unsigned long)((500)*(8000000/4000.0)));
  4016     0341  3006               	movlw	6
  4017     0342  0022               	movlb	2	; select bank2
  4018     0343  00B6               	movwf	(??_main^(0+256)+1)
  4019     0344  3013               	movlw	19
  4020     0345  00B5               	movwf	??_main^(0+256)
  4021     0346  30AD               	movlw	173
  4022     0347                     u3637:
  4023     0347  0B89               	decfsz	9,f
  4024     0348  2B47               	goto	u3637
  4025     0349  0BB5               	decfsz	??_main^(0+256),f
  4026     034A  2B47               	goto	u3637
  4027     034B  0BB6               	decfsz	(??_main^(0+256)+1),f
  4028     034C  2B47               	goto	u3637
  4029     034D  3200               	nop2
  4030     034E                     l4744:
  4031                           
  4032                           ;main.c: 356:             var.D = Next_floor();
  4033     034E  3186  2609  3183   	fcall	_Next_floor
  4034     0351  0022               	movlb	2	; select bank2
  4035     0352  00B5               	movwf	??_main^(0+256)
  4036     0353  0EB5               	swapf	??_main^(0+256),f
  4037     0354  0021               	movlb	1	; select bank1
  4038     0355  083A               	movf	_var^(0+128),w
  4039     0356  0022               	movlb	2	; select bank2
  4040     0357  0635               	xorwf	??_main^(0+256),w
  4041     0358  390F               	andlw	-241
  4042     0359  0635               	xorwf	??_main^(0+256),w
  4043     035A  0021               	movlb	1	; select bank1
  4044     035B  00BA               	movwf	_var^(0+128)
  4045                           
  4046                           ;main.c: 357:             next_index = Next_index();
  4047     035C  3186  26BC  3183   	fcall	_Next_index
  4048     035F  0022               	movlb	2	; select bank2
  4049     0360  00B5               	movwf	??_main^(0+256)
  4050     0361  01B6               	clrf	(??_main^(0+256)+1)
  4051     0362  0835               	movf	??_main^(0+256),w
  4052     0363  00B7               	movwf	main@next_index^(0+256)
  4053     0364  0836               	movf	(??_main+1)^(0+256),w
  4054     0365  00B8               	movwf	(main@next_index+1)^(0+256)
  4055                           
  4056                           ;main.c: 358:             if(current_floor <= var.D) LATAbits.LATA7 = 1;
  4057     0366  0021               	movlb	1	; select bank1
  4058     0367  0E3A               	swapf	_var^(0+128),w
  4059     0368  390F               	andlw	15
  4060     0369  0022               	movlb	2	; select bank2
  4061     036A  00B5               	movwf	??_main^(0+256)
  4062     036B  0020               	movlb	0	; select bank0
  4063     036C  083C               	movf	_current_floor,w
  4064     036D  0022               	movlb	2	; select bank2
  4065     036E  0235               	subwf	??_main^(0+256),w
  4066     036F  1C03               	skipc
  4067     0370  2B73               	goto	l926
  4068     0371  178C               	bsf	12,7	;volatile
  4069     0372  2B74               	goto	l4752
  4070     0373                     l926:	
  4071                           ;main.c: 359:             else LATAbits.LATA7=0;
  4072                           
  4073     0373  138C               	bcf	12,7	;volatile
  4074     0374                     l4752:
  4075                           
  4076                           ;main.c: 361:             Motor_Turn_On();
  4077     0374  318D  25A7  3183   	fcall	_Motor_Turn_On
  4078     0377                     l4754:	
  4079                           ;main.c: 363:             while(current_floor != var.D);
  4080                           
  4081     0377  0021               	movlb	1	; select bank1
  4082     0378  0E3A               	swapf	_var^(0+128),w
  4083     0379  390F               	andlw	15
  4084     037A  0020               	movlb	0	; select bank0
  4085     037B  063C               	xorwf	_current_floor,w
  4086     037C  1D03               	skipz
  4087     037D  2B77               	goto	l4754
  4088                           
  4089                           ;main.c: 364:             index = next_index;
  4090     037E  0022               	movlb	2	; select bank2
  4091     037F  0837               	movf	main@next_index^(0+256),w
  4092     0380  0020               	movlb	0	; select bank0
  4093     0381  00BD               	movwf	_index
  4094                           
  4095                           ;main.c: 365:             route[index] = 0;
  4096     0382  083D               	movf	_index,w
  4097     0383  3E20               	addlw	(low (_route| 0))& (0+255)
  4098     0384  0086               	movwf	6
  4099     0385  0187               	clrf	7
  4100     0386  0181               	clrf	1
  4101                           
  4102                           ;main.c: 367:             Motor_Turn_Off();
  4103     0387  318D  2552  3183   	fcall	_Motor_Turn_Off
  4104                           
  4105                           ;main.c: 368:             _delay((unsigned long)((2000)*(8000000/4000.0)));
  4106     038A  3015               	movlw	21
  4107     038B  0022               	movlb	2	; select bank2
  4108     038C  00B6               	movwf	(??_main^(0+256)+1)
  4109     038D  304B               	movlw	75
  4110     038E  00B5               	movwf	??_main^(0+256)
  4111     038F  30BE               	movlw	190
  4112     0390                     u3647:
  4113     0390  0B89               	decfsz	9,f
  4114     0391  2B90               	goto	u3647
  4115     0392  0BB5               	decfsz	??_main^(0+256),f
  4116     0393  2B90               	goto	u3647
  4117     0394  0BB6               	decfsz	(??_main^(0+256)+1),f
  4118     0395  2B90               	goto	u3647
  4119     0396  0000               	nop
  4120     0397                     l4732:	
  4121                           ;main.c: 373:           }
  4122                           
  4123                           
  4124                           ;main.c: 347:     {;main.c: 349:         _Bool is_empty = Route_empty();
  4125     0397  318E  26F1  3183   	fcall	_Route_empty
  4126     039A  0022               	movlb	2	; select bank2
  4127     039B  00B9               	movwf	main@is_empty^(0+256)
  4128                           
  4129                           ;main.c: 350:         if(is_empty==0){
  4130     039C  0839               	movf	main@is_empty^(0+256),w
  4131     039D  1903               	btfsc	3,2
  4132     039E  2B39               	goto	l4736
  4133     039F  318E  264F  3183   	fcall	_Idle
  4134     03A2  2B97               	goto	l4732
  4135     03A3                     __end_of_main:
  4136                           
  4137                           	psect	text1
  4138     0F91                     __ptext1:	
  4139 ;; *************** function _Start *****************
  4140 ;; Defined at:
  4141 ;;		line 176 in file "main.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 1F/1
  4152 ;;		On exit  : 1F/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4155 ;;      Params:         0       0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0       0
  4157 ;;      Temps:          0       0       2       0       0       0
  4158 ;;      Totals:         0       0       2       0       0       0
  4159 ;;Total ram usage:        2 bytes
  4160 ;; Hardware stack levels used: 1
  4161 ;; Hardware stack levels required when called: 11
  4162 ;; This function calls:
  4163 ;;		_Matrix_update_floor
  4164 ;;		_Motor_Turn_Off
  4165 ;;		_Motor_Turn_On
  4166 ;;		_TMR0_WriteTimer
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172     0F91                     _Start:	
  4173                           ;psect for function _Start
  4174                           
  4175                           
  4176                           ;main.c: 177:     LATAbits.LATA7 = 0;
  4177                           
  4178                           ;incstack = 0
  4179                           ; Regs used in _Start: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4180     0F91  0022               	movlb	2	; select bank2
  4181     0F92  138C               	bcf	12,7	;volatile
  4182                           
  4183                           ;main.c: 178:     Motor_Turn_On();
  4184     0F93  318D  25A7  318F   	fcall	_Motor_Turn_On
  4185                           
  4186                           ;main.c: 179:     _delay((unsigned long)((7000)*(8000000/4000.0)));
  4187     0F96  3048               	movlw	72
  4188     0F97  0021               	movlb	1	; select bank1
  4189     0F98  00D9               	movwf	(??_Start^(0+128)+1)
  4190     0F99  3006               	movlw	6
  4191     0F9A  00D8               	movwf	??_Start^(0+128)
  4192     0F9B  309F               	movlw	159
  4193     0F9C                     u3657:
  4194     0F9C  0B89               	decfsz	9,f
  4195     0F9D  2F9C               	goto	u3657
  4196     0F9E  0BD8               	decfsz	??_Start^(0+128),f
  4197     0F9F  2F9C               	goto	u3657
  4198     0FA0  0BD9               	decfsz	(??_Start^(0+128)+1),f
  4199     0FA1  2F9C               	goto	u3657
  4200     0FA2  3200               	nop2
  4201                           
  4202                           ;main.c: 180:     Motor_Turn_Off();
  4203     0FA3  318D  2552  318F   	fcall	_Motor_Turn_Off
  4204                           
  4205                           ;main.c: 181:     Matrix_update_floor(0);
  4206     0FA6  3000               	movlw	0
  4207     0FA7  3187  2780  318F   	fcall	_Matrix_update_floor
  4208                           
  4209                           ;main.c: 182:     index = 0;
  4210     0FAA  0020               	movlb	0	; select bank0
  4211     0FAB  01BD               	clrf	_index
  4212                           
  4213                           ;main.c: 183:     LATAbits.LATA7 = 1;
  4214     0FAC  0022               	movlb	2	; select bank2
  4215     0FAD  178C               	bsf	12,7	;volatile
  4216                           
  4217                           ;main.c: 184:     TMR0_WriteTimer(0);
  4218     0FAE  3000               	movlw	0
  4219     0FAF  318C  24DC         	fcall	_TMR0_WriteTimer
  4220                           
  4221                           ;main.c: 185:     position = 0;
  4222     0FB1  01B2               	clrf	_position
  4223     0FB2  01B3               	clrf	_position+1
  4224     0FB3  0008               	return
  4225     0FB4                     __end_of_Start:
  4226                           
  4227                           	psect	text2
  4228     0CDC                     __ptext2:	
  4229 ;; *************** function _TMR0_WriteTimer *****************
  4230 ;; Defined at:
  4231 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  timerVal        1    wreg     unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg
  4240 ;; Tracked objects:
  4241 ;;		On entry : 1F/2
  4242 ;;		On exit  : 1F/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4245 ;;      Params:         0       0       0       0       0       0
  4246 ;;      Locals:         0       0       1       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0
  4248 ;;      Totals:         0       0       1       0       0       0
  4249 ;;Total ram usage:        1 bytes
  4250 ;; Hardware stack levels used: 1
  4251 ;; Hardware stack levels required when called: 7
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_Start
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259     0CDC                     _TMR0_WriteTimer:	
  4260                           ;psect for function _TMR0_WriteTimer
  4261                           
  4262                           
  4263                           ;incstack = 0
  4264                           ; Regs used in _TMR0_WriteTimer: [wreg]
  4265                           ;TMR0_WriteTimer@timerVal stored from wreg
  4266     0CDC  0021               	movlb	1	; select bank1
  4267     0CDD  00C5               	movwf	TMR0_WriteTimer@timerVal^(0+128)
  4268                           
  4269                           ;mcc_generated_files/tmr0.c: 89: void TMR0_WriteTimer(uint8_t timerVal);mcc_generated_fi
      +                          les/tmr0.c: 90: {;mcc_generated_files/tmr0.c: 92:     TMR0 = timerVal;
  4270     0CDE  0845               	movf	TMR0_WriteTimer@timerVal^(0+128),w
  4271     0CDF  0020               	movlb	0	; select bank0
  4272     0CE0  0095               	movwf	21	;volatile
  4273     0CE1  0008               	return
  4274     0CE2                     __end_of_TMR0_WriteTimer:
  4275                           
  4276                           	psect	text3
  4277     0780                     __ptext3:	
  4278 ;; *************** function _Matrix_update_floor *****************
  4279 ;; Defined at:
  4280 ;;		line 226 in file "main.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  display_floo    1    wreg     unsigned char 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  display_floo    1   10[BANK1 ] unsigned char 
  4285 ;;  i               1   11[BANK1 ] unsigned char 
  4286 ;;  data            2    8[BANK1 ] unsigned char [2]
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 18/2
  4293 ;;		On exit  : 1F/1
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4296 ;;      Params:         0       0       0       0       0       0
  4297 ;;      Locals:         0       0       4       0       0       0
  4298 ;;      Temps:          0       0       1       0       0       0
  4299 ;;      Totals:         0       0       5       0       0       0
  4300 ;;Total ram usage:        5 bytes
  4301 ;; Hardware stack levels used: 1
  4302 ;; Hardware stack levels required when called: 9
  4303 ;; This function calls:
  4304 ;;		_Tx_spi
  4305 ;; This function is called by:
  4306 ;;		_Start
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310     0780                     _Matrix_update_floor:	
  4311                           ;psect for function _Matrix_update_floor
  4312                           
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4316                           ;Matrix_update_floor@display_floor stored from wreg
  4317     0780  0021               	movlb	1	; select bank1
  4318     0781  00CF               	movwf	Matrix_update_floor@display_floor^(0+128)
  4319                           
  4320                           ;main.c: 227:     uint8_t data[2];;main.c: 228:     display_floor = display_floor*4;
  4321     0782  084F               	movf	Matrix_update_floor@display_floor^(0+128),w
  4322     0783  00CC               	movwf	??_Matrix_update_floor^(0+128)
  4323     0784  3002               	movlw	2
  4324     0785                     u3225:
  4325     0785  35CC               	lslf	??_Matrix_update_floor^(0+128),f
  4326     0786  0B89               	decfsz	9,f
  4327     0787  2F85               	goto	u3225
  4328     0788  084C               	movf	??_Matrix_update_floor^(0+128),w
  4329     0789  00CF               	movwf	Matrix_update_floor@display_floor^(0+128)
  4330                           
  4331                           ;main.c: 230:    for(uint8_t i=5;i<=8;i++){
  4332     078A  3005               	movlw	5
  4333     078B  00D0               	movwf	Matrix_update_floor@i^(0+128)
  4334     078C                     l4422:
  4335                           
  4336                           ;main.c: 231:         data[0] = i;
  4337     078C  0850               	movf	Matrix_update_floor@i^(0+128),w
  4338     078D  00CD               	movwf	Matrix_update_floor@data^(0+128)
  4339                           
  4340                           ;main.c: 232:         data[1] = MATRIX_FLOOR[display_floor];
  4341     078E  084F               	movf	Matrix_update_floor@display_floor^(0+128),w
  4342     078F  3EFE               	addlw	low (_MATRIX_FLOOR| (0+32768))
  4343     0790  0084               	movwf	4
  4344     0791  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
  4345     0792  1803               	skipnc
  4346     0793  3E01               	addlw	1
  4347     0794  0085               	movwf	5
  4348     0795  0800               	movf	0,w	;code access
  4349     0796  00CE               	movwf	(Matrix_update_floor@data^(0+128)+1)
  4350                           
  4351                           ;main.c: 233:         Tx_spi(data, 2);
  4352     0797  30CD               	movlw	(low (Matrix_update_floor@data| 0))& (0+255)
  4353     0798  00C9               	movwf	Tx_spi@data^(0+128)
  4354     0799  3002               	movlw	2
  4355     079A  00CA               	movwf	Tx_spi@dataSize^(0+128)
  4356     079B  3000               	movlw	0
  4357     079C  00CB               	movwf	(Tx_spi@dataSize^(0+128)+1)
  4358     079D  318E  260B  3187   	fcall	_Tx_spi
  4359                           
  4360                           ;main.c: 234:         display_floor++;
  4361     07A0  3001               	movlw	1
  4362     07A1  0021               	movlb	1	; select bank1
  4363     07A2  07CF               	addwf	Matrix_update_floor@display_floor^(0+128),f
  4364                           
  4365                           ;main.c: 235:     }
  4366     07A3  3001               	movlw	1
  4367     07A4  07D0               	addwf	Matrix_update_floor@i^(0+128),f
  4368     07A5  3009               	movlw	9
  4369     07A6  0250               	subwf	Matrix_update_floor@i^(0+128),w
  4370     07A7  1803               	btfsc	3,0
  4371     07A8  0008               	return
  4372     07A9  2F8C               	goto	l4422
  4373     07AA                     __end_of_Matrix_update_floor:
  4374                           
  4375                           	psect	text4
  4376     07AA                     __ptext4:	
  4377 ;; *************** function _SYSTEM_Initialize *****************
  4378 ;; Defined at:
  4379 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0, pclath, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : B1F/0
  4390 ;;		On exit  : 1F/1
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4393 ;;      Params:         0       0       0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0
  4396 ;;      Totals:         0       0       0       0       0       0
  4397 ;;Total ram usage:        0 bytes
  4398 ;; Hardware stack levels used: 1
  4399 ;; Hardware stack levels required when called: 9
  4400 ;; This function calls:
  4401 ;;		_CMP1_Initialize
  4402 ;;		_CMP2_Initialize
  4403 ;;		_ECCP2_Initialize
  4404 ;;		_EUSART_Initialize
  4405 ;;		_FVR_Initialize
  4406 ;;		_OSCILLATOR_Initialize
  4407 ;;		_PIN_MANAGER_Initialize
  4408 ;;		_PWM3_Initialize
  4409 ;;		_SPI1_Initialize
  4410 ;;		_TMR0_Initialize
  4411 ;;		_TMR1_Initialize
  4412 ;;		_TMR2_Initialize
  4413 ;;		_TMR6_Initialize
  4414 ;;		_WDT_Initialize
  4415 ;; This function is called by:
  4416 ;;		_main
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420     07AA                     _SYSTEM_Initialize:	
  4421                           ;psect for function _SYSTEM_Initialize
  4422                           
  4423                           
  4424                           ;mcc_generated_files/mcc.c: 53:     SPI1_Initialize();
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4428     07AA  318D  2574  3187   	fcall	_SPI1_Initialize
  4429                           
  4430                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  4431     07AD  3187  2751  3187   	fcall	_PIN_MANAGER_Initialize
  4432                           
  4433                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4434     07B0  318C  24D6  3187   	fcall	_OSCILLATOR_Initialize
  4435                           
  4436                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4437     07B3  318C  24A5  3187   	fcall	_WDT_Initialize
  4438                           
  4439                           ;mcc_generated_files/mcc.c: 57:     CMP2_Initialize();
  4440     07B6  318D  255D  3187   	fcall	_CMP2_Initialize
  4441                           
  4442                           ;mcc_generated_files/mcc.c: 58:     ECCP2_Initialize();
  4443     07B9  318D  251E  3187   	fcall	_ECCP2_Initialize
  4444                           
  4445                           ;mcc_generated_files/mcc.c: 59:     FVR_Initialize();
  4446     07BC  318C  24A1  3187   	fcall	_FVR_Initialize
  4447                           
  4448                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  4449     07BF  318C  24FC  3187   	fcall	_TMR2_Initialize
  4450                           
  4451                           ;mcc_generated_files/mcc.c: 61:     TMR0_Initialize();
  4452     07C2  318D  2528  3187   	fcall	_TMR0_Initialize
  4453                           
  4454                           ;mcc_generated_files/mcc.c: 62:     TMR6_Initialize();
  4455     07C5  318D  2532  3187   	fcall	_TMR6_Initialize
  4456                           
  4457                           ;mcc_generated_files/mcc.c: 63:     CMP1_Initialize();
  4458     07C8  318D  2568  3187   	fcall	_CMP1_Initialize
  4459                           
  4460                           ;mcc_generated_files/mcc.c: 64:     PWM3_Initialize();
  4461     07CB  318D  25B4  3187   	fcall	_PWM3_Initialize
  4462                           
  4463                           ;mcc_generated_files/mcc.c: 65:     TMR1_Initialize();
  4464     07CE  318E  268B  3187   	fcall	_TMR1_Initialize
  4465                           
  4466                           ;mcc_generated_files/mcc.c: 66:     EUSART_Initialize();
  4467     07D1  3187  2721         	fcall	_EUSART_Initialize
  4468     07D3  0008               	return
  4469     07D4                     __end_of_SYSTEM_Initialize:
  4470                           
  4471                           	psect	text5
  4472     0CA5                     __ptext5:	
  4473 ;; *************** function _WDT_Initialize *****************
  4474 ;; Defined at:
  4475 ;;		line 79 in file "mcc_generated_files/mcc.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      void 
  4482 ;; Registers used:
  4483 ;;		None
  4484 ;; Tracked objects:
  4485 ;;		On entry : 1F/2
  4486 ;;		On exit  : 1F/1
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4489 ;;      Params:         0       0       0       0       0       0
  4490 ;;      Locals:         0       0       0       0       0       0
  4491 ;;      Temps:          0       0       0       0       0       0
  4492 ;;      Totals:         0       0       0       0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used: 1
  4495 ;; Hardware stack levels required when called: 7
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_SYSTEM_Initialize
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503     0CA5                     _WDT_Initialize:	
  4504                           ;psect for function _WDT_Initialize
  4505                           
  4506                           
  4507                           ;mcc_generated_files/mcc.c: 82:     WDTCON = 0x16;
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _WDT_Initialize: []
  4511     0CA5  3016               	movlw	22
  4512     0CA6  0021               	movlb	1	; select bank1
  4513     0CA7  0097               	movwf	23	;volatile
  4514     0CA8  0008               	return
  4515     0CA9                     __end_of_WDT_Initialize:
  4516                           
  4517                           	psect	text6
  4518     0D32                     __ptext6:	
  4519 ;; *************** function _TMR6_Initialize *****************
  4520 ;; Defined at:
  4521 ;;		line 62 in file "mcc_generated_files/tmr6.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;		None
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		status,2
  4530 ;; Tracked objects:
  4531 ;;		On entry : 1F/0
  4532 ;;		On exit  : 1F/8
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4535 ;;      Params:         0       0       0       0       0       0
  4536 ;;      Locals:         0       0       0       0       0       0
  4537 ;;      Temps:          0       0       0       0       0       0
  4538 ;;      Totals:         0       0       0       0       0       0
  4539 ;;Total ram usage:        0 bytes
  4540 ;; Hardware stack levels used: 1
  4541 ;; Hardware stack levels required when called: 7
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_SYSTEM_Initialize
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549     0D32                     _TMR6_Initialize:	
  4550                           ;psect for function _TMR6_Initialize
  4551                           
  4552                           
  4553                           ;mcc_generated_files/tmr6.c: 67:     PR6 = 0xFF;
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in _TMR6_Initialize: [status,2]
  4557     0D32  30FF               	movlw	255
  4558     0D33  0028               	movlb	8	; select bank8
  4559     0D34  009D               	movwf	29	;volatile
  4560                           
  4561                           ;mcc_generated_files/tmr6.c: 70:     TMR6 = 0x00;
  4562     0D35  019C               	clrf	28	;volatile
  4563                           
  4564                           ;mcc_generated_files/tmr6.c: 73:     PIR3bits.TMR6IF = 0;
  4565     0D36  0020               	movlb	0	; select bank0
  4566     0D37  1193               	bcf	19,3	;volatile
  4567                           
  4568                           ;mcc_generated_files/tmr6.c: 76:     T6CON = 0x06;
  4569     0D38  3006               	movlw	6
  4570     0D39  0028               	movlb	8	; select bank8
  4571     0D3A  009E               	movwf	30	;volatile
  4572     0D3B  0008               	return
  4573     0D3C                     __end_of_TMR6_Initialize:
  4574                           
  4575                           	psect	text7
  4576     0CFC                     __ptext7:	
  4577 ;; *************** function _TMR2_Initialize *****************
  4578 ;; Defined at:
  4579 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;		None
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;		None
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  1    wreg      void 
  4586 ;; Registers used:
  4587 ;;		status,2
  4588 ;; Tracked objects:
  4589 ;;		On entry : 1F/2
  4590 ;;		On exit  : 1F/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4593 ;;      Params:         0       0       0       0       0       0
  4594 ;;      Locals:         0       0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0
  4596 ;;      Totals:         0       0       0       0       0       0
  4597 ;;Total ram usage:        0 bytes
  4598 ;; Hardware stack levels used: 1
  4599 ;; Hardware stack levels required when called: 7
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_SYSTEM_Initialize
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607     0CFC                     _TMR2_Initialize:	
  4608                           ;psect for function _TMR2_Initialize
  4609                           
  4610                           
  4611                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0x01;
  4612                           
  4613                           ;incstack = 0
  4614                           ; Regs used in _TMR2_Initialize: [status,2]
  4615     0CFC  3001               	movlw	1
  4616     0CFD  0020               	movlb	0	; select bank0
  4617     0CFE  009B               	movwf	27	;volatile
  4618                           
  4619                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4620     0CFF  019A               	clrf	26	;volatile
  4621                           
  4622                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4623     0D00  1091               	bcf	17,1	;volatile
  4624                           
  4625                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4626     0D01  3004               	movlw	4
  4627     0D02  009C               	movwf	28	;volatile
  4628     0D03  0008               	return
  4629     0D04                     __end_of_TMR2_Initialize:
  4630                           
  4631                           	psect	text8
  4632     0E8B                     __ptext8:	
  4633 ;; *************** function _TMR1_Initialize *****************
  4634 ;; Defined at:
  4635 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;		None
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;		None
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      void 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2, status,0, pclath, cstack
  4644 ;; Tracked objects:
  4645 ;;		On entry : 1F/5
  4646 ;;		On exit  : 1F/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4649 ;;      Params:         0       0       0       0       0       0
  4650 ;;      Locals:         0       0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0
  4652 ;;      Totals:         0       0       0       0       0       0
  4653 ;;Total ram usage:        0 bytes
  4654 ;; Hardware stack levels used: 1
  4655 ;; Hardware stack levels required when called: 8
  4656 ;; This function calls:
  4657 ;;		_TMR1_SetInterruptHandler
  4658 ;; This function is called by:
  4659 ;;		_SYSTEM_Initialize
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663     0E8B                     _TMR1_Initialize:	
  4664                           ;psect for function _TMR1_Initialize
  4665                           
  4666                           
  4667                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4668                           
  4669                           ;incstack = 0
  4670                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4671     0E8B  0020               	movlb	0	; select bank0
  4672     0E8C  0199               	clrf	25	;volatile
  4673                           
  4674                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x15;
  4675     0E8D  3015               	movlw	21
  4676     0E8E  0097               	movwf	23	;volatile
  4677                           
  4678                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xA0;
  4679     0E8F  30A0               	movlw	160
  4680     0E90  0096               	movwf	22	;volatile
  4681                           
  4682                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4683     0E91  1011               	bcf	17,0	;volatile
  4684                           
  4685                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4686     0E92  0817               	movf	23,w	;volatile
  4687     0E93  00AB               	movwf	_timer1ReloadVal+1	;volatile
  4688     0E94  0816               	movf	22,w	;volatile
  4689     0E95  00AA               	movwf	_timer1ReloadVal	;volatile
  4690                           
  4691                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4692     0E96  0021               	movlb	1	; select bank1
  4693     0E97  1411               	bsf	17,0	;volatile
  4694                           
  4695                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4696     0E98  3003               	movlw	low _TMR1_DefaultInterruptHandler
  4697     0E99  00C5               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  4698     0E9A  3000               	movlw	high _TMR1_DefaultInterruptHandler
  4699     0E9B  00C6               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4700     0E9C  318C  24D1         	fcall	_TMR1_SetInterruptHandler
  4701                           
  4702                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x01;
  4703     0E9E  3001               	movlw	1
  4704     0E9F  0020               	movlb	0	; select bank0
  4705     0EA0  0098               	movwf	24	;volatile
  4706     0EA1  0008               	return
  4707     0EA2                     __end_of_TMR1_Initialize:
  4708                           
  4709                           	psect	text9
  4710     0CD1                     __ptext9:	
  4711 ;; *************** function _TMR1_SetInterruptHandler *****************
  4712 ;; Defined at:
  4713 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4716 ;;		 -> Write_UART(1), TMR1_DefaultInterruptHandler(1), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg
  4723 ;; Tracked objects:
  4724 ;;		On entry : 1F/1
  4725 ;;		On exit  : 1F/1
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4728 ;;      Params:         0       0       2       0       0       0
  4729 ;;      Locals:         0       0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0
  4731 ;;      Totals:         0       0       2       0       0       0
  4732 ;;Total ram usage:        2 bytes
  4733 ;; Hardware stack levels used: 1
  4734 ;; Hardware stack levels required when called: 7
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_TMR1_Initialize
  4739 ;;		_main
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743     0CD1                     _TMR1_SetInterruptHandler:	
  4744                           ;psect for function _TMR1_SetInterruptHandler
  4745                           
  4746                           
  4747                           ;mcc_generated_files/tmr1.c: 186:     TMR1_InterruptHandler = InterruptHandler;
  4748                           
  4749                           ;incstack = 0
  4750                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4751     0CD1  0846               	movf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  4752     0CD2  00DB               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  4753     0CD3  0845               	movf	TMR1_SetInterruptHandler@InterruptHandler^(0+128),w
  4754     0CD4  00DA               	movwf	_TMR1_InterruptHandler^(0+128)
  4755     0CD5  0008               	return
  4756     0CD6                     __end_of_TMR1_SetInterruptHandler:
  4757                           
  4758                           	psect	text10
  4759     0D28                     __ptext10:	
  4760 ;; *************** function _TMR0_Initialize *****************
  4761 ;; Defined at:
  4762 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;		None
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2
  4771 ;; Tracked objects:
  4772 ;;		On entry : 1F/0
  4773 ;;		On exit  : 1F/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4776 ;;      Params:         0       0       0       0       0       0
  4777 ;;      Locals:         0       0       0       0       0       0
  4778 ;;      Temps:          0       0       0       0       0       0
  4779 ;;      Totals:         0       0       0       0       0       0
  4780 ;;Total ram usage:        0 bytes
  4781 ;; Hardware stack levels used: 1
  4782 ;; Hardware stack levels required when called: 7
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_SYSTEM_Initialize
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790     0D28                     _TMR0_Initialize:	
  4791                           ;psect for function _TMR0_Initialize
  4792                           
  4793                           
  4794                           ;mcc_generated_files/tmr0.c: 68:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xE8 
      +                          & 0x3F));
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4798     0D28  0021               	movlb	1	; select bank1
  4799     0D29  0815               	movf	21,w	;volatile
  4800     0D2A  39C0               	andlw	192
  4801     0D2B  3828               	iorlw	40
  4802     0D2C  0095               	movwf	21	;volatile
  4803                           
  4804                           ;mcc_generated_files/tmr0.c: 71:     TMR0 = 0x00;
  4805     0D2D  0020               	movlb	0	; select bank0
  4806     0D2E  0195               	clrf	21	;volatile
  4807                           
  4808                           ;mcc_generated_files/tmr0.c: 74:     timer0ReloadVal= 0;
  4809     0D2F  01B4               	clrf	_timer0ReloadVal	;volatile
  4810                           
  4811                           ;mcc_generated_files/tmr0.c: 77:     INTCONbits.TMR0IF = 0;
  4812     0D30  110B               	bcf	11,2	;volatile
  4813     0D31  0008               	return
  4814     0D32                     __end_of_TMR0_Initialize:
  4815                           
  4816                           	psect	text11
  4817     0D74                     __ptext11:	
  4818 ;; *************** function _SPI1_Initialize *****************
  4819 ;; Defined at:
  4820 ;;		line 62 in file "mcc_generated_files/spi1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;		None
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      void 
  4827 ;; Registers used:
  4828 ;;		None
  4829 ;; Tracked objects:
  4830 ;;		On entry : B1F/0
  4831 ;;		On exit  : B1F/4
  4832 ;;		Unchanged: B00/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4834 ;;      Params:         0       0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0       0
  4837 ;;      Totals:         0       0       0       0       0       0
  4838 ;;Total ram usage:        0 bytes
  4839 ;; Hardware stack levels used: 1
  4840 ;; Hardware stack levels required when called: 7
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_SYSTEM_Initialize
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848     0D74                     _SPI1_Initialize:	
  4849                           ;psect for function _SPI1_Initialize
  4850                           
  4851                           
  4852                           ;mcc_generated_files/spi1.c: 65:     SSP1STAT = 0x40;
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in _SPI1_Initialize: []
  4856     0D74  3040               	movlw	64
  4857     0D75  0024               	movlb	4	; select bank4
  4858     0D76  0094               	movwf	20	;volatile
  4859                           
  4860                           ;mcc_generated_files/spi1.c: 66:     SSP1CON1 = 0x03;
  4861     0D77  3003               	movlw	3
  4862     0D78  0095               	movwf	21	;volatile
  4863                           
  4864                           ;mcc_generated_files/spi1.c: 67:     SSP1ADD = 0x13;
  4865     0D79  3013               	movlw	19
  4866     0D7A  0092               	movwf	18	;volatile
  4867                           
  4868                           ;mcc_generated_files/spi1.c: 68:     TRISBbits.TRISB4 = 0;
  4869     0D7B  0021               	movlb	1	; select bank1
  4870     0D7C  120D               	bcf	13,4	;volatile
  4871                           
  4872                           ;mcc_generated_files/spi1.c: 69:     SSP1CON1bits.SSPEN = 0;
  4873     0D7D  0024               	movlb	4	; select bank4
  4874     0D7E  1295               	bcf	21,5	;volatile
  4875     0D7F  0008               	return
  4876     0D80                     __end_of_SPI1_Initialize:
  4877                           
  4878                           	psect	text12
  4879     0DB4                     __ptext12:	
  4880 ;; *************** function _PWM3_Initialize *****************
  4881 ;; Defined at:
  4882 ;;		line 64 in file "mcc_generated_files/pwm3.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;		None
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0
  4891 ;; Tracked objects:
  4892 ;;		On entry : 1F/1
  4893 ;;		On exit  : 1F/5
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4896 ;;      Params:         0       0       0       0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0
  4898 ;;      Temps:          0       0       0       0       0       0
  4899 ;;      Totals:         0       0       0       0       0       0
  4900 ;;Total ram usage:        0 bytes
  4901 ;; Hardware stack levels used: 1
  4902 ;; Hardware stack levels required when called: 7
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_SYSTEM_Initialize
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910     0DB4                     _PWM3_Initialize:	
  4911                           ;psect for function _PWM3_Initialize
  4912                           
  4913                           
  4914                           ;mcc_generated_files/pwm3.c: 69:  CCP3CON = 0x1C;
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  4918     0DB4  301C               	movlw	28
  4919     0DB5  0026               	movlb	6	; select bank6
  4920     0DB6  0093               	movwf	19	;volatile
  4921                           
  4922                           ;mcc_generated_files/pwm3.c: 72:  CCPR3L = 0x7F;
  4923     0DB7  307F               	movlw	127
  4924     0DB8  0091               	movwf	17	;volatile
  4925                           
  4926                           ;mcc_generated_files/pwm3.c: 75:  CCPR3H = 0x01;
  4927     0DB9  3001               	movlw	1
  4928     0DBA  0092               	movwf	18	;volatile
  4929                           
  4930                           ;mcc_generated_files/pwm3.c: 78:  CCPTMRS0bits.C3TSEL = 0x2;
  4931     0DBB  0025               	movlb	5	; select bank5
  4932     0DBC  081E               	movf	30,w	;volatile
  4933     0DBD  39CF               	andlw	-49
  4934     0DBE  3820               	iorlw	32
  4935     0DBF  009E               	movwf	30	;volatile
  4936     0DC0  0008               	return
  4937     0DC1                     __end_of_PWM3_Initialize:
  4938                           
  4939                           	psect	text13
  4940     0751                     __ptext13:	
  4941 ;; *************** function _PIN_MANAGER_Initialize *****************
  4942 ;; Defined at:
  4943 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, status,2, status,0, pclath, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : B1F/4
  4954 ;;		On exit  : 1F/1
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4957 ;;      Params:         0       0       0       0       0       0
  4958 ;;      Locals:         0       0       0       0       0       0
  4959 ;;      Temps:          0       0       0       0       0       0
  4960 ;;      Totals:         0       0       0       0       0       0
  4961 ;;Total ram usage:        0 bytes
  4962 ;; Hardware stack levels used: 1
  4963 ;; Hardware stack levels required when called: 8
  4964 ;; This function calls:
  4965 ;;		_IOCBF0_SetInterruptHandler
  4966 ;;		_IOCBF3_SetInterruptHandler
  4967 ;; This function is called by:
  4968 ;;		_SYSTEM_Initialize
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972     0751                     _PIN_MANAGER_Initialize:	
  4973                           ;psect for function _PIN_MANAGER_Initialize
  4974                           
  4975                           
  4976                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  4977                           
  4978                           ;incstack = 0
  4979                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4980     0751  0022               	movlb	2	; select bank2
  4981     0752  018C               	clrf	12	;volatile
  4982                           
  4983                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  4984     0753  018D               	clrf	13	;volatile
  4985                           
  4986                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x37;
  4987     0754  3037               	movlw	55
  4988     0755  0021               	movlb	1	; select bank1
  4989     0756  008C               	movwf	12	;volatile
  4990                           
  4991                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x2D;
  4992     0757  302D               	movlw	45
  4993     0758  008D               	movwf	13	;volatile
  4994                           
  4995                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0xC0;
  4996     0759  30C0               	movlw	192
  4997     075A  0023               	movlb	3	; select bank3
  4998     075B  008D               	movwf	13	;volatile
  4999                           
  5000                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x03;
  5001     075C  3003               	movlw	3
  5002     075D  008C               	movwf	12	;volatile
  5003                           
  5004                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x09;
  5005     075E  3009               	movlw	9
  5006     075F  0024               	movlb	4	; select bank4
  5007     0760  008D               	movwf	13	;volatile
  5008                           
  5009                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  5010     0761  018C               	clrf	12	;volatile
  5011                           
  5012                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 0;
  5013     0762  0021               	movlb	1	; select bank1
  5014     0763  1395               	bcf	21,7	;volatile
  5015                           
  5016                           ;mcc_generated_files/pin_manager.c: 89:     APFCON0 = 0xC9;
  5017     0764  30C9               	movlw	201
  5018     0765  0022               	movlb	2	; select bank2
  5019     0766  009D               	movwf	29	;volatile
  5020                           
  5021                           ;mcc_generated_files/pin_manager.c: 90:     APFCON1 = 0x01;
  5022     0767  3001               	movlw	1
  5023     0768  009E               	movwf	30	;volatile
  5024                           
  5025                           ;mcc_generated_files/pin_manager.c: 96:     IOCBFbits.IOCBF0 = 0;
  5026     0769  0027               	movlb	7	; select bank7
  5027     076A  1016               	bcf	22,0	;volatile
  5028                           
  5029                           ;mcc_generated_files/pin_manager.c: 98:     IOCBFbits.IOCBF3 = 0;
  5030     076B  1196               	bcf	22,3	;volatile
  5031                           
  5032                           ;mcc_generated_files/pin_manager.c: 100:     IOCBNbits.IOCBN0 = 1;
  5033     076C  1415               	bsf	21,0	;volatile
  5034                           
  5035                           ;mcc_generated_files/pin_manager.c: 102:     IOCBNbits.IOCBN3 = 1;
  5036     076D  1595               	bsf	21,3	;volatile
  5037                           
  5038                           ;mcc_generated_files/pin_manager.c: 104:     IOCBPbits.IOCBP0 = 0;
  5039     076E  1014               	bcf	20,0	;volatile
  5040                           
  5041                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP3 = 0;
  5042     076F  1194               	bcf	20,3	;volatile
  5043                           
  5044                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF0_SetInterruptHandler(IOCBF0_DefaultIn
      +                          terruptHandler);
  5045     0770  3097               	movlw	low _IOCBF0_DefaultInterruptHandler
  5046     0771  0021               	movlb	1	; select bank1
  5047     0772  00C5               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  5048     0773  300C               	movlw	high _IOCBF0_DefaultInterruptHandler
  5049     0774  00C6               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5050     0775  318C  24C7  3187   	fcall	_IOCBF0_SetInterruptHandler
  5051                           
  5052                           ;mcc_generated_files/pin_manager.c: 112:     IOCBF3_SetInterruptHandler(IOCBF3_DefaultIn
      +                          terruptHandler);
  5053     0778  3098               	movlw	low _IOCBF3_DefaultInterruptHandler
  5054     0779  00C5               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  5055     077A  300C               	movlw	high _IOCBF3_DefaultInterruptHandler
  5056     077B  00C6               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5057     077C  318C  24CC         	fcall	_IOCBF3_SetInterruptHandler
  5058                           
  5059                           ;mcc_generated_files/pin_manager.c: 115:     INTCONbits.IOCIE = 1;
  5060     077E  158B               	bsf	11,3	;volatile
  5061     077F  0008               	return
  5062     0780                     __end_of_PIN_MANAGER_Initialize:
  5063                           
  5064                           	psect	text14
  5065     0CCC                     __ptext14:	
  5066 ;; *************** function _IOCBF3_SetInterruptHandler *****************
  5067 ;; Defined at:
  5068 ;;		line 181 in file "mcc_generated_files/pin_manager.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5071 ;;		 -> ISR_Floor2(1), IOCBF3_DefaultInterruptHandler(1), 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;		None
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      void 
  5076 ;; Registers used:
  5077 ;;		wreg
  5078 ;; Tracked objects:
  5079 ;;		On entry : 1F/1
  5080 ;;		On exit  : 1F/1
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5083 ;;      Params:         0       0       2       0       0       0
  5084 ;;      Locals:         0       0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0
  5086 ;;      Totals:         0       0       2       0       0       0
  5087 ;;Total ram usage:        2 bytes
  5088 ;; Hardware stack levels used: 1
  5089 ;; Hardware stack levels required when called: 7
  5090 ;; This function calls:
  5091 ;;		Nothing
  5092 ;; This function is called by:
  5093 ;;		_PIN_MANAGER_Initialize
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098     0CCC                     _IOCBF3_SetInterruptHandler:	
  5099                           ;psect for function _IOCBF3_SetInterruptHandler
  5100                           
  5101                           
  5102                           ;mcc_generated_files/pin_manager.c: 182:     IOCBF3_InterruptHandler = InterruptHandler;
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _IOCBF3_SetInterruptHandler: [wreg]
  5106     0CCC  0846               	movf	(IOCBF3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5107     0CCD  00E5               	movwf	(_IOCBF3_InterruptHandler+1)^(0+128)
  5108     0CCE  0845               	movf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128),w
  5109     0CCF  00E4               	movwf	_IOCBF3_InterruptHandler^(0+128)
  5110     0CD0  0008               	return
  5111     0CD1                     __end_of_IOCBF3_SetInterruptHandler:
  5112                           
  5113                           	psect	text15
  5114     0CC7                     __ptext15:	
  5115 ;; *************** function _IOCBF0_SetInterruptHandler *****************
  5116 ;; Defined at:
  5117 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5120 ;;		 -> ISR_Floor1(1), IOCBF0_DefaultInterruptHandler(1), 
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;		None
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg
  5127 ;; Tracked objects:
  5128 ;;		On entry : 1F/1
  5129 ;;		On exit  : 1F/1
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5132 ;;      Params:         0       0       2       0       0       0
  5133 ;;      Locals:         0       0       0       0       0       0
  5134 ;;      Temps:          0       0       0       0       0       0
  5135 ;;      Totals:         0       0       2       0       0       0
  5136 ;;Total ram usage:        2 bytes
  5137 ;; Hardware stack levels used: 1
  5138 ;; Hardware stack levels required when called: 7
  5139 ;; This function calls:
  5140 ;;		Nothing
  5141 ;; This function is called by:
  5142 ;;		_PIN_MANAGER_Initialize
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147     0CC7                     _IOCBF0_SetInterruptHandler:	
  5148                           ;psect for function _IOCBF0_SetInterruptHandler
  5149                           
  5150                           
  5151                           ;mcc_generated_files/pin_manager.c: 152:     IOCBF0_InterruptHandler = InterruptHandler;
  5152                           
  5153                           ;incstack = 0
  5154                           ; Regs used in _IOCBF0_SetInterruptHandler: [wreg]
  5155     0CC7  0846               	movf	(IOCBF0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5156     0CC8  00E7               	movwf	(_IOCBF0_InterruptHandler+1)^(0+128)
  5157     0CC9  0845               	movf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128),w
  5158     0CCA  00E6               	movwf	_IOCBF0_InterruptHandler^(0+128)
  5159     0CCB  0008               	return
  5160     0CCC                     __end_of_IOCBF0_SetInterruptHandler:
  5161                           
  5162                           	psect	text16
  5163     0CD6                     __ptext16:	
  5164 ;; *************** function _OSCILLATOR_Initialize *****************
  5165 ;; Defined at:
  5166 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		status,2
  5175 ;; Tracked objects:
  5176 ;;		On entry : 1F/1
  5177 ;;		On exit  : 1F/2
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5180 ;;      Params:         0       0       0       0       0       0
  5181 ;;      Locals:         0       0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0
  5183 ;;      Totals:         0       0       0       0       0       0
  5184 ;;Total ram usage:        0 bytes
  5185 ;; Hardware stack levels used: 1
  5186 ;; Hardware stack levels required when called: 7
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_SYSTEM_Initialize
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194     0CD6                     _OSCILLATOR_Initialize:	
  5195                           ;psect for function _OSCILLATOR_Initialize
  5196                           
  5197                           
  5198                           ;mcc_generated_files/mcc.c: 72:     OSCCON = 0x70;
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
  5202     0CD6  3070               	movlw	112
  5203     0CD7  0099               	movwf	25	;volatile
  5204                           
  5205                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
  5206     0CD8  0198               	clrf	24	;volatile
  5207                           
  5208                           ;mcc_generated_files/mcc.c: 76:     BORCON = 0x00;
  5209     0CD9  0022               	movlb	2	; select bank2
  5210     0CDA  0196               	clrf	22	;volatile
  5211     0CDB  0008               	return
  5212     0CDC                     __end_of_OSCILLATOR_Initialize:
  5213                           
  5214                           	psect	text17
  5215     0CA1                     __ptext17:	
  5216 ;; *************** function _FVR_Initialize *****************
  5217 ;; Defined at:
  5218 ;;		line 58 in file "mcc_generated_files/fvr.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		None
  5227 ;; Tracked objects:
  5228 ;;		On entry : 1F/1
  5229 ;;		On exit  : 1F/2
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5232 ;;      Params:         0       0       0       0       0       0
  5233 ;;      Locals:         0       0       0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0
  5235 ;;      Totals:         0       0       0       0       0       0
  5236 ;;Total ram usage:        0 bytes
  5237 ;; Hardware stack levels used: 1
  5238 ;; Hardware stack levels required when called: 7
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_SYSTEM_Initialize
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246     0CA1                     _FVR_Initialize:	
  5247                           ;psect for function _FVR_Initialize
  5248                           
  5249                           
  5250                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x84;
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _FVR_Initialize: []
  5254     0CA1  3084               	movlw	132
  5255     0CA2  0022               	movlb	2	; select bank2
  5256     0CA3  0097               	movwf	23	;volatile
  5257     0CA4  0008               	return
  5258     0CA5                     __end_of_FVR_Initialize:
  5259                           
  5260                           	psect	text18
  5261     0721                     __ptext18:	
  5262 ;; *************** function _EUSART_Initialize *****************
  5263 ;; Defined at:
  5264 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, pclath, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 1F/0
  5275 ;;		On exit  : 1F/1
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5278 ;;      Params:         0       0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0
  5281 ;;      Totals:         0       0       0       0       0       0
  5282 ;;Total ram usage:        0 bytes
  5283 ;; Hardware stack levels used: 1
  5284 ;; Hardware stack levels required when called: 8
  5285 ;; This function calls:
  5286 ;;		_EUSART_SetErrorHandler
  5287 ;;		_EUSART_SetFramingErrorHandler
  5288 ;;		_EUSART_SetOverrunErrorHandler
  5289 ;;		_EUSART_SetRxInterruptHandler
  5290 ;; This function is called by:
  5291 ;;		_SYSTEM_Initialize
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295     0721                     _EUSART_Initialize:	
  5296                           ;psect for function _EUSART_Initialize
  5297                           
  5298                           
  5299                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5303     0721  0021               	movlb	1	; select bank1
  5304     0722  1291               	bcf	17,5	;volatile
  5305                           
  5306                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5307     0723  3086               	movlw	low _EUSART_Receive_ISR
  5308     0724  00C5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5309     0725  3006               	movlw	high _EUSART_Receive_ISR
  5310     0726  00C6               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5311     0727  318C  24C2  3187   	fcall	_EUSART_SetRxInterruptHandler
  5312                           
  5313                           ;mcc_generated_files/eusart.c: 91:     BAUDCON = 0x08;
  5314     072A  3008               	movlw	8
  5315     072B  0023               	movlb	3	; select bank3
  5316     072C  009F               	movwf	31	;volatile
  5317                           
  5318                           ;mcc_generated_files/eusart.c: 94:     RCSTA = 0x90;
  5319     072D  3090               	movlw	144
  5320     072E  009D               	movwf	29	;volatile
  5321                           
  5322                           ;mcc_generated_files/eusart.c: 97:     TXSTA = 0xA4;
  5323     072F  30A4               	movlw	164
  5324     0730  009E               	movwf	30	;volatile
  5325                           
  5326                           ;mcc_generated_files/eusart.c: 100:     SPBRGL = 0x67;
  5327     0731  3067               	movlw	103
  5328     0732  009B               	movwf	27	;volatile
  5329                           
  5330                           ;mcc_generated_files/eusart.c: 103:     SPBRGH = 0x00;
  5331     0733  019C               	clrf	28	;volatile
  5332                           
  5333                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5334     0734  3099               	movlw	low _EUSART_DefaultFramingErrorHandler
  5335     0735  0021               	movlb	1	; select bank1
  5336     0736  00C5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5337     0737  300C               	movlw	high _EUSART_DefaultFramingErrorHandler
  5338     0738  00C6               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5339     0739  318C  24B8  3187   	fcall	_EUSART_SetFramingErrorHandler
  5340                           
  5341                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5342     073C  309D               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5343     073D  00C5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5344     073E  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5345     073F  00C6               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5346     0740  318C  24BD  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5347                           
  5348                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5349     0743  309A               	movlw	low _EUSART_DefaultErrorHandler
  5350     0744  00C5               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5351     0745  300C               	movlw	high _EUSART_DefaultErrorHandler
  5352     0746  00C6               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5353     0747  318C  24B3         	fcall	_EUSART_SetErrorHandler
  5354                           
  5355                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
  5356     0749  0020               	movlb	0	; select bank0
  5357     074A  01B5               	clrf	_eusartRxLastError	;volatile
  5358                           
  5359                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
  5360     074B  01B8               	clrf	_eusartRxHead	;volatile
  5361                           
  5362                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
  5363     074C  01B7               	clrf	_eusartRxTail	;volatile
  5364                           
  5365                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
  5366     074D  01B6               	clrf	_eusartRxCount	;volatile
  5367                           
  5368                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
  5369     074E  0021               	movlb	1	; select bank1
  5370     074F  1691               	bsf	17,5	;volatile
  5371     0750  0008               	return
  5372     0751                     __end_of_EUSART_Initialize:
  5373                           
  5374                           	psect	text19
  5375     0CC2                     __ptext19:	
  5376 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5377 ;; Defined at:
  5378 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5381 ;;		 -> Read_UART(1), EUSART_Receive_ISR(1), 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg
  5388 ;; Tracked objects:
  5389 ;;		On entry : 1F/1
  5390 ;;		On exit  : 1F/1
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5393 ;;      Params:         0       0       2       0       0       0
  5394 ;;      Locals:         0       0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0
  5396 ;;      Totals:         0       0       2       0       0       0
  5397 ;;Total ram usage:        2 bytes
  5398 ;; Hardware stack levels used: 1
  5399 ;; Hardware stack levels required when called: 7
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_EUSART_Initialize
  5404 ;;		_main
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408     0CC2                     _EUSART_SetRxInterruptHandler:	
  5409                           ;psect for function _EUSART_SetRxInterruptHandler
  5410                           
  5411                           
  5412                           ;mcc_generated_files/eusart.c: 235:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5416     0CC2  0846               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5417     0CC3  00E3               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5418     0CC4  0845               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5419     0CC5  00E2               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5420     0CC6  0008               	return
  5421     0CC7                     __end_of_EUSART_SetRxInterruptHandler:
  5422                           
  5423                           	psect	text20
  5424     0CBD                     __ptext20:	
  5425 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5426 ;; Defined at:
  5427 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5430 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg
  5437 ;; Tracked objects:
  5438 ;;		On entry : 1F/1
  5439 ;;		On exit  : 1F/1
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5442 ;;      Params:         0       0       2       0       0       0
  5443 ;;      Locals:         0       0       0       0       0       0
  5444 ;;      Temps:          0       0       0       0       0       0
  5445 ;;      Totals:         0       0       2       0       0       0
  5446 ;;Total ram usage:        2 bytes
  5447 ;; Hardware stack levels used: 1
  5448 ;; Hardware stack levels required when called: 7
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_EUSART_Initialize
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456     0CBD                     _EUSART_SetOverrunErrorHandler:	
  5457                           ;psect for function _EUSART_SetOverrunErrorHandler
  5458                           
  5459                           
  5460                           ;mcc_generated_files/eusart.c: 226:     EUSART_OverrunErrorHandler = interruptHandler;
  5461                           
  5462                           ;incstack = 0
  5463                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5464     0CBD  0846               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5465     0CBE  00DF               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5466     0CBF  0845               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5467     0CC0  00DE               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5468     0CC1  0008               	return
  5469     0CC2                     __end_of_EUSART_SetOverrunErrorHandler:
  5470                           
  5471                           	psect	text21
  5472     0CB8                     __ptext21:	
  5473 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5474 ;; Defined at:
  5475 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5478 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg
  5485 ;; Tracked objects:
  5486 ;;		On entry : 1F/1
  5487 ;;		On exit  : 1F/1
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5490 ;;      Params:         0       0       2       0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0
  5493 ;;      Totals:         0       0       2       0       0       0
  5494 ;;Total ram usage:        2 bytes
  5495 ;; Hardware stack levels used: 1
  5496 ;; Hardware stack levels required when called: 7
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_EUSART_Initialize
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504     0CB8                     _EUSART_SetFramingErrorHandler:	
  5505                           ;psect for function _EUSART_SetFramingErrorHandler
  5506                           
  5507                           
  5508                           ;mcc_generated_files/eusart.c: 222:     EUSART_FramingErrorHandler = interruptHandler;
  5509                           
  5510                           ;incstack = 0
  5511                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5512     0CB8  0846               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5513     0CB9  00E1               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5514     0CBA  0845               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5515     0CBB  00E0               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5516     0CBC  0008               	return
  5517     0CBD                     __end_of_EUSART_SetFramingErrorHandler:
  5518                           
  5519                           	psect	text22
  5520     0CB3                     __ptext22:	
  5521 ;; *************** function _EUSART_SetErrorHandler *****************
  5522 ;; Defined at:
  5523 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5526 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;		None
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg
  5533 ;; Tracked objects:
  5534 ;;		On entry : 1F/1
  5535 ;;		On exit  : 1F/1
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5538 ;;      Params:         0       0       2       0       0       0
  5539 ;;      Locals:         0       0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0
  5541 ;;      Totals:         0       0       2       0       0       0
  5542 ;;Total ram usage:        2 bytes
  5543 ;; Hardware stack levels used: 1
  5544 ;; Hardware stack levels required when called: 7
  5545 ;; This function calls:
  5546 ;;		Nothing
  5547 ;; This function is called by:
  5548 ;;		_EUSART_Initialize
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552     0CB3                     _EUSART_SetErrorHandler:	
  5553                           ;psect for function _EUSART_SetErrorHandler
  5554                           
  5555                           
  5556                           ;mcc_generated_files/eusart.c: 230:     EUSART_ErrorHandler = interruptHandler;
  5557                           
  5558                           ;incstack = 0
  5559                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5560     0CB3  0846               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5561     0CB4  00DD               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5562     0CB5  0845               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5563     0CB6  00DC               	movwf	_EUSART_ErrorHandler^(0+128)
  5564     0CB7  0008               	return
  5565     0CB8                     __end_of_EUSART_SetErrorHandler:
  5566                           
  5567                           	psect	text23
  5568     0D1E                     __ptext23:	
  5569 ;; *************** function _ECCP2_Initialize *****************
  5570 ;; Defined at:
  5571 ;;		line 58 in file "mcc_generated_files/eccp2.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		status,2
  5580 ;; Tracked objects:
  5581 ;;		On entry : 1F/1
  5582 ;;		On exit  : 1F/1
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5585 ;;      Params:         0       0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0
  5588 ;;      Totals:         0       0       0       0       0       0
  5589 ;;Total ram usage:        0 bytes
  5590 ;; Hardware stack levels used: 1
  5591 ;; Hardware stack levels required when called: 7
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_SYSTEM_Initialize
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599     0D1E                     _ECCP2_Initialize:	
  5600                           ;psect for function _ECCP2_Initialize
  5601                           
  5602                           
  5603                           ;mcc_generated_files/eccp2.c: 63:  CCP2CON = 0x35;
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _ECCP2_Initialize: [status,2]
  5607     0D1E  3035               	movlw	53
  5608     0D1F  0025               	movlb	5	; select bank5
  5609     0D20  009A               	movwf	26	;volatile
  5610                           
  5611                           ;mcc_generated_files/eccp2.c: 66:  CCPR2H = 0x00;
  5612     0D21  0199               	clrf	25	;volatile
  5613                           
  5614                           ;mcc_generated_files/eccp2.c: 69:  CCPR2L = 0x00;
  5615     0D22  0198               	clrf	24	;volatile
  5616                           
  5617                           ;mcc_generated_files/eccp2.c: 72:     PIR2bits.CCP2IF = 0;
  5618     0D23  0020               	movlb	0	; select bank0
  5619     0D24  1012               	bcf	18,0	;volatile
  5620                           
  5621                           ;mcc_generated_files/eccp2.c: 75:     PIE2bits.CCP2IE = 1;
  5622     0D25  0021               	movlb	1	; select bank1
  5623     0D26  1412               	bsf	18,0	;volatile
  5624     0D27  0008               	return
  5625     0D28                     __end_of_ECCP2_Initialize:
  5626                           
  5627                           	psect	text24
  5628     0D5D                     __ptext24:	
  5629 ;; *************** function _CMP2_Initialize *****************
  5630 ;; Defined at:
  5631 ;;		line 59 in file "mcc_generated_files/cmp2.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		None
  5640 ;; Tracked objects:
  5641 ;;		On entry : 1F/1
  5642 ;;		On exit  : 1F/1
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5645 ;;      Params:         0       0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0
  5648 ;;      Totals:         0       0       0       0       0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used: 1
  5651 ;; Hardware stack levels required when called: 7
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		_SYSTEM_Initialize
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659     0D5D                     _CMP2_Initialize:	
  5660                           ;psect for function _CMP2_Initialize
  5661                           
  5662                           
  5663                           ;mcc_generated_files/cmp2.c: 66:     PIE2bits.C2IE = 0;
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in _CMP2_Initialize: []
  5667     0D5D  1312               	bcf	18,6	;volatile
  5668                           
  5669                           ;mcc_generated_files/cmp2.c: 69:     CM2CON0 = 0x84;
  5670     0D5E  3084               	movlw	132
  5671     0D5F  0022               	movlb	2	; select bank2
  5672     0D60  0093               	movwf	19	;volatile
  5673                           
  5674                           ;mcc_generated_files/cmp2.c: 72:     CM2CON1 = 0xA1;
  5675     0D61  30A1               	movlw	161
  5676     0D62  0094               	movwf	20	;volatile
  5677                           
  5678                           ;mcc_generated_files/cmp2.c: 75:     PIR2bits.C2IF = 0;
  5679     0D63  0020               	movlb	0	; select bank0
  5680     0D64  1312               	bcf	18,6	;volatile
  5681                           
  5682                           ;mcc_generated_files/cmp2.c: 78:     PIE2bits.C2IE = 1;
  5683     0D65  0021               	movlb	1	; select bank1
  5684     0D66  1712               	bsf	18,6	;volatile
  5685     0D67  0008               	return
  5686     0D68                     __end_of_CMP2_Initialize:
  5687                           
  5688                           	psect	text25
  5689     0D68                     __ptext25:	
  5690 ;; *************** function _CMP1_Initialize *****************
  5691 ;; Defined at:
  5692 ;;		line 60 in file "mcc_generated_files/cmp1.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		None
  5701 ;; Tracked objects:
  5702 ;;		On entry : 1F/8
  5703 ;;		On exit  : 1F/1
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5706 ;;      Params:         0       0       0       0       0       0
  5707 ;;      Locals:         0       0       0       0       0       0
  5708 ;;      Temps:          0       0       0       0       0       0
  5709 ;;      Totals:         0       0       0       0       0       0
  5710 ;;Total ram usage:        0 bytes
  5711 ;; Hardware stack levels used: 1
  5712 ;; Hardware stack levels required when called: 7
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_SYSTEM_Initialize
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720     0D68                     _CMP1_Initialize:	
  5721                           ;psect for function _CMP1_Initialize
  5722                           
  5723                           
  5724                           ;mcc_generated_files/cmp1.c: 67:     PIE2bits.C1IE = 0;
  5725                           
  5726                           ;incstack = 0
  5727                           ; Regs used in _CMP1_Initialize: []
  5728     0D68  0021               	movlb	1	; select bank1
  5729     0D69  1292               	bcf	18,5	;volatile
  5730                           
  5731                           ;mcc_generated_files/cmp1.c: 70:     CM1CON0 = 0x84;
  5732     0D6A  3084               	movlw	132
  5733     0D6B  0022               	movlb	2	; select bank2
  5734     0D6C  0091               	movwf	17	;volatile
  5735                           
  5736                           ;mcc_generated_files/cmp1.c: 73:     CM1CON1 = 0xA0;
  5737     0D6D  30A0               	movlw	160
  5738     0D6E  0092               	movwf	18	;volatile
  5739                           
  5740                           ;mcc_generated_files/cmp1.c: 76:     PIR2bits.C1IF = 0;
  5741     0D6F  0020               	movlb	0	; select bank0
  5742     0D70  1292               	bcf	18,5	;volatile
  5743                           
  5744                           ;mcc_generated_files/cmp1.c: 79:     PIE2bits.C1IE = 1;
  5745     0D71  0021               	movlb	1	; select bank1
  5746     0D72  1692               	bsf	18,5	;volatile
  5747     0D73  0008               	return
  5748     0D74                     __end_of_CMP1_Initialize:
  5749                           
  5750                           	psect	text26
  5751     049D                     __ptext26:	
  5752 ;; *************** function _SPI1_Open *****************
  5753 ;; Defined at:
  5754 ;;		line 72 in file "mcc_generated_files/spi1.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  spi1UniqueCo    1    wreg     enum E358
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  spi1UniqueCo    1    3[BANK1 ] enum E358
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      _Bool 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5763 ;; Tracked objects:
  5764 ;;		On entry : 1F/2
  5765 ;;		On exit  : 1F/4
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5768 ;;      Params:         0       0       0       0       0       0
  5769 ;;      Locals:         0       0       1       0       0       0
  5770 ;;      Temps:          0       0       3       0       0       0
  5771 ;;      Totals:         0       0       4       0       0       0
  5772 ;;Total ram usage:        4 bytes
  5773 ;; Hardware stack levels used: 1
  5774 ;; Hardware stack levels required when called: 7
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782     049D                     _SPI1_Open:	
  5783                           ;psect for function _SPI1_Open
  5784                           
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath]
  5788                           ;SPI1_Open@spi1UniqueConfiguration stored from wreg
  5789     049D  0021               	movlb	1	; select bank1
  5790     049E  00C8               	movwf	SPI1_Open@spi1UniqueConfiguration^(0+128)
  5791                           
  5792                           ;mcc_generated_files/spi1.c: 72: _Bool SPI1_Open(spi1_modes_t spi1UniqueConfiguration);m
      +                          cc_generated_files/spi1.c: 73: {;mcc_generated_files/spi1.c: 74:     if(!SSP1CON1bits.SS
      +                          PEN)
  5793     049F  0024               	movlb	4	; select bank4
  5794     04A0  1A95               	btfsc	21,5	;volatile
  5795     04A1  0008               	return
  5796                           
  5797                           ;mcc_generated_files/spi1.c: 75:     {;mcc_generated_files/spi1.c: 76:         SSP1STAT 
      +                          = spi1_configuration[spi1UniqueConfiguration].stat;
  5798     04A2  0021               	movlb	1	; select bank1
  5799     04A3  0848               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5800     04A4  00C5               	movwf	??_SPI1_Open^(0+128)
  5801     04A5  01C6               	clrf	(??_SPI1_Open^(0+128)+1)
  5802     04A6  35C5               	lslf	??_SPI1_Open^(0+128),f
  5803     04A7  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5804     04A8  35C5               	lslf	??_SPI1_Open^(0+128),f
  5805     04A9  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5806     04AA  302A               	movlw	low (_spi1_configuration+1)
  5807     04AB  0745               	addwf	??_SPI1_Open^(0+128),w
  5808     04AC  0084               	movwf	4
  5809     04AD  3008               	movlw	high (_spi1_configuration+1)
  5810     04AE  3D46               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5811     04AF  3880               	iorlw	128
  5812     04B0  0085               	movwf	5
  5813     04B1  0800               	movf	0,w	;code access
  5814     04B2  0024               	movlb	4	; select bank4
  5815     04B3  0094               	movwf	20	;volatile
  5816                           
  5817                           ;mcc_generated_files/spi1.c: 77:         SSP1CON1 = spi1_configuration[spi1UniqueConfigu
      +                          ration].con1;
  5818     04B4  0021               	movlb	1	; select bank1
  5819     04B5  0848               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5820     04B6  00C5               	movwf	??_SPI1_Open^(0+128)
  5821     04B7  01C6               	clrf	(??_SPI1_Open^(0+128)+1)
  5822     04B8  35C5               	lslf	??_SPI1_Open^(0+128),f
  5823     04B9  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5824     04BA  35C5               	lslf	??_SPI1_Open^(0+128),f
  5825     04BB  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5826     04BC  3029               	movlw	low _spi1_configuration
  5827     04BD  0745               	addwf	??_SPI1_Open^(0+128),w
  5828     04BE  0084               	movwf	4
  5829     04BF  3008               	movlw	high _spi1_configuration
  5830     04C0  3D46               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5831     04C1  3880               	iorlw	128
  5832     04C2  0085               	movwf	5
  5833     04C3  0800               	movf	0,w	;code access
  5834     04C4  0024               	movlb	4	; select bank4
  5835     04C5  0095               	movwf	21	;volatile
  5836                           
  5837                           ;mcc_generated_files/spi1.c: 78:         SSP1CON2 = 0x00;
  5838     04C6  0196               	clrf	22	;volatile
  5839                           
  5840                           ;mcc_generated_files/spi1.c: 79:         SSP1ADD = spi1_configuration[spi1UniqueConfigur
      +                          ation].add;
  5841     04C7  0021               	movlb	1	; select bank1
  5842     04C8  0848               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5843     04C9  00C5               	movwf	??_SPI1_Open^(0+128)
  5844     04CA  01C6               	clrf	(??_SPI1_Open^(0+128)+1)
  5845     04CB  35C5               	lslf	??_SPI1_Open^(0+128),f
  5846     04CC  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5847     04CD  35C5               	lslf	??_SPI1_Open^(0+128),f
  5848     04CE  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5849     04CF  302B               	movlw	low (_spi1_configuration+2)
  5850     04D0  0745               	addwf	??_SPI1_Open^(0+128),w
  5851     04D1  0084               	movwf	4
  5852     04D2  3008               	movlw	high (_spi1_configuration+2)
  5853     04D3  3D46               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5854     04D4  3880               	iorlw	128
  5855     04D5  0085               	movwf	5
  5856     04D6  0800               	movf	0,w	;code access
  5857     04D7  0024               	movlb	4	; select bank4
  5858     04D8  0092               	movwf	18	;volatile
  5859                           
  5860                           ;mcc_generated_files/spi1.c: 80:         TRISBbits.TRISB4 = spi1_configuration[spi1Uniqu
      +                          eConfiguration].operation;
  5861     04D9  0021               	movlb	1	; select bank1
  5862     04DA  0848               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5863     04DB  00C5               	movwf	??_SPI1_Open^(0+128)
  5864     04DC  01C6               	clrf	(??_SPI1_Open^(0+128)+1)
  5865     04DD  35C5               	lslf	??_SPI1_Open^(0+128),f
  5866     04DE  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5867     04DF  35C5               	lslf	??_SPI1_Open^(0+128),f
  5868     04E0  0DC6               	rlf	(??_SPI1_Open^(0+128)+1),f
  5869     04E1  302C               	movlw	low (_spi1_configuration+3)
  5870     04E2  0745               	addwf	??_SPI1_Open^(0+128),w
  5871     04E3  0084               	movwf	4
  5872     04E4  3008               	movlw	high (_spi1_configuration+3)
  5873     04E5  3D46               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5874     04E6  3880               	iorlw	128
  5875     04E7  0085               	movwf	5
  5876     04E8  0800               	movf	0,w	;code access
  5877     04E9  00C7               	movwf	(??_SPI1_Open+2)^(0+128)
  5878     04EA  0EC7               	swapf	(??_SPI1_Open+2)^(0+128),f
  5879     04EB  080D               	movf	13,w	;volatile
  5880     04EC  0647               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5881     04ED  39EF               	andlw	-17
  5882     04EE  0647               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5883     04EF  008D               	movwf	13	;volatile
  5884                           
  5885                           ;mcc_generated_files/spi1.c: 81:         SSP1CON1bits.SSPEN = 1;
  5886     04F0  0024               	movlb	4	; select bank4
  5887     04F1  1695               	bsf	21,5	;volatile
  5888     04F2  0008               	return
  5889     04F3                     __end_of_SPI1_Open:
  5890                           
  5891                           	psect	text27
  5892     0EF1                     __ptext27:	
  5893 ;; *************** function _Route_empty *****************
  5894 ;; Defined at:
  5895 ;;		line 147 in file "main.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  i               2    1[BANK1 ] int 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      _Bool 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5909 ;;      Params:         0       0       0       0       0       0
  5910 ;;      Locals:         0       0       2       0       0       0
  5911 ;;      Temps:          0       0       1       0       0       0
  5912 ;;      Totals:         0       0       3       0       0       0
  5913 ;;Total ram usage:        3 bytes
  5914 ;; Hardware stack levels used: 1
  5915 ;; Hardware stack levels required when called: 7
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923     0EF1                     _Route_empty:	
  5924                           ;psect for function _Route_empty
  5925                           
  5926                           
  5927                           ;main.c: 148:   for(int i=0; i<6; i++){
  5928                           
  5929                           ;incstack = 0
  5930                           ; Regs used in _Route_empty: [wreg+fsr1l+fsr1h+status,2+status,0]
  5931     0EF1  0021               	movlb	1	; select bank1
  5932     0EF2  01C6               	clrf	Route_empty@i^(0+128)
  5933     0EF3  01C7               	clrf	(Route_empty@i+1)^(0+128)
  5934     0EF4                     l4558:
  5935                           
  5936                           ;main.c: 149:       if (route[i] != 0) return 0;
  5937     0EF4  0021               	movlb	1	; select bank1
  5938     0EF5  0846               	movf	Route_empty@i^(0+128),w
  5939     0EF6  3E20               	addlw	(low (_route| 0))& (0+255)
  5940     0EF7  0086               	movwf	6
  5941     0EF8  0187               	clrf	7
  5942     0EF9  0801               	movf	1,w
  5943     0EFA  1903               	btfsc	3,2
  5944     0EFB  2EFE               	goto	l4564
  5945     0EFC  3000               	movlw	0
  5946     0EFD  0008               	return
  5947     0EFE                     l4564:
  5948                           
  5949                           ;main.c: 150:     }
  5950     0EFE  3001               	movlw	1
  5951     0EFF  07C6               	addwf	Route_empty@i^(0+128),f
  5952     0F00  3000               	movlw	0
  5953     0F01  3DC7               	addwfc	(Route_empty@i+1)^(0+128),f
  5954     0F02  0847               	movf	(Route_empty@i+1)^(0+128),w
  5955     0F03  3A80               	xorlw	128
  5956     0F04  00C5               	movwf	??_Route_empty^(0+128)
  5957     0F05  3080               	movlw	128
  5958     0F06  0245               	subwf	??_Route_empty^(0+128),w
  5959     0F07  1D03               	skipz
  5960     0F08  2F0B               	goto	u3385
  5961     0F09  3006               	movlw	6
  5962     0F0A  0246               	subwf	Route_empty@i^(0+128),w
  5963     0F0B                     u3385:
  5964     0F0B  1C03               	skipc
  5965     0F0C  2EF4               	goto	l4558
  5966                           
  5967                           ;main.c: 151:   return 1;
  5968     0F0D  3001               	movlw	1
  5969     0F0E  0008               	return
  5970     0F0F                     __end_of_Route_empty:
  5971                           
  5972                           	psect	text28
  5973     06BC                     __ptext28:	
  5974 ;; *************** function _Next_index *****************
  5975 ;; Defined at:
  5976 ;;		line 153 in file "main.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  i               2    9[BANK1 ] int 
  5981 ;;  index_          2    7[BANK1 ] int 
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  1    wreg      unsigned char 
  5984 ;; Registers used:
  5985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5986 ;; Tracked objects:
  5987 ;;		On entry : 1F/1
  5988 ;;		On exit  : 1F/1
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5991 ;;      Params:         0       0       0       0       0       0
  5992 ;;      Locals:         0       0       4       0       0       0
  5993 ;;      Temps:          0       0       1       0       0       0
  5994 ;;      Totals:         0       0       5       0       0       0
  5995 ;;Total ram usage:        5 bytes
  5996 ;; Hardware stack levels used: 1
  5997 ;; Hardware stack levels required when called: 8
  5998 ;; This function calls:
  5999 ;;		___awmod
  6000 ;; This function is called by:
  6001 ;;		_main
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005     06BC                     _Next_index:	
  6006                           ;psect for function _Next_index
  6007                           
  6008                           
  6009                           ;main.c: 155:     for(int i=1; i<6;i++){
  6010                           
  6011                           ;incstack = 0
  6012                           ; Regs used in _Next_index: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6013     06BC  3001               	movlw	1
  6014     06BD  00CE               	movwf	Next_index@i^(0+128)
  6015     06BE  3000               	movlw	0
  6016     06BF  00CF               	movwf	(Next_index@i^(0+128)+1)
  6017     06C0                     l4578:
  6018                           
  6019                           ;main.c: 156:         index_ = (index+i)%6;
  6020     06C0  3006               	movlw	6
  6021     06C1  0021               	movlb	1	; select bank1
  6022     06C2  00C5               	movwf	___awmod@divisor^(0+128)
  6023     06C3  3000               	movlw	0
  6024     06C4  00C6               	movwf	(___awmod@divisor^(0+128)+1)
  6025     06C5  0020               	movlb	0	; select bank0
  6026     06C6  083D               	movf	_index,w
  6027     06C7  0021               	movlb	1	; select bank1
  6028     06C8  074E               	addwf	Next_index@i^(0+128),w
  6029     06C9  00C7               	movwf	___awmod@dividend^(0+128)
  6030     06CA  084F               	movf	(Next_index@i+1)^(0+128),w
  6031     06CB  1803               	skipnc
  6032     06CC  0A4F               	incf	(Next_index@i+1)^(0+128),w
  6033     06CD  00C8               	movwf	(___awmod@dividend^(0+128)+1)
  6034     06CE  3185  2540  3186   	fcall	___awmod
  6035     06D1  0846               	movf	(?___awmod+1)^(0+128),w
  6036     06D2  00CD               	movwf	(Next_index@index_+1)^(0+128)
  6037     06D3  0845               	movf	?___awmod^(0+128),w
  6038     06D4  00CC               	movwf	Next_index@index_^(0+128)
  6039                           
  6040                           ;main.c: 157:         if(route[index_]==1){
  6041     06D5  084C               	movf	Next_index@index_^(0+128),w
  6042     06D6  3E20               	addlw	(low (_route| 0))& (0+255)
  6043     06D7  0086               	movwf	6
  6044     06D8  0187               	clrf	7
  6045     06D9  0301               	decf	1,w
  6046     06DA  1D03               	btfss	3,2
  6047     06DB  2EDF               	goto	l4586
  6048     06DC                     l4582:
  6049                           
  6050                           ;main.c: 158:         return index_;
  6051     06DC  0021               	movlb	1	; select bank1
  6052     06DD  084C               	movf	Next_index@index_^(0+128),w
  6053     06DE  0008               	return
  6054     06DF                     l4586:
  6055                           
  6056                           ;main.c: 160:     }
  6057     06DF  3001               	movlw	1
  6058     06E0  07CE               	addwf	Next_index@i^(0+128),f
  6059     06E1  3000               	movlw	0
  6060     06E2  3DCF               	addwfc	(Next_index@i+1)^(0+128),f
  6061     06E3  084F               	movf	(Next_index@i+1)^(0+128),w
  6062     06E4  3A80               	xorlw	128
  6063     06E5  00CB               	movwf	??_Next_index^(0+128)
  6064     06E6  3080               	movlw	128
  6065     06E7  024B               	subwf	??_Next_index^(0+128),w
  6066     06E8  1D03               	skipz
  6067     06E9  2EEC               	goto	u3405
  6068     06EA  3006               	movlw	6
  6069     06EB  024E               	subwf	Next_index@i^(0+128),w
  6070     06EC                     u3405:
  6071     06EC  1803               	btfsc	3,0
  6072     06ED  2EDC               	goto	l4582
  6073     06EE  2EC0               	goto	l4578
  6074     06EF                     __end_of_Next_index:
  6075                           
  6076                           	psect	text29
  6077     0609                     __ptext29:	
  6078 ;; *************** function _Next_floor *****************
  6079 ;; Defined at:
  6080 ;;		line 164 in file "main.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  index_          2    7[BANK1 ] int 
  6085 ;;  i               2    9[BANK1 ] int 
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      unsigned char 
  6088 ;; Registers used:
  6089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 1F/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6095 ;;      Params:         0       0       0       0       0       0
  6096 ;;      Locals:         0       0       4       0       0       0
  6097 ;;      Temps:          0       0       1       0       0       0
  6098 ;;      Totals:         0       0       5       0       0       0
  6099 ;;Total ram usage:        5 bytes
  6100 ;; Hardware stack levels used: 1
  6101 ;; Hardware stack levels required when called: 8
  6102 ;; This function calls:
  6103 ;;		___awmod
  6104 ;; This function is called by:
  6105 ;;		_main
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109     0609                     _Next_floor:	
  6110                           ;psect for function _Next_floor
  6111                           
  6112                           
  6113                           ;main.c: 165:     for(int i=1; i<6;i++){
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _Next_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6117     0609  3001               	movlw	1
  6118     060A  0021               	movlb	1	; select bank1
  6119     060B  00CE               	movwf	Next_floor@i^(0+128)
  6120     060C  3000               	movlw	0
  6121     060D  00CF               	movwf	(Next_floor@i^(0+128)+1)
  6122     060E                     l4596:
  6123                           
  6124                           ;main.c: 166:         int index_ = (index+i)%6;
  6125     060E  3006               	movlw	6
  6126     060F  0021               	movlb	1	; select bank1
  6127     0610  00C5               	movwf	___awmod@divisor^(0+128)
  6128     0611  3000               	movlw	0
  6129     0612  00C6               	movwf	(___awmod@divisor^(0+128)+1)
  6130     0613  0020               	movlb	0	; select bank0
  6131     0614  083D               	movf	_index,w
  6132     0615  0021               	movlb	1	; select bank1
  6133     0616  074E               	addwf	Next_floor@i^(0+128),w
  6134     0617  00C7               	movwf	___awmod@dividend^(0+128)
  6135     0618  084F               	movf	(Next_floor@i+1)^(0+128),w
  6136     0619  1803               	skipnc
  6137     061A  0A4F               	incf	(Next_floor@i+1)^(0+128),w
  6138     061B  00C8               	movwf	(___awmod@dividend^(0+128)+1)
  6139     061C  3185  2540  3186   	fcall	___awmod
  6140     061F  0846               	movf	(?___awmod+1)^(0+128),w
  6141     0620  00CD               	movwf	(Next_floor@index_+1)^(0+128)
  6142     0621  0845               	movf	?___awmod^(0+128),w
  6143     0622  00CC               	movwf	Next_floor@index_^(0+128)
  6144                           
  6145                           ;main.c: 167:         if(route[index_]==1){
  6146     0623  084C               	movf	Next_floor@index_^(0+128),w
  6147     0624  3E20               	addlw	(low (_route| 0))& (0+255)
  6148     0625  0086               	movwf	6
  6149     0626  0187               	clrf	7
  6150     0627  0301               	decf	1,w
  6151     0628  1D03               	btfss	3,2
  6152     0629  2E36               	goto	l4606
  6153                           
  6154                           ;main.c: 168:         next_floor = FLOORS[index_];
  6155     062A  3023               	movlw	low _FLOORS
  6156     062B  074C               	addwf	Next_floor@index_^(0+128),w
  6157     062C  0084               	movwf	4
  6158     062D  3008               	movlw	high _FLOORS
  6159     062E  3D4D               	addwfc	(Next_floor@index_+1)^(0+128),w
  6160     062F  3880               	iorlw	128
  6161     0630  0085               	movwf	5
  6162     0631  0800               	movf	0,w	;code access
  6163     0632  0020               	movlb	0	; select bank0
  6164     0633  00BB               	movwf	_next_floor
  6165     0634                     l4602:
  6166                           
  6167                           ;main.c: 169:         return next_floor;
  6168     0634  083B               	movf	_next_floor,w
  6169     0635  0008               	return
  6170     0636                     l4606:
  6171                           
  6172                           ;main.c: 171:     }
  6173     0636  3001               	movlw	1
  6174     0637  07CE               	addwf	Next_floor@i^(0+128),f
  6175     0638  3000               	movlw	0
  6176     0639  3DCF               	addwfc	(Next_floor@i+1)^(0+128),f
  6177     063A  084F               	movf	(Next_floor@i+1)^(0+128),w
  6178     063B  3A80               	xorlw	128
  6179     063C  00CB               	movwf	??_Next_floor^(0+128)
  6180     063D  3080               	movlw	128
  6181     063E  024B               	subwf	??_Next_floor^(0+128),w
  6182     063F  1D03               	skipz
  6183     0640  2E43               	goto	u3425
  6184     0641  3006               	movlw	6
  6185     0642  024E               	subwf	Next_floor@i^(0+128),w
  6186     0643                     u3425:
  6187     0643  1C03               	skipc
  6188     0644  2E0E               	goto	l4596
  6189                           
  6190                           ;main.c: 172:     next_floor = 0;
  6191     0645  0020               	movlb	0	; select bank0
  6192     0646  01BB               	clrf	_next_floor
  6193     0647  2E34               	goto	l4602
  6194     0648                     __end_of_Next_floor:
  6195                           
  6196                           	psect	text30
  6197     0540                     __ptext30:	
  6198 ;; *************** function ___awmod *****************
  6199 ;; Defined at:
  6200 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  divisor         2    0[BANK1 ] int 
  6203 ;;  dividend        2    2[BANK1 ] int 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  sign            1    5[BANK1 ] unsigned char 
  6206 ;;  counter         1    4[BANK1 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  2    0[BANK1 ] int 
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0
  6211 ;; Tracked objects:
  6212 ;;		On entry : 1F/1
  6213 ;;		On exit  : 1F/1
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6216 ;;      Params:         0       0       4       0       0       0
  6217 ;;      Locals:         0       0       2       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0
  6219 ;;      Totals:         0       0       6       0       0       0
  6220 ;;Total ram usage:        6 bytes
  6221 ;; Hardware stack levels used: 1
  6222 ;; Hardware stack levels required when called: 7
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_Next_index
  6227 ;;		_Next_floor
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231     0540                     ___awmod:	
  6232                           ;psect for function ___awmod
  6233                           
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6237     0540  01CA               	clrf	___awmod@sign^(0+128)
  6238     0541  1FC8               	btfss	(___awmod@dividend+1)^(0+128),7
  6239     0542  2D4A               	goto	l4442
  6240     0543  09C7               	comf	___awmod@dividend^(0+128),f
  6241     0544  09C8               	comf	(___awmod@dividend+1)^(0+128),f
  6242     0545  0AC7               	incf	___awmod@dividend^(0+128),f
  6243     0546  1903               	skipnz
  6244     0547  0AC8               	incf	(___awmod@dividend+1)^(0+128),f
  6245     0548  3001               	movlw	1
  6246     0549  00CA               	movwf	___awmod@sign^(0+128)
  6247     054A                     l4442:
  6248     054A  1FC6               	btfss	(___awmod@divisor+1)^(0+128),7
  6249     054B  2D51               	goto	l4446
  6250     054C  09C5               	comf	___awmod@divisor^(0+128),f
  6251     054D  09C6               	comf	(___awmod@divisor+1)^(0+128),f
  6252     054E  0AC5               	incf	___awmod@divisor^(0+128),f
  6253     054F  1903               	skipnz
  6254     0550  0AC6               	incf	(___awmod@divisor+1)^(0+128),f
  6255     0551                     l4446:
  6256     0551  0845               	movf	___awmod@divisor^(0+128),w
  6257     0552  0446               	iorwf	(___awmod@divisor+1)^(0+128),w
  6258     0553  1903               	btfsc	3,2
  6259     0554  2D76               	goto	l4464
  6260     0555  3001               	movlw	1
  6261     0556  00C9               	movwf	___awmod@counter^(0+128)
  6262     0557                     l4454:
  6263     0557  1BC6               	btfsc	(___awmod@divisor+1)^(0+128),7
  6264     0558  2D61               	goto	l4456
  6265     0559  3001               	movlw	1
  6266     055A                     u3275:
  6267     055A  35C5               	lslf	___awmod@divisor^(0+128),f
  6268     055B  0DC6               	rlf	(___awmod@divisor+1)^(0+128),f
  6269     055C  0B89               	decfsz	9,f
  6270     055D  2D5A               	goto	u3275
  6271     055E  3001               	movlw	1
  6272     055F  07C9               	addwf	___awmod@counter^(0+128),f
  6273     0560  2D57               	goto	l4454
  6274     0561                     l4456:
  6275     0561  0846               	movf	(___awmod@divisor+1)^(0+128),w
  6276     0562  0248               	subwf	(___awmod@dividend+1)^(0+128),w
  6277     0563  1D03               	skipz
  6278     0564  2D67               	goto	u3295
  6279     0565  0845               	movf	___awmod@divisor^(0+128),w
  6280     0566  0247               	subwf	___awmod@dividend^(0+128),w
  6281     0567                     u3295:
  6282     0567  1C03               	skipc
  6283     0568  2D6D               	goto	l4460
  6284     0569  0845               	movf	___awmod@divisor^(0+128),w
  6285     056A  02C7               	subwf	___awmod@dividend^(0+128),f
  6286     056B  0846               	movf	(___awmod@divisor+1)^(0+128),w
  6287     056C  3BC8               	subwfb	(___awmod@dividend+1)^(0+128),f
  6288     056D                     l4460:
  6289     056D  3001               	movlw	1
  6290     056E                     u3305:
  6291     056E  36C6               	lsrf	(___awmod@divisor+1)^(0+128),f
  6292     056F  0CC5               	rrf	___awmod@divisor^(0+128),f
  6293     0570  0B89               	decfsz	9,f
  6294     0571  2D6E               	goto	u3305
  6295     0572  3001               	movlw	1
  6296     0573  02C9               	subwf	___awmod@counter^(0+128),f
  6297     0574  1D03               	btfss	3,2
  6298     0575  2D61               	goto	l4456
  6299     0576                     l4464:
  6300     0576  084A               	movf	___awmod@sign^(0+128),w
  6301     0577  1903               	btfsc	3,2
  6302     0578  2D7E               	goto	l4468
  6303     0579  09C7               	comf	___awmod@dividend^(0+128),f
  6304     057A  09C8               	comf	(___awmod@dividend+1)^(0+128),f
  6305     057B  0AC7               	incf	___awmod@dividend^(0+128),f
  6306     057C  1903               	skipnz
  6307     057D  0AC8               	incf	(___awmod@dividend+1)^(0+128),f
  6308     057E                     l4468:
  6309     057E  0848               	movf	(___awmod@dividend+1)^(0+128),w
  6310     057F  00C6               	movwf	(?___awmod+1)^(0+128)
  6311     0580  0847               	movf	___awmod@dividend^(0+128),w
  6312     0581  00C5               	movwf	?___awmod^(0+128)
  6313     0582  0008               	return
  6314     0583                     __end_of___awmod:
  6315                           
  6316                           	psect	text31
  6317     0648                     __ptext31:	
  6318 ;; *************** function _Ini_matrix *****************
  6319 ;; Defined at:
  6320 ;;		line 209 in file "main.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  i               1   11[BANK1 ] unsigned char 
  6325 ;;  i               1    7[BANK1 ] unsigned char 
  6326 ;;  data            2    8[BANK1 ] unsigned char [2]
  6327 ;;  k               1   10[BANK1 ] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      void 
  6330 ;; Registers used:
  6331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 1F/4
  6334 ;;		On exit  : 1F/1
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6337 ;;      Params:         0       0       0       0       0       0
  6338 ;;      Locals:         0       0       5       0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0
  6340 ;;      Totals:         0       0       5       0       0       0
  6341 ;;Total ram usage:        5 bytes
  6342 ;; Hardware stack levels used: 1
  6343 ;; Hardware stack levels required when called: 9
  6344 ;; This function calls:
  6345 ;;		_Tx_spi
  6346 ;; This function is called by:
  6347 ;;		_main
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351     0648                     _Ini_matrix:	
  6352                           ;psect for function _Ini_matrix
  6353                           
  6354                           
  6355                           ;main.c: 210:     uint8_t data[2];;main.c: 211:     uint8_t k=0;
  6356                           
  6357                           ;incstack = 0
  6358                           ; Regs used in _Ini_matrix: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6359     0648  0021               	movlb	1	; select bank1
  6360     0649  01CF               	clrf	Ini_matrix@k^(0+128)
  6361                           
  6362                           ;main.c: 213:     for(uint8_t i=0;i<6;i++){
  6363     064A  01CC               	clrf	Ini_matrix@i^(0+128)
  6364     064B                     l4654:
  6365                           
  6366                           ;main.c: 214:         data[0]= MATRIX_CONFIG[k];
  6367     064B  084F               	movf	Ini_matrix@k^(0+128),w
  6368     064C  3E0E               	addlw	low (_MATRIX_CONFIG| (0+32768))
  6369     064D  0084               	movwf	4
  6370     064E  3088               	movlw	high (_MATRIX_CONFIG| (0+32768))
  6371     064F  1803               	skipnc
  6372     0650  3E01               	addlw	1
  6373     0651  0085               	movwf	5
  6374     0652  0800               	movf	0,w	;code access
  6375     0653  00CD               	movwf	Ini_matrix@data^(0+128)
  6376                           
  6377                           ;main.c: 215:         data[1]= MATRIX_CONFIG[k+1];
  6378     0654  084F               	movf	Ini_matrix@k^(0+128),w
  6379     0655  3E0F               	addlw	low ((_MATRIX_CONFIG+1)| (0+32768))
  6380     0656  0084               	movwf	4
  6381     0657  3088               	movlw	high ((_MATRIX_CONFIG+1)| (0+32768))
  6382     0658  1803               	skipnc
  6383     0659  3E01               	addlw	1
  6384     065A  0085               	movwf	5
  6385     065B  0800               	movf	0,w	;code access
  6386     065C  00CE               	movwf	(Ini_matrix@data^(0+128)+1)
  6387                           
  6388                           ;main.c: 216:         k=k+2;
  6389     065D  084F               	movf	Ini_matrix@k^(0+128),w
  6390     065E  3E02               	addlw	2
  6391     065F  00CF               	movwf	Ini_matrix@k^(0+128)
  6392                           
  6393                           ;main.c: 217:         Tx_spi(data, 2);
  6394     0660  30CD               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6395     0661  00C9               	movwf	Tx_spi@data^(0+128)
  6396     0662  3002               	movlw	2
  6397     0663  00CA               	movwf	Tx_spi@dataSize^(0+128)
  6398     0664  3000               	movlw	0
  6399     0665  00CB               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6400     0666  318E  260B  3186   	fcall	_Tx_spi
  6401                           
  6402                           ;main.c: 218:     }
  6403     0669  3001               	movlw	1
  6404     066A  0021               	movlb	1	; select bank1
  6405     066B  07CC               	addwf	Ini_matrix@i^(0+128),f
  6406     066C  3006               	movlw	6
  6407     066D  024C               	subwf	Ini_matrix@i^(0+128),w
  6408     066E  1C03               	skipc
  6409     066F  2E4B               	goto	l4654
  6410                           
  6411                           ;main.c: 220:     data[1] = 0b00000000;
  6412     0670  01CE               	clrf	(Ini_matrix@data^(0+128)+1)
  6413                           
  6414                           ;main.c: 221:     for(uint8_t i=1;i<9;i++){
  6415     0671  3001               	movlw	1
  6416     0672  00D0               	movwf	Ini_matrix@i_1697^(0+128)
  6417     0673                     l4672:
  6418                           
  6419                           ;main.c: 222:     data[0] = i;
  6420     0673  0850               	movf	Ini_matrix@i_1697^(0+128),w
  6421     0674  00CD               	movwf	Ini_matrix@data^(0+128)
  6422                           
  6423                           ;main.c: 223:     Tx_spi(data, 2);
  6424     0675  30CD               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6425     0676  00C9               	movwf	Tx_spi@data^(0+128)
  6426     0677  3002               	movlw	2
  6427     0678  00CA               	movwf	Tx_spi@dataSize^(0+128)
  6428     0679  3000               	movlw	0
  6429     067A  00CB               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6430     067B  318E  260B  3186   	fcall	_Tx_spi
  6431                           
  6432                           ;main.c: 224:     }
  6433     067E  3001               	movlw	1
  6434     067F  0021               	movlb	1	; select bank1
  6435     0680  07D0               	addwf	Ini_matrix@i_1697^(0+128),f
  6436     0681  3009               	movlw	9
  6437     0682  0250               	subwf	Ini_matrix@i_1697^(0+128),w
  6438     0683  1803               	btfsc	3,0
  6439     0684  0008               	return
  6440     0685  2E73               	goto	l4672
  6441     0686                     __end_of_Ini_matrix:
  6442                           
  6443                           	psect	text32
  6444     0E4F                     __ptext32:	
  6445 ;; *************** function _Idle *****************
  6446 ;; Defined at:
  6447 ;;		line 188 in file "main.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;		None
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;		None
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  1    wreg      void 
  6454 ;; Registers used:
  6455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 1F/2
  6458 ;;		On exit  : 18/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6461 ;;      Params:         0       0       0       0       0       0
  6462 ;;      Locals:         0       0       0       0       0       0
  6463 ;;      Temps:          0       0       0       0       0       0
  6464 ;;      Totals:         0       0       0       0       0       0
  6465 ;;Total ram usage:        0 bytes
  6466 ;; Hardware stack levels used: 1
  6467 ;; Hardware stack levels required when called: 11
  6468 ;; This function calls:
  6469 ;;		_Motor_Turn_Off
  6470 ;;		_Motor_Turn_On
  6471 ;; This function is called by:
  6472 ;;		_main
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476     0E4F                     _Idle:	
  6477                           ;psect for function _Idle
  6478                           
  6479                           
  6480                           ;main.c: 189:   idle = 1;
  6481                           
  6482                           ;incstack = 0
  6483                           ; Regs used in _Idle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6484     0E4F  3001               	movlw	1
  6485     0E50  0020               	movlb	0	; select bank0
  6486     0E51  00B9               	movwf	_idle
  6487                           
  6488                           ;main.c: 190:   if(current_floor == 0){
  6489     0E52  083C               	movf	_current_floor,w
  6490     0E53  1D03               	btfss	3,2
  6491     0E54  2E5C               	goto	l877
  6492                           
  6493                           ;main.c: 191:       LATAbits.LATA7 = 1;
  6494     0E55  0022               	movlb	2	; select bank2
  6495     0E56  178C               	bsf	12,7	;volatile
  6496                           
  6497                           ;main.c: 192:       Motor_Turn_Off();
  6498     0E57  318D  2552         	fcall	_Motor_Turn_Off
  6499                           
  6500                           ;main.c: 193:       index = 0;
  6501     0E59  0020               	movlb	0	; select bank0
  6502     0E5A  01BD               	clrf	_index
  6503                           
  6504                           ;main.c: 194:     }
  6505     0E5B  0008               	return
  6506     0E5C                     l877:	
  6507                           ;main.c: 195:   else{
  6508                           
  6509                           
  6510                           ;main.c: 196:       LATAbits.LATA7 = 0;
  6511     0E5C  0022               	movlb	2	; select bank2
  6512     0E5D  138C               	bcf	12,7	;volatile
  6513                           
  6514                           ;main.c: 197:       Motor_Turn_On();
  6515     0E5E  318D  25A7         	fcall	_Motor_Turn_On
  6516     0E60  0008               	return
  6517     0E61                     __end_of_Idle:
  6518                           
  6519                           	psect	text33
  6520     0DA7                     __ptext33:	
  6521 ;; *************** function _Motor_Turn_On *****************
  6522 ;; Defined at:
  6523 ;;		line 14 in file "main.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;		None
  6526 ;; Auto vars:     Size  Location     Type
  6527 ;;		None
  6528 ;; Return value:  Size  Location     Type
  6529 ;;                  1    wreg      void 
  6530 ;; Registers used:
  6531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6532 ;; Tracked objects:
  6533 ;;		On entry : 1F/2
  6534 ;;		On exit  : 18/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6537 ;;      Params:         0       0       0       0       0       0
  6538 ;;      Locals:         0       0       0       0       0       0
  6539 ;;      Temps:          0       0       0       0       0       0
  6540 ;;      Totals:         0       0       0       0       0       0
  6541 ;;Total ram usage:        0 bytes
  6542 ;; Hardware stack levels used: 1
  6543 ;; Hardware stack levels required when called: 10
  6544 ;; This function calls:
  6545 ;;		_Matrix_update_dir
  6546 ;; This function is called by:
  6547 ;;		_Start
  6548 ;;		_Idle
  6549 ;;		_main
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553     0DA7                     _Motor_Turn_On:	
  6554                           ;psect for function _Motor_Turn_On
  6555                           
  6556                           
  6557                           ;main.c: 15:     if(CCP3CONbits.CCP3M != 0x0C){
  6558                           
  6559                           ;incstack = 0
  6560                           ; Regs used in _Motor_Turn_On: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6561     0DA7  0026               	movlb	6	; select bank6
  6562     0DA8  0813               	movf	19,w	;volatile
  6563     0DA9  390F               	andlw	15
  6564     0DAA  3A0C               	xorlw	12
  6565     0DAB  1903               	skipnz
  6566     0DAC  0008               	return
  6567                           
  6568                           ;main.c: 16:         CCP3CONbits.CCP3M = 0x0C;
  6569     0DAD  0813               	movf	19,w	;volatile
  6570     0DAE  39F0               	andlw	-16
  6571     0DAF  380C               	iorlw	12
  6572     0DB0  0093               	movwf	19	;volatile
  6573                           
  6574                           ;main.c: 17:         Matrix_update_dir();
  6575     0DB1  3183  23A3         	fcall	_Matrix_update_dir
  6576     0DB3  0008               	return
  6577     0DB4                     __end_of_Motor_Turn_On:
  6578                           
  6579                           	psect	text34
  6580     0D52                     __ptext34:	
  6581 ;; *************** function _Motor_Turn_Off *****************
  6582 ;; Defined at:
  6583 ;;		line 7 in file "main.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  1    wreg      void 
  6590 ;; Registers used:
  6591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 18/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6597 ;;      Params:         0       0       0       0       0       0
  6598 ;;      Locals:         0       0       0       0       0       0
  6599 ;;      Temps:          0       0       0       0       0       0
  6600 ;;      Totals:         0       0       0       0       0       0
  6601 ;;Total ram usage:        0 bytes
  6602 ;; Hardware stack levels used: 1
  6603 ;; Hardware stack levels required when called: 10
  6604 ;; This function calls:
  6605 ;;		_Matrix_update_dir
  6606 ;; This function is called by:
  6607 ;;		_Start
  6608 ;;		_Idle
  6609 ;;		_main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613     0D52                     _Motor_Turn_Off:	
  6614                           ;psect for function _Motor_Turn_Off
  6615                           
  6616                           
  6617                           ;main.c: 8:     if(CCP3CONbits.CCP3M != 0x00){
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _Motor_Turn_Off: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6621     0D52  0026               	movlb	6	; select bank6
  6622     0D53  0813               	movf	19,w	;volatile
  6623     0D54  390F               	andlw	15
  6624     0D55  3A00               	xorlw	0
  6625     0D56  1903               	skipnz
  6626     0D57  0008               	return
  6627                           
  6628                           ;main.c: 9:         CCP3CONbits.CCP3M = 0x00;
  6629     0D58  30F0               	movlw	-16
  6630     0D59  0593               	andwf	19,f	;volatile
  6631                           
  6632                           ;main.c: 10:         Matrix_update_dir();
  6633     0D5A  3183  23A3         	fcall	_Matrix_update_dir
  6634     0D5C  0008               	return
  6635     0D5D                     __end_of_Motor_Turn_Off:
  6636                           
  6637                           	psect	text35
  6638     03A3                     __ptext35:	
  6639 ;; *************** function _Matrix_update_dir *****************
  6640 ;; Defined at:
  6641 ;;		line 237 in file "main.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;		None
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  i               1   16[BANK1 ] unsigned char 
  6646 ;;  i               2   17[BANK1 ] int 
  6647 ;;  route_          4    8[BANK1 ] _Bool [4]
  6648 ;;  data            2   14[BANK1 ] unsigned char [2]
  6649 ;;  display_dir     1   13[BANK1 ] unsigned char 
  6650 ;;  mask            1   12[BANK1 ] unsigned char 
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  1    wreg      void 
  6653 ;; Registers used:
  6654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6655 ;; Tracked objects:
  6656 ;;		On entry : 1F/6
  6657 ;;		On exit  : 1F/1
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6660 ;;      Params:         0       0       0       0       0       0
  6661 ;;      Locals:         0       0      11       0       0       0
  6662 ;;      Temps:          0       0       1       0       0       0
  6663 ;;      Totals:         0       0      12       0       0       0
  6664 ;;Total ram usage:       12 bytes
  6665 ;; Hardware stack levels used: 1
  6666 ;; Hardware stack levels required when called: 9
  6667 ;; This function calls:
  6668 ;;		_Tx_spi
  6669 ;;		___bmul
  6670 ;; This function is called by:
  6671 ;;		_Motor_Turn_Off
  6672 ;;		_Motor_Turn_On
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676     03A3                     _Matrix_update_dir:	
  6677                           ;psect for function _Matrix_update_dir
  6678                           
  6679                           
  6680                           ;main.c: 238:     uint8_t data[2];;main.c: 239:     uint8_t display_dir;;main.c: 241:   
      +                            _Bool route_[4];;main.c: 242:     route_[0] = route[0];
  6681                           
  6682                           ;incstack = 0
  6683                           ; Regs used in _Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6684     03A3  0020               	movlb	0	; select bank0
  6685     03A4  0820               	movf	_route,w
  6686     03A5  0021               	movlb	1	; select bank1
  6687     03A6  00CD               	movwf	Matrix_update_dir@route_^(0+128)
  6688                           
  6689                           ;main.c: 243:     route_[1] = route[1] | route[5];
  6690     03A7  0020               	movlb	0	; select bank0
  6691     03A8  0821               	movf	_route+1,w
  6692     03A9  0425               	iorwf	_route+5,w
  6693     03AA  0021               	movlb	1	; select bank1
  6694     03AB  00CE               	movwf	(Matrix_update_dir@route_^(0+128)+1)
  6695                           
  6696                           ;main.c: 244:     route_[2] = route[2] | route[4];
  6697     03AC  0020               	movlb	0	; select bank0
  6698     03AD  0822               	movf	_route+2,w
  6699     03AE  0424               	iorwf	_route+4,w
  6700     03AF  0021               	movlb	1	; select bank1
  6701     03B0  00CF               	movwf	(Matrix_update_dir@route_^(0+128)+2)
  6702                           
  6703                           ;main.c: 245:     route_[3] = route[3];
  6704     03B1  0020               	movlb	0	; select bank0
  6705     03B2  0823               	movf	_route+3,w
  6706     03B3  0021               	movlb	1	; select bank1
  6707     03B4  00D0               	movwf	(Matrix_update_dir@route_^(0+128)+3)
  6708                           
  6709                           ;main.c: 247:     uint8_t mask = 0;
  6710     03B5  01D1               	clrf	Matrix_update_dir@mask^(0+128)
  6711                           
  6712                           ;main.c: 249:     for (int i = 0; i < 4; i++) {
  6713     03B6  01D6               	clrf	Matrix_update_dir@i^(0+128)
  6714     03B7  01D7               	clrf	(Matrix_update_dir@i+1)^(0+128)
  6715     03B8                     l4028:
  6716                           
  6717                           ;main.c: 250:         if (route_[i]) mask |= (1 << i);
  6718     03B8  0021               	movlb	1	; select bank1
  6719     03B9  0856               	movf	Matrix_update_dir@i^(0+128),w
  6720     03BA  3ECD               	addlw	(low (Matrix_update_dir@route_| 0))& (0+255)
  6721     03BB  0086               	movwf	6
  6722     03BC  0187               	clrf	7
  6723     03BD  0801               	movf	1,w
  6724     03BE  1903               	btfsc	3,2
  6725     03BF  2BC9               	goto	l4032
  6726     03C0  3001               	movlw	1
  6727     03C1  00CC               	movwf	??_Matrix_update_dir^(0+128)
  6728     03C2  0A56               	incf	Matrix_update_dir@i^(0+128),w
  6729     03C3  2BC5               	goto	u2944
  6730     03C4                     u2945:
  6731     03C4  35CC               	lslf	??_Matrix_update_dir^(0+128),f
  6732     03C5                     u2944:
  6733     03C5  0B89               	decfsz	9,f
  6734     03C6  2BC4               	goto	u2945
  6735     03C7  084C               	movf	??_Matrix_update_dir^(0+128),w
  6736     03C8  04D1               	iorwf	Matrix_update_dir@mask^(0+128),f
  6737     03C9                     l4032:
  6738                           
  6739                           ;main.c: 251:     }
  6740     03C9  3001               	movlw	1
  6741     03CA  07D6               	addwf	Matrix_update_dir@i^(0+128),f
  6742     03CB  3000               	movlw	0
  6743     03CC  3DD7               	addwfc	(Matrix_update_dir@i+1)^(0+128),f
  6744     03CD  0857               	movf	(Matrix_update_dir@i+1)^(0+128),w
  6745     03CE  3A80               	xorlw	128
  6746     03CF  00CC               	movwf	??_Matrix_update_dir^(0+128)
  6747     03D0  3080               	movlw	128
  6748     03D1  024C               	subwf	??_Matrix_update_dir^(0+128),w
  6749     03D2  1D03               	skipz
  6750     03D3  2BD6               	goto	u2955
  6751     03D4  3004               	movlw	4
  6752     03D5  0256               	subwf	Matrix_update_dir@i^(0+128),w
  6753     03D6                     u2955:
  6754     03D6  1C03               	skipc
  6755     03D7  2BB8               	goto	l4028
  6756                           
  6757                           ;main.c: 253:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
  6758     03D8  0026               	movlb	6	; select bank6
  6759     03D9  0813               	movf	19,w	;volatile
  6760     03DA  390F               	andlw	15
  6761     03DB  3A00               	xorlw	0
  6762     03DC  1D03               	skipz
  6763     03DD  2BE1               	goto	l4040
  6764     03DE  3006               	movlw	6
  6765     03DF  0021               	movlb	1	; select bank1
  6766     03E0  2BEB               	goto	L1
  6767     03E1                     l4040:
  6768     03E1  3003               	movlw	3
  6769     03E2  0021               	movlb	1	; select bank1
  6770     03E3  00C5               	movwf	___bmul@multiplicand^(0+128)
  6771     03E4  0022               	movlb	2	; select bank2
  6772     03E5  0D0C               	rlf	12,w	;volatile
  6773     03E6  0D0C               	rlf	12,w	;volatile
  6774     03E7  3901               	andlw	1
  6775     03E8  318E  261B  3183   	fcall	___bmul
  6776     03EB                     L1:
  6777     03EB  00D2               	movwf	Matrix_update_dir@display_dir^(0+128)
  6778                           
  6779                           ;main.c: 255:     data[0] = 1;
  6780     03EC  3001               	movlw	1
  6781     03ED  00D3               	movwf	Matrix_update_dir@data^(0+128)
  6782                           
  6783                           ;main.c: 256:     data[1] = MATRIX_DIR[display_dir] | mask;
  6784     03EE  0852               	movf	Matrix_update_dir@display_dir^(0+128),w
  6785     03EF  3E1A               	addlw	low (_MATRIX_DIR| (0+32768))
  6786     03F0  0084               	movwf	4
  6787     03F1  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6788     03F2  1803               	skipnc
  6789     03F3  3E01               	addlw	1
  6790     03F4  0085               	movwf	5
  6791     03F5  0800               	movf	0,w	;code access
  6792     03F6  0451               	iorwf	Matrix_update_dir@mask^(0+128),w
  6793     03F7  00D4               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6794                           
  6795                           ;main.c: 257:     Tx_spi(data, 2);
  6796     03F8  30D3               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6797     03F9  00C9               	movwf	Tx_spi@data^(0+128)
  6798     03FA  3002               	movlw	2
  6799     03FB  00CA               	movwf	Tx_spi@dataSize^(0+128)
  6800     03FC  3000               	movlw	0
  6801     03FD  00CB               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6802     03FE  318E  260B  3183   	fcall	_Tx_spi
  6803                           
  6804                           ;main.c: 258:     display_dir++;
  6805     0401  3001               	movlw	1
  6806     0402  0021               	movlb	1	; select bank1
  6807     0403  07D2               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6808                           
  6809                           ;main.c: 260:     for(uint8_t i=2;i<=3;i++){
  6810     0404  3002               	movlw	2
  6811     0405  00D5               	movwf	Matrix_update_dir@i_1708^(0+128)
  6812     0406                     l4056:
  6813                           
  6814                           ;main.c: 261:         data[0] = i;
  6815     0406  0855               	movf	Matrix_update_dir@i_1708^(0+128),w
  6816     0407  00D3               	movwf	Matrix_update_dir@data^(0+128)
  6817                           
  6818                           ;main.c: 262:         data[1] = MATRIX_DIR[display_dir];
  6819     0408  0852               	movf	Matrix_update_dir@display_dir^(0+128),w
  6820     0409  3E1A               	addlw	low (_MATRIX_DIR| (0+32768))
  6821     040A  0084               	movwf	4
  6822     040B  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6823     040C  1803               	skipnc
  6824     040D  3E01               	addlw	1
  6825     040E  0085               	movwf	5
  6826     040F  0800               	movf	0,w	;code access
  6827     0410  00D4               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6828                           
  6829                           ;main.c: 263:         Tx_spi(data, 2);
  6830     0411  30D3               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6831     0412  00C9               	movwf	Tx_spi@data^(0+128)
  6832     0413  3002               	movlw	2
  6833     0414  00CA               	movwf	Tx_spi@dataSize^(0+128)
  6834     0415  3000               	movlw	0
  6835     0416  00CB               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6836     0417  318E  260B  3183   	fcall	_Tx_spi
  6837                           
  6838                           ;main.c: 264:         display_dir++;
  6839     041A  3001               	movlw	1
  6840     041B  0021               	movlb	1	; select bank1
  6841     041C  07D2               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6842                           
  6843                           ;main.c: 266:     }
  6844     041D  3001               	movlw	1
  6845     041E  07D5               	addwf	Matrix_update_dir@i_1708^(0+128),f
  6846     041F  3004               	movlw	4
  6847     0420  0255               	subwf	Matrix_update_dir@i_1708^(0+128),w
  6848     0421  1803               	btfsc	3,0
  6849     0422  0008               	return
  6850     0423  2C06               	goto	l4056
  6851     0424                     __end_of_Matrix_update_dir:
  6852                           
  6853                           	psect	text36
  6854     0E1B                     __ptext36:	
  6855 ;; *************** function ___bmul *****************
  6856 ;; Defined at:
  6857 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;  multiplier      1    wreg     unsigned char 
  6860 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;  multiplier      1    2[BANK1 ] unsigned char 
  6863 ;;  product         1    1[BANK1 ] unsigned char 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      unsigned char 
  6866 ;; Registers used:
  6867 ;;		wreg, status,2, status,0
  6868 ;; Tracked objects:
  6869 ;;		On entry : 1F/2
  6870 ;;		On exit  : 1F/1
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6873 ;;      Params:         0       0       1       0       0       0
  6874 ;;      Locals:         0       0       2       0       0       0
  6875 ;;      Temps:          0       0       0       0       0       0
  6876 ;;      Totals:         0       0       3       0       0       0
  6877 ;;Total ram usage:        3 bytes
  6878 ;; Hardware stack levels used: 1
  6879 ;; Hardware stack levels required when called: 7
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_Matrix_update_dir
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887     0E1B                     ___bmul:	
  6888                           ;psect for function ___bmul
  6889                           
  6890                           
  6891                           ;incstack = 0
  6892                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6893                           ;___bmul@multiplier stored from wreg
  6894     0E1B  0021               	movlb	1	; select bank1
  6895     0E1C  00C7               	movwf	___bmul@multiplier^(0+128)
  6896     0E1D  01C6               	clrf	___bmul@product^(0+128)
  6897     0E1E                     l3970:
  6898     0E1E  1C47               	btfss	___bmul@multiplier^(0+128),0
  6899     0E1F  2E22               	goto	l3974
  6900     0E20  0845               	movf	___bmul@multiplicand^(0+128),w
  6901     0E21  07C6               	addwf	___bmul@product^(0+128),f
  6902     0E22                     l3974:
  6903     0E22  1003               	clrc
  6904     0E23  0DC5               	rlf	___bmul@multiplicand^(0+128),f
  6905     0E24  1003               	clrc
  6906     0E25  0CC7               	rrf	___bmul@multiplier^(0+128),f
  6907     0E26  0847               	movf	___bmul@multiplier^(0+128),w
  6908     0E27  1D03               	btfss	3,2
  6909     0E28  2E1E               	goto	l3970
  6910     0E29  0846               	movf	___bmul@product^(0+128),w
  6911     0E2A  0008               	return
  6912     0E2B                     __end_of___bmul:
  6913                           
  6914                           	psect	text37
  6915     0E0B                     __ptext37:	
  6916 ;; *************** function _Tx_spi *****************
  6917 ;; Defined at:
  6918 ;;		line 202 in file "main.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  data            1    4[BANK1 ] PTR unsigned char 
  6921 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  6922 ;;  dataSize        2    5[BANK1 ] unsigned int 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      void 
  6927 ;; Registers used:
  6928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 1F/1
  6931 ;;		On exit  : 1F/2
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6934 ;;      Params:         0       0       3       0       0       0
  6935 ;;      Locals:         0       0       0       0       0       0
  6936 ;;      Temps:          0       0       0       0       0       0
  6937 ;;      Totals:         0       0       3       0       0       0
  6938 ;;Total ram usage:        3 bytes
  6939 ;; Hardware stack levels used: 1
  6940 ;; Hardware stack levels required when called: 8
  6941 ;; This function calls:
  6942 ;;		_SPI1_ExchangeBlock
  6943 ;; This function is called by:
  6944 ;;		_Ini_matrix
  6945 ;;		_Matrix_update_floor
  6946 ;;		_Matrix_update_dir
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950     0E0B                     _Tx_spi:	
  6951                           ;psect for function _Tx_spi
  6952                           
  6953                           
  6954                           ;main.c: 203:     LATBbits.LATB1 = 0;
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6958     0E0B  0022               	movlb	2	; select bank2
  6959     0E0C  108D               	bcf	13,1	;volatile
  6960                           
  6961                           ;main.c: 204:     __nop();
  6962     0E0D  0000               	nop
  6963                           
  6964                           ;main.c: 205:     __nop();
  6965     0E0E  0000               	nop
  6966                           
  6967                           ;main.c: 206:     SPI1_ExchangeBlock(data,dataSize);
  6968     0E0F  0021               	movlb	1	; select bank1
  6969     0E10  0849               	movf	Tx_spi@data^(0+128),w
  6970     0E11  00C5               	movwf	SPI1_ExchangeBlock@block^(0+128)
  6971     0E12  084B               	movf	(Tx_spi@dataSize+1)^(0+128),w
  6972     0E13  00C7               	movwf	(SPI1_ExchangeBlock@blockSize+1)^(0+128)
  6973     0E14  084A               	movf	Tx_spi@dataSize^(0+128),w
  6974     0E15  00C6               	movwf	SPI1_ExchangeBlock@blockSize^(0+128)
  6975     0E16  318F  276E         	fcall	_SPI1_ExchangeBlock
  6976                           
  6977                           ;main.c: 207:     LATBbits.LATB1 = 1;
  6978     0E18  0022               	movlb	2	; select bank2
  6979     0E19  148D               	bsf	13,1	;volatile
  6980     0E1A  0008               	return
  6981     0E1B                     __end_of_Tx_spi:
  6982                           
  6983                           	psect	text38
  6984     0F6E                     __ptext38:	
  6985 ;; *************** function _SPI1_ExchangeBlock *****************
  6986 ;; Defined at:
  6987 ;;		line 100 in file "mcc_generated_files/spi1.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  block           1    0[BANK1 ] PTR void 
  6990 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  6991 ;;  blockSize       2    1[BANK1 ] unsigned int 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  data            1    3[BANK1 ] PTR unsigned char 
  6994 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      void 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6999 ;; Tracked objects:
  7000 ;;		On entry : 1F/1
  7001 ;;		On exit  : 1F/1
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7004 ;;      Params:         0       0       3       0       0       0
  7005 ;;      Locals:         0       0       1       0       0       0
  7006 ;;      Temps:          0       0       0       0       0       0
  7007 ;;      Totals:         0       0       4       0       0       0
  7008 ;;Total ram usage:        4 bytes
  7009 ;; Hardware stack levels used: 1
  7010 ;; Hardware stack levels required when called: 7
  7011 ;; This function calls:
  7012 ;;		Nothing
  7013 ;; This function is called by:
  7014 ;;		_Tx_spi
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018     0F6E                     _SPI1_ExchangeBlock:	
  7019                           ;psect for function _SPI1_ExchangeBlock
  7020                           
  7021                           
  7022                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
  7026     0F6E  0845               	movf	SPI1_ExchangeBlock@block^(0+128),w
  7027     0F6F  00C8               	movwf	SPI1_ExchangeBlock@data^(0+128)
  7028     0F70                     l3954:	
  7029                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  7030                           
  7031                           
  7032                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  7033     0F70  3001               	movlw	1
  7034     0F71  02C6               	subwf	SPI1_ExchangeBlock@blockSize^(0+128),f
  7035     0F72  3000               	movlw	0
  7036     0F73  3BC7               	subwfb	(SPI1_ExchangeBlock@blockSize+1)^(0+128),f
  7037     0F74  0A46               	incf	SPI1_ExchangeBlock@blockSize^(0+128),w
  7038     0F75  1903               	btfsc	3,2
  7039     0F76  0A47               	incf	(SPI1_ExchangeBlock@blockSize+1)^(0+128),w
  7040     0F77  1903               	btfsc	3,2
  7041     0F78  0008               	return
  7042                           
  7043                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
  7044     0F79  0848               	movf	SPI1_ExchangeBlock@data^(0+128),w
  7045     0F7A  0086               	movwf	6
  7046     0F7B  0187               	clrf	7
  7047     0F7C  0801               	movf	1,w
  7048     0F7D  0024               	movlb	4	; select bank4
  7049     0F7E  0091               	movwf	17	;volatile
  7050     0F7F                     l460:	
  7051                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
  7052                           
  7053     0F7F  0020               	movlb	0	; select bank0
  7054     0F80  1991               	btfsc	17,3	;volatile
  7055     0F81  2F85               	goto	l462
  7056     0F82  0022               	movlb	2	; select bank2
  7057     0F83  108D               	bcf	13,1	;volatile
  7058     0F84  2F7F               	goto	l460
  7059     0F85                     l462:
  7060                           
  7061                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
  7062     0F85  1191               	bcf	17,3	;volatile
  7063                           
  7064                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
  7065     0F86  0021               	movlb	1	; select bank1
  7066     0F87  0848               	movf	SPI1_ExchangeBlock@data^(0+128),w
  7067     0F88  0086               	movwf	6
  7068     0F89  0187               	clrf	7
  7069     0F8A  0024               	movlb	4	; select bank4
  7070     0F8B  0811               	movf	17,w	;volatile
  7071     0F8C  0081               	movwf	1
  7072     0F8D  3001               	movlw	1
  7073     0F8E  0021               	movlb	1	; select bank1
  7074     0F8F  07C8               	addwf	SPI1_ExchangeBlock@data^(0+128),f
  7075     0F90  2F70               	goto	l3954
  7076     0F91                     __end_of_SPI1_ExchangeBlock:
  7077                           
  7078                           	psect	intentry
  7079     0004                     __pintentry:	
  7080 ;; *************** function _INTERRUPT_InterruptManager *****************
  7081 ;; Defined at:
  7082 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7096 ;;      Params:         0       0       0       0       0       0
  7097 ;;      Locals:         0       0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0
  7099 ;;      Totals:         0       0       0       0       0       0
  7100 ;;Total ram usage:        0 bytes
  7101 ;; Hardware stack levels used: 1
  7102 ;; Hardware stack levels required when called: 6
  7103 ;; This function calls:
  7104 ;;		NULL
  7105 ;;		_CMP1_ISR
  7106 ;;		_CMP2_ISR
  7107 ;;		_ECCP2_CaptureISR
  7108 ;;		_EUSART_Receive_ISR
  7109 ;;		_PIN_MANAGER_IOC
  7110 ;;		_Read_UART
  7111 ;;		_TMR1_ISR
  7112 ;; This function is called by:
  7113 ;;		Interrupt level 1
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117     0004                     _INTERRUPT_InterruptManager:
  7118                           
  7119                           ;incstack = 0
  7120     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7121                           
  7122                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7123     0005  3180               	pagesel	$
  7124                           
  7125                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  7126     0006  198B               	btfsc	11,3	;volatile
  7127     0007  1C0B               	btfss	11,0	;volatile
  7128     0008  280C               	goto	i1l4686
  7129                           
  7130                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  7131     0009  318D  253C  3180   	fcall	_PIN_MANAGER_IOC
  7132     000C                     i1l4686:
  7133                           
  7134                           ;mcc_generated_files/interrupt_manager.c: 59:     if(INTCONbits.PEIE == 1)
  7135     000C  1F0B               	btfss	11,6	;volatile
  7136     000D  283D               	goto	i1l267
  7137                           
  7138                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.CCP2IE == 1 && PIR2bits.CCP2IF == 1)
  7139     000E  0021               	movlb	1	; select bank1
  7140     000F  1C12               	btfss	18,0	;volatile
  7141     0010  2817               	goto	i1l4694
  7142     0011  0020               	movlb	0	; select bank0
  7143     0012  1C12               	btfss	18,0	;volatile
  7144     0013  2817               	goto	i1l4694
  7145                           
  7146                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             ECCP2_CaptureISR();
  7147     0014  318D  2580  3180   	fcall	_ECCP2_CaptureISR
  7148     0017                     i1l4694:
  7149                           
  7150                           ;mcc_generated_files/interrupt_manager.c: 65:         if(PIE1bits.RCIE == 1 && PIR1bits.
      +                          RCIF == 1)
  7151     0017  0021               	movlb	1	; select bank1
  7152     0018  1E91               	btfss	17,5	;volatile
  7153     0019  2823               	goto	i1l4700
  7154     001A  0020               	movlb	0	; select bank0
  7155     001B  1E91               	btfss	17,5	;volatile
  7156     001C  2823               	goto	i1l4700
  7157                           
  7158                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
  7159     001D  0021               	movlb	1	; select bank1
  7160     001E  0863               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  7161     001F  008A               	movwf	10
  7162     0020  0862               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  7163     0021  000A               	callw
  7164     0022  3180               	pagesel	$
  7165     0023                     i1l4700:
  7166                           
  7167                           ;mcc_generated_files/interrupt_manager.c: 69:         if(PIE2bits.C1IE == 1 && PIR2bits.
      +                          C1IF == 1)
  7168     0023  0021               	movlb	1	; select bank1
  7169     0024  1E92               	btfss	18,5	;volatile
  7170     0025  282C               	goto	i1l4706
  7171     0026  0020               	movlb	0	; select bank0
  7172     0027  1E92               	btfss	18,5	;volatile
  7173     0028  282C               	goto	i1l4706
  7174                           
  7175                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             CMP1_ISR();
  7176     0029  318D  250C  3180   	fcall	_CMP1_ISR
  7177     002C                     i1l4706:
  7178                           
  7179                           ;mcc_generated_files/interrupt_manager.c: 73:         if(PIE2bits.C2IE == 1 && PIR2bits.
      +                          C2IF == 1)
  7180     002C  0021               	movlb	1	; select bank1
  7181     002D  1F12               	btfss	18,6	;volatile
  7182     002E  2835               	goto	i1l4712
  7183     002F  0020               	movlb	0	; select bank0
  7184     0030  1F12               	btfss	18,6	;volatile
  7185     0031  2835               	goto	i1l4712
  7186                           
  7187                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             CMP2_ISR();
  7188     0032  318D  2515  3180   	fcall	_CMP2_ISR
  7189     0035                     i1l4712:
  7190                           
  7191                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1)
  7192     0035  0021               	movlb	1	; select bank1
  7193     0036  1C11               	btfss	17,0	;volatile
  7194     0037  283D               	goto	i1l267
  7195     0038  0020               	movlb	0	; select bank0
  7196     0039  1C11               	btfss	17,0	;volatile
  7197     003A  283D               	goto	i1l267
  7198                           
  7199                           ;mcc_generated_files/interrupt_manager.c: 78:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 79:             TMR1_ISR();
  7200     003B  318E  26A2         	fcall	_TMR1_ISR
  7201     003D                     i1l267:
  7202     003D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7203     003E  0009               	retfie
  7204     003F                     __end_of_INTERRUPT_InterruptManager:
  7205                           
  7206                           	psect	text40
  7207     0EA2                     __ptext40:	
  7208 ;; *************** function _TMR1_ISR *****************
  7209 ;; Defined at:
  7210 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;		None
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 1F/0
  7221 ;;		On exit  : 1F/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7224 ;;      Params:         0       0       0       0       0       0
  7225 ;;      Locals:         0       0       0       0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0
  7227 ;;      Totals:         0       0       0       0       0       0
  7228 ;;Total ram usage:        0 bytes
  7229 ;; Hardware stack levels used: 1
  7230 ;; Hardware stack levels required when called: 4
  7231 ;; This function calls:
  7232 ;;		_TMR1_CallBack
  7233 ;;		_TMR1_WriteTimer
  7234 ;; This function is called by:
  7235 ;;		_INTERRUPT_InterruptManager
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239     0EA2                     _TMR1_ISR:	
  7240                           ;psect for function _TMR1_ISR
  7241                           
  7242                           
  7243                           ;mcc_generated_files/tmr1.c: 159:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr1.c: 162:     PIR1bits.TMR1IF = 0;
  7244                           
  7245                           ;incstack = 0
  7246                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7247     0EA2  1011               	bcf	17,0	;volatile
  7248                           
  7249                           ;mcc_generated_files/tmr1.c: 163:     TMR1_WriteTimer(timer1ReloadVal);
  7250     0EA3  082B               	movf	_timer1ReloadVal+1,w	;volatile
  7251     0EA4  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7252     0EA5  082A               	movf	_timer1ReloadVal,w	;volatile
  7253     0EA6  00F0               	movwf	TMR1_WriteTimer@timerVal
  7254     0EA7  318D  25C1  318E   	fcall	_TMR1_WriteTimer
  7255                           
  7256                           ;mcc_generated_files/tmr1.c: 166:     if (++CountCallBack >= 10)
  7257     0EAA  3001               	movlw	1
  7258     0EAB  07A8               	addwf	TMR1_ISR@CountCallBack,f	;volatile
  7259     0EAC  3000               	movlw	0
  7260     0EAD  3DA9               	addwfc	TMR1_ISR@CountCallBack+1,f	;volatile
  7261     0EAE  3000               	movlw	0
  7262     0EAF  0229               	subwf	TMR1_ISR@CountCallBack+1,w	;volatile
  7263     0EB0  300A               	movlw	10
  7264     0EB1  1903               	skipnz
  7265     0EB2  0228               	subwf	TMR1_ISR@CountCallBack,w	;volatile
  7266     0EB3  1C03               	skipc
  7267     0EB4  0008               	return
  7268                           
  7269                           ;mcc_generated_files/tmr1.c: 167:     {;mcc_generated_files/tmr1.c: 169:         TMR1_Ca
      +                          llBack();
  7270     0EB5  318D  2547         	fcall	_TMR1_CallBack
  7271                           
  7272                           ;mcc_generated_files/tmr1.c: 172:         CountCallBack = 0;
  7273     0EB7  0020               	movlb	0	; select bank0
  7274     0EB8  01A8               	clrf	TMR1_ISR@CountCallBack	;volatile
  7275     0EB9  01A9               	clrf	TMR1_ISR@CountCallBack+1	;volatile
  7276     0EBA  0008               	return
  7277     0EBB                     __end_of_TMR1_ISR:
  7278                           
  7279                           	psect	text41
  7280     0DC1                     __ptext41:	
  7281 ;; *************** function _TMR1_WriteTimer *****************
  7282 ;; Defined at:
  7283 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  timerVal        2    0[COMMON] unsigned short 
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg
  7292 ;; Tracked objects:
  7293 ;;		On entry : 1F/0
  7294 ;;		On exit  : 1F/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7297 ;;      Params:         2       0       0       0       0       0
  7298 ;;      Locals:         0       0       0       0       0       0
  7299 ;;      Temps:          0       0       0       0       0       0
  7300 ;;      Totals:         2       0       0       0       0       0
  7301 ;;Total ram usage:        2 bytes
  7302 ;; Hardware stack levels used: 1
  7303 ;; This function calls:
  7304 ;;		Nothing
  7305 ;; This function is called by:
  7306 ;;		_TMR1_ISR
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310     0DC1                     _TMR1_WriteTimer:	
  7311                           ;psect for function _TMR1_WriteTimer
  7312                           
  7313                           
  7314                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _TMR1_WriteTimer: [wreg]
  7318     0DC1  1D18               	btfss	24,2	;volatile
  7319     0DC2  2DCA               	goto	i1l3454
  7320                           
  7321                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7322     0DC3  1018               	bcf	24,0	;volatile
  7323                           
  7324                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  7325     0DC4  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7326     0DC5  0097               	movwf	23	;volatile
  7327                           
  7328                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  7329     0DC6  0870               	movf	TMR1_WriteTimer@timerVal,w
  7330     0DC7  0096               	movwf	22	;volatile
  7331                           
  7332                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7333     0DC8  1418               	bsf	24,0	;volatile
  7334                           
  7335                           ;mcc_generated_files/tmr1.c: 133:     }
  7336     0DC9  0008               	return
  7337     0DCA                     i1l3454:
  7338                           
  7339                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  7340     0DCA  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7341     0DCB  0097               	movwf	23	;volatile
  7342                           
  7343                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  7344     0DCC  0870               	movf	TMR1_WriteTimer@timerVal,w
  7345     0DCD  0096               	movwf	22	;volatile
  7346     0DCE  0008               	return
  7347     0DCF                     __end_of_TMR1_WriteTimer:
  7348                           
  7349                           	psect	text42
  7350     0D47                     __ptext42:	
  7351 ;; *************** function _TMR1_CallBack *****************
  7352 ;; Defined at:
  7353 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  1    wreg      void 
  7360 ;; Registers used:
  7361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 1F/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7367 ;;      Params:         0       0       0       0       0       0
  7368 ;;      Locals:         0       0       0       0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0
  7370 ;;      Totals:         0       0       0       0       0       0
  7371 ;;Total ram usage:        0 bytes
  7372 ;; Hardware stack levels used: 1
  7373 ;; Hardware stack levels required when called: 3
  7374 ;; This function calls:
  7375 ;;		NULL
  7376 ;;		_TMR1_DefaultInterruptHandler
  7377 ;;		_Write_UART
  7378 ;; This function is called by:
  7379 ;;		_TMR1_ISR
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383     0D47                     _TMR1_CallBack:	
  7384                           ;psect for function _TMR1_CallBack
  7385                           
  7386                           
  7387                           ;mcc_generated_files/tmr1.c: 179:     if(TMR1_InterruptHandler)
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _TMR1_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7391     0D47  0021               	movlb	1	; select bank1
  7392     0D48  085A               	movf	_TMR1_InterruptHandler^(0+128),w
  7393     0D49  045B               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  7394     0D4A  1903               	btfsc	3,2
  7395     0D4B  0008               	return
  7396                           
  7397                           ;mcc_generated_files/tmr1.c: 180:     {;mcc_generated_files/tmr1.c: 181:         TMR1_In
      +                          terruptHandler();
  7398     0D4C  085B               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  7399     0D4D  008A               	movwf	10
  7400     0D4E  085A               	movf	_TMR1_InterruptHandler^(0+128),w
  7401     0D4F  000A               	callw
  7402     0D50  318D               	pagesel	$
  7403     0D51  0008               	return
  7404     0D52                     __end_of_TMR1_CallBack:
  7405                           
  7406                           	psect	text43
  7407     0003                     __ptext43:	
  7408 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7409 ;; Defined at:
  7410 ;;		line 189 in file "mcc_generated_files/tmr1.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      void 
  7417 ;; Registers used:
  7418 ;;		None
  7419 ;; Tracked objects:
  7420 ;;		On entry : 1F/1
  7421 ;;		On exit  : 1F/1
  7422 ;;		Unchanged: 1F/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7424 ;;      Params:         0       0       0       0       0       0
  7425 ;;      Locals:         0       0       0       0       0       0
  7426 ;;      Temps:          0       0       0       0       0       0
  7427 ;;      Totals:         0       0       0       0       0       0
  7428 ;;Total ram usage:        0 bytes
  7429 ;; Hardware stack levels used: 1
  7430 ;; This function calls:
  7431 ;;		Nothing
  7432 ;; This function is called by:
  7433 ;;		_TMR1_Initialize
  7434 ;;		_TMR1_CallBack
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438     0003                     _TMR1_DefaultInterruptHandler:	
  7439                           ;psect for function _TMR1_DefaultInterruptHandler
  7440                           
  7441                           
  7442                           ;incstack = 0
  7443                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7444     0003  0008               	return
  7445     0004                     __end_of_TMR1_DefaultInterruptHandler:
  7446                           
  7447                           	psect	text44
  7448     0FB4                     __ptext44:	
  7449 ;; *************** function _Write_UART *****************
  7450 ;; Defined at:
  7451 ;;		line 138 in file "main.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  i               2    8[BANK0 ] int 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 1F/1
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7465 ;;      Params:         0       0       0       0       0       0
  7466 ;;      Locals:         0       2       0       0       0       0
  7467 ;;      Temps:          0       1       0       0       0       0
  7468 ;;      Totals:         0       3       0       0       0       0
  7469 ;;Total ram usage:        3 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 2
  7472 ;; This function calls:
  7473 ;;		_EUSART_Write
  7474 ;;		_EUSART_is_tx_ready
  7475 ;;		_Update_tx_buffer
  7476 ;; This function is called by:
  7477 ;;		_main
  7478 ;;		_TMR1_CallBack
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482     0FB4                     _Write_UART:	
  7483                           ;psect for function _Write_UART
  7484                           
  7485                           
  7486                           ;main.c: 139:   Update_tx_buffer();
  7487                           
  7488                           ;incstack = 0
  7489                           ; Regs used in _Write_UART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7490     0FB4  3181  21D9  318F   	fcall	_Update_tx_buffer
  7491                           
  7492                           ;main.c: 140:     for(int i=0; i<21; i++){
  7493     0FB7  0020               	movlb	0	; select bank0
  7494     0FB8  01C6               	clrf	Write_UART@i
  7495     0FB9  01C7               	clrf	Write_UART@i+1
  7496     0FBA                     i1l3120:
  7497                           
  7498                           ;main.c: 141:         EUSART_is_tx_ready();
  7499     0FBA  318C  24F5  318F   	fcall	_EUSART_is_tx_ready
  7500                           
  7501                           ;main.c: 142:         EUSART_Write(uart_write_buffer[i]);
  7502     0FBD  0020               	movlb	0	; select bank0
  7503     0FBE  0846               	movf	Write_UART@i,w
  7504     0FBF  3E20               	addlw	(low (_uart_write_buffer| (0+256)))& (0+255)
  7505     0FC0  0086               	movwf	6
  7506     0FC1  3001               	movlw	1	; select bank2/3
  7507     0FC2  0087               	movwf	7
  7508     0FC3  0801               	movf	1,w
  7509     0FC4  318C  24EE  318F   	fcall	_EUSART_Write
  7510                           
  7511                           ;main.c: 143:       }
  7512     0FC7  3001               	movlw	1
  7513     0FC8  0020               	movlb	0	; select bank0
  7514     0FC9  07C6               	addwf	Write_UART@i,f
  7515     0FCA  3000               	movlw	0
  7516     0FCB  3DC7               	addwfc	Write_UART@i+1,f
  7517     0FCC  0847               	movf	Write_UART@i+1,w
  7518     0FCD  3A80               	xorlw	128
  7519     0FCE  00C5               	movwf	??_Write_UART
  7520     0FCF  3080               	movlw	128
  7521     0FD0  0245               	subwf	??_Write_UART,w
  7522     0FD1  1D03               	skipz
  7523     0FD2  2FD5               	goto	u202_25
  7524     0FD3  3015               	movlw	21
  7525     0FD4  0246               	subwf	Write_UART@i,w
  7526     0FD5                     u202_25:
  7527     0FD5  1803               	btfsc	3,0
  7528     0FD6  0008               	return
  7529     0FD7  2FBA               	goto	i1l3120
  7530     0FD8                     __end_of_Write_UART:
  7531                           
  7532                           	psect	text45
  7533     01D9                     __ptext45:	
  7534 ;; *************** function _Update_tx_buffer *****************
  7535 ;; Defined at:
  7536 ;;		line 108 in file "main.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  1    wreg      void 
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0, pclath, cstack
  7545 ;; Tracked objects:
  7546 ;;		On entry : 1F/1
  7547 ;;		On exit  : 1F/2
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7550 ;;      Params:         0       0       0       0       0       0
  7551 ;;      Locals:         0       0       0       0       0       0
  7552 ;;      Temps:          0       2       0       0       0       0
  7553 ;;      Totals:         0       2       0       0       0       0
  7554 ;;Total ram usage:        2 bytes
  7555 ;; Hardware stack levels used: 1
  7556 ;; Hardware stack levels required when called: 1
  7557 ;; This function calls:
  7558 ;;		_TMR0_ReadTimer
  7559 ;;		___awdiv
  7560 ;;		___lbdiv
  7561 ;;		___lbmod
  7562 ;;		___lwdiv
  7563 ;;		___lwmod
  7564 ;;		___wmul
  7565 ;;		i1_TMR0_WriteTimer
  7566 ;; This function is called by:
  7567 ;;		_Write_UART
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571     01D9                     _Update_tx_buffer:	
  7572                           ;psect for function _Update_tx_buffer
  7573                           
  7574                           
  7575                           ;main.c: 109:     var.A = current_floor;
  7576                           
  7577                           ;incstack = 0
  7578                           ; Regs used in _Update_tx_buffer: [wreg+status,2+status,0+pclath+cstack]
  7579     01D9  083B               	movf	(_var^(0+128)+1),w
  7580     01DA  0020               	movlb	0	; select bank0
  7581     01DB  063C               	xorwf	_current_floor,w
  7582     01DC  39F0               	andlw	-16
  7583     01DD  063C               	xorwf	_current_floor,w
  7584     01DE  0021               	movlb	1	; select bank1
  7585     01DF  00BB               	movwf	(_var^(0+128)+1)
  7586                           
  7587                           ;main.c: 110:     var.D = next_floor;
  7588     01E0  0020               	movlb	0	; select bank0
  7589     01E1  083B               	movf	_next_floor,w
  7590     01E2  00C3               	movwf	??_Update_tx_buffer
  7591     01E3  0EC3               	swapf	??_Update_tx_buffer,f
  7592     01E4  0021               	movlb	1	; select bank1
  7593     01E5  083A               	movf	_var^(0+128),w
  7594     01E6  0020               	movlb	0	; select bank0
  7595     01E7  0643               	xorwf	??_Update_tx_buffer,w
  7596     01E8  390F               	andlw	-241
  7597     01E9  0643               	xorwf	??_Update_tx_buffer,w
  7598     01EA  0021               	movlb	1	; select bank1
  7599     01EB  00BA               	movwf	_var^(0+128)
  7600                           
  7601                           ;main.c: 111:     if(CCP3CONbits.CCP3M && LATAbits.LATA7==0) var.M = 2;
  7602     01EC  0026               	movlb	6	; select bank6
  7603     01ED  0813               	movf	19,w	;volatile
  7604     01EE  390F               	andlw	15
  7605     01EF  3A00               	xorlw	0
  7606     01F0  1903               	skipnz
  7607     01F1  29FB               	goto	i1l2946
  7608     01F2  0022               	movlb	2	; select bank2
  7609     01F3  1B8C               	btfsc	12,7	;volatile
  7610     01F4  29FB               	goto	i1l2946
  7611     01F5  0021               	movlb	1	; select bank1
  7612     01F6  083B               	movf	(_var^(0+128)+1),w
  7613     01F7  39CF               	andlw	-49
  7614     01F8  3820               	iorlw	32
  7615     01F9  00BB               	movwf	(_var^(0+128)+1)
  7616     01FA  2A0B               	goto	i1l2954
  7617     01FB                     i1l2946:
  7618     01FB  0026               	movlb	6	; select bank6
  7619     01FC  0813               	movf	19,w	;volatile
  7620     01FD  390F               	andlw	15
  7621     01FE  3A00               	xorlw	0
  7622     01FF  1903               	skipnz
  7623     0200  2A08               	goto	i1l2952
  7624     0201  0022               	movlb	2	; select bank2
  7625     0202  1F8C               	btfss	12,7	;volatile
  7626     0203  2A08               	goto	i1l2952
  7627     0204  3030               	movlw	48
  7628     0205  0021               	movlb	1	; select bank1
  7629     0206  04BB               	iorwf	(_var^(0+128)+1),f
  7630     0207  2A0B               	goto	i1l2954
  7631     0208                     i1l2952:
  7632     0208  30CF               	movlw	-49
  7633     0209  0021               	movlb	1	; select bank1
  7634     020A  05BB               	andwf	(_var^(0+128)+1),f
  7635     020B                     i1l2954:
  7636                           
  7637                           ;main.c: 114:     position0 = position;
  7638     020B  0020               	movlb	0	; select bank0
  7639     020C  0833               	movf	_position+1,w
  7640     020D  00B1               	movwf	_position0+1
  7641     020E  0832               	movf	_position,w
  7642     020F  00B0               	movwf	_position0
  7643                           
  7644                           ;main.c: 115:     if(LATAbits.LATA7 == 1) var.HHH += (TMR0_ReadTimer()*1525)/1000;
  7645     0210  0022               	movlb	2	; select bank2
  7646     0211  1F8C               	btfss	12,7	;volatile
  7647     0212  2A31               	goto	i1l2960
  7648     0213  30E8               	movlw	232
  7649     0214  00F7               	movwf	___awdiv@divisor
  7650     0215  3003               	movlw	3
  7651     0216  00F8               	movwf	___awdiv@divisor+1
  7652     0217  318C  24AE  3181   	fcall	_TMR0_ReadTimer
  7653     021A  00C3               	movwf	??_Update_tx_buffer
  7654     021B  01C4               	clrf	??_Update_tx_buffer+1
  7655     021C  0843               	movf	??_Update_tx_buffer,w
  7656     021D  00F1               	movwf	___wmul@multiplier
  7657     021E  0844               	movf	??_Update_tx_buffer+1,w
  7658     021F  00F2               	movwf	___wmul@multiplier+1
  7659     0220  30F5               	movlw	245
  7660     0221  00F3               	movwf	___wmul@multiplicand
  7661     0222  3005               	movlw	5
  7662     0223  00F4               	movwf	___wmul@multiplicand+1
  7663     0224  318E  26D6  3181   	fcall	___wmul
  7664     0227  0872               	movf	?___wmul+1,w
  7665     0228  00FA               	movwf	___awdiv@dividend+1
  7666     0229  0871               	movf	?___wmul,w
  7667     022A  00F9               	movwf	___awdiv@dividend
  7668     022B  3184  24F3  3181   	fcall	___awdiv
  7669     022E  0877               	movf	?___awdiv,w
  7670     022F  0021               	movlb	1	; select bank1
  7671     0230  07BC               	addwf	(_var^(0+128)+2),f
  7672     0231                     i1l2960:
  7673                           
  7674                           ;main.c: 116:     if(LATAbits.LATA7 == 0) var.HHH -= (TMR0_ReadTimer()*1525)/1000;
  7675     0231  0022               	movlb	2	; select bank2
  7676     0232  1B8C               	btfsc	12,7	;volatile
  7677     0233  2A52               	goto	i1l847
  7678     0234  30E8               	movlw	232
  7679     0235  00F7               	movwf	___awdiv@divisor
  7680     0236  3003               	movlw	3
  7681     0237  00F8               	movwf	___awdiv@divisor+1
  7682     0238  318C  24AE  3181   	fcall	_TMR0_ReadTimer
  7683     023B  00C3               	movwf	??_Update_tx_buffer
  7684     023C  01C4               	clrf	??_Update_tx_buffer+1
  7685     023D  0843               	movf	??_Update_tx_buffer,w
  7686     023E  00F1               	movwf	___wmul@multiplier
  7687     023F  0844               	movf	??_Update_tx_buffer+1,w
  7688     0240  00F2               	movwf	___wmul@multiplier+1
  7689     0241  30F5               	movlw	245
  7690     0242  00F3               	movwf	___wmul@multiplicand
  7691     0243  3005               	movlw	5
  7692     0244  00F4               	movwf	___wmul@multiplicand+1
  7693     0245  318E  26D6  3181   	fcall	___wmul
  7694     0248  0872               	movf	?___wmul+1,w
  7695     0249  00FA               	movwf	___awdiv@dividend+1
  7696     024A  0871               	movf	?___wmul,w
  7697     024B  00F9               	movwf	___awdiv@dividend
  7698     024C  3184  24F3  3181   	fcall	___awdiv
  7699     024F  0877               	movf	?___awdiv,w
  7700     0250  0021               	movlb	1	; select bank1
  7701     0251  02BC               	subwf	(_var^(0+128)+2),f
  7702     0252                     i1l847:
  7703                           
  7704                           ;main.c: 117:     TMR0_WriteTimer (0);
  7705     0252  3000               	movlw	0
  7706     0253  318C  24A9  3181   	fcall	i1_TMR0_WriteTimer
  7707                           
  7708                           ;main.c: 118:     position = var.HHH;
  7709     0256  0021               	movlb	1	; select bank1
  7710     0257  083C               	movf	(_var^(0+128)+2),w
  7711     0258  0020               	movlb	0	; select bank0
  7712     0259  00C3               	movwf	??_Update_tx_buffer
  7713     025A  01C4               	clrf	??_Update_tx_buffer+1
  7714     025B  0843               	movf	??_Update_tx_buffer,w
  7715     025C  00B2               	movwf	_position
  7716     025D  0844               	movf	??_Update_tx_buffer+1,w
  7717     025E  00B3               	movwf	_position+1
  7718                           
  7719                           ;main.c: 119:     velocidade = ((position - position0)*100/3)&0x01FF;
  7720     025F  3003               	movlw	3
  7721     0260  00F7               	movwf	___lwdiv@divisor
  7722     0261  3000               	movlw	0
  7723     0262  00F8               	movwf	___lwdiv@divisor+1
  7724     0263  0830               	movf	_position0,w
  7725     0264  0232               	subwf	_position,w
  7726     0265  00F1               	movwf	___wmul@multiplier
  7727     0266  0831               	movf	_position0+1,w
  7728     0267  3B33               	subwfb	_position+1,w
  7729     0268  00F2               	movwf	___wmul@multiplier+1
  7730     0269  3064               	movlw	100
  7731     026A  00F3               	movwf	___wmul@multiplicand
  7732     026B  3000               	movlw	0
  7733     026C  00F4               	movwf	___wmul@multiplicand+1
  7734     026D  318E  26D6  3181   	fcall	___wmul
  7735     0270  0872               	movf	?___wmul+1,w
  7736     0271  00FA               	movwf	___lwdiv@dividend+1
  7737     0272  0871               	movf	?___wmul,w
  7738     0273  00F9               	movwf	___lwdiv@dividend
  7739     0274  3186  26EF  3181   	fcall	___lwdiv
  7740     0277  30FF               	movlw	255
  7741     0278  0577               	andwf	?___lwdiv,w
  7742     0279  00AC               	movwf	_velocidade
  7743     027A  3001               	movlw	1
  7744     027B  0578               	andwf	?___lwdiv+1,w
  7745     027C  00AD               	movwf	_velocidade+1
  7746                           
  7747                           ;main.c: 120:     var.VVV.L = velocidade&0xFF;
  7748     027D  082C               	movf	_velocidade,w
  7749     027E  0021               	movlb	1	; select bank1
  7750     027F  00BD               	movwf	(_var^(0+128)+3)
  7751                           
  7752                           ;main.c: 121:     var.VVV.H = (velocidade>>8)&0x01;
  7753     0280  3001               	movlw	1
  7754     0281  0020               	movlb	0	; select bank0
  7755     0282  052D               	andwf	_velocidade+1,w
  7756     0283  00C3               	movwf	??_Update_tx_buffer
  7757     0284  0021               	movlb	1	; select bank1
  7758     0285  083E               	movf	(_var^(0+128)+4),w
  7759     0286  0020               	movlb	0	; select bank0
  7760     0287  0643               	xorwf	??_Update_tx_buffer,w
  7761     0288  39FE               	andlw	-2
  7762     0289  0643               	xorwf	??_Update_tx_buffer,w
  7763     028A  0021               	movlb	1	; select bank1
  7764     028B  00BE               	movwf	(_var^(0+128)+4)
  7765                           
  7766                           ;main.c: 125:     uart_write_buffer[1] = var.A + 1 + '0';
  7767     028C  083B               	movf	(_var^(0+128)+1),w
  7768     028D  390F               	andlw	15
  7769     028E  3E31               	addlw	49
  7770     028F  0022               	movlb	2	; select bank2
  7771     0290  00A1               	movwf	(_uart_write_buffer^(0+256)+1)
  7772                           
  7773                           ;main.c: 126:     uart_write_buffer[3] = var.D + 1 + '0';
  7774     0291  0021               	movlb	1	; select bank1
  7775     0292  0E3A               	swapf	_var^(0+128),w
  7776     0293  390F               	andlw	15
  7777     0294  3E31               	addlw	49
  7778     0295  0022               	movlb	2	; select bank2
  7779     0296  00A3               	movwf	(_uart_write_buffer^(0+256)+3)
  7780                           
  7781                           ;main.c: 127:     uart_write_buffer[5] = var.M + '0';
  7782     0297  0021               	movlb	1	; select bank1
  7783     0298  0E3B               	swapf	(_var^(0+128)+1),w
  7784     0299  3903               	andlw	3
  7785     029A  3E30               	addlw	48
  7786     029B  0022               	movlb	2	; select bank2
  7787     029C  00A5               	movwf	(_uart_write_buffer^(0+256)+5)
  7788                           
  7789                           ;main.c: 128:     uart_write_buffer[7] = (var.HHH / 100) % 10 + '0';
  7790     029D  300A               	movlw	10
  7791     029E  00F4               	movwf	___lbmod@divisor
  7792     029F  3064               	movlw	100
  7793     02A0  00F0               	movwf	___lbdiv@divisor
  7794     02A1  0021               	movlb	1	; select bank1
  7795     02A2  083C               	movf	(_var^(0+128)+2),w
  7796     02A3  318F  272E  3181   	fcall	___lbdiv
  7797     02A6  318E  26BB  3181   	fcall	___lbmod
  7798     02A9  3E30               	addlw	48
  7799     02AA  0022               	movlb	2	; select bank2
  7800     02AB  00A7               	movwf	(_uart_write_buffer^(0+256)+7)
  7801                           
  7802                           ;main.c: 129:     uart_write_buffer[8]= (var.HHH/ 10) % 10 + '0';
  7803     02AC  300A               	movlw	10
  7804     02AD  00F4               	movwf	___lbmod@divisor
  7805     02AE  300A               	movlw	10
  7806     02AF  00F0               	movwf	___lbdiv@divisor
  7807     02B0  0021               	movlb	1	; select bank1
  7808     02B1  083C               	movf	(_var^(0+128)+2),w
  7809     02B2  318F  272E  3181   	fcall	___lbdiv
  7810     02B5  318E  26BB  3181   	fcall	___lbmod
  7811     02B8  3E30               	addlw	48
  7812     02B9  0022               	movlb	2	; select bank2
  7813     02BA  00A8               	movwf	(_uart_write_buffer^(0+256)+8)
  7814                           
  7815                           ;main.c: 130:     uart_write_buffer[9]= var.HHH % 10 + '0';
  7816     02BB  300A               	movlw	10
  7817     02BC  00F4               	movwf	___lbmod@divisor
  7818     02BD  0021               	movlb	1	; select bank1
  7819     02BE  083C               	movf	(_var^(0+128)+2),w
  7820     02BF  318E  26BB  3181   	fcall	___lbmod
  7821     02C2  3E30               	addlw	48
  7822     02C3  0022               	movlb	2	; select bank2
  7823     02C4  00A9               	movwf	(_uart_write_buffer^(0+256)+9)
  7824                           
  7825                           ;main.c: 131:     uart_write_buffer[11]= ((velocidade/100)%10) + '0';
  7826     02C5  300A               	movlw	10
  7827     02C6  0020               	movlb	0	; select bank0
  7828     02C7  00BE               	movwf	___lwmod@divisor
  7829     02C8  3000               	movlw	0
  7830     02C9  00BF               	movwf	___lwmod@divisor+1
  7831     02CA  3064               	movlw	100
  7832     02CB  00F7               	movwf	___lwdiv@divisor
  7833     02CC  3000               	movlw	0
  7834     02CD  00F8               	movwf	___lwdiv@divisor+1
  7835     02CE  082D               	movf	_velocidade+1,w
  7836     02CF  00FA               	movwf	___lwdiv@dividend+1
  7837     02D0  082C               	movf	_velocidade,w
  7838     02D1  00F9               	movwf	___lwdiv@dividend
  7839     02D2  3186  26EF  3181   	fcall	___lwdiv
  7840     02D5  0878               	movf	?___lwdiv+1,w
  7841     02D6  00C1               	movwf	___lwmod@dividend+1
  7842     02D7  0877               	movf	?___lwdiv,w
  7843     02D8  00C0               	movwf	___lwmod@dividend
  7844     02D9  3187  27D4  3181   	fcall	___lwmod
  7845     02DC  083E               	movf	?___lwmod,w
  7846     02DD  3E30               	addlw	48
  7847     02DE  0022               	movlb	2	; select bank2
  7848     02DF  00AB               	movwf	(_uart_write_buffer^(0+256)+11)
  7849                           
  7850                           ;main.c: 132:     uart_write_buffer[12]= ((velocidade/10)%10) + '0';
  7851     02E0  300A               	movlw	10
  7852     02E1  0020               	movlb	0	; select bank0
  7853     02E2  00BE               	movwf	___lwmod@divisor
  7854     02E3  3000               	movlw	0
  7855     02E4  00BF               	movwf	___lwmod@divisor+1
  7856     02E5  300A               	movlw	10
  7857     02E6  00F7               	movwf	___lwdiv@divisor
  7858     02E7  3000               	movlw	0
  7859     02E8  00F8               	movwf	___lwdiv@divisor+1
  7860     02E9  082D               	movf	_velocidade+1,w
  7861     02EA  00FA               	movwf	___lwdiv@dividend+1
  7862     02EB  082C               	movf	_velocidade,w
  7863     02EC  00F9               	movwf	___lwdiv@dividend
  7864     02ED  3186  26EF  3181   	fcall	___lwdiv
  7865     02F0  0878               	movf	?___lwdiv+1,w
  7866     02F1  00C1               	movwf	___lwmod@dividend+1
  7867     02F2  0877               	movf	?___lwdiv,w
  7868     02F3  00C0               	movwf	___lwmod@dividend
  7869     02F4  3187  27D4  3181   	fcall	___lwmod
  7870     02F7  083E               	movf	?___lwmod,w
  7871     02F8  3E30               	addlw	48
  7872     02F9  0022               	movlb	2	; select bank2
  7873     02FA  00AC               	movwf	(_uart_write_buffer^(0+256)+12)
  7874                           
  7875                           ;main.c: 133:     uart_write_buffer[14]= (velocidade%10) + '0';
  7876     02FB  300A               	movlw	10
  7877     02FC  0020               	movlb	0	; select bank0
  7878     02FD  00BE               	movwf	___lwmod@divisor
  7879     02FE  3000               	movlw	0
  7880     02FF  00BF               	movwf	___lwmod@divisor+1
  7881     0300  082D               	movf	_velocidade+1,w
  7882     0301  00C1               	movwf	___lwmod@dividend+1
  7883     0302  082C               	movf	_velocidade,w
  7884     0303  00C0               	movwf	___lwmod@dividend
  7885     0304  3187  27D4         	fcall	___lwmod
  7886     0306  083E               	movf	?___lwmod,w
  7887     0307  3E30               	addlw	48
  7888     0308  0022               	movlb	2	; select bank2
  7889     0309  00AE               	movwf	(_uart_write_buffer^(0+256)+14)
  7890     030A  0008               	return
  7891     030B                     __end_of_Update_tx_buffer:
  7892                           
  7893                           	psect	text46
  7894     0ED6                     __ptext46:	
  7895 ;; *************** function ___wmul *****************
  7896 ;; Defined at:
  7897 ;;		line 15 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  multiplier      2    1[COMMON] unsigned int 
  7900 ;;  multiplicand    2    3[COMMON] unsigned int 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  product         2    5[COMMON] unsigned int 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  2    1[COMMON] unsigned int 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0
  7907 ;; Tracked objects:
  7908 ;;		On entry : 1F/0
  7909 ;;		On exit  : 1F/0
  7910 ;;		Unchanged: 1F/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7912 ;;      Params:         4       0       0       0       0       0
  7913 ;;      Locals:         2       0       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0
  7915 ;;      Totals:         6       0       0       0       0       0
  7916 ;;Total ram usage:        6 bytes
  7917 ;; Hardware stack levels used: 1
  7918 ;; This function calls:
  7919 ;;		Nothing
  7920 ;; This function is called by:
  7921 ;;		_Update_tx_buffer
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925     0ED6                     ___wmul:	
  7926                           ;psect for function ___wmul
  7927                           
  7928                           
  7929                           ;incstack = 0
  7930                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7931     0ED6  01F5               	clrf	___wmul@product
  7932     0ED7  01F6               	clrf	___wmul@product+1
  7933     0ED8                     i1l2764:
  7934     0ED8  1C71               	btfss	___wmul@multiplier,0
  7935     0ED9  2EDE               	goto	i1l1084
  7936     0EDA  0873               	movf	___wmul@multiplicand,w
  7937     0EDB  07F5               	addwf	___wmul@product,f
  7938     0EDC  0874               	movf	___wmul@multiplicand+1,w
  7939     0EDD  3DF6               	addwfc	___wmul@product+1,f
  7940     0EDE                     i1l1084:
  7941     0EDE  3001               	movlw	1
  7942     0EDF                     u148_25:
  7943     0EDF  35F3               	lslf	___wmul@multiplicand,f
  7944     0EE0  0DF4               	rlf	___wmul@multiplicand+1,f
  7945     0EE1  0B89               	decfsz	9,f
  7946     0EE2  2EDF               	goto	u148_25
  7947     0EE3  3001               	movlw	1
  7948     0EE4                     u149_25:
  7949     0EE4  36F2               	lsrf	___wmul@multiplier+1,f
  7950     0EE5  0CF1               	rrf	___wmul@multiplier,f
  7951     0EE6  0B89               	decfsz	9,f
  7952     0EE7  2EE4               	goto	u149_25
  7953     0EE8  0871               	movf	___wmul@multiplier,w
  7954     0EE9  0472               	iorwf	___wmul@multiplier+1,w
  7955     0EEA  1D03               	btfss	3,2
  7956     0EEB  2ED8               	goto	i1l2764
  7957     0EEC  0876               	movf	___wmul@product+1,w
  7958     0EED  00F2               	movwf	?___wmul+1
  7959     0EEE  0875               	movf	___wmul@product,w
  7960     0EEF  00F1               	movwf	?___wmul
  7961     0EF0  0008               	return
  7962     0EF1                     __end_of___wmul:
  7963                           
  7964                           	psect	text47
  7965     07D4                     __ptext47:	
  7966 ;; *************** function ___lwmod *****************
  7967 ;; Defined at:
  7968 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  divisor         2    0[BANK0 ] unsigned int 
  7971 ;;  dividend        2    2[BANK0 ] unsigned int 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;  counter         1    4[BANK0 ] unsigned char 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  2    0[BANK0 ] unsigned int 
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0
  7978 ;; Tracked objects:
  7979 ;;		On entry : 1F/0
  7980 ;;		On exit  : 1F/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7983 ;;      Params:         0       4       0       0       0       0
  7984 ;;      Locals:         0       1       0       0       0       0
  7985 ;;      Temps:          0       0       0       0       0       0
  7986 ;;      Totals:         0       5       0       0       0       0
  7987 ;;Total ram usage:        5 bytes
  7988 ;; Hardware stack levels used: 1
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_Update_tx_buffer
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996     07D4                     ___lwmod:	
  7997                           ;psect for function ___lwmod
  7998                           
  7999                           
  8000                           ;incstack = 0
  8001                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8002     07D4  083E               	movf	___lwmod@divisor,w
  8003     07D5  043F               	iorwf	___lwmod@divisor+1,w
  8004     07D6  1903               	btfsc	3,2
  8005     07D7  2FF9               	goto	i1l2906
  8006     07D8  3001               	movlw	1
  8007     07D9  00C2               	movwf	___lwmod@counter
  8008     07DA                     i1l2896:
  8009     07DA  1BBF               	btfsc	___lwmod@divisor+1,7
  8010     07DB  2FE4               	goto	i1l2898
  8011     07DC  3001               	movlw	1
  8012     07DD                     u176_25:
  8013     07DD  35BE               	lslf	___lwmod@divisor,f
  8014     07DE  0DBF               	rlf	___lwmod@divisor+1,f
  8015     07DF  0B89               	decfsz	9,f
  8016     07E0  2FDD               	goto	u176_25
  8017     07E1  3001               	movlw	1
  8018     07E2  07C2               	addwf	___lwmod@counter,f
  8019     07E3  2FDA               	goto	i1l2896
  8020     07E4                     i1l2898:
  8021     07E4  083F               	movf	___lwmod@divisor+1,w
  8022     07E5  0241               	subwf	___lwmod@dividend+1,w
  8023     07E6  1D03               	skipz
  8024     07E7  2FEA               	goto	u178_25
  8025     07E8  083E               	movf	___lwmod@divisor,w
  8026     07E9  0240               	subwf	___lwmod@dividend,w
  8027     07EA                     u178_25:
  8028     07EA  1C03               	skipc
  8029     07EB  2FF0               	goto	i1l2902
  8030     07EC  083E               	movf	___lwmod@divisor,w
  8031     07ED  02C0               	subwf	___lwmod@dividend,f
  8032     07EE  083F               	movf	___lwmod@divisor+1,w
  8033     07EF  3BC1               	subwfb	___lwmod@dividend+1,f
  8034     07F0                     i1l2902:
  8035     07F0  3001               	movlw	1
  8036     07F1                     u179_25:
  8037     07F1  36BF               	lsrf	___lwmod@divisor+1,f
  8038     07F2  0CBE               	rrf	___lwmod@divisor,f
  8039     07F3  0B89               	decfsz	9,f
  8040     07F4  2FF1               	goto	u179_25
  8041     07F5  3001               	movlw	1
  8042     07F6  02C2               	subwf	___lwmod@counter,f
  8043     07F7  1D03               	btfss	3,2
  8044     07F8  2FE4               	goto	i1l2898
  8045     07F9                     i1l2906:
  8046     07F9  0841               	movf	___lwmod@dividend+1,w
  8047     07FA  00BF               	movwf	?___lwmod+1
  8048     07FB  0840               	movf	___lwmod@dividend,w
  8049     07FC  00BE               	movwf	?___lwmod
  8050     07FD  0008               	return
  8051     07FE                     __end_of___lwmod:
  8052                           
  8053                           	psect	text48
  8054     06EF                     __ptext48:	
  8055 ;; *************** function ___lwdiv *****************
  8056 ;; Defined at:
  8057 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;  divisor         2    7[COMMON] unsigned int 
  8060 ;;  dividend        2    9[COMMON] unsigned int 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  quotient        2   11[COMMON] unsigned int 
  8063 ;;  counter         1   13[COMMON] unsigned char 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  2    7[COMMON] unsigned int 
  8066 ;; Registers used:
  8067 ;;		wreg, status,2, status,0
  8068 ;; Tracked objects:
  8069 ;;		On entry : 1F/0
  8070 ;;		On exit  : 1F/0
  8071 ;;		Unchanged: 1F/0
  8072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8073 ;;      Params:         4       0       0       0       0       0
  8074 ;;      Locals:         3       0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0
  8076 ;;      Totals:         7       0       0       0       0       0
  8077 ;;Total ram usage:        7 bytes
  8078 ;; Hardware stack levels used: 1
  8079 ;; This function calls:
  8080 ;;		Nothing
  8081 ;; This function is called by:
  8082 ;;		_Update_tx_buffer
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086     06EF                     ___lwdiv:	
  8087                           ;psect for function ___lwdiv
  8088                           
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8092     06EF  01FB               	clrf	___lwdiv@quotient
  8093     06F0  01FC               	clrf	___lwdiv@quotient+1
  8094     06F1  0877               	movf	___lwdiv@divisor,w
  8095     06F2  0478               	iorwf	___lwdiv@divisor+1,w
  8096     06F3  1903               	btfsc	3,2
  8097     06F4  2F1C               	goto	i1l2884
  8098     06F5  3001               	movlw	1
  8099     06F6  00FD               	movwf	___lwdiv@counter
  8100     06F7                     i1l2872:
  8101     06F7  1BF8               	btfsc	___lwdiv@divisor+1,7
  8102     06F8  2F01               	goto	i1l2874
  8103     06F9  3001               	movlw	1
  8104     06FA                     u169_25:
  8105     06FA  35F7               	lslf	___lwdiv@divisor,f
  8106     06FB  0DF8               	rlf	___lwdiv@divisor+1,f
  8107     06FC  0B89               	decfsz	9,f
  8108     06FD  2EFA               	goto	u169_25
  8109     06FE  3001               	movlw	1
  8110     06FF  07FD               	addwf	___lwdiv@counter,f
  8111     0700  2EF7               	goto	i1l2872
  8112     0701                     i1l2874:
  8113     0701  3001               	movlw	1
  8114     0702                     u171_25:
  8115     0702  35FB               	lslf	___lwdiv@quotient,f
  8116     0703  0DFC               	rlf	___lwdiv@quotient+1,f
  8117     0704  0B89               	decfsz	9,f
  8118     0705  2F02               	goto	u171_25
  8119     0706  0878               	movf	___lwdiv@divisor+1,w
  8120     0707  027A               	subwf	___lwdiv@dividend+1,w
  8121     0708  1D03               	skipz
  8122     0709  2F0C               	goto	u172_25
  8123     070A  0877               	movf	___lwdiv@divisor,w
  8124     070B  0279               	subwf	___lwdiv@dividend,w
  8125     070C                     u172_25:
  8126     070C  1C03               	skipc
  8127     070D  2F13               	goto	i1l2880
  8128     070E  0877               	movf	___lwdiv@divisor,w
  8129     070F  02F9               	subwf	___lwdiv@dividend,f
  8130     0710  0878               	movf	___lwdiv@divisor+1,w
  8131     0711  3BFA               	subwfb	___lwdiv@dividend+1,f
  8132     0712  147B               	bsf	___lwdiv@quotient,0
  8133     0713                     i1l2880:
  8134     0713  3001               	movlw	1
  8135     0714                     u173_25:
  8136     0714  36F8               	lsrf	___lwdiv@divisor+1,f
  8137     0715  0CF7               	rrf	___lwdiv@divisor,f
  8138     0716  0B89               	decfsz	9,f
  8139     0717  2F14               	goto	u173_25
  8140     0718  3001               	movlw	1
  8141     0719  02FD               	subwf	___lwdiv@counter,f
  8142     071A  1D03               	btfss	3,2
  8143     071B  2F01               	goto	i1l2874
  8144     071C                     i1l2884:
  8145     071C  087C               	movf	___lwdiv@quotient+1,w
  8146     071D  00F8               	movwf	?___lwdiv+1
  8147     071E  087B               	movf	___lwdiv@quotient,w
  8148     071F  00F7               	movwf	?___lwdiv
  8149     0720  0008               	return
  8150     0721                     __end_of___lwdiv:
  8151                           
  8152                           	psect	text49
  8153     0EBB                     __ptext49:	
  8154 ;; *************** function ___lbmod *****************
  8155 ;; Defined at:
  8156 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lbmod.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  dividend        1    wreg     unsigned char 
  8159 ;;  divisor         1    4[COMMON] unsigned char 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  dividend        1    6[COMMON] unsigned char 
  8162 ;;  rem             1    8[COMMON] unsigned char 
  8163 ;;  counter         1    7[COMMON] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      unsigned char 
  8166 ;; Registers used:
  8167 ;;		wreg, status,2, status,0
  8168 ;; Tracked objects:
  8169 ;;		On entry : 1F/1
  8170 ;;		On exit  : 1F/1
  8171 ;;		Unchanged: 1F/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8173 ;;      Params:         1       0       0       0       0       0
  8174 ;;      Locals:         3       0       0       0       0       0
  8175 ;;      Temps:          1       0       0       0       0       0
  8176 ;;      Totals:         5       0       0       0       0       0
  8177 ;;Total ram usage:        5 bytes
  8178 ;; Hardware stack levels used: 1
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_Update_tx_buffer
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186     0EBB                     ___lbmod:	
  8187                           ;psect for function ___lbmod
  8188                           
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  8192                           ;___lbmod@dividend stored from wreg
  8193     0EBB  00F6               	movwf	___lbmod@dividend
  8194     0EBC  3008               	movlw	8
  8195     0EBD  00F7               	movwf	___lbmod@counter
  8196     0EBE  01F8               	clrf	___lbmod@rem
  8197     0EBF                     i1l2850:
  8198     0EBF  0876               	movf	___lbmod@dividend,w
  8199     0EC0  00F5               	movwf	??___lbmod
  8200     0EC1  3007               	movlw	7
  8201     0EC2                     u165_25:
  8202     0EC2  36F5               	lsrf	??___lbmod,f
  8203     0EC3  0B89               	decfsz	9,f
  8204     0EC4  2EC2               	goto	u165_25
  8205     0EC5  3578               	lslf	___lbmod@rem,w
  8206     0EC6  0475               	iorwf	??___lbmod,w
  8207     0EC7  00F8               	movwf	___lbmod@rem
  8208     0EC8  1003               	clrc
  8209     0EC9  0DF6               	rlf	___lbmod@dividend,f
  8210     0ECA  0874               	movf	___lbmod@divisor,w
  8211     0ECB  0278               	subwf	___lbmod@rem,w
  8212     0ECC  1C03               	skipc
  8213     0ECD  2ED0               	goto	i1l1302
  8214     0ECE  0874               	movf	___lbmod@divisor,w
  8215     0ECF  02F8               	subwf	___lbmod@rem,f
  8216     0ED0                     i1l1302:
  8217     0ED0  3001               	movlw	1
  8218     0ED1  02F7               	subwf	___lbmod@counter,f
  8219     0ED2  1D03               	btfss	3,2
  8220     0ED3  2EBF               	goto	i1l2850
  8221     0ED4  0878               	movf	___lbmod@rem,w
  8222     0ED5  0008               	return
  8223     0ED6                     __end_of___lbmod:
  8224                           
  8225                           	psect	text50
  8226     0F2E                     __ptext50:	
  8227 ;; *************** function ___lbdiv *****************
  8228 ;; Defined at:
  8229 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lbdiv.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;  dividend        1    wreg     unsigned char 
  8232 ;;  divisor         1    0[COMMON] unsigned char 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;  dividend        1    1[COMMON] unsigned char 
  8235 ;;  quotient        1    3[COMMON] unsigned char 
  8236 ;;  counter         1    2[COMMON] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  1    wreg      unsigned char 
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : 1F/1
  8243 ;;		On exit  : 1F/1
  8244 ;;		Unchanged: 1F/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8246 ;;      Params:         1       0       0       0       0       0
  8247 ;;      Locals:         3       0       0       0       0       0
  8248 ;;      Temps:          0       0       0       0       0       0
  8249 ;;      Totals:         4       0       0       0       0       0
  8250 ;;Total ram usage:        4 bytes
  8251 ;; Hardware stack levels used: 1
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_Update_tx_buffer
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259     0F2E                     ___lbdiv:	
  8260                           ;psect for function ___lbdiv
  8261                           
  8262                           
  8263                           ;incstack = 0
  8264                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  8265                           ;___lbdiv@dividend stored from wreg
  8266     0F2E  00F1               	movwf	___lbdiv@dividend
  8267     0F2F  01F3               	clrf	___lbdiv@quotient
  8268     0F30  0870               	movf	___lbdiv@divisor,w
  8269     0F31  1903               	btfsc	3,2
  8270     0F32  2F4B               	goto	i1l2842
  8271     0F33  3001               	movlw	1
  8272     0F34  00F2               	movwf	___lbdiv@counter
  8273     0F35                     i1l2830:
  8274     0F35  1BF0               	btfsc	___lbdiv@divisor,7
  8275     0F36  2F3C               	goto	i1l2832
  8276     0F37  1003               	clrc
  8277     0F38  0DF0               	rlf	___lbdiv@divisor,f
  8278     0F39  3001               	movlw	1
  8279     0F3A  07F2               	addwf	___lbdiv@counter,f
  8280     0F3B  2F35               	goto	i1l2830
  8281     0F3C                     i1l2832:
  8282     0F3C  1003               	clrc
  8283     0F3D  0DF3               	rlf	___lbdiv@quotient,f
  8284     0F3E  0870               	movf	___lbdiv@divisor,w
  8285     0F3F  0271               	subwf	___lbdiv@dividend,w
  8286     0F40  1C03               	skipc
  8287     0F41  2F46               	goto	L2
  8288     0F42  0870               	movf	___lbdiv@divisor,w
  8289     0F43  02F1               	subwf	___lbdiv@dividend,f
  8290     0F44  1473               	bsf	___lbdiv@quotient,0
  8291     0F45  1003               	clrc
  8292     0F46                     L2:
  8293     0F46  0CF0               	rrf	___lbdiv@divisor,f
  8294     0F47  3001               	movlw	1
  8295     0F48  02F2               	subwf	___lbdiv@counter,f
  8296     0F49  1D03               	btfss	3,2
  8297     0F4A  2F3C               	goto	i1l2832
  8298     0F4B                     i1l2842:
  8299     0F4B  0873               	movf	___lbdiv@quotient,w
  8300     0F4C  0008               	return
  8301     0F4D                     __end_of___lbdiv:
  8302                           
  8303                           	psect	text51
  8304     04F3                     __ptext51:	
  8305 ;; *************** function ___awdiv *****************
  8306 ;; Defined at:
  8307 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  divisor         2    7[COMMON] int 
  8310 ;;  dividend        2    9[COMMON] int 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  quotient        2    2[BANK0 ] int 
  8313 ;;  sign            1    1[BANK0 ] unsigned char 
  8314 ;;  counter         1    0[BANK0 ] unsigned char 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  2    7[COMMON] int 
  8317 ;; Registers used:
  8318 ;;		wreg, status,2, status,0
  8319 ;; Tracked objects:
  8320 ;;		On entry : 1F/0
  8321 ;;		On exit  : 1F/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8324 ;;      Params:         4       0       0       0       0       0
  8325 ;;      Locals:         0       4       0       0       0       0
  8326 ;;      Temps:          0       0       0       0       0       0
  8327 ;;      Totals:         4       4       0       0       0       0
  8328 ;;Total ram usage:        8 bytes
  8329 ;; Hardware stack levels used: 1
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_Update_tx_buffer
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337     04F3                     ___awdiv:	
  8338                           ;psect for function ___awdiv
  8339                           
  8340                           
  8341                           ;incstack = 0
  8342                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8343     04F3  01BF               	clrf	___awdiv@sign
  8344     04F4  1FF8               	btfss	___awdiv@divisor+1,7
  8345     04F5  2CFD               	goto	i1l2784
  8346     04F6  09F7               	comf	___awdiv@divisor,f
  8347     04F7  09F8               	comf	___awdiv@divisor+1,f
  8348     04F8  0AF7               	incf	___awdiv@divisor,f
  8349     04F9  1903               	skipnz
  8350     04FA  0AF8               	incf	___awdiv@divisor+1,f
  8351     04FB  3001               	movlw	1
  8352     04FC  00BF               	movwf	___awdiv@sign
  8353     04FD                     i1l2784:
  8354     04FD  1FFA               	btfss	___awdiv@dividend+1,7
  8355     04FE  2D06               	goto	i1l2790
  8356     04FF  09F9               	comf	___awdiv@dividend,f
  8357     0500  09FA               	comf	___awdiv@dividend+1,f
  8358     0501  0AF9               	incf	___awdiv@dividend,f
  8359     0502  1903               	skipnz
  8360     0503  0AFA               	incf	___awdiv@dividend+1,f
  8361     0504  3001               	movlw	1
  8362     0505  06BF               	xorwf	___awdiv@sign,f
  8363     0506                     i1l2790:
  8364     0506  01C0               	clrf	___awdiv@quotient
  8365     0507  01C1               	clrf	___awdiv@quotient+1
  8366     0508  0877               	movf	___awdiv@divisor,w
  8367     0509  0478               	iorwf	___awdiv@divisor+1,w
  8368     050A  1903               	btfsc	3,2
  8369     050B  2D33               	goto	i1l2812
  8370     050C  3001               	movlw	1
  8371     050D  00BE               	movwf	___awdiv@counter
  8372     050E                     i1l2800:
  8373     050E  1BF8               	btfsc	___awdiv@divisor+1,7
  8374     050F  2D18               	goto	i1l2802
  8375     0510  3001               	movlw	1
  8376     0511                     u154_25:
  8377     0511  35F7               	lslf	___awdiv@divisor,f
  8378     0512  0DF8               	rlf	___awdiv@divisor+1,f
  8379     0513  0B89               	decfsz	9,f
  8380     0514  2D11               	goto	u154_25
  8381     0515  3001               	movlw	1
  8382     0516  07BE               	addwf	___awdiv@counter,f
  8383     0517  2D0E               	goto	i1l2800
  8384     0518                     i1l2802:
  8385     0518  3001               	movlw	1
  8386     0519                     u156_25:
  8387     0519  35C0               	lslf	___awdiv@quotient,f
  8388     051A  0DC1               	rlf	___awdiv@quotient+1,f
  8389     051B  0B89               	decfsz	9,f
  8390     051C  2D19               	goto	u156_25
  8391     051D  0878               	movf	___awdiv@divisor+1,w
  8392     051E  027A               	subwf	___awdiv@dividend+1,w
  8393     051F  1D03               	skipz
  8394     0520  2D23               	goto	u157_25
  8395     0521  0877               	movf	___awdiv@divisor,w
  8396     0522  0279               	subwf	___awdiv@dividend,w
  8397     0523                     u157_25:
  8398     0523  1C03               	skipc
  8399     0524  2D2A               	goto	i1l2808
  8400     0525  0877               	movf	___awdiv@divisor,w
  8401     0526  02F9               	subwf	___awdiv@dividend,f
  8402     0527  0878               	movf	___awdiv@divisor+1,w
  8403     0528  3BFA               	subwfb	___awdiv@dividend+1,f
  8404     0529  1440               	bsf	___awdiv@quotient,0
  8405     052A                     i1l2808:
  8406     052A  3001               	movlw	1
  8407     052B                     u158_25:
  8408     052B  36F8               	lsrf	___awdiv@divisor+1,f
  8409     052C  0CF7               	rrf	___awdiv@divisor,f
  8410     052D  0B89               	decfsz	9,f
  8411     052E  2D2B               	goto	u158_25
  8412     052F  3001               	movlw	1
  8413     0530  02BE               	subwf	___awdiv@counter,f
  8414     0531  1D03               	btfss	3,2
  8415     0532  2D18               	goto	i1l2802
  8416     0533                     i1l2812:
  8417     0533  083F               	movf	___awdiv@sign,w
  8418     0534  1903               	btfsc	3,2
  8419     0535  2D3B               	goto	i1l2816
  8420     0536  09C0               	comf	___awdiv@quotient,f
  8421     0537  09C1               	comf	___awdiv@quotient+1,f
  8422     0538  0AC0               	incf	___awdiv@quotient,f
  8423     0539  1903               	skipnz
  8424     053A  0AC1               	incf	___awdiv@quotient+1,f
  8425     053B                     i1l2816:
  8426     053B  0841               	movf	___awdiv@quotient+1,w
  8427     053C  00F8               	movwf	?___awdiv+1
  8428     053D  0840               	movf	___awdiv@quotient,w
  8429     053E  00F7               	movwf	?___awdiv
  8430     053F  0008               	return
  8431     0540                     __end_of___awdiv:
  8432                           
  8433                           	psect	text52
  8434     0CAE                     __ptext52:	
  8435 ;; *************** function _TMR0_ReadTimer *****************
  8436 ;; Defined at:
  8437 ;;		line 80 in file "mcc_generated_files/tmr0.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;		None
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  readVal         1    0[COMMON] unsigned char 
  8442 ;; Return value:  Size  Location     Type
  8443 ;;                  1    wreg      unsigned char 
  8444 ;; Registers used:
  8445 ;;		wreg
  8446 ;; Tracked objects:
  8447 ;;		On entry : 1F/2
  8448 ;;		On exit  : 1F/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8451 ;;      Params:         0       0       0       0       0       0
  8452 ;;      Locals:         1       0       0       0       0       0
  8453 ;;      Temps:          0       0       0       0       0       0
  8454 ;;      Totals:         1       0       0       0       0       0
  8455 ;;Total ram usage:        1 bytes
  8456 ;; Hardware stack levels used: 1
  8457 ;; This function calls:
  8458 ;;		Nothing
  8459 ;; This function is called by:
  8460 ;;		_Update_tx_buffer
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464     0CAE                     _TMR0_ReadTimer:	
  8465                           ;psect for function _TMR0_ReadTimer
  8466                           
  8467                           
  8468                           ;mcc_generated_files/tmr0.c: 82:     uint8_t readVal;;mcc_generated_files/tmr0.c: 84:   
      +                            readVal = TMR0;
  8469                           
  8470                           ;incstack = 0
  8471                           ; Regs used in _TMR0_ReadTimer: [wreg]
  8472     0CAE  0020               	movlb	0	; select bank0
  8473     0CAF  0815               	movf	21,w	;volatile
  8474     0CB0  00F0               	movwf	TMR0_ReadTimer@readVal
  8475                           
  8476                           ;mcc_generated_files/tmr0.c: 86:     return readVal;
  8477     0CB1  0870               	movf	TMR0_ReadTimer@readVal,w
  8478     0CB2  0008               	return
  8479     0CB3                     __end_of_TMR0_ReadTimer:
  8480                           
  8481                           	psect	text53
  8482     0CF5                     __ptext53:	
  8483 ;; *************** function _EUSART_is_tx_ready *****************
  8484 ;; Defined at:
  8485 ;;		line 121 in file "mcc_generated_files/eusart.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;		None
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  1    wreg      _Bool 
  8492 ;; Registers used:
  8493 ;;		status,2
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 1C/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8499 ;;      Params:         0       0       0       0       0       0
  8500 ;;      Locals:         0       0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0
  8502 ;;      Totals:         0       0       0       0       0       0
  8503 ;;Total ram usage:        0 bytes
  8504 ;; Hardware stack levels used: 1
  8505 ;; This function calls:
  8506 ;;		Nothing
  8507 ;; This function is called by:
  8508 ;;		_Write_UART
  8509 ;; This function uses a non-reentrant model
  8510 ;;
  8511                           
  8512     0CF5                     _EUSART_is_tx_ready:	
  8513                           ;psect for function _EUSART_is_tx_ready
  8514                           
  8515                           
  8516                           ;incstack = 0
  8517                           ; Regs used in _EUSART_is_tx_ready: [status,2]
  8518     0CF5  0020               	movlb	0	; select bank0
  8519     0CF6  1E11               	btfss	17,4	;volatile
  8520     0CF7  0008               	return
  8521     0CF8  0023               	movlb	3	; select bank3
  8522     0CF9  1A9E               	btfsc	30,5	;volatile
  8523     0CFA  0008               	return
  8524     0CFB  0008               	return
  8525     0CFC                     __end_of_EUSART_is_tx_ready:
  8526                           
  8527                           	psect	text54
  8528     0CEE                     __ptext54:	
  8529 ;; *************** function _EUSART_Write *****************
  8530 ;; Defined at:
  8531 ;;		line 162 in file "mcc_generated_files/eusart.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;  txData          1    wreg     unsigned char 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;  txData          1    0[COMMON] unsigned char 
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      void 
  8538 ;; Registers used:
  8539 ;;		wreg
  8540 ;; Tracked objects:
  8541 ;;		On entry : 1F/0
  8542 ;;		On exit  : 1F/3
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8545 ;;      Params:         0       0       0       0       0       0
  8546 ;;      Locals:         1       0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0
  8548 ;;      Totals:         1       0       0       0       0       0
  8549 ;;Total ram usage:        1 bytes
  8550 ;; Hardware stack levels used: 1
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_Write_UART
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558     0CEE                     _EUSART_Write:	
  8559                           ;psect for function _EUSART_Write
  8560                           
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in _EUSART_Write: [wreg]
  8564                           ;EUSART_Write@txData stored from wreg
  8565     0CEE  00F0               	movwf	EUSART_Write@txData
  8566     0CEF                     i1l569:	
  8567                           ;mcc_generated_files/eusart.c: 165:     {;mcc_generated_files/eusart.c: 166:     }
  8568                           
  8569                           
  8570                           ;mcc_generated_files/eusart.c: 164:     while(0 == PIR1bits.TXIF)
  8571     0CEF  1E11               	btfss	17,4	;volatile
  8572     0CF0  2CEF               	goto	i1l569
  8573                           
  8574                           ;mcc_generated_files/eusart.c: 168:     TXREG = txData;
  8575     0CF1  0870               	movf	EUSART_Write@txData,w
  8576     0CF2  0023               	movlb	3	; select bank3
  8577     0CF3  009A               	movwf	26	;volatile
  8578     0CF4  0008               	return
  8579     0CF5                     __end_of_EUSART_Write:
  8580                           
  8581                           	psect	text55
  8582     0686                     __ptext55:	
  8583 ;; *************** function _EUSART_Receive_ISR *****************
  8584 ;; Defined at:
  8585 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8586 ;; Parameters:    Size  Location     Type
  8587 ;;		None
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;		None
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  1    wreg      void 
  8592 ;; Registers used:
  8593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8594 ;; Tracked objects:
  8595 ;;		On entry : 1F/1
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8599 ;;      Params:         0       0       0       0       0       0
  8600 ;;      Locals:         0       0       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0
  8602 ;;      Totals:         0       0       0       0       0       0
  8603 ;;Total ram usage:        0 bytes
  8604 ;; Hardware stack levels used: 1
  8605 ;; Hardware stack levels required when called: 2
  8606 ;; This function calls:
  8607 ;;		NULL
  8608 ;;		_EUSART_DefaultErrorHandler
  8609 ;;		_EUSART_DefaultFramingErrorHandler
  8610 ;;		_EUSART_DefaultOverrunErrorHandler
  8611 ;;		_EUSART_RxDataHandler
  8612 ;; This function is called by:
  8613 ;;		_EUSART_Initialize
  8614 ;;		_Read_UART
  8615 ;;		_INTERRUPT_InterruptManager
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619     0686                     _EUSART_Receive_ISR:	
  8620                           ;psect for function _EUSART_Receive_ISR
  8621                           
  8622                           
  8623                           ;mcc_generated_files/eusart.c: 176:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8627     0686  0020               	movlb	0	; select bank0
  8628     0687  0838               	movf	_eusartRxHead,w	;volatile
  8629     0688  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8630     0689  0086               	movwf	6
  8631     068A  0187               	clrf	7
  8632     068B  0181               	clrf	1
  8633                           
  8634                           ;mcc_generated_files/eusart.c: 178:     if(RCSTAbits.FERR){
  8635     068C  0023               	movlb	3	; select bank3
  8636     068D  1D1D               	btfss	29,2	;volatile
  8637     068E  2E9B               	goto	i1l3434
  8638                           
  8639                           ;mcc_generated_files/eusart.c: 179:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8640     068F  0020               	movlb	0	; select bank0
  8641     0690  0838               	movf	_eusartRxHead,w	;volatile
  8642     0691  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8643     0692  0086               	movwf	6
  8644     0693  0187               	clrf	7
  8645     0694  1481               	bsf	1,1
  8646                           
  8647                           ;mcc_generated_files/eusart.c: 180:         EUSART_FramingErrorHandler();
  8648     0695  0021               	movlb	1	; select bank1
  8649     0696  0861               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  8650     0697  008A               	movwf	10
  8651     0698  0860               	movf	_EUSART_FramingErrorHandler^(0+128),w
  8652     0699  000A               	callw
  8653     069A  3186               	pagesel	$
  8654     069B                     i1l3434:
  8655                           
  8656                           ;mcc_generated_files/eusart.c: 183:     if(RCSTAbits.OERR){
  8657     069B  0023               	movlb	3	; select bank3
  8658     069C  1C9D               	btfss	29,1	;volatile
  8659     069D  2EAA               	goto	i1l3440
  8660                           
  8661                           ;mcc_generated_files/eusart.c: 184:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8662     069E  0020               	movlb	0	; select bank0
  8663     069F  0838               	movf	_eusartRxHead,w	;volatile
  8664     06A0  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8665     06A1  0086               	movwf	6
  8666     06A2  0187               	clrf	7
  8667     06A3  1501               	bsf	1,2
  8668                           
  8669                           ;mcc_generated_files/eusart.c: 185:         EUSART_OverrunErrorHandler();
  8670     06A4  0021               	movlb	1	; select bank1
  8671     06A5  085F               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  8672     06A6  008A               	movwf	10
  8673     06A7  085E               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  8674     06A8  000A               	callw
  8675     06A9  3186               	pagesel	$
  8676     06AA                     i1l3440:
  8677                           
  8678                           ;mcc_generated_files/eusart.c: 188:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8679     06AA  0020               	movlb	0	; select bank0
  8680     06AB  0838               	movf	_eusartRxHead,w	;volatile
  8681     06AC  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8682     06AD  0086               	movwf	6
  8683     06AE  0187               	clrf	7
  8684     06AF  0801               	movf	1,w
  8685     06B0  1903               	btfsc	3,2
  8686     06B1  2EB9               	goto	i1l3444
  8687                           
  8688                           ;mcc_generated_files/eusart.c: 189:         EUSART_ErrorHandler();
  8689     06B2  0021               	movlb	1	; select bank1
  8690     06B3  085D               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  8691     06B4  008A               	movwf	10
  8692     06B5  085C               	movf	_EUSART_ErrorHandler^(0+128),w
  8693     06B6  000A               	callw
  8694     06B7  3186               	pagesel	$
  8695                           
  8696                           ;mcc_generated_files/eusart.c: 190:     } else {
  8697     06B8  0008               	return
  8698     06B9                     i1l3444:
  8699                           
  8700                           ;mcc_generated_files/eusart.c: 191:         EUSART_RxDataHandler();
  8701     06B9  318E  263D         	fcall	_EUSART_RxDataHandler
  8702     06BB  0008               	return
  8703     06BC                     __end_of_EUSART_Receive_ISR:
  8704                           
  8705                           	psect	text56
  8706     0583                     __ptext56:	
  8707 ;; *************** function _Read_UART *****************
  8708 ;; Defined at:
  8709 ;;		line 87 in file "main.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  dest            2   28[BANK0 ] int 
  8714 ;;  ori             2   26[BANK0 ] int 
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  1    wreg      void 
  8717 ;; Registers used:
  8718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 1F/1
  8721 ;;		On exit  : 1F/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8724 ;;      Params:         0       0       0       0       0       0
  8725 ;;      Locals:         0       4       0       0       0       0
  8726 ;;      Temps:          1       0       0       0       0       0
  8727 ;;      Totals:         1       4       0       0       0       0
  8728 ;;Total ram usage:        5 bytes
  8729 ;; Hardware stack levels used: 1
  8730 ;; Hardware stack levels required when called: 4
  8731 ;; This function calls:
  8732 ;;		_EUSART_Read
  8733 ;;		_EUSART_Receive_ISR
  8734 ;;		_New_request
  8735 ;; This function is called by:
  8736 ;;		_main
  8737 ;;		_INTERRUPT_InterruptManager
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741     0583                     _Read_UART:	
  8742                           ;psect for function _Read_UART
  8743                           
  8744                           
  8745                           ;main.c: 88:     EUSART_Receive_ISR();
  8746                           
  8747                           ;incstack = 0
  8748                           ; Regs used in _Read_UART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8749     0583  3186  2686  3185   	fcall	_EUSART_Receive_ISR
  8750                           
  8751                           ;main.c: 89:     uart_read_buffer[uart_read_buffer_count] = EUSART_Read();
  8752     0586  318F  270F  3185   	fcall	_EUSART_Read
  8753     0589  00FC               	movwf	??_Read_UART
  8754     058A  0020               	movlb	0	; select bank0
  8755     058B  0826               	movf	_uart_read_buffer_count,w
  8756     058C  3EA0               	addlw	(low (_uart_read_buffer| 0))& (0+255)
  8757     058D  0086               	movwf	6
  8758     058E  0187               	clrf	7
  8759     058F  087C               	movf	??_Read_UART,w
  8760     0590  0081               	movwf	1
  8761                           
  8762                           ;main.c: 90:     if(uart_read_buffer[uart_read_buffer_count] =='\r'){
  8763     0591  0826               	movf	_uart_read_buffer_count,w
  8764     0592  3EA0               	addlw	(low (_uart_read_buffer| 0))& (0+255)
  8765     0593  0086               	movwf	6
  8766     0594  0187               	clrf	7
  8767     0595  300D               	movlw	13
  8768     0596  0601               	xorwf	1,w
  8769     0597  1D03               	btfss	3,2
  8770     0598  2DC1               	goto	i1l4548
  8771                           
  8772                           ;main.c: 91:         __nop();
  8773     0599  0000               	nop
  8774                           
  8775                           ;main.c: 92:         int ori = uart_read_buffer[0] - '0';
  8776     059A  0021               	movlb	1	; select bank1
  8777     059B  0820               	movf	_uart_read_buffer^(0+128),w
  8778     059C  3ED0               	addlw	208
  8779     059D  0020               	movlb	0	; select bank0
  8780     059E  00D8               	movwf	Read_UART@ori
  8781     059F  30FF               	movlw	255
  8782     05A0  1803               	skipnc
  8783     05A1  3000               	movlw	0
  8784     05A2  00D9               	movwf	Read_UART@ori+1
  8785                           
  8786                           ;main.c: 93:         int dest = uart_read_buffer[1] - '0';
  8787     05A3  0021               	movlb	1	; select bank1
  8788     05A4  0821               	movf	(_uart_read_buffer^(0+128)+1),w
  8789     05A5  3ED0               	addlw	208
  8790     05A6  0020               	movlb	0	; select bank0
  8791     05A7  00DA               	movwf	Read_UART@dest
  8792     05A8  30FF               	movlw	255
  8793     05A9  1803               	skipnc
  8794     05AA  3000               	movlw	0
  8795     05AB  00DB               	movwf	Read_UART@dest+1
  8796                           
  8797                           ;main.c: 94:         ori--;
  8798     05AC  30FF               	movlw	255
  8799     05AD  07D8               	addwf	Read_UART@ori,f
  8800     05AE  30FF               	movlw	255
  8801     05AF  3DD9               	addwfc	Read_UART@ori+1,f
  8802                           
  8803                           ;main.c: 95:         dest--;
  8804     05B0  30FF               	movlw	255
  8805     05B1  07DA               	addwf	Read_UART@dest,f
  8806     05B2  30FF               	movlw	255
  8807     05B3  3DDB               	addwfc	Read_UART@dest+1,f
  8808                           
  8809                           ;main.c: 96:         New_request(ori,dest);
  8810     05B4  0859               	movf	Read_UART@ori+1,w
  8811     05B5  00F9               	movwf	New_request@origin+1
  8812     05B6  0858               	movf	Read_UART@ori,w
  8813     05B7  00F8               	movwf	New_request@origin
  8814     05B8  085B               	movf	Read_UART@dest+1,w
  8815     05B9  00FB               	movwf	New_request@dest+1
  8816     05BA  085A               	movf	Read_UART@dest,w
  8817     05BB  00FA               	movwf	New_request@dest
  8818     05BC  3180  206C         	fcall	_New_request
  8819                           
  8820                           ;main.c: 97:         uart_read_buffer_count = 0;
  8821     05BE  01A6               	clrf	_uart_read_buffer_count
  8822     05BF  01A7               	clrf	_uart_read_buffer_count+1
  8823     05C0  0008               	return
  8824     05C1                     i1l4548:
  8825                           
  8826                           ;main.c: 101:     uart_read_buffer_count++;
  8827     05C1  3001               	movlw	1
  8828     05C2  07A6               	addwf	_uart_read_buffer_count,f
  8829     05C3  3000               	movlw	0
  8830     05C4  3DA7               	addwfc	_uart_read_buffer_count+1,f
  8831     05C5  0008               	return
  8832     05C6                     __end_of_Read_UART:
  8833                           
  8834                           	psect	text57
  8835     006C                     __ptext57:	
  8836 ;; *************** function _New_request *****************
  8837 ;; Defined at:
  8838 ;;		line 28 in file "main.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  origin          2    8[COMMON] int 
  8841 ;;  dest            2   10[COMMON] int 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  i               2   22[BANK0 ] int 
  8844 ;;  i               2   20[BANK0 ] int 
  8845 ;;  i               2   18[BANK0 ] int 
  8846 ;;  i               2   16[BANK0 ] int 
  8847 ;;  index_          2   24[BANK0 ] int 
  8848 ;;  index_ori       2   14[BANK0 ] int 
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      void 
  8851 ;; Registers used:
  8852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8853 ;; Tracked objects:
  8854 ;;		On entry : 1F/0
  8855 ;;		On exit  : 1F/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8858 ;;      Params:         4       0       0       0       0       0
  8859 ;;      Locals:         0      12       0       0       0       0
  8860 ;;      Temps:          0       3       0       0       0       0
  8861 ;;      Totals:         4      15       0       0       0       0
  8862 ;;Total ram usage:       19 bytes
  8863 ;; Hardware stack levels used: 1
  8864 ;; Hardware stack levels required when called: 3
  8865 ;; This function calls:
  8866 ;;		i1_Matrix_update_dir
  8867 ;;		i1___awmod
  8868 ;; This function is called by:
  8869 ;;		_Read_UART
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873     006C                     _New_request:	
  8874                           ;psect for function _New_request
  8875                           
  8876                           
  8877                           ;main.c: 29:   int index_ori;;main.c: 30:   if(origin == dest){return;}
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _New_request: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8881     006C  087B               	movf	New_request@dest+1,w
  8882     006D  0679               	xorwf	New_request@origin+1,w
  8883     006E  1D03               	skipz
  8884     006F  2872               	goto	u307_25
  8885     0070  087A               	movf	New_request@dest,w
  8886     0071  0678               	xorwf	New_request@origin,w
  8887     0072                     u307_25:
  8888     0072  1903               	btfsc	3,2
  8889     0073  0008               	return
  8890                           
  8891                           ;main.c: 31:   int index_;;main.c: 32:   if(origin < dest){
  8892     0074  0879               	movf	New_request@origin+1,w
  8893     0075  3A80               	xorlw	128
  8894     0076  00C9               	movwf	??_New_request
  8895     0077  087B               	movf	New_request@dest+1,w
  8896     0078  3A80               	xorlw	128
  8897     0079  0249               	subwf	??_New_request,w
  8898     007A  1D03               	skipz
  8899     007B  287E               	goto	u308_25
  8900     007C  087A               	movf	New_request@dest,w
  8901     007D  0278               	subwf	New_request@origin,w
  8902     007E                     u308_25:
  8903     007E  1803               	skipnc
  8904     007F  2909               	goto	i1l4364
  8905                           
  8906                           ;main.c: 33:       index_ = index + 1;
  8907     0080  0020               	movlb	0	; select bank0
  8908     0081  083D               	movf	_index,w
  8909     0082  3E01               	addlw	1
  8910     0083  00D6               	movwf	New_request@index_
  8911     0084  3000               	movlw	0
  8912     0085  1803               	skipnc
  8913     0086  3001               	movlw	1
  8914     0087  00D7               	movwf	New_request@index_+1
  8915                           
  8916                           ;main.c: 34:       for(int i=0; i<6; i++){
  8917     0088  01CE               	clrf	New_request@i
  8918     0089  01CF               	clrf	New_request@i+1
  8919     008A                     i1l4338:
  8920                           
  8921                           ;main.c: 35:           index_ = index_ % 6;
  8922     008A  3006               	movlw	6
  8923     008B  00F0               	movwf	i1___awmod@divisor
  8924     008C  3000               	movlw	0
  8925     008D  00F1               	movwf	i1___awmod@divisor+1
  8926     008E  0020               	movlb	0	; select bank0
  8927     008F  0857               	movf	New_request@index_+1,w
  8928     0090  00F3               	movwf	i1___awmod@dividend+1
  8929     0091  0856               	movf	New_request@index_,w
  8930     0092  00F2               	movwf	i1___awmod@dividend
  8931     0093  3185  25C6  3180   	fcall	i1___awmod
  8932     0096  0871               	movf	?i1___awmod+1,w
  8933     0097  00D7               	movwf	New_request@index_+1
  8934     0098  0870               	movf	?i1___awmod,w
  8935     0099  00D6               	movwf	New_request@index_
  8936                           
  8937                           ;main.c: 36:           if(FLOORS[index_] == origin){
  8938     009A  3023               	movlw	low _FLOORS
  8939     009B  0756               	addwf	New_request@index_,w
  8940     009C  0084               	movwf	4
  8941     009D  3008               	movlw	high _FLOORS
  8942     009E  3D57               	addwfc	New_request@index_+1,w
  8943     009F  3880               	iorlw	128
  8944     00A0  0085               	movwf	5
  8945     00A1  0800               	movf	0,w	;code access
  8946     00A2  00C9               	movwf	??_New_request
  8947     00A3  01CA               	clrf	??_New_request+1
  8948     00A4  0879               	movf	New_request@origin+1,w
  8949     00A5  064A               	xorwf	??_New_request+1,w
  8950     00A6  1D03               	skipz
  8951     00A7  28AA               	goto	u309_25
  8952     00A8  0878               	movf	New_request@origin,w
  8953     00A9  0649               	xorwf	??_New_request,w
  8954     00AA                     u309_25:
  8955     00AA  1D03               	skipz
  8956     00AB  28B7               	goto	i1l4346
  8957                           
  8958                           ;main.c: 37:               route[index_]=1;
  8959     00AC  0856               	movf	New_request@index_,w
  8960     00AD  3E20               	addlw	(low (_route| 0))& (0+255)
  8961     00AE  0086               	movwf	6
  8962     00AF  0187               	clrf	7
  8963     00B0  3001               	movlw	1
  8964     00B1  0081               	movwf	1
  8965                           
  8966                           ;main.c: 38:               index_ori = index_;
  8967     00B2  0857               	movf	New_request@index_+1,w
  8968     00B3  00CD               	movwf	New_request@index_ori+1
  8969     00B4  0856               	movf	New_request@index_,w
  8970     00B5  00CC               	movwf	New_request@index_ori
  8971                           
  8972                           ;main.c: 39:               break;
  8973     00B6  28CA               	goto	i1l4348
  8974     00B7                     i1l4346:
  8975                           
  8976                           ;main.c: 41:           index_++;
  8977     00B7  3001               	movlw	1
  8978     00B8  07D6               	addwf	New_request@index_,f
  8979     00B9  3000               	movlw	0
  8980     00BA  3DD7               	addwfc	New_request@index_+1,f
  8981                           
  8982                           ;main.c: 42:         }
  8983     00BB  3001               	movlw	1
  8984     00BC  07CE               	addwf	New_request@i,f
  8985     00BD  3000               	movlw	0
  8986     00BE  3DCF               	addwfc	New_request@i+1,f
  8987     00BF  084F               	movf	New_request@i+1,w
  8988     00C0  3A80               	xorlw	128
  8989     00C1  00C9               	movwf	??_New_request
  8990     00C2  3080               	movlw	128
  8991     00C3  0249               	subwf	??_New_request,w
  8992     00C4  1D03               	skipz
  8993     00C5  28C8               	goto	u310_25
  8994     00C6  3006               	movlw	6
  8995     00C7  024E               	subwf	New_request@i,w
  8996     00C8                     u310_25:
  8997     00C8  1C03               	skipc
  8998     00C9  288A               	goto	i1l4338
  8999     00CA                     i1l4348:
  9000                           
  9001                           ;main.c: 43:       for(int i=0; i<6; i++){
  9002     00CA  0020               	movlb	0	; select bank0
  9003     00CB  01D0               	clrf	New_request@i_1650
  9004     00CC  01D1               	clrf	New_request@i_1650+1
  9005     00CD                     i1l4354:
  9006                           
  9007                           ;main.c: 44:           index_++;
  9008     00CD  3001               	movlw	1
  9009     00CE  0020               	movlb	0	; select bank0
  9010     00CF  07D6               	addwf	New_request@index_,f
  9011     00D0  3000               	movlw	0
  9012     00D1  3DD7               	addwfc	New_request@index_+1,f
  9013                           
  9014                           ;main.c: 45:           index_ = index_ % 6;
  9015     00D2  3006               	movlw	6
  9016     00D3  00F0               	movwf	i1___awmod@divisor
  9017     00D4  3000               	movlw	0
  9018     00D5  00F1               	movwf	i1___awmod@divisor+1
  9019     00D6  0857               	movf	New_request@index_+1,w
  9020     00D7  00F3               	movwf	i1___awmod@dividend+1
  9021     00D8  0856               	movf	New_request@index_,w
  9022     00D9  00F2               	movwf	i1___awmod@dividend
  9023     00DA  3185  25C6  3180   	fcall	i1___awmod
  9024     00DD  0871               	movf	?i1___awmod+1,w
  9025     00DE  00D7               	movwf	New_request@index_+1
  9026     00DF  0870               	movf	?i1___awmod,w
  9027     00E0  00D6               	movwf	New_request@index_
  9028                           
  9029                           ;main.c: 46:           if(FLOORS[index_]== dest)
  9030     00E1  3023               	movlw	low _FLOORS
  9031     00E2  0756               	addwf	New_request@index_,w
  9032     00E3  0084               	movwf	4
  9033     00E4  3008               	movlw	high _FLOORS
  9034     00E5  3D57               	addwfc	New_request@index_+1,w
  9035     00E6  3880               	iorlw	128
  9036     00E7  0085               	movwf	5
  9037     00E8  0800               	movf	0,w	;code access
  9038     00E9  00C9               	movwf	??_New_request
  9039     00EA  01CA               	clrf	??_New_request+1
  9040     00EB  087B               	movf	New_request@dest+1,w
  9041     00EC  064A               	xorwf	??_New_request+1,w
  9042     00ED  1D03               	skipz
  9043     00EE  28F1               	goto	u311_25
  9044     00EF  087A               	movf	New_request@dest,w
  9045     00F0  0649               	xorwf	??_New_request,w
  9046     00F1                     u311_25:
  9047     00F1  1D03               	skipz
  9048     00F2  28FA               	goto	i1l4362
  9049                           
  9050                           ;main.c: 47:             {;main.c: 48:               route[index_] = 1;
  9051     00F3  0856               	movf	New_request@index_,w
  9052     00F4  3E20               	addlw	(low (_route| 0))& (0+255)
  9053     00F5  0086               	movwf	6
  9054     00F6  0187               	clrf	7
  9055     00F7  3001               	movlw	1
  9056     00F8  0081               	movwf	1
  9057                           
  9058                           ;main.c: 49:               break;
  9059     00F9  2909               	goto	i1l4364
  9060     00FA                     i1l4362:
  9061                           
  9062                           ;main.c: 51:         }
  9063     00FA  3001               	movlw	1
  9064     00FB  07D0               	addwf	New_request@i_1650,f
  9065     00FC  3000               	movlw	0
  9066     00FD  3DD1               	addwfc	New_request@i_1650+1,f
  9067     00FE  0851               	movf	New_request@i_1650+1,w
  9068     00FF  3A80               	xorlw	128
  9069     0100  00C9               	movwf	??_New_request
  9070     0101  3080               	movlw	128
  9071     0102  0249               	subwf	??_New_request,w
  9072     0103  1D03               	skipz
  9073     0104  2907               	goto	u312_25
  9074     0105  3006               	movlw	6
  9075     0106  0250               	subwf	New_request@i_1650,w
  9076     0107                     u312_25:
  9077     0107  1C03               	skipc
  9078     0108  28CD               	goto	i1l4354
  9079     0109                     i1l4364:
  9080                           
  9081                           ;main.c: 54:     if(origin >= dest){
  9082     0109  0879               	movf	New_request@origin+1,w
  9083     010A  3A80               	xorlw	128
  9084     010B  0020               	movlb	0	; select bank0
  9085     010C  00C9               	movwf	??_New_request
  9086     010D  087B               	movf	New_request@dest+1,w
  9087     010E  3A80               	xorlw	128
  9088     010F  0249               	subwf	??_New_request,w
  9089     0110  1D03               	skipz
  9090     0111  2914               	goto	u313_25
  9091     0112  087A               	movf	New_request@dest,w
  9092     0113  0278               	subwf	New_request@origin,w
  9093     0114                     u313_25:
  9094     0114  1C03               	skipc
  9095     0115  29A3               	goto	i1l4402
  9096                           
  9097                           ;main.c: 55:       if(index > 3)index_ = index+1;
  9098     0116  3004               	movlw	4
  9099     0117  0020               	movlb	0	; select bank0
  9100     0118  023D               	subwf	_index,w
  9101     0119  1C03               	skipc
  9102     011A  2922               	goto	i1l4370
  9103     011B  083D               	movf	_index,w
  9104     011C  3E01               	addlw	1
  9105     011D  00D6               	movwf	New_request@index_
  9106     011E  3000               	movlw	0
  9107     011F  1803               	skipnc
  9108     0120  3001               	movlw	1
  9109     0121  2925               	goto	L3
  9110     0122                     i1l4370:
  9111     0122  3003               	movlw	3
  9112     0123  00D6               	movwf	New_request@index_
  9113     0124  3000               	movlw	0
  9114     0125                     L3:
  9115     0125  00D7               	movwf	New_request@index_+1
  9116                           
  9117                           ;main.c: 58:       for(int i=0; i<6; i++){
  9118     0126  01D2               	clrf	New_request@i_1651
  9119     0127  01D3               	clrf	New_request@i_1651+1
  9120     0128                     i1l4378:
  9121                           
  9122                           ;main.c: 59:           index_ = index_ % 6;
  9123     0128  3006               	movlw	6
  9124     0129  00F0               	movwf	i1___awmod@divisor
  9125     012A  3000               	movlw	0
  9126     012B  00F1               	movwf	i1___awmod@divisor+1
  9127     012C  0020               	movlb	0	; select bank0
  9128     012D  0857               	movf	New_request@index_+1,w
  9129     012E  00F3               	movwf	i1___awmod@dividend+1
  9130     012F  0856               	movf	New_request@index_,w
  9131     0130  00F2               	movwf	i1___awmod@dividend
  9132     0131  3185  25C6  3180   	fcall	i1___awmod
  9133     0134  0871               	movf	?i1___awmod+1,w
  9134     0135  00D7               	movwf	New_request@index_+1
  9135     0136  0870               	movf	?i1___awmod,w
  9136     0137  00D6               	movwf	New_request@index_
  9137                           
  9138                           ;main.c: 60:           if(FLOORS[index_] == origin){
  9139     0138  3023               	movlw	low _FLOORS
  9140     0139  0756               	addwf	New_request@index_,w
  9141     013A  0084               	movwf	4
  9142     013B  3008               	movlw	high _FLOORS
  9143     013C  3D57               	addwfc	New_request@index_+1,w
  9144     013D  3880               	iorlw	128
  9145     013E  0085               	movwf	5
  9146     013F  0800               	movf	0,w	;code access
  9147     0140  00C9               	movwf	??_New_request
  9148     0141  01CA               	clrf	??_New_request+1
  9149     0142  0879               	movf	New_request@origin+1,w
  9150     0143  064A               	xorwf	??_New_request+1,w
  9151     0144  1D03               	skipz
  9152     0145  2948               	goto	u315_25
  9153     0146  0878               	movf	New_request@origin,w
  9154     0147  0649               	xorwf	??_New_request,w
  9155     0148                     u315_25:
  9156     0148  1D03               	skipz
  9157     0149  2951               	goto	i1l4384
  9158                           
  9159                           ;main.c: 61:               route[index_]=1;
  9160     014A  0856               	movf	New_request@index_,w
  9161     014B  3E20               	addlw	(low (_route| 0))& (0+255)
  9162     014C  0086               	movwf	6
  9163     014D  0187               	clrf	7
  9164     014E  3001               	movlw	1
  9165     014F  0081               	movwf	1
  9166                           
  9167                           ;main.c: 62:               break;
  9168     0150  2964               	goto	i1l4386
  9169     0151                     i1l4384:
  9170                           
  9171                           ;main.c: 64:           index_++;
  9172     0151  3001               	movlw	1
  9173     0152  07D6               	addwf	New_request@index_,f
  9174     0153  3000               	movlw	0
  9175     0154  3DD7               	addwfc	New_request@index_+1,f
  9176                           
  9177                           ;main.c: 65:         }
  9178     0155  3001               	movlw	1
  9179     0156  07D2               	addwf	New_request@i_1651,f
  9180     0157  3000               	movlw	0
  9181     0158  3DD3               	addwfc	New_request@i_1651+1,f
  9182     0159  0853               	movf	New_request@i_1651+1,w
  9183     015A  3A80               	xorlw	128
  9184     015B  00C9               	movwf	??_New_request
  9185     015C  3080               	movlw	128
  9186     015D  0249               	subwf	??_New_request,w
  9187     015E  1D03               	skipz
  9188     015F  2962               	goto	u316_25
  9189     0160  3006               	movlw	6
  9190     0161  0252               	subwf	New_request@i_1651,w
  9191     0162                     u316_25:
  9192     0162  1C03               	skipc
  9193     0163  2928               	goto	i1l4378
  9194     0164                     i1l4386:
  9195                           
  9196                           ;main.c: 66:       for(int i=0; i<6; i++){
  9197     0164  0020               	movlb	0	; select bank0
  9198     0165  01D4               	clrf	New_request@i_1652
  9199     0166  01D5               	clrf	New_request@i_1652+1
  9200     0167                     i1l4392:
  9201                           
  9202                           ;main.c: 67:           index_++;
  9203     0167  3001               	movlw	1
  9204     0168  0020               	movlb	0	; select bank0
  9205     0169  07D6               	addwf	New_request@index_,f
  9206     016A  3000               	movlw	0
  9207     016B  3DD7               	addwfc	New_request@index_+1,f
  9208                           
  9209                           ;main.c: 68:           index_ = index_ % 6;
  9210     016C  3006               	movlw	6
  9211     016D  00F0               	movwf	i1___awmod@divisor
  9212     016E  3000               	movlw	0
  9213     016F  00F1               	movwf	i1___awmod@divisor+1
  9214     0170  0857               	movf	New_request@index_+1,w
  9215     0171  00F3               	movwf	i1___awmod@dividend+1
  9216     0172  0856               	movf	New_request@index_,w
  9217     0173  00F2               	movwf	i1___awmod@dividend
  9218     0174  3185  25C6  3180   	fcall	i1___awmod
  9219     0177  0871               	movf	?i1___awmod+1,w
  9220     0178  00D7               	movwf	New_request@index_+1
  9221     0179  0870               	movf	?i1___awmod,w
  9222     017A  00D6               	movwf	New_request@index_
  9223                           
  9224                           ;main.c: 69:           if(FLOORS[index_]== dest)
  9225     017B  3023               	movlw	low _FLOORS
  9226     017C  0756               	addwf	New_request@index_,w
  9227     017D  0084               	movwf	4
  9228     017E  3008               	movlw	high _FLOORS
  9229     017F  3D57               	addwfc	New_request@index_+1,w
  9230     0180  3880               	iorlw	128
  9231     0181  0085               	movwf	5
  9232     0182  0800               	movf	0,w	;code access
  9233     0183  00C9               	movwf	??_New_request
  9234     0184  01CA               	clrf	??_New_request+1
  9235     0185  087B               	movf	New_request@dest+1,w
  9236     0186  064A               	xorwf	??_New_request+1,w
  9237     0187  1D03               	skipz
  9238     0188  298B               	goto	u317_25
  9239     0189  087A               	movf	New_request@dest,w
  9240     018A  0649               	xorwf	??_New_request,w
  9241     018B                     u317_25:
  9242     018B  1D03               	skipz
  9243     018C  2994               	goto	i1l4400
  9244                           
  9245                           ;main.c: 70:             {;main.c: 71:               route[index_] = 1;
  9246     018D  0856               	movf	New_request@index_,w
  9247     018E  3E20               	addlw	(low (_route| 0))& (0+255)
  9248     018F  0086               	movwf	6
  9249     0190  0187               	clrf	7
  9250     0191  3001               	movlw	1
  9251     0192  0081               	movwf	1
  9252                           
  9253                           ;main.c: 72:               break;
  9254     0193  29A3               	goto	i1l4402
  9255     0194                     i1l4400:
  9256                           
  9257                           ;main.c: 74:         }
  9258     0194  3001               	movlw	1
  9259     0195  07D4               	addwf	New_request@i_1652,f
  9260     0196  3000               	movlw	0
  9261     0197  3DD5               	addwfc	New_request@i_1652+1,f
  9262     0198  0855               	movf	New_request@i_1652+1,w
  9263     0199  3A80               	xorlw	128
  9264     019A  00C9               	movwf	??_New_request
  9265     019B  3080               	movlw	128
  9266     019C  0249               	subwf	??_New_request,w
  9267     019D  1D03               	skipz
  9268     019E  29A1               	goto	u318_25
  9269     019F  3006               	movlw	6
  9270     01A0  0254               	subwf	New_request@i_1652,w
  9271     01A1                     u318_25:
  9272     01A1  1C03               	skipc
  9273     01A2  2967               	goto	i1l4392
  9274     01A3                     i1l4402:
  9275                           
  9276                           ;main.c: 77:   Matrix_update_dir();
  9277     01A3  3184  2424  3180   	fcall	i1_Matrix_update_dir
  9278                           
  9279                           ;main.c: 78:   if(origin == current_floor & CCP3CONbits.CCP3M==0)
  9280     01A6  0026               	movlb	6	; select bank6
  9281     01A7  0813               	movf	19,w	;volatile
  9282     01A8  390F               	andlw	15
  9283     01A9  3A00               	xorlw	0
  9284     01AA  1D03               	btfss	3,2
  9285     01AB  29AE               	goto	u319_20
  9286     01AC  3001               	movlw	1
  9287     01AD  29AF               	goto	u319_22
  9288     01AE                     u319_20:
  9289     01AE  3000               	movlw	0
  9290     01AF                     u319_22:
  9291     01AF  0020               	movlb	0	; select bank0
  9292     01B0  00C9               	movwf	??_New_request
  9293     01B1  083C               	movf	_current_floor,w
  9294     01B2  00CA               	movwf	??_New_request+1
  9295     01B3  01CB               	clrf	??_New_request+2
  9296     01B4  0879               	movf	New_request@origin+1,w
  9297     01B5  064B               	xorwf	??_New_request+2,w
  9298     01B6  1D03               	skipz
  9299     01B7  29BA               	goto	u320_25
  9300     01B8  0878               	movf	New_request@origin,w
  9301     01B9  064A               	xorwf	??_New_request+1,w
  9302     01BA                     u320_25:
  9303     01BA  1D03               	btfss	3,2
  9304     01BB  29BE               	goto	u320_20
  9305     01BC  3001               	movlw	1
  9306     01BD  29BF               	goto	u320_22
  9307     01BE                     u320_20:
  9308     01BE  3000               	movlw	0
  9309     01BF                     u320_22:
  9310     01BF  0549               	andwf	??_New_request,w
  9311     01C0  3800               	iorlw	0
  9312     01C1  1903               	skipnz
  9313     01C2  0008               	return
  9314                           
  9315                           ;main.c: 79:     {;main.c: 80:       _delay((unsigned long)((2000)*(8000000/4000.0)));
  9316     01C3  3015               	movlw	21
  9317     01C4  0020               	movlb	0	; select bank0
  9318     01C5  00CA               	movwf	??_New_request+1
  9319     01C6  304B               	movlw	75
  9320     01C7  00C9               	movwf	??_New_request
  9321     01C8  30BE               	movlw	190
  9322     01C9                     u366_27:
  9323     01C9  0B89               	decfsz	9,f
  9324     01CA  29C9               	goto	u366_27
  9325     01CB  0BC9               	decfsz	??_New_request,f
  9326     01CC  29C9               	goto	u366_27
  9327     01CD  0BCA               	decfsz	??_New_request+1,f
  9328     01CE  29C9               	goto	u366_27
  9329     01CF  0000               	nop
  9330                           
  9331                           ;main.c: 81:       route[index_ori] = 0;
  9332     01D0  0020               	movlb	0	; select bank0
  9333     01D1  084C               	movf	New_request@index_ori,w
  9334     01D2  3E20               	addlw	(low (_route| 0))& (0+255)
  9335     01D3  0086               	movwf	6
  9336     01D4  0187               	clrf	7
  9337     01D5  0181               	clrf	1
  9338                           
  9339                           ;main.c: 82:       Matrix_update_dir();
  9340     01D6  3184  2424         	fcall	i1_Matrix_update_dir
  9341     01D8  0008               	return
  9342     01D9                     __end_of_New_request:
  9343                           
  9344                           	psect	text58
  9345     05C6                     __ptext58:	
  9346 ;; *************** function i1___awmod *****************
  9347 ;; Defined at:
  9348 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  divisor         2    0[COMMON] int 
  9351 ;;  dividend        2    2[COMMON] int 
  9352 ;; Auto vars:     Size  Location     Type
  9353 ;;  sign            1    5[COMMON] unsigned char 
  9354 ;;  counter         1    4[COMMON] unsigned char 
  9355 ;; Return value:  Size  Location     Type
  9356 ;;                  2    0[COMMON] int 
  9357 ;; Registers used:
  9358 ;;		wreg, status,2, status,0
  9359 ;; Tracked objects:
  9360 ;;		On entry : 1F/0
  9361 ;;		On exit  : 1F/0
  9362 ;;		Unchanged: 1F/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9364 ;;      Params:         4       0       0       0       0       0
  9365 ;;      Locals:         2       0       0       0       0       0
  9366 ;;      Temps:          0       0       0       0       0       0
  9367 ;;      Totals:         6       0       0       0       0       0
  9368 ;;Total ram usage:        6 bytes
  9369 ;; Hardware stack levels used: 1
  9370 ;; This function calls:
  9371 ;;		Nothing
  9372 ;; This function is called by:
  9373 ;;		_New_request
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377     05C6                     i1___awmod:	
  9378                           ;psect for function i1___awmod
  9379                           
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  9383     05C6  01F5               	clrf	i1___awmod@sign
  9384     05C7  1FF3               	btfss	i1___awmod@dividend+1,7
  9385     05C8  2DD0               	goto	i1l3216
  9386     05C9  09F2               	comf	i1___awmod@dividend,f
  9387     05CA  09F3               	comf	i1___awmod@dividend+1,f
  9388     05CB  0AF2               	incf	i1___awmod@dividend,f
  9389     05CC  1903               	skipnz
  9390     05CD  0AF3               	incf	i1___awmod@dividend+1,f
  9391     05CE  3001               	movlw	1
  9392     05CF  00F5               	movwf	i1___awmod@sign
  9393     05D0                     i1l3216:
  9394     05D0  1FF1               	btfss	i1___awmod@divisor+1,7
  9395     05D1  2DD7               	goto	i1l3220
  9396     05D2  09F0               	comf	i1___awmod@divisor,f
  9397     05D3  09F1               	comf	i1___awmod@divisor+1,f
  9398     05D4  0AF0               	incf	i1___awmod@divisor,f
  9399     05D5  1903               	skipnz
  9400     05D6  0AF1               	incf	i1___awmod@divisor+1,f
  9401     05D7                     i1l3220:
  9402     05D7  0870               	movf	i1___awmod@divisor,w
  9403     05D8  0471               	iorwf	i1___awmod@divisor+1,w
  9404     05D9  1903               	btfsc	3,2
  9405     05DA  2DFC               	goto	i1l3238
  9406     05DB  3001               	movlw	1
  9407     05DC  00F4               	movwf	i1___awmod@counter
  9408     05DD                     i1l3228:
  9409     05DD  1BF1               	btfsc	i1___awmod@divisor+1,7
  9410     05DE  2DE7               	goto	i1l3230
  9411     05DF  3001               	movlw	1
  9412     05E0                     u211_25:
  9413     05E0  35F0               	lslf	i1___awmod@divisor,f
  9414     05E1  0DF1               	rlf	i1___awmod@divisor+1,f
  9415     05E2  0B89               	decfsz	9,f
  9416     05E3  2DE0               	goto	u211_25
  9417     05E4  3001               	movlw	1
  9418     05E5  07F4               	addwf	i1___awmod@counter,f
  9419     05E6  2DDD               	goto	i1l3228
  9420     05E7                     i1l3230:
  9421     05E7  0871               	movf	i1___awmod@divisor+1,w
  9422     05E8  0273               	subwf	i1___awmod@dividend+1,w
  9423     05E9  1D03               	skipz
  9424     05EA  2DED               	goto	u213_25
  9425     05EB  0870               	movf	i1___awmod@divisor,w
  9426     05EC  0272               	subwf	i1___awmod@dividend,w
  9427     05ED                     u213_25:
  9428     05ED  1C03               	skipc
  9429     05EE  2DF3               	goto	i1l3234
  9430     05EF  0870               	movf	i1___awmod@divisor,w
  9431     05F0  02F2               	subwf	i1___awmod@dividend,f
  9432     05F1  0871               	movf	i1___awmod@divisor+1,w
  9433     05F2  3BF3               	subwfb	i1___awmod@dividend+1,f
  9434     05F3                     i1l3234:
  9435     05F3  3001               	movlw	1
  9436     05F4                     u214_25:
  9437     05F4  36F1               	lsrf	i1___awmod@divisor+1,f
  9438     05F5  0CF0               	rrf	i1___awmod@divisor,f
  9439     05F6  0B89               	decfsz	9,f
  9440     05F7  2DF4               	goto	u214_25
  9441     05F8  3001               	movlw	1
  9442     05F9  02F4               	subwf	i1___awmod@counter,f
  9443     05FA  1D03               	btfss	3,2
  9444     05FB  2DE7               	goto	i1l3230
  9445     05FC                     i1l3238:
  9446     05FC  0875               	movf	i1___awmod@sign,w
  9447     05FD  1903               	btfsc	3,2
  9448     05FE  2E04               	goto	i1l3242
  9449     05FF  09F2               	comf	i1___awmod@dividend,f
  9450     0600  09F3               	comf	i1___awmod@dividend+1,f
  9451     0601  0AF2               	incf	i1___awmod@dividend,f
  9452     0602  1903               	skipnz
  9453     0603  0AF3               	incf	i1___awmod@dividend+1,f
  9454     0604                     i1l3242:
  9455     0604  0873               	movf	i1___awmod@dividend+1,w
  9456     0605  00F1               	movwf	?i1___awmod+1
  9457     0606  0872               	movf	i1___awmod@dividend,w
  9458     0607  00F0               	movwf	?i1___awmod
  9459     0608  0008               	return
  9460     0609                     __end_ofi1___awmod:
  9461                           
  9462                           	psect	text59
  9463     0424                     __ptext59:	
  9464 ;; *************** function i1_Matrix_update_dir *****************
  9465 ;; Defined at:
  9466 ;;		line 237 in file "main.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  route_          4    0[BANK0 ] _Bool [4]
  9471 ;;  data            2    5[BANK0 ] unsigned char [2]
  9472 ;;  i               2    9[BANK0 ] int 
  9473 ;;  i               1    8[BANK0 ] unsigned char 
  9474 ;;  display_dir     1    7[BANK0 ] unsigned char 
  9475 ;;  mask            1    4[BANK0 ] unsigned char 
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  1    wreg      void 
  9478 ;; Registers used:
  9479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 1F/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9485 ;;      Params:         0       0       0       0       0       0
  9486 ;;      Locals:         0      11       0       0       0       0
  9487 ;;      Temps:          1       0       0       0       0       0
  9488 ;;      Totals:         1      11       0       0       0       0
  9489 ;;Total ram usage:       12 bytes
  9490 ;; Hardware stack levels used: 1
  9491 ;; Hardware stack levels required when called: 2
  9492 ;; This function calls:
  9493 ;;		i1_Tx_spi
  9494 ;;		i1___bmul
  9495 ;; This function is called by:
  9496 ;;		_New_request
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500     0424                     i1_Matrix_update_dir:	
  9501                           ;psect for function i1_Matrix_update_dir
  9502                           
  9503                           
  9504                           ;main.c: 238:     uint8_t data[2];;main.c: 239:     uint8_t display_dir;;main.c: 241:   
      +                            _Bool route_[4];;main.c: 242:     route_[0] = route[0];
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in i1_Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9508     0424  0020               	movlb	0	; select bank0
  9509     0425  0820               	movf	_route,w
  9510     0426  00BE               	movwf	i1Matrix_update_dir@route_
  9511                           
  9512                           ;main.c: 243:     route_[1] = route[1] | route[5];
  9513     0427  0821               	movf	_route+1,w
  9514     0428  0425               	iorwf	_route+5,w
  9515     0429  00BF               	movwf	i1Matrix_update_dir@route_+1
  9516                           
  9517                           ;main.c: 244:     route_[2] = route[2] | route[4];
  9518     042A  0822               	movf	_route+2,w
  9519     042B  0424               	iorwf	_route+4,w
  9520     042C  00C0               	movwf	i1Matrix_update_dir@route_+2
  9521                           
  9522                           ;main.c: 245:     route_[3] = route[3];
  9523     042D  0823               	movf	_route+3,w
  9524     042E  00C1               	movwf	i1Matrix_update_dir@route_+3
  9525                           
  9526                           ;main.c: 247:     uint8_t mask = 0;
  9527     042F  01C2               	clrf	i1Matrix_update_dir@mask
  9528                           
  9529                           ;main.c: 249:     for (int i = 0; i < 4; i++) {
  9530     0430  01C7               	clrf	i1Matrix_update_dir@i
  9531     0431  01C8               	clrf	i1Matrix_update_dir@i+1
  9532     0432                     i1l4108:
  9533                           
  9534                           ;main.c: 250:         if (route_[i]) mask |= (1 << i);
  9535     0432  0020               	movlb	0	; select bank0
  9536     0433  0847               	movf	i1Matrix_update_dir@i,w
  9537     0434  3E3E               	addlw	(low (i1Matrix_update_dir@route_| 0))& (0+255)
  9538     0435  0086               	movwf	6
  9539     0436  0187               	clrf	7
  9540     0437  0801               	movf	1,w
  9541     0438  1903               	btfsc	3,2
  9542     0439  2C43               	goto	i1l4112
  9543     043A  3001               	movlw	1
  9544     043B  00F7               	movwf	??i1_Matrix_update_dir
  9545     043C  0A47               	incf	i1Matrix_update_dir@i,w
  9546     043D  2C3F               	goto	u299_24
  9547     043E                     u299_25:
  9548     043E  35F7               	lslf	??i1_Matrix_update_dir,f
  9549     043F                     u299_24:
  9550     043F  0B89               	decfsz	9,f
  9551     0440  2C3E               	goto	u299_25
  9552     0441  0877               	movf	??i1_Matrix_update_dir,w
  9553     0442  04C2               	iorwf	i1Matrix_update_dir@mask,f
  9554     0443                     i1l4112:
  9555                           
  9556                           ;main.c: 251:     }
  9557     0443  3001               	movlw	1
  9558     0444  07C7               	addwf	i1Matrix_update_dir@i,f
  9559     0445  3000               	movlw	0
  9560     0446  3DC8               	addwfc	i1Matrix_update_dir@i+1,f
  9561     0447  0848               	movf	i1Matrix_update_dir@i+1,w
  9562     0448  3A80               	xorlw	128
  9563     0449  00F7               	movwf	??i1_Matrix_update_dir
  9564     044A  3080               	movlw	128
  9565     044B  0277               	subwf	??i1_Matrix_update_dir,w
  9566     044C  1D03               	skipz
  9567     044D  2C50               	goto	u300_25
  9568     044E  3004               	movlw	4
  9569     044F  0247               	subwf	i1Matrix_update_dir@i,w
  9570     0450                     u300_25:
  9571     0450  1C03               	skipc
  9572     0451  2C32               	goto	i1l4108
  9573                           
  9574                           ;main.c: 253:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
  9575     0452  0026               	movlb	6	; select bank6
  9576     0453  0813               	movf	19,w	;volatile
  9577     0454  390F               	andlw	15
  9578     0455  3A00               	xorlw	0
  9579     0456  1D03               	skipz
  9580     0457  2C5A               	goto	i1l4120
  9581     0458  3006               	movlw	6
  9582     0459  2C63               	goto	L4
  9583     045A                     i1l4120:
  9584     045A  3003               	movlw	3
  9585     045B  00F0               	movwf	i1___bmul@multiplicand
  9586     045C  0022               	movlb	2	; select bank2
  9587     045D  0D0C               	rlf	12,w	;volatile
  9588     045E  0D0C               	rlf	12,w	;volatile
  9589     045F  3901               	andlw	1
  9590     0460  318D  25FC  3184   	fcall	i1___bmul
  9591     0463                     L4:
  9592     0463  0020               	movlb	0	; select bank0
  9593     0464  00C5               	movwf	i1Matrix_update_dir@display_dir
  9594                           
  9595                           ;main.c: 255:     data[0] = 1;
  9596     0465  3001               	movlw	1
  9597     0466  00C3               	movwf	i1Matrix_update_dir@data
  9598                           
  9599                           ;main.c: 256:     data[1] = MATRIX_DIR[display_dir] | mask;
  9600     0467  0845               	movf	i1Matrix_update_dir@display_dir,w
  9601     0468  3E1A               	addlw	low (_MATRIX_DIR| (0+32768))
  9602     0469  0084               	movwf	4
  9603     046A  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  9604     046B  1803               	skipnc
  9605     046C  3E01               	addlw	1
  9606     046D  0085               	movwf	5
  9607     046E  0800               	movf	0,w	;code access
  9608     046F  0442               	iorwf	i1Matrix_update_dir@mask,w
  9609     0470  00C4               	movwf	i1Matrix_update_dir@data+1
  9610                           
  9611                           ;main.c: 257:     Tx_spi(data, 2);
  9612     0471  3043               	movlw	(low (i1Matrix_update_dir@data| 0))& (0+255)
  9613     0472  00F4               	movwf	i1Tx_spi@data
  9614     0473  3002               	movlw	2
  9615     0474  00F5               	movwf	i1Tx_spi@dataSize
  9616     0475  3000               	movlw	0
  9617     0476  00F6               	movwf	i1Tx_spi@dataSize+1
  9618     0477  318D  25CF  3184   	fcall	i1_Tx_spi
  9619                           
  9620                           ;main.c: 258:     display_dir++;
  9621     047A  3001               	movlw	1
  9622     047B  0020               	movlb	0	; select bank0
  9623     047C  07C5               	addwf	i1Matrix_update_dir@display_dir,f
  9624                           
  9625                           ;main.c: 260:     for(uint8_t i=2;i<=3;i++){
  9626     047D  3002               	movlw	2
  9627     047E  00C6               	movwf	i1Matrix_update_dir@i_1708
  9628     047F                     i1l4136:
  9629                           
  9630                           ;main.c: 261:         data[0] = i;
  9631     047F  0846               	movf	i1Matrix_update_dir@i_1708,w
  9632     0480  00C3               	movwf	i1Matrix_update_dir@data
  9633                           
  9634                           ;main.c: 262:         data[1] = MATRIX_DIR[display_dir];
  9635     0481  0845               	movf	i1Matrix_update_dir@display_dir,w
  9636     0482  3E1A               	addlw	low (_MATRIX_DIR| (0+32768))
  9637     0483  0084               	movwf	4
  9638     0484  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  9639     0485  1803               	skipnc
  9640     0486  3E01               	addlw	1
  9641     0487  0085               	movwf	5
  9642     0488  0800               	movf	0,w	;code access
  9643     0489  00C4               	movwf	i1Matrix_update_dir@data+1
  9644                           
  9645                           ;main.c: 263:         Tx_spi(data, 2);
  9646     048A  3043               	movlw	(low (i1Matrix_update_dir@data| 0))& (0+255)
  9647     048B  00F4               	movwf	i1Tx_spi@data
  9648     048C  3002               	movlw	2
  9649     048D  00F5               	movwf	i1Tx_spi@dataSize
  9650     048E  3000               	movlw	0
  9651     048F  00F6               	movwf	i1Tx_spi@dataSize+1
  9652     0490  318D  25CF  3184   	fcall	i1_Tx_spi
  9653                           
  9654                           ;main.c: 264:         display_dir++;
  9655     0493  3001               	movlw	1
  9656     0494  0020               	movlb	0	; select bank0
  9657     0495  07C5               	addwf	i1Matrix_update_dir@display_dir,f
  9658                           
  9659                           ;main.c: 266:     }
  9660     0496  3001               	movlw	1
  9661     0497  07C6               	addwf	i1Matrix_update_dir@i_1708,f
  9662     0498  3004               	movlw	4
  9663     0499  0246               	subwf	i1Matrix_update_dir@i_1708,w
  9664     049A  1803               	btfsc	3,0
  9665     049B  0008               	return
  9666     049C  2C7F               	goto	i1l4136
  9667     049D                     __end_ofi1_Matrix_update_dir:
  9668                           
  9669                           	psect	text60
  9670     0DFC                     __ptext60:	
  9671 ;; *************** function i1___bmul *****************
  9672 ;; Defined at:
  9673 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;  multiplier      1    wreg     unsigned char 
  9676 ;;  multiplicand    1    0[COMMON] unsigned char 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;  multiplier      1    2[COMMON] unsigned char 
  9679 ;;  product         1    1[COMMON] unsigned char 
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      unsigned char 
  9682 ;; Registers used:
  9683 ;;		wreg, status,2, status,0
  9684 ;; Tracked objects:
  9685 ;;		On entry : 1F/2
  9686 ;;		On exit  : 1F/2
  9687 ;;		Unchanged: 1F/0
  9688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9689 ;;      Params:         1       0       0       0       0       0
  9690 ;;      Locals:         2       0       0       0       0       0
  9691 ;;      Temps:          0       0       0       0       0       0
  9692 ;;      Totals:         3       0       0       0       0       0
  9693 ;;Total ram usage:        3 bytes
  9694 ;; Hardware stack levels used: 1
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		i1_Matrix_update_dir
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702     0DFC                     i1___bmul:	
  9703                           ;psect for function i1___bmul
  9704                           
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9708                           ;i1___bmul@multiplier stored from wreg
  9709     0DFC  00F2               	movwf	i1___bmul@multiplier
  9710     0DFD  01F1               	clrf	i1___bmul@product
  9711     0DFE                     i1l3030:
  9712     0DFE  1C72               	btfss	i1___bmul@multiplier,0
  9713     0DFF  2E02               	goto	i1l3034
  9714     0E00  0870               	movf	i1___bmul@multiplicand,w
  9715     0E01  07F1               	addwf	i1___bmul@product,f
  9716     0E02                     i1l3034:
  9717     0E02  1003               	clrc
  9718     0E03  0DF0               	rlf	i1___bmul@multiplicand,f
  9719     0E04  1003               	clrc
  9720     0E05  0CF2               	rrf	i1___bmul@multiplier,f
  9721     0E06  0872               	movf	i1___bmul@multiplier,w
  9722     0E07  1D03               	btfss	3,2
  9723     0E08  2DFE               	goto	i1l3030
  9724     0E09  0871               	movf	i1___bmul@product,w
  9725     0E0A  0008               	return
  9726     0E0B                     __end_ofi1___bmul:
  9727                           
  9728                           	psect	text61
  9729     0C9D                     __ptext61:	
  9730 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9731 ;; Defined at:
  9732 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      void 
  9739 ;; Registers used:
  9740 ;;		None
  9741 ;; Tracked objects:
  9742 ;;		On entry : 1F/1
  9743 ;;		On exit  : 1F/3
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9746 ;;      Params:         0       0       0       0       0       0
  9747 ;;      Locals:         0       0       0       0       0       0
  9748 ;;      Temps:          0       0       0       0       0       0
  9749 ;;      Totals:         0       0       0       0       0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used: 1
  9752 ;; This function calls:
  9753 ;;		Nothing
  9754 ;; This function is called by:
  9755 ;;		_EUSART_Initialize
  9756 ;;		_EUSART_Receive_ISR
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760     0C9D                     _EUSART_DefaultOverrunErrorHandler:	
  9761                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9762                           
  9763                           
  9764                           ;mcc_generated_files/eusart.c: 212:     RCSTAbits.CREN = 0;
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9768     0C9D  0023               	movlb	3	; select bank3
  9769     0C9E  121D               	bcf	29,4	;volatile
  9770                           
  9771                           ;mcc_generated_files/eusart.c: 213:     RCSTAbits.CREN = 1;
  9772     0C9F  161D               	bsf	29,4	;volatile
  9773     0CA0  0008               	return
  9774     0CA1                     __end_of_EUSART_DefaultOverrunErrorHandler:
  9775                           
  9776                           	psect	text62
  9777     0C99                     __ptext62:	
  9778 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9779 ;; Defined at:
  9780 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;		None
  9785 ;; Return value:  Size  Location     Type
  9786 ;;                  1    wreg      void 
  9787 ;; Registers used:
  9788 ;;		None
  9789 ;; Tracked objects:
  9790 ;;		On entry : 1F/1
  9791 ;;		On exit  : 1F/1
  9792 ;;		Unchanged: 1F/0
  9793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9794 ;;      Params:         0       0       0       0       0       0
  9795 ;;      Locals:         0       0       0       0       0       0
  9796 ;;      Temps:          0       0       0       0       0       0
  9797 ;;      Totals:         0       0       0       0       0       0
  9798 ;;Total ram usage:        0 bytes
  9799 ;; Hardware stack levels used: 1
  9800 ;; This function calls:
  9801 ;;		Nothing
  9802 ;; This function is called by:
  9803 ;;		_EUSART_Initialize
  9804 ;;		_EUSART_Receive_ISR
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808     0C99                     _EUSART_DefaultFramingErrorHandler:	
  9809                           ;psect for function _EUSART_DefaultFramingErrorHandler
  9810                           
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  9814     0C99  0008               	return
  9815     0C9A                     __end_of_EUSART_DefaultFramingErrorHandler:
  9816                           
  9817                           	psect	text63
  9818     0C9A                     __ptext63:	
  9819 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9820 ;; Defined at:
  9821 ;;		line 217 in file "mcc_generated_files/eusart.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;		None
  9824 ;; Auto vars:     Size  Location     Type
  9825 ;;		None
  9826 ;; Return value:  Size  Location     Type
  9827 ;;                  1    wreg      void 
  9828 ;; Registers used:
  9829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9830 ;; Tracked objects:
  9831 ;;		On entry : 1F/1
  9832 ;;		On exit  : 1F/0
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9835 ;;      Params:         0       0       0       0       0       0
  9836 ;;      Locals:         0       0       0       0       0       0
  9837 ;;      Temps:          0       0       0       0       0       0
  9838 ;;      Totals:         0       0       0       0       0       0
  9839 ;;Total ram usage:        0 bytes
  9840 ;; Hardware stack levels used: 1
  9841 ;; Hardware stack levels required when called: 1
  9842 ;; This function calls:
  9843 ;;		_EUSART_RxDataHandler
  9844 ;; This function is called by:
  9845 ;;		_EUSART_Initialize
  9846 ;;		_EUSART_Receive_ISR
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850     0C9A                     _EUSART_DefaultErrorHandler:	
  9851                           ;psect for function _EUSART_DefaultErrorHandler
  9852                           
  9853                           
  9854                           ;mcc_generated_files/eusart.c: 218:     EUSART_RxDataHandler();
  9855                           
  9856                           ;incstack = 0
  9857                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9858     0C9A  318E  263D         	fcall	_EUSART_RxDataHandler
  9859     0C9C  0008               	return
  9860     0C9D                     __end_of_EUSART_DefaultErrorHandler:
  9861                           
  9862                           	psect	text64
  9863     0E3D                     __ptext64:	
  9864 ;; *************** function _EUSART_RxDataHandler *****************
  9865 ;; Defined at:
  9866 ;;		line 197 in file "mcc_generated_files/eusart.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;		None
  9871 ;; Return value:  Size  Location     Type
  9872 ;;                  1    wreg      void 
  9873 ;; Registers used:
  9874 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9875 ;; Tracked objects:
  9876 ;;		On entry : 1E/0
  9877 ;;		On exit  : 1F/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9880 ;;      Params:         0       0       0       0       0       0
  9881 ;;      Locals:         0       0       0       0       0       0
  9882 ;;      Temps:          0       0       0       0       0       0
  9883 ;;      Totals:         0       0       0       0       0       0
  9884 ;;Total ram usage:        0 bytes
  9885 ;; Hardware stack levels used: 1
  9886 ;; This function calls:
  9887 ;;		Nothing
  9888 ;; This function is called by:
  9889 ;;		_EUSART_Receive_ISR
  9890 ;;		_EUSART_DefaultErrorHandler
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894     0E3D                     _EUSART_RxDataHandler:	
  9895                           ;psect for function _EUSART_RxDataHandler
  9896                           
  9897                           
  9898                           ;mcc_generated_files/eusart.c: 199:     eusartRxBuffer[eusartRxHead++] = RCREG;
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  9902     0E3D  0020               	movlb	0	; select bank0
  9903     0E3E  0838               	movf	_eusartRxHead,w
  9904     0E3F  3EB2               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9905     0E40  0086               	movwf	6
  9906     0E41  0187               	clrf	7
  9907     0E42  0023               	movlb	3	; select bank3
  9908     0E43  0819               	movf	25,w	;volatile
  9909     0E44  0081               	movwf	1
  9910     0E45  3001               	movlw	1
  9911     0E46  0020               	movlb	0	; select bank0
  9912     0E47  07B8               	addwf	_eusartRxHead,f	;volatile
  9913                           
  9914                           ;mcc_generated_files/eusart.c: 200:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9915     0E48  3008               	movlw	8
  9916     0E49  0238               	subwf	_eusartRxHead,w
  9917     0E4A  1803               	btfsc	3,0
  9918                           
  9919                           ;mcc_generated_files/eusart.c: 201:     {;mcc_generated_files/eusart.c: 202:         eus
      +                          artRxHead = 0;
  9920     0E4B  01B8               	clrf	_eusartRxHead	;volatile
  9921                           
  9922                           ;mcc_generated_files/eusart.c: 204:     eusartRxCount++;
  9923     0E4C  3001               	movlw	1
  9924     0E4D  07B6               	addwf	_eusartRxCount,f	;volatile
  9925     0E4E  0008               	return
  9926     0E4F                     __end_of_EUSART_RxDataHandler:
  9927                           
  9928                           	psect	text65
  9929     0F0F                     __ptext65:	
  9930 ;; *************** function _EUSART_Read *****************
  9931 ;; Defined at:
  9932 ;;		line 140 in file "mcc_generated_files/eusart.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;		None
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  readValue       1    0[COMMON] unsigned char 
  9937 ;; Return value:  Size  Location     Type
  9938 ;;                  1    wreg      unsigned char 
  9939 ;; Registers used:
  9940 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/1
  9943 ;;		On exit  : 1F/1
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9946 ;;      Params:         0       0       0       0       0       0
  9947 ;;      Locals:         1       0       0       0       0       0
  9948 ;;      Temps:          0       0       0       0       0       0
  9949 ;;      Totals:         1       0       0       0       0       0
  9950 ;;Total ram usage:        1 bytes
  9951 ;; Hardware stack levels used: 1
  9952 ;; This function calls:
  9953 ;;		Nothing
  9954 ;; This function is called by:
  9955 ;;		_Read_UART
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959     0F0F                     _EUSART_Read:	
  9960                           ;psect for function _EUSART_Read
  9961                           
  9962     0F0F                     i1l3406:	
  9963                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
  9964                           
  9965                           ;incstack = 0
  9966                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9967                           
  9968                           
  9969                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
  9970     0F0F  0020               	movlb	0	; select bank0
  9971     0F10  0836               	movf	_eusartRxCount,w	;volatile
  9972     0F11  1903               	btfsc	3,2
  9973     0F12  2F0F               	goto	i1l3406
  9974                           
  9975                           ;mcc_generated_files/eusart.c: 148:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  9976     0F13  0837               	movf	_eusartRxTail,w	;volatile
  9977     0F14  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9978     0F15  0086               	movwf	6
  9979     0F16  0187               	clrf	7
  9980     0F17  0801               	movf	1,w
  9981     0F18  00B5               	movwf	_eusartRxLastError	;volatile
  9982                           
  9983                           ;mcc_generated_files/eusart.c: 150:     readValue = eusartRxBuffer[eusartRxTail++];
  9984     0F19  0837               	movf	_eusartRxTail,w
  9985     0F1A  3EB2               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9986     0F1B  0086               	movwf	6
  9987     0F1C  0187               	clrf	7
  9988     0F1D  0801               	movf	1,w
  9989     0F1E  00F0               	movwf	EUSART_Read@readValue
  9990     0F1F  3001               	movlw	1
  9991     0F20  07B7               	addwf	_eusartRxTail,f	;volatile
  9992                           
  9993                           ;mcc_generated_files/eusart.c: 151:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  9994     0F21  3008               	movlw	8
  9995     0F22  0237               	subwf	_eusartRxTail,w
  9996     0F23  1803               	btfsc	3,0
  9997                           
  9998                           ;mcc_generated_files/eusart.c: 152:     {;mcc_generated_files/eusart.c: 153:         eus
      +                          artRxTail = 0;
  9999     0F24  01B7               	clrf	_eusartRxTail	;volatile
 10000                           
 10001                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 0;
 10002     0F25  0021               	movlb	1	; select bank1
 10003     0F26  1291               	bcf	17,5	;volatile
 10004                           
 10005                           ;mcc_generated_files/eusart.c: 156:     eusartRxCount--;
 10006     0F27  3001               	movlw	1
 10007     0F28  0020               	movlb	0	; select bank0
 10008     0F29  02B6               	subwf	_eusartRxCount,f	;volatile
 10009                           
 10010                           ;mcc_generated_files/eusart.c: 157:     PIE1bits.RCIE = 1;
 10011     0F2A  0021               	movlb	1	; select bank1
 10012     0F2B  1691               	bsf	17,5	;volatile
 10013                           
 10014                           ;mcc_generated_files/eusart.c: 159:     return readValue;
 10015     0F2C  0870               	movf	EUSART_Read@readValue,w
 10016     0F2D  0008               	return
 10017     0F2E                     __end_of_EUSART_Read:
 10018                           
 10019                           	psect	text66
 10020     0D3C                     __ptext66:	
 10021 ;; *************** function _PIN_MANAGER_IOC *****************
 10022 ;; Defined at:
 10023 ;;		line 119 in file "mcc_generated_files/pin_manager.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;		None
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;		None
 10028 ;; Return value:  Size  Location     Type
 10029 ;;                  1    wreg      void 
 10030 ;; Registers used:
 10031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 1F/7
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10037 ;;      Params:         0       0       0       0       0       0
 10038 ;;      Locals:         0       0       0       0       0       0
 10039 ;;      Temps:          0       0       0       0       0       0
 10040 ;;      Totals:         0       0       0       0       0       0
 10041 ;;Total ram usage:        0 bytes
 10042 ;; Hardware stack levels used: 1
 10043 ;; Hardware stack levels required when called: 5
 10044 ;; This function calls:
 10045 ;;		_IOCBF0_ISR
 10046 ;;		_IOCBF3_ISR
 10047 ;; This function is called by:
 10048 ;;		_INTERRUPT_InterruptManager
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052     0D3C                     _PIN_MANAGER_IOC:	
 10053                           ;psect for function _PIN_MANAGER_IOC
 10054                           
 10055                           
 10056                           ;mcc_generated_files/pin_manager.c: 122:     if(IOCBFbits.IOCBF0 == 1)
 10057                           
 10058                           ;incstack = 0
 10059                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10060     0D3C  0027               	movlb	7	; select bank7
 10061     0D3D  1C16               	btfss	22,0	;volatile
 10062     0D3E  2D42               	goto	i1l4500
 10063                           
 10064                           ;mcc_generated_files/pin_manager.c: 123:     {;mcc_generated_files/pin_manager.c: 124:  
      +                                 IOCBF0_ISR();
 10065     0D3F  318D  258D  318D   	fcall	_IOCBF0_ISR
 10066     0D42                     i1l4500:
 10067                           
 10068                           ;mcc_generated_files/pin_manager.c: 127:     if(IOCBFbits.IOCBF3 == 1)
 10069     0D42  1D96               	btfss	22,3	;volatile
 10070     0D43  0008               	return
 10071                           
 10072                           ;mcc_generated_files/pin_manager.c: 128:     {;mcc_generated_files/pin_manager.c: 129:  
      +                                 IOCBF3_ISR();
 10073     0D44  318D  259A         	fcall	_IOCBF3_ISR
 10074     0D46  0008               	return
 10075     0D47                     __end_of_PIN_MANAGER_IOC:
 10076                           
 10077                           	psect	text67
 10078     0D9A                     __ptext67:	
 10079 ;; *************** function _IOCBF3_ISR *****************
 10080 ;; Defined at:
 10081 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;		None
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;		None
 10086 ;; Return value:  Size  Location     Type
 10087 ;;                  1    wreg      void 
 10088 ;; Registers used:
 10089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10090 ;; Tracked objects:
 10091 ;;		On entry : 1F/7
 10092 ;;		On exit  : 1F/7
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10095 ;;      Params:         0       0       0       0       0       0
 10096 ;;      Locals:         0       0       0       0       0       0
 10097 ;;      Temps:          0       0       0       0       0       0
 10098 ;;      Totals:         0       0       0       0       0       0
 10099 ;;Total ram usage:        0 bytes
 10100 ;; Hardware stack levels used: 1
 10101 ;; Hardware stack levels required when called: 4
 10102 ;; This function calls:
 10103 ;;		NULL
 10104 ;;		_IOCBF3_DefaultInterruptHandler
 10105 ;;		_ISR_Floor2
 10106 ;; This function is called by:
 10107 ;;		_PIN_MANAGER_IOC
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111     0D9A                     _IOCBF3_ISR:	
 10112                           ;psect for function _IOCBF3_ISR
 10113                           
 10114                           
 10115                           ;mcc_generated_files/pin_manager.c: 171:     if(IOCBF3_InterruptHandler)
 10116                           
 10117                           ;incstack = 0
 10118                           ; Regs used in _IOCBF3_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10119     0D9A  0021               	movlb	1	; select bank1
 10120     0D9B  0864               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10121     0D9C  0465               	iorwf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10122     0D9D  1903               	btfsc	3,2
 10123     0D9E  2DA4               	goto	i1l4282
 10124                           
 10125                           ;mcc_generated_files/pin_manager.c: 172:     {;mcc_generated_files/pin_manager.c: 173:  
      +                                 IOCBF3_InterruptHandler();
 10126     0D9F  0865               	movf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10127     0DA0  008A               	movwf	10
 10128     0DA1  0864               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10129     0DA2  000A               	callw
 10130     0DA3  318D               	pagesel	$
 10131     0DA4                     i1l4282:
 10132                           
 10133                           ;mcc_generated_files/pin_manager.c: 175:     IOCBFbits.IOCBF3 = 0;
 10134     0DA4  0027               	movlb	7	; select bank7
 10135     0DA5  1196               	bcf	22,3	;volatile
 10136     0DA6  0008               	return
 10137     0DA7                     __end_of_IOCBF3_ISR:
 10138                           
 10139                           	psect	text68
 10140     0C98                     __ptext68:	
 10141 ;; *************** function _IOCBF3_DefaultInterruptHandler *****************
 10142 ;; Defined at:
 10143 ;;		line 188 in file "mcc_generated_files/pin_manager.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;		None
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;		None
 10148 ;; Return value:  Size  Location     Type
 10149 ;;                  1    wreg      void 
 10150 ;; Registers used:
 10151 ;;		None
 10152 ;; Tracked objects:
 10153 ;;		On entry : 1F/1
 10154 ;;		On exit  : 1F/1
 10155 ;;		Unchanged: 1F/0
 10156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10157 ;;      Params:         0       0       0       0       0       0
 10158 ;;      Locals:         0       0       0       0       0       0
 10159 ;;      Temps:          0       0       0       0       0       0
 10160 ;;      Totals:         0       0       0       0       0       0
 10161 ;;Total ram usage:        0 bytes
 10162 ;; Hardware stack levels used: 1
 10163 ;; This function calls:
 10164 ;;		Nothing
 10165 ;; This function is called by:
 10166 ;;		_PIN_MANAGER_Initialize
 10167 ;;		_IOCBF3_ISR
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171     0C98                     _IOCBF3_DefaultInterruptHandler:	
 10172                           ;psect for function _IOCBF3_DefaultInterruptHandler
 10173                           
 10174                           
 10175                           ;incstack = 0
 10176                           ; Regs used in _IOCBF3_DefaultInterruptHandler: []
 10177     0C98  0008               	return
 10178     0C99                     __end_of_IOCBF3_DefaultInterruptHandler:
 10179                           
 10180                           	psect	text69
 10181     0E61                     __ptext69:	
 10182 ;; *************** function _ISR_Floor2 *****************
 10183 ;; Defined at:
 10184 ;;		line 292 in file "main.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 1F/1
 10195 ;;		On exit  : 1F/7
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10198 ;;      Params:         0       0       0       0       0       0
 10199 ;;      Locals:         0       0       0       0       0       0
 10200 ;;      Temps:          0       0       0       0       0       0
 10201 ;;      Totals:         0       0       0       0       0       0
 10202 ;;Total ram usage:        0 bytes
 10203 ;; Hardware stack levels used: 1
 10204 ;; Hardware stack levels required when called: 3
 10205 ;; This function calls:
 10206 ;;		i1_Matrix_update_floor
 10207 ;;		i1_TMR0_WriteTimer
 10208 ;; This function is called by:
 10209 ;;		_main
 10210 ;;		_IOCBF3_ISR
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214     0E61                     _ISR_Floor2:	
 10215                           ;psect for function _ISR_Floor2
 10216                           
 10217                           
 10218                           ;main.c: 293:     IOCBNbits.IOCBN3 = 0;
 10219                           
 10220                           ;incstack = 0
 10221                           ; Regs used in _ISR_Floor2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10222     0E61  0027               	movlb	7	; select bank7
 10223     0E62  1195               	bcf	21,3	;volatile
 10224                           
 10225                           ;main.c: 294:     IOCBFbits.IOCBF3 = 0;
 10226     0E63  1196               	bcf	22,3	;volatile
 10227                           
 10228                           ;main.c: 295:     current_floor = 1;
 10229     0E64  3001               	movlw	1
 10230     0E65  0020               	movlb	0	; select bank0
 10231     0E66  00BC               	movwf	_current_floor
 10232                           
 10233                           ;main.c: 296:     index++;
 10234     0E67  3001               	movlw	1
 10235     0E68  07BD               	addwf	_index,f
 10236                           
 10237                           ;main.c: 297:     Matrix_update_floor(current_floor);
 10238     0E69  083C               	movf	_current_floor,w
 10239     0E6A  318F  27D8  318E   	fcall	i1_Matrix_update_floor
 10240                           
 10241                           ;main.c: 298:     var.HHH = 60;
 10242     0E6D  303C               	movlw	60
 10243     0E6E  0021               	movlb	1	; select bank1
 10244     0E6F  00BC               	movwf	(_var^(0+128)+2)
 10245                           
 10246                           ;main.c: 299:     TMR0_WriteTimer (0);
 10247     0E70  3000               	movlw	0
 10248     0E71  318C  24A9         	fcall	i1_TMR0_WriteTimer
 10249                           
 10250                           ;main.c: 305:     IOCBNbits.IOCBN3 = 1;
 10251     0E73  0027               	movlb	7	; select bank7
 10252     0E74  1595               	bsf	21,3	;volatile
 10253     0E75  0008               	return
 10254     0E76                     __end_of_ISR_Floor2:
 10255                           
 10256                           	psect	text70
 10257     0D8D                     __ptext70:	
 10258 ;; *************** function _IOCBF0_ISR *****************
 10259 ;; Defined at:
 10260 ;;		line 136 in file "mcc_generated_files/pin_manager.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;		None
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;		None
 10265 ;; Return value:  Size  Location     Type
 10266 ;;                  1    wreg      void 
 10267 ;; Registers used:
 10268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10269 ;; Tracked objects:
 10270 ;;		On entry : 1F/7
 10271 ;;		On exit  : 1F/7
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10274 ;;      Params:         0       0       0       0       0       0
 10275 ;;      Locals:         0       0       0       0       0       0
 10276 ;;      Temps:          0       0       0       0       0       0
 10277 ;;      Totals:         0       0       0       0       0       0
 10278 ;;Total ram usage:        0 bytes
 10279 ;; Hardware stack levels used: 1
 10280 ;; Hardware stack levels required when called: 4
 10281 ;; This function calls:
 10282 ;;		NULL
 10283 ;;		_IOCBF0_DefaultInterruptHandler
 10284 ;;		_ISR_Floor1
 10285 ;; This function is called by:
 10286 ;;		_PIN_MANAGER_IOC
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290     0D8D                     _IOCBF0_ISR:	
 10291                           ;psect for function _IOCBF0_ISR
 10292                           
 10293                           
 10294                           ;mcc_generated_files/pin_manager.c: 141:     if(IOCBF0_InterruptHandler)
 10295                           
 10296                           ;incstack = 0
 10297                           ; Regs used in _IOCBF0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10298     0D8D  0021               	movlb	1	; select bank1
 10299     0D8E  0866               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10300     0D8F  0467               	iorwf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10301     0D90  1903               	btfsc	3,2
 10302     0D91  2D97               	goto	i1l4276
 10303                           
 10304                           ;mcc_generated_files/pin_manager.c: 142:     {;mcc_generated_files/pin_manager.c: 143:  
      +                                 IOCBF0_InterruptHandler();
 10305     0D92  0867               	movf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10306     0D93  008A               	movwf	10
 10307     0D94  0866               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10308     0D95  000A               	callw
 10309     0D96  318D               	pagesel	$
 10310     0D97                     i1l4276:
 10311                           
 10312                           ;mcc_generated_files/pin_manager.c: 145:     IOCBFbits.IOCBF0 = 0;
 10313     0D97  0027               	movlb	7	; select bank7
 10314     0D98  1016               	bcf	22,0	;volatile
 10315     0D99  0008               	return
 10316     0D9A                     __end_of_IOCBF0_ISR:
 10317                           
 10318                           	psect	text71
 10319     0C97                     __ptext71:	
 10320 ;; *************** function _IOCBF0_DefaultInterruptHandler *****************
 10321 ;; Defined at:
 10322 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  1    wreg      void 
 10329 ;; Registers used:
 10330 ;;		None
 10331 ;; Tracked objects:
 10332 ;;		On entry : 1F/1
 10333 ;;		On exit  : 1F/1
 10334 ;;		Unchanged: 1F/0
 10335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10336 ;;      Params:         0       0       0       0       0       0
 10337 ;;      Locals:         0       0       0       0       0       0
 10338 ;;      Temps:          0       0       0       0       0       0
 10339 ;;      Totals:         0       0       0       0       0       0
 10340 ;;Total ram usage:        0 bytes
 10341 ;; Hardware stack levels used: 1
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_PIN_MANAGER_Initialize
 10346 ;;		_IOCBF0_ISR
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350     0C97                     _IOCBF0_DefaultInterruptHandler:	
 10351                           ;psect for function _IOCBF0_DefaultInterruptHandler
 10352                           
 10353                           
 10354                           ;incstack = 0
 10355                           ; Regs used in _IOCBF0_DefaultInterruptHandler: []
 10356     0C97  0008               	return
 10357     0C98                     __end_of_IOCBF0_DefaultInterruptHandler:
 10358                           
 10359                           	psect	text72
 10360     0E2B                     __ptext72:	
 10361 ;; *************** function _ISR_Floor1 *****************
 10362 ;; Defined at:
 10363 ;;		line 308 in file "main.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;		None
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;		None
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  1    wreg      void 
 10370 ;; Registers used:
 10371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10372 ;; Tracked objects:
 10373 ;;		On entry : 1F/1
 10374 ;;		On exit  : 1F/7
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10377 ;;      Params:         0       0       0       0       0       0
 10378 ;;      Locals:         0       0       0       0       0       0
 10379 ;;      Temps:          0       0       0       0       0       0
 10380 ;;      Totals:         0       0       0       0       0       0
 10381 ;;Total ram usage:        0 bytes
 10382 ;; Hardware stack levels used: 1
 10383 ;; Hardware stack levels required when called: 3
 10384 ;; This function calls:
 10385 ;;		i1_Matrix_update_floor
 10386 ;;		i1_TMR0_WriteTimer
 10387 ;; This function is called by:
 10388 ;;		_main
 10389 ;;		_IOCBF0_ISR
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393     0E2B                     _ISR_Floor1:	
 10394                           ;psect for function _ISR_Floor1
 10395                           
 10396                           
 10397                           ;main.c: 309:     IOCBNbits.IOCBN0 = 0;
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in _ISR_Floor1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10401     0E2B  0027               	movlb	7	; select bank7
 10402     0E2C  1015               	bcf	21,0	;volatile
 10403                           
 10404                           ;main.c: 310:     IOCBFbits.IOCBF0 = 0;
 10405     0E2D  1016               	bcf	22,0	;volatile
 10406                           
 10407                           ;main.c: 311:     current_floor = 0;
 10408     0E2E  0020               	movlb	0	; select bank0
 10409     0E2F  01BC               	clrf	_current_floor
 10410                           
 10411                           ;main.c: 312:     index=0;
 10412     0E30  01BD               	clrf	_index
 10413                           
 10414                           ;main.c: 313:     Matrix_update_floor(current_floor);
 10415     0E31  083C               	movf	_current_floor,w
 10416     0E32  318F  27D8  318E   	fcall	i1_Matrix_update_floor
 10417                           
 10418                           ;main.c: 314:     var.HHH = 0;
 10419     0E35  0021               	movlb	1	; select bank1
 10420     0E36  01BC               	clrf	(_var^(0+128)+2)
 10421                           
 10422                           ;main.c: 315:     TMR0_WriteTimer (0);
 10423     0E37  3000               	movlw	0
 10424     0E38  318C  24A9         	fcall	i1_TMR0_WriteTimer
 10425                           
 10426                           ;main.c: 319:     IOCBNbits.IOCBN0 = 1;
 10427     0E3A  0027               	movlb	7	; select bank7
 10428     0E3B  1415               	bsf	21,0	;volatile
 10429     0E3C  0008               	return
 10430     0E3D                     __end_of_ISR_Floor1:
 10431                           
 10432                           	psect	text73
 10433     0D80                     __ptext73:	
 10434 ;; *************** function _ECCP2_CaptureISR *****************
 10435 ;; Defined at:
 10436 ;;		line 79 in file "mcc_generated_files/eccp2.c"
 10437 ;; Parameters:    Size  Location     Type
 10438 ;;		None
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;  module          2    2[COMMON] struct CCPR2Reg_tag
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      void 
 10443 ;; Registers used:
 10444 ;;		wreg, status,2, status,0, pclath, cstack
 10445 ;; Tracked objects:
 10446 ;;		On entry : 1F/0
 10447 ;;		On exit  : 1F/5
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10450 ;;      Params:         0       0       0       0       0       0
 10451 ;;      Locals:         2       0       0       0       0       0
 10452 ;;      Temps:          0       0       0       0       0       0
 10453 ;;      Totals:         2       0       0       0       0       0
 10454 ;;Total ram usage:        2 bytes
 10455 ;; Hardware stack levels used: 1
 10456 ;; Hardware stack levels required when called: 1
 10457 ;; This function calls:
 10458 ;;		_ECCP2_CallBack
 10459 ;; This function is called by:
 10460 ;;		_INTERRUPT_InterruptManager
 10461 ;; This function uses a non-reentrant model
 10462 ;;
 10463                           
 10464     0D80                     _ECCP2_CaptureISR:	
 10465                           ;psect for function _ECCP2_CaptureISR
 10466                           
 10467                           
 10468                           ;mcc_generated_files/eccp2.c: 81:     CCP2_PERIOD_REG_T module;;mcc_generated_files/eccp
      +                          2.c: 84:     PIR2bits.CCP2IF = 0;
 10469                           
 10470                           ;incstack = 0
 10471                           ; Regs used in _ECCP2_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 10472     0D80  1012               	bcf	18,0	;volatile
 10473                           
 10474                           ;mcc_generated_files/eccp2.c: 87:     module.ccpr2l = CCPR2L;
 10475     0D81  0025               	movlb	5	; select bank5
 10476     0D82  0818               	movf	24,w	;volatile
 10477     0D83  00F2               	movwf	ECCP2_CaptureISR@module
 10478                           
 10479                           ;mcc_generated_files/eccp2.c: 88:     module.ccpr2h = CCPR2H;
 10480     0D84  0819               	movf	25,w	;volatile
 10481     0D85  00F3               	movwf	ECCP2_CaptureISR@module+1
 10482                           
 10483                           ;mcc_generated_files/eccp2.c: 91:     ECCP2_CallBack(module.ccpr2_16Bit);
 10484     0D86  0873               	movf	ECCP2_CaptureISR@module+1,w
 10485     0D87  00F1               	movwf	ECCP2_CallBack@capturedValue+1
 10486     0D88  0872               	movf	ECCP2_CaptureISR@module,w
 10487     0D89  00F0               	movwf	ECCP2_CallBack@capturedValue
 10488     0D8A  318C  2496         	fcall	_ECCP2_CallBack
 10489     0D8C  0008               	return
 10490     0D8D                     __end_of_ECCP2_CaptureISR:
 10491                           
 10492                           	psect	text74
 10493     0C96                     __ptext74:	
 10494 ;; *************** function _ECCP2_CallBack *****************
 10495 ;; Defined at:
 10496 ;;		line 94 in file "mcc_generated_files/eccp2.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  capturedValu    2    0[COMMON] unsigned short 
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		None
 10505 ;; Tracked objects:
 10506 ;;		On entry : 1F/5
 10507 ;;		On exit  : 1F/5
 10508 ;;		Unchanged: 1E/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10510 ;;      Params:         2       0       0       0       0       0
 10511 ;;      Locals:         0       0       0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0
 10513 ;;      Totals:         2       0       0       0       0       0
 10514 ;;Total ram usage:        2 bytes
 10515 ;; Hardware stack levels used: 1
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_ECCP2_CaptureISR
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523     0C96                     _ECCP2_CallBack:	
 10524                           ;psect for function _ECCP2_CallBack
 10525                           
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _ECCP2_CallBack: []
 10529     0C96  0008               	return
 10530     0C97                     __end_of_ECCP2_CallBack:
 10531                           
 10532                           	psect	text75
 10533     0D15                     __ptext75:	
 10534 ;; *************** function _CMP2_ISR *****************
 10535 ;; Defined at:
 10536 ;;		line 86 in file "mcc_generated_files/cmp2.c"
 10537 ;; Parameters:    Size  Location     Type
 10538 ;;		None
 10539 ;; Auto vars:     Size  Location     Type
 10540 ;;		None
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  1    wreg      void 
 10543 ;; Registers used:
 10544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10545 ;; Tracked objects:
 10546 ;;		On entry : 1F/0
 10547 ;;		On exit  : 1F/1
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10550 ;;      Params:         0       0       0       0       0       0
 10551 ;;      Locals:         0       0       0       0       0       0
 10552 ;;      Temps:          0       0       0       0       0       0
 10553 ;;      Totals:         0       0       0       0       0       0
 10554 ;;Total ram usage:        0 bytes
 10555 ;; Hardware stack levels used: 1
 10556 ;; Hardware stack levels required when called: 4
 10557 ;; This function calls:
 10558 ;;		_ISR_Floor4
 10559 ;; This function is called by:
 10560 ;;		_INTERRUPT_InterruptManager
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564     0D15                     _CMP2_ISR:	
 10565                           ;psect for function _CMP2_ISR
 10566                           
 10567                           
 10568                           ;mcc_generated_files/cmp2.c: 88:     PIE2bits.C2IE = 0;
 10569                           
 10570                           ;incstack = 0
 10571                           ; Regs used in _CMP2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10572     0D15  0021               	movlb	1	; select bank1
 10573     0D16  1312               	bcf	18,6	;volatile
 10574                           
 10575                           ;mcc_generated_files/cmp2.c: 89:     PIR2bits.C2IF = 0;
 10576     0D17  0020               	movlb	0	; select bank0
 10577     0D18  1312               	bcf	18,6	;volatile
 10578                           
 10579                           ;mcc_generated_files/cmp2.c: 90:     ISR_Floor4();
 10580     0D19  318D  25ED         	fcall	_ISR_Floor4
 10581                           
 10582                           ;mcc_generated_files/cmp2.c: 91:     PIE2bits.C2IE = 1;
 10583     0D1B  0021               	movlb	1	; select bank1
 10584     0D1C  1712               	bsf	18,6	;volatile
 10585     0D1D  0008               	return
 10586     0D1E                     __end_of_CMP2_ISR:
 10587                           
 10588                           	psect	text76
 10589     0DED                     __ptext76:	
 10590 ;; *************** function _ISR_Floor4 *****************
 10591 ;; Defined at:
 10592 ;;		line 273 in file "main.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;		None
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;                  1    wreg      void 
 10599 ;; Registers used:
 10600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10601 ;; Tracked objects:
 10602 ;;		On entry : 1F/0
 10603 ;;		On exit  : 1F/0
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10606 ;;      Params:         0       0       0       0       0       0
 10607 ;;      Locals:         0       0       0       0       0       0
 10608 ;;      Temps:          0       0       0       0       0       0
 10609 ;;      Totals:         0       0       0       0       0       0
 10610 ;;Total ram usage:        0 bytes
 10611 ;; Hardware stack levels used: 1
 10612 ;; Hardware stack levels required when called: 3
 10613 ;; This function calls:
 10614 ;;		i1_Matrix_update_floor
 10615 ;;		i1_TMR0_WriteTimer
 10616 ;; This function is called by:
 10617 ;;		_CMP2_ISR
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621     0DED                     _ISR_Floor4:	
 10622                           ;psect for function _ISR_Floor4
 10623                           
 10624                           
 10625                           ;main.c: 274:     current_floor = 3;
 10626                           
 10627                           ;incstack = 0
 10628                           ; Regs used in _ISR_Floor4: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10629     0DED  3003               	movlw	3
 10630     0DEE  00BC               	movwf	_current_floor
 10631                           
 10632                           ;main.c: 275:     index = 3;
 10633     0DEF  3003               	movlw	3
 10634     0DF0  00BD               	movwf	_index
 10635                           
 10636                           ;main.c: 276:     Matrix_update_floor(current_floor);
 10637     0DF1  083C               	movf	_current_floor,w
 10638     0DF2  318F  27D8  318D   	fcall	i1_Matrix_update_floor
 10639                           
 10640                           ;main.c: 277:     var.HHH = 180;
 10641     0DF5  30B4               	movlw	180
 10642     0DF6  0021               	movlb	1	; select bank1
 10643     0DF7  00BC               	movwf	(_var^(0+128)+2)
 10644                           
 10645                           ;main.c: 278:     TMR0_WriteTimer (0);
 10646     0DF8  3000               	movlw	0
 10647     0DF9  318C  24A9         	fcall	i1_TMR0_WriteTimer
 10648     0DFB  0008               	return
 10649     0DFC                     __end_of_ISR_Floor4:
 10650                           
 10651                           	psect	text77
 10652     0D0C                     __ptext77:	
 10653 ;; *************** function _CMP1_ISR *****************
 10654 ;; Defined at:
 10655 ;;		line 88 in file "mcc_generated_files/cmp1.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;		None
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;		None
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  1    wreg      void 
 10662 ;; Registers used:
 10663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10664 ;; Tracked objects:
 10665 ;;		On entry : 1F/0
 10666 ;;		On exit  : 1F/1
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10669 ;;      Params:         0       0       0       0       0       0
 10670 ;;      Locals:         0       0       0       0       0       0
 10671 ;;      Temps:          0       0       0       0       0       0
 10672 ;;      Totals:         0       0       0       0       0       0
 10673 ;;Total ram usage:        0 bytes
 10674 ;; Hardware stack levels used: 1
 10675 ;; Hardware stack levels required when called: 4
 10676 ;; This function calls:
 10677 ;;		_ISR_Floor3
 10678 ;; This function is called by:
 10679 ;;		_INTERRUPT_InterruptManager
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683     0D0C                     _CMP1_ISR:	
 10684                           ;psect for function _CMP1_ISR
 10685                           
 10686                           
 10687                           ;mcc_generated_files/cmp1.c: 90:     PIE2bits.C1IE = 0;
 10688                           
 10689                           ;incstack = 0
 10690                           ; Regs used in _CMP1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10691     0D0C  0021               	movlb	1	; select bank1
 10692     0D0D  1292               	bcf	18,5	;volatile
 10693                           
 10694                           ;mcc_generated_files/cmp1.c: 91:     PIR2bits.C1IF = 0;
 10695     0D0E  0020               	movlb	0	; select bank0
 10696     0D0F  1292               	bcf	18,5	;volatile
 10697                           
 10698                           ;mcc_generated_files/cmp1.c: 92:     ISR_Floor3();
 10699     0D10  318D  25DE         	fcall	_ISR_Floor3
 10700                           
 10701                           ;mcc_generated_files/cmp1.c: 93:     PIE2bits.C1IE = 1;
 10702     0D12  0021               	movlb	1	; select bank1
 10703     0D13  1692               	bsf	18,5	;volatile
 10704     0D14  0008               	return
 10705     0D15                     __end_of_CMP1_ISR:
 10706                           
 10707                           	psect	text78
 10708     0DDE                     __ptext78:	
 10709 ;; *************** function _ISR_Floor3 *****************
 10710 ;; Defined at:
 10711 ;;		line 282 in file "main.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;		None
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;		None
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  1    wreg      void 
 10718 ;; Registers used:
 10719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10720 ;; Tracked objects:
 10721 ;;		On entry : 1F/0
 10722 ;;		On exit  : 1F/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10725 ;;      Params:         0       0       0       0       0       0
 10726 ;;      Locals:         0       0       0       0       0       0
 10727 ;;      Temps:          0       0       0       0       0       0
 10728 ;;      Totals:         0       0       0       0       0       0
 10729 ;;Total ram usage:        0 bytes
 10730 ;; Hardware stack levels used: 1
 10731 ;; Hardware stack levels required when called: 3
 10732 ;; This function calls:
 10733 ;;		i1_Matrix_update_floor
 10734 ;;		i1_TMR0_WriteTimer
 10735 ;; This function is called by:
 10736 ;;		_CMP1_ISR
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740     0DDE                     _ISR_Floor3:	
 10741                           ;psect for function _ISR_Floor3
 10742                           
 10743                           
 10744                           ;main.c: 283:     current_floor = 2;
 10745                           
 10746                           ;incstack = 0
 10747                           ; Regs used in _ISR_Floor3: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10748     0DDE  3002               	movlw	2
 10749     0DDF  00BC               	movwf	_current_floor
 10750                           
 10751                           ;main.c: 284:     index++;
 10752     0DE0  3001               	movlw	1
 10753     0DE1  07BD               	addwf	_index,f
 10754                           
 10755                           ;main.c: 285:     Matrix_update_floor(current_floor);
 10756     0DE2  083C               	movf	_current_floor,w
 10757     0DE3  318F  27D8  318D   	fcall	i1_Matrix_update_floor
 10758                           
 10759                           ;main.c: 286:     var.HHH = 120;
 10760     0DE6  3078               	movlw	120
 10761     0DE7  0021               	movlb	1	; select bank1
 10762     0DE8  00BC               	movwf	(_var^(0+128)+2)
 10763                           
 10764                           ;main.c: 287:     TMR0_WriteTimer (0);
 10765     0DE9  3000               	movlw	0
 10766     0DEA  318C  24A9         	fcall	i1_TMR0_WriteTimer
 10767     0DEC  0008               	return
 10768     0DED                     __end_of_ISR_Floor3:
 10769                           
 10770                           	psect	text79
 10771     0CA9                     __ptext79:	
 10772 ;; *************** function i1_TMR0_WriteTimer *****************
 10773 ;; Defined at:
 10774 ;;		line 89 in file "mcc_generated_files/tmr0.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  timerVal        1    wreg     unsigned char 
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  timerVal        1    0[COMMON] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  1    wreg      void 
 10781 ;; Registers used:
 10782 ;;		wreg
 10783 ;; Tracked objects:
 10784 ;;		On entry : 1C/2
 10785 ;;		On exit  : 1F/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10788 ;;      Params:         0       0       0       0       0       0
 10789 ;;      Locals:         1       0       0       0       0       0
 10790 ;;      Temps:          0       0       0       0       0       0
 10791 ;;      Totals:         1       0       0       0       0       0
 10792 ;;Total ram usage:        1 bytes
 10793 ;; Hardware stack levels used: 1
 10794 ;; This function calls:
 10795 ;;		Nothing
 10796 ;; This function is called by:
 10797 ;;		_Update_tx_buffer
 10798 ;;		_ISR_Floor4
 10799 ;;		_ISR_Floor3
 10800 ;;		_ISR_Floor2
 10801 ;;		_ISR_Floor1
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805     0CA9                     i1_TMR0_WriteTimer:	
 10806                           ;psect for function i1_TMR0_WriteTimer
 10807                           
 10808                           
 10809                           ;incstack = 0
 10810                           ; Regs used in i1_TMR0_WriteTimer: [wreg]
 10811                           ;i1TMR0_WriteTimer@timerVal stored from wreg
 10812     0CA9  00F0               	movwf	i1TMR0_WriteTimer@timerVal
 10813                           
 10814                           ;mcc_generated_files/tmr0.c: 89: void TMR0_WriteTimer(uint8_t timerVal);mcc_generated_fi
      +                          les/tmr0.c: 90: {;mcc_generated_files/tmr0.c: 92:     TMR0 = timerVal;
 10815     0CAA  0870               	movf	i1TMR0_WriteTimer@timerVal,w
 10816     0CAB  0020               	movlb	0	; select bank0
 10817     0CAC  0095               	movwf	21	;volatile
 10818     0CAD  0008               	return
 10819     0CAE                     __end_ofi1_TMR0_WriteTimer:
 10820                           
 10821                           	psect	text80
 10822     0FD8                     __ptext80:	
 10823 ;; *************** function i1_Matrix_update_floor *****************
 10824 ;; Defined at:
 10825 ;;		line 226 in file "main.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;  display_floo    1    wreg     unsigned char 
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;  display_floo    1   10[COMMON] unsigned char 
 10830 ;;  data            2    8[COMMON] unsigned char [2]
 10831 ;;  i               1   11[COMMON] unsigned char 
 10832 ;; Return value:  Size  Location     Type
 10833 ;;                  1    wreg      void 
 10834 ;; Registers used:
 10835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10836 ;; Tracked objects:
 10837 ;;		On entry : 1F/0
 10838 ;;		On exit  : 1F/2
 10839 ;;		Unchanged: 0/0
 10840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10841 ;;      Params:         0       0       0       0       0       0
 10842 ;;      Locals:         4       0       0       0       0       0
 10843 ;;      Temps:          1       0       0       0       0       0
 10844 ;;      Totals:         5       0       0       0       0       0
 10845 ;;Total ram usage:        5 bytes
 10846 ;; Hardware stack levels used: 1
 10847 ;; Hardware stack levels required when called: 2
 10848 ;; This function calls:
 10849 ;;		i1_Tx_spi
 10850 ;; This function is called by:
 10851 ;;		_ISR_Floor4
 10852 ;;		_ISR_Floor3
 10853 ;;		_ISR_Floor2
 10854 ;;		_ISR_Floor1
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858     0FD8                     i1_Matrix_update_floor:	
 10859                           ;psect for function i1_Matrix_update_floor
 10860                           
 10861                           
 10862                           ;incstack = 0
 10863                           ; Regs used in i1_Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10864                           ;i1Matrix_update_floor@display_floor stored from wreg
 10865     0FD8  00FA               	movwf	i1Matrix_update_floor@display_floor
 10866                           
 10867                           ;main.c: 227:     uint8_t data[2];;main.c: 228:     display_floor = display_floor*4;
 10868     0FD9  087A               	movf	i1Matrix_update_floor@display_floor,w
 10869     0FDA  00F7               	movwf	??i1_Matrix_update_floor
 10870     0FDB  3002               	movlw	2
 10871     0FDC                     u291_25:
 10872     0FDC  35F7               	lslf	??i1_Matrix_update_floor,f
 10873     0FDD  0B89               	decfsz	9,f
 10874     0FDE  2FDC               	goto	u291_25
 10875     0FDF  0877               	movf	??i1_Matrix_update_floor,w
 10876     0FE0  00FA               	movwf	i1Matrix_update_floor@display_floor
 10877                           
 10878                           ;main.c: 230:    for(uint8_t i=5;i<=8;i++){
 10879     0FE1  3005               	movlw	5
 10880     0FE2  00FB               	movwf	i1Matrix_update_floor@i
 10881     0FE3                     i1l3990:
 10882                           
 10883                           ;main.c: 231:         data[0] = i;
 10884     0FE3  087B               	movf	i1Matrix_update_floor@i,w
 10885     0FE4  00F8               	movwf	i1Matrix_update_floor@data
 10886                           
 10887                           ;main.c: 232:         data[1] = MATRIX_FLOOR[display_floor];
 10888     0FE5  087A               	movf	i1Matrix_update_floor@display_floor,w
 10889     0FE6  3EFE               	addlw	low (_MATRIX_FLOOR| (0+32768))
 10890     0FE7  0084               	movwf	4
 10891     0FE8  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
 10892     0FE9  1803               	skipnc
 10893     0FEA  3E01               	addlw	1
 10894     0FEB  0085               	movwf	5
 10895     0FEC  0800               	movf	0,w	;code access
 10896     0FED  00F9               	movwf	i1Matrix_update_floor@data+1
 10897                           
 10898                           ;main.c: 233:         Tx_spi(data, 2);
 10899     0FEE  3078               	movlw	(low (i1Matrix_update_floor@data| 0))& (0+255)
 10900     0FEF  00F4               	movwf	i1Tx_spi@data
 10901     0FF0  3002               	movlw	2
 10902     0FF1  00F5               	movwf	i1Tx_spi@dataSize
 10903     0FF2  3000               	movlw	0
 10904     0FF3  00F6               	movwf	i1Tx_spi@dataSize+1
 10905     0FF4  318D  25CF  318F   	fcall	i1_Tx_spi
 10906                           
 10907                           ;main.c: 234:         display_floor++;
 10908     0FF7  3001               	movlw	1
 10909     0FF8  07FA               	addwf	i1Matrix_update_floor@display_floor,f
 10910                           
 10911                           ;main.c: 235:     }
 10912     0FF9  3001               	movlw	1
 10913     0FFA  07FB               	addwf	i1Matrix_update_floor@i,f
 10914     0FFB  3009               	movlw	9
 10915     0FFC  027B               	subwf	i1Matrix_update_floor@i,w
 10916     0FFD  1803               	btfsc	3,0
 10917     0FFE  0008               	return
 10918     0FFF  2FE3               	goto	i1l3990
 10919     1000                     __end_ofi1_Matrix_update_floor:
 10920                           
 10921                           	psect	text81
 10922     0DCF                     __ptext81:	
 10923 ;; *************** function i1_Tx_spi *****************
 10924 ;; Defined at:
 10925 ;;		line 202 in file "main.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;  data            1    4[COMMON] PTR unsigned char 
 10928 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 10929 ;;		 -> Ini_matrix@data(2), 
 10930 ;;  dataSize        2    5[COMMON] unsigned int 
 10931 ;; Auto vars:     Size  Location     Type
 10932 ;;		None
 10933 ;; Return value:  Size  Location     Type
 10934 ;;                  1    wreg      void 
 10935 ;; Registers used:
 10936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10937 ;; Tracked objects:
 10938 ;;		On entry : 1D/0
 10939 ;;		On exit  : 1F/2
 10940 ;;		Unchanged: 0/0
 10941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10942 ;;      Params:         3       0       0       0       0       0
 10943 ;;      Locals:         0       0       0       0       0       0
 10944 ;;      Temps:          0       0       0       0       0       0
 10945 ;;      Totals:         3       0       0       0       0       0
 10946 ;;Total ram usage:        3 bytes
 10947 ;; Hardware stack levels used: 1
 10948 ;; Hardware stack levels required when called: 1
 10949 ;; This function calls:
 10950 ;;		i1_SPI1_ExchangeBlock
 10951 ;; This function is called by:
 10952 ;;		i1_Matrix_update_floor
 10953 ;;		i1_Matrix_update_dir
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957     0DCF                     i1_Tx_spi:	
 10958                           ;psect for function i1_Tx_spi
 10959                           
 10960                           
 10961                           ;main.c: 203:     LATBbits.LATB1 = 0;
 10962                           
 10963                           ;incstack = 0
 10964                           ; Regs used in i1_Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10965     0DCF  0022               	movlb	2	; select bank2
 10966     0DD0  108D               	bcf	13,1	;volatile
 10967                           
 10968                           ;main.c: 204:     __nop();
 10969     0DD1  0000               	nop
 10970                           
 10971                           ;main.c: 205:     __nop();
 10972     0DD2  0000               	nop
 10973                           
 10974                           ;main.c: 206:     SPI1_ExchangeBlock(data,dataSize);
 10975     0DD3  0874               	movf	i1Tx_spi@data,w
 10976     0DD4  00F0               	movwf	i1SPI1_ExchangeBlock@block
 10977     0DD5  0876               	movf	i1Tx_spi@dataSize+1,w
 10978     0DD6  00F2               	movwf	i1SPI1_ExchangeBlock@blockSize+1
 10979     0DD7  0875               	movf	i1Tx_spi@dataSize,w
 10980     0DD8  00F1               	movwf	i1SPI1_ExchangeBlock@blockSize
 10981     0DD9  318F  274D         	fcall	i1_SPI1_ExchangeBlock
 10982                           
 10983                           ;main.c: 207:     LATBbits.LATB1 = 1;
 10984     0DDB  0022               	movlb	2	; select bank2
 10985     0DDC  148D               	bsf	13,1	;volatile
 10986     0DDD  0008               	return
 10987     0DDE                     __end_ofi1_Tx_spi:
 10988                           
 10989                           	psect	text82
 10990     0F4D                     __ptext82:	
 10991 ;; *************** function i1_SPI1_ExchangeBlock *****************
 10992 ;; Defined at:
 10993 ;;		line 100 in file "mcc_generated_files/spi1.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  block           1    0[COMMON] PTR void 
 10996 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 10997 ;;		 -> Ini_matrix@data(2), 
 10998 ;;  blockSize       2    1[COMMON] unsigned int 
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;  data            1    3[COMMON] PTR unsigned char 
 11001 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 11002 ;;		 -> Ini_matrix@data(2), 
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  1    wreg      void 
 11005 ;; Registers used:
 11006 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11012 ;;      Params:         3       0       0       0       0       0
 11013 ;;      Locals:         1       0       0       0       0       0
 11014 ;;      Temps:          0       0       0       0       0       0
 11015 ;;      Totals:         4       0       0       0       0       0
 11016 ;;Total ram usage:        4 bytes
 11017 ;; Hardware stack levels used: 1
 11018 ;; This function calls:
 11019 ;;		Nothing
 11020 ;; This function is called by:
 11021 ;;		i1_Tx_spi
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025     0F4D                     i1_SPI1_ExchangeBlock:	
 11026                           ;psect for function i1_SPI1_ExchangeBlock
 11027                           
 11028                           
 11029                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
 11030                           
 11031                           ;incstack = 0
 11032                           ; Regs used in i1_SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
 11033     0F4D  0870               	movf	i1SPI1_ExchangeBlock@block,w
 11034     0F4E  00F3               	movwf	i1SPI1_ExchangeBlock@data
 11035     0F4F                     i1l3944:	
 11036                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11037                           
 11038                           
 11039                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11040     0F4F  3001               	movlw	1
 11041     0F50  02F1               	subwf	i1SPI1_ExchangeBlock@blockSize,f
 11042     0F51  3000               	movlw	0
 11043     0F52  3BF2               	subwfb	i1SPI1_ExchangeBlock@blockSize+1,f
 11044     0F53  0A71               	incf	i1SPI1_ExchangeBlock@blockSize,w
 11045     0F54  1903               	btfsc	3,2
 11046     0F55  0A72               	incf	i1SPI1_ExchangeBlock@blockSize+1,w
 11047     0F56  1903               	btfsc	3,2
 11048     0F57  0008               	return
 11049                           
 11050                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
 11051     0F58  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11052     0F59  0086               	movwf	6
 11053     0F5A  0187               	clrf	7
 11054     0F5B  0801               	movf	1,w
 11055     0F5C  0024               	movlb	4	; select bank4
 11056     0F5D  0091               	movwf	17	;volatile
 11057     0F5E                     i1l460:	
 11058                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
 11059                           
 11060     0F5E  0020               	movlb	0	; select bank0
 11061     0F5F  1991               	btfsc	17,3	;volatile
 11062     0F60  2F64               	goto	i1l462
 11063     0F61  0022               	movlb	2	; select bank2
 11064     0F62  108D               	bcf	13,1	;volatile
 11065     0F63  2F5E               	goto	i1l460
 11066     0F64                     i1l462:
 11067                           
 11068                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
 11069     0F64  1191               	bcf	17,3	;volatile
 11070                           
 11071                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
 11072     0F65  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11073     0F66  0086               	movwf	6
 11074     0F67  0187               	clrf	7
 11075     0F68  0024               	movlb	4	; select bank4
 11076     0F69  0811               	movf	17,w	;volatile
 11077     0F6A  0081               	movwf	1
 11078     0F6B  3001               	movlw	1
 11079     0F6C  07F3               	addwf	i1SPI1_ExchangeBlock@data,f
 11080     0F6D  2F4F               	goto	i1l3944
 11081     0F6E                     __end_ofi1_SPI1_ExchangeBlock:
 11082     0001                     ___latbits      equ	1
 11083     007E                     btemp           set	126	;btemp
 11084     007E                     int$flags       set	126
 11085     007E                     wtemp0          set	126
 11086                           
 11087                           	psect	config
 11088                           
 11089                           ;Config register CONFIG1 @ 0x8007
 11090                           ;	Oscillator Selection
 11091                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 11092                           ;	Watchdog Timer Enable
 11093                           ;	WDTE = OFF, WDT disabled
 11094                           ;	Power-up Timer Enable
 11095                           ;	PWRTE = OFF, PWRT disabled
 11096                           ;	MCLR Pin Function Select
 11097                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 11098                           ;	Flash Program Memory Code Protection
 11099                           ;	CP = OFF, Program memory code protection is disabled
 11100                           ;	Data Memory Code Protection
 11101                           ;	CPD = OFF, Data memory code protection is disabled
 11102                           ;	Brown-out Reset Enable
 11103                           ;	BOREN = ON, Brown-out Reset enabled
 11104                           ;	Clock Out Enable
 11105                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 11106                           ;	Internal/External Switchover
 11107                           ;	IESO = ON, Internal/External Switchover mode is enabled
 11108                           ;	Fail-Safe Clock Monitor Enable
 11109                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 11110     8007                     	org	32775
 11111     8007  3FE4               	dw	16356
 11112                           
 11113                           ;Config register CONFIG2 @ 0x8008
 11114                           ;	Flash Memory Self-Write Protection
 11115                           ;	WRT = OFF, Write protection off
 11116                           ;	PLL Enable
 11117                           ;	PLLEN = OFF, 4x PLL disabled
 11118                           ;	Stack Overflow/Underflow Reset Enable
 11119                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 11120                           ;	Brown-out Reset Voltage Selection
 11121                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 11122                           ;	In-Circuit Debugger Mode
 11123                           ;	DEBUG = 0x1, unprogrammed default
 11124                           ;	Low-Voltage Programming Enable
 11125                           ;	LVP = ON, Low-voltage programming enabled
 11126     8008                     	org	32776
 11127     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    47
    Data        29
    BSS         67
    Persistent  46
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      60
    BANK1            80     21      80
    BANK2            80      5      26
    BANK3            80      0       0
    BANK4            32      0       0

Pointer List with Targets:

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), 

    IOCBF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), NULL(), 

    IOCBF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), 

    IOCBF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), NULL(), 

    IOCBF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), 

    SPI1_ExchangeBlock@block	PTR void  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    SPI1_ExchangeBlock@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), 

    Tx_spi@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _Update_tx_buffer->___lwdiv
    ___wmul->_TMR0_ReadTimer
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    ___lbmod->___lbdiv
    ___awdiv->___wmul
    _Read_UART->_New_request
    _New_request->i1_Matrix_update_dir
    i1_Matrix_update_dir->i1_Tx_spi
    _ISR_Floor2->i1_Matrix_update_floor
    _ISR_Floor1->i1_Matrix_update_floor
    _ECCP2_CaptureISR->_ECCP2_CallBack
    _ISR_Floor4->i1_Matrix_update_floor
    _ISR_Floor3->i1_Matrix_update_floor
    i1_Matrix_update_floor->i1_Tx_spi
    i1_Tx_spi->i1_SPI1_ExchangeBlock

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_Read_UART
    _TMR1_CallBack->_Write_UART
    _Write_UART->_Update_tx_buffer
    _Update_tx_buffer->___lwmod
    _Read_UART->_New_request
    _New_request->i1_Matrix_update_dir

Critical Paths under _main in BANK1

    _main->_Start
    _Matrix_update_floor->_Tx_spi
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF3_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _Next_index->___awmod
    _Next_floor->___awmod
    _Ini_matrix->_Tx_spi
    _Motor_Turn_On->_Matrix_update_dir
    _Motor_Turn_Off->_Matrix_update_dir
    _Matrix_update_dir->_Tx_spi
    _Tx_spi->_SPI1_ExchangeBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    9528
                                              0 BANK2      5     5      0
       _EUSART_SetRxInterruptHandler
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
                               _Idle
                         _Ini_matrix
                     _Motor_Turn_Off
                      _Motor_Turn_On
                         _Next_floor
                         _Next_index
                        _Route_empty
                          _SPI1_Open
                  _SYSTEM_Initialize
                              _Start
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _Start                                                2     2      0    2669
                                             19 BANK1      2     2      0
                _Matrix_update_floor
                     _Motor_Turn_Off
                      _Motor_Turn_On
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_WriteTimer                                      1     1      0      47
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Matrix_update_floor                                  5     5      0     522
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     250
                    _CMP1_Initialize
                    _CMP2_Initialize
                   _ECCP2_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR6_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      37
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      74
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF3_SetInterruptHandler                           2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCBF0_SetInterruptHandler                           2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     139
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ECCP2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI1_Open                                            4     4      0     188
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Route_empty                                          3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Next_index                                           5     5      0     643
                                              6 BANK1      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Next_floor                                           5     5      0     609
                                              6 BANK1      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     445
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Ini_matrix                                           5     5      0     654
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _Idle                                                 0     0      0    2100
                     _Motor_Turn_Off
                      _Motor_Turn_On
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_On                                        0     0      0    1050
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_Off                                       0     0      0    1050
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (3) _Matrix_update_dir                                   12    12      0    1050
                                              7 BANK1     12    12      0
                             _Tx_spi
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     174
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Tx_spi                                               3     0      3     228
                                              4 BANK1      3     0      3
                 _SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (5) _SPI1_ExchangeBlock                                   4     1      3     136
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0    5947
                                NULL *
                           _CMP1_ISR
                           _CMP2_ISR
                   _ECCP2_CaptureISR
                 _EUSART_Receive_ISR *
                    _PIN_MANAGER_IOC
                          _Read_UART *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0    1325
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (8) _TMR1_WriteTimer                                      2     0      2      91
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0    1234
                                NULL *
       _TMR1_DefaultInterruptHandler *
                         _Write_UART *
 ---------------------------------------------------------------------------------
 (9) _Write_UART                                           3     3      0    1234
                                              7 BANK0      3     3      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
                   _Update_tx_buffer
 ---------------------------------------------------------------------------------
 (10) _Update_tx_buffer                                    2     2      0    1129
                                              5 BANK0      2     2      0
                     _TMR0_ReadTimer
                            ___awdiv
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             ___wmul
                  i1_TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4      98
                                              1 COMMON     6     2      4
                     _TMR0_ReadTimer (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     165
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     168
                                              7 COMMON     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             5     4      1     170
                                              4 COMMON     5     4      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lbdiv                                             4     3      1     172
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             8     4      4     304
                                              7 COMMON     4     0      4
                                              0 BANK0      4     4      0
                     _TMR0_ReadTimer (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) _TMR0_ReadTimer                                      1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_is_tx_ready                                  1     1      0       8
 ---------------------------------------------------------------------------------
 (10) _EUSART_Write                                        1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Read_UART                                            5     5      0    2454
                                             12 COMMON     1     1      0
                                             26 BANK0      4     4      0
                        _EUSART_Read
                 _EUSART_Receive_ISR
                        _New_request
 ---------------------------------------------------------------------------------
 (8) _New_request                                         19    15      4    2356
                                              8 COMMON     4     0      4
                                             11 BANK0     15    15      0
                i1_Matrix_update_dir
                          i1___awmod
 ---------------------------------------------------------------------------------
 (9) i1___awmod                                            6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_Matrix_update_dir                                 12    12      0     963
                                              7 COMMON     1     1      0
                                              0 BANK0     11    11      0
                           i1_Tx_spi
                           i1___bmul
 ---------------------------------------------------------------------------------
 (10) i1___bmul                                            3     2      1     108
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_RxDataHandler                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Read                                          1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0    1060
                         _IOCBF0_ISR
                         _IOCBF3_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCBF3_ISR                                           0     0      0     530
                                NULL *
     _IOCBF3_DefaultInterruptHandler *
                         _ISR_Floor2 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor2                                           0     0      0     530
              i1_Matrix_update_floor
                  i1_TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _IOCBF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCBF0_ISR                                           0     0      0     530
                                NULL *
     _IOCBF0_DefaultInterruptHandler *
                         _ISR_Floor1 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor1                                           0     0      0     530
              i1_Matrix_update_floor
                  i1_TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _IOCBF0_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ECCP2_CaptureISR                                     2     2      0      48
                                              2 COMMON     2     2      0
                     _ECCP2_CallBack
 ---------------------------------------------------------------------------------
 (8) _ECCP2_CallBack                                       2     0      2       1
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _CMP2_ISR                                             0     0      0     530
                         _ISR_Floor4
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor4                                           0     0      0     530
              i1_Matrix_update_floor
                  i1_TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _CMP1_ISR                                             0     0      0     530
                         _ISR_Floor3
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor3                                           0     0      0     530
              i1_Matrix_update_floor
                  i1_TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (11) i1_TMR0_WriteTimer                                   1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Matrix_update_floor                               5     5      0     501
                                              7 COMMON     5     5      0
                           i1_Tx_spi
 ---------------------------------------------------------------------------------
 (10) i1_Tx_spi                                            3     0      3     216
                                              4 COMMON     3     0      3
               i1_SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (11) i1_SPI1_ExchangeBlock                                4     1      3     136
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _IOCBF0_SetInterruptHandler
   _IOCBF3_SetInterruptHandler
   _Idle
     _Motor_Turn_Off
       _Matrix_update_dir
         _Tx_spi
           _SPI1_ExchangeBlock
         ___bmul
     _Motor_Turn_On
       _Matrix_update_dir
   _Ini_matrix
     _Tx_spi
   _Motor_Turn_Off
   _Motor_Turn_On
   _Next_floor
     ___awmod
   _Next_index
     ___awmod
   _Route_empty
   _SPI1_Open
   _SYSTEM_Initialize
     _CMP1_Initialize
     _CMP2_Initialize
     _ECCP2_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF0_SetInterruptHandler
       _IOCBF3_SetInterruptHandler
     _PWM3_Initialize
     _SPI1_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR6_Initialize
     _WDT_Initialize
   _Start
     _Matrix_update_floor
       _Tx_spi
     _Motor_Turn_Off
     _Motor_Turn_On
     _TMR0_WriteTimer
   _TMR1_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _CMP1_ISR *
     _ISR_Floor3
       i1_Matrix_update_floor
         i1_Tx_spi
           i1_SPI1_ExchangeBlock
       i1_TMR0_WriteTimer
   _CMP2_ISR *
     _ISR_Floor4
       i1_Matrix_update_floor
       i1_TMR0_WriteTimer
   _ECCP2_CaptureISR *
     _ECCP2_CallBack
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _PIN_MANAGER_IOC *
     _IOCBF0_ISR
       NULL(Fake) *
       _IOCBF0_DefaultInterruptHandler *
       _ISR_Floor1 *
         i1_Matrix_update_floor
         i1_TMR0_WriteTimer
     _IOCBF3_ISR
       NULL(Fake) *
       _IOCBF3_DefaultInterruptHandler *
       _ISR_Floor2 *
         i1_Matrix_update_floor
         i1_TMR0_WriteTimer
   _Read_UART *
     _EUSART_Read
     _EUSART_Receive_ISR
     _New_request
       i1_Matrix_update_dir
         i1_Tx_spi
         i1___bmul
       i1___awmod
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Write_UART *
         _EUSART_Write
         _EUSART_is_tx_ready
         _Update_tx_buffer
           _TMR0_ReadTimer
           ___awdiv
             _TMR0_ReadTimer (ARG)
             ___wmul (ARG)
               _TMR0_ReadTimer (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           i1_TMR0_WriteTimer
     _TMR1_WriteTimer

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            32      0       0      0.0%
BIGRAM             352      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     30      60     75.0%
BANK1               80     21      80    100.0%
BANK2               80      5      26     32.5%
BANK3               80      0       0      0.0%
BANK4               32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     180      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri Jun 20 01:23:14 2025

                ?_EUSART_SetRxInterruptHandler 00C5                       __end_of_ECCP2_Initialize 0D28  
             ??_IOCBF3_DefaultInterruptHandler 0070                ?_IOCBF3_DefaultInterruptHandler 0070  
                           _SPI1_ExchangeBlock 0F6E                                 ___bmul@product 00C6  
                            ??_CMP1_Initialize 00C5                                   ___awdiv@sign 003F  
                       __end_of_FVR_Initialize 0CA5                            ___wmul@multiplicand 0073  
                              _timer0ReloadVal 0034                                            l460 0F7F  
                                          l462 0F85                                            l926 0373  
                                          l877 0E5C                                            _PR2 001B  
                                          _PR6 041D                            ?_SPI1_ExchangeBlock 00C5  
                              _timer1ReloadVal 002A                         ??_EUSART_RxDataHandler 0070  
                                          _var 00BA                 ?_EUSART_SetFramingErrorHandler 00C5  
                                 ___awmod@sign 00CA                                _TMR2_Initialize 0CFC  
                                          wreg 0009                        SPI1_ExchangeBlock@block 00C5  
                     __end_of_Update_tx_buffer 030B                                   ?_EUSART_Read 0070  
                                         l4040 03E1                                           l4032 03C9  
                                         l4028 03B8                                           l4056 0406  
                                         l4422 078C                                           l4442 054A  
                                         l4602 0634                                           l4460 056D  
                                         l4454 0557                                           l4446 0551  
                                         l4606 0636                                           l4456 0561  
                                         l4464 0576                                           l4468 057E  
                                         l4564 0EFE                                           l4732 0397  
                                         l4654 064B                                           l4582 06DC  
                                         l4558 0EF4                                           l4672 0673  
                                         l4752 0374                                           l4744 034E  
                                         l4736 0339                                           l3954 0F70  
                                         l3970 0E1E                                           l4586 06DF  
                                         l4578 06C0                                           l4754 0377  
                                         l4596 060E                                           l3974 0E22  
                                         _LATA 010C                                           _LATB 010D  
                                         u3305 056E                                           u3225 0785  
                                         u3405 06EC                                           u3425 0643  
                            ??_CMP2_Initialize 00C5                                           u3275 055A  
                                         u3295 0567                                           u3385 0F0B  
                                         u3637 0347                                           u3647 0390  
                                         u2944 03C5                                           u2945 03C4  
                                         u3657 0F9C                                           u2955 03D6  
                                         _TMR0 0015                                           _TMR2 001A  
                                         _TMR6 041C                                           _WPUA 020C  
                                         _WPUB 020D                                           _Idle 0E4F  
                                         _idle 0039                                           _main 030B  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                           ??_SPI1_ExchangeBlock 00C8  
                    i1SPI1_ExchangeBlock@block 0070                                           start 003F  
                             __end_of_CMP1_ISR 0D15                               __end_of_CMP2_ISR 0D1E  
                   ??_TMR1_SetInterruptHandler 00C7                              ___bmul@multiplier 00C7  
                                _MATRIX_CONFIG 080E                                   i1Tx_spi@data 0074  
                 Matrix_update_dir@display_dir 00D2                                    Ini_matrix@i 00CC  
                                  Ini_matrix@k 00CF                                    ?_ISR_Floor1 0070  
                                  ?_ISR_Floor2 0070                                    ?_ISR_Floor3 0070  
                                  ?_ISR_Floor4 0070                        __end_of_TMR0_Initialize 0D32  
                              ?_FVR_Initialize 0070                                  ?_EUSART_Write 0070  
                                        ?_Idle 0070                  __end_of_OSCILLATOR_Initialize 0CDC  
                                        ?_main 0070                                __end_of___awdiv 0540  
                              __end_of___lbdiv 0F4D                                __end_of___awmod 0583  
                              __end_of___lbmod 0ED6               SPI1_Open@spi1UniqueConfiguration 00C8  
                              ___awdiv@divisor 0077                                          _T1CON 0018  
                                        _T2CON 001C                                          _T6CON 041E  
                              __end_of___lwdiv 0721                                __end_of___lwmod 07FE  
                                        i1l267 003D                                          i1l460 0F5E  
                                        i1l462 0F64                                _TMR0_WriteTimer 0CDC  
                                        i1l569 0CEF                                          i1l847 0252  
                              ___awdiv@counter 003E                                          _RCREG 0199  
                                        _RCSTA 019D                                          _TMR1H 0017  
                                        _TMR1L 0016                                          _TRISA 008C  
                                        _TRISB 008D                                   main@is_empty 0139  
                                        _TXREG 019A                                          _TXSTA 019E  
                       ECCP2_CaptureISR@module 0072                               __end_of_TMR1_ISR 0EBB  
                                        _Start 0F91                                 i1___awmod@sign 0075  
                             i1Tx_spi@dataSize 0075                        __end_of_PIN_MANAGER_IOC 0D47  
                               _WDT_Initialize 0CA5                                          _index 003D  
                                        _route 0020                    __end_ofi1_Matrix_update_dir 049D  
                             __end_ofi1___bmul 0E0B                               __end_ofi1_Tx_spi 0DDE  
                      __end_of_PWM3_Initialize 0DC1                        __end_of_TMR1_Initialize 0EA2  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                ___lbdiv@divisor 0070  
                                 Route_empty@i 00C6                                _TMR1_WriteTimer 0DC1  
                              ___lbdiv@counter 0072                                  ??_New_request 0049  
                                   _Ini_matrix 0648                                   __end_of_Idle 0E61  
                              __initialization 0041                                   __end_of_main 03A3  
                  ECCP2_CallBack@capturedValue 0070                                 ??_EUSART_Write 0070  
                      __end_of_TMR2_Initialize 0D04                    ?_INTERRUPT_InterruptManager 0070  
                                       ??_Idle 00D8                 ??_EUSART_SetRxInterruptHandler 00C7  
                                       ??_main 0135                          __end_of_Motor_Turn_On 0DB4  
                      _IOCBF0_InterruptHandler 00E6                         __end_of_WDT_Initialize 0CA9  
                              _TMR6_Initialize 0D32                                         ?_Start 0070  
                      ??i1_Matrix_update_floor 0077      __end_of_EUSART_DefaultFramingErrorHandler 0C9A  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0C99                     _EUSART_OverrunErrorHandler 00DE  
                                       _CCPR2H 0299                                         _CCPR3H 0312  
                                       _CCPR2L 0298                                         _CCPR3L 0311  
                             ___awdiv@dividend 0079                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                                     _Next_floor 0609  
                                   _Next_index 06BC                                         _FLOORS 0823  
                      TMR1_WriteTimer@timerVal 0070                                         i1l1302 0ED0  
                                       i1l1084 0EDE                                         i1l3030 0DFE  
                                       i1l3120 0FBA                                         i1l3034 0E02  
                                       i1l3220 05D7                                         i1l3230 05E7  
                                       i1l4120 045A                                         i1l4112 0443  
                                       i1l3216 05D0                                         i1l3242 0604  
                                       i1l3234 05F3                                         i1l4108 0432  
                                       i1l3228 05DD                                         i1l3406 0F0F  
                                       i1l3238 05FC                                         i1l4136 047F  
                                       i1l4400 0194                                         i1l3440 06AA  
                                       i1l2800 050E                                         i1l4402 01A3  
                                       i1l3434 069B                                         i1l2802 0518  
                                       i1l4500 0D42                                         i1l3444 06B9  
                                       i1l2812 0533                                         u202_25 0FD5  
                                       i1l2830 0F35                                         i1l2902 07F0  
                                       i1l3454 0DCA                                         i1l2816 053B  
                                       i1l2808 052A                                         i1l2832 0F3C  
                                       i1l4282 0DA4                                         i1l4370 0122  
                                       i1l4362 00FA                                         i1l4354 00CD  
                                       i1l4346 00B7                                         i1l4338 008A  
                                       i1l2842 0F4B                                         i1l2850 0EBF  
                                       i1l2906 07F9                                         i1l4276 0D97  
                                       i1l4348 00CA                                         i1l4364 0109  
                                       i1l2764 0ED8                                         i1l4700 0023  
                                       u211_25 05E0                                         i1l2790 0506  
                                       i1l4392 0167                                         i1l4384 0151  
                                       i1l2784 04FD                                         i1l2880 0713  
                                       i1l2872 06F7                                         i1l2960 0231  
                                       i1l2952 0208                                         i1l4712 0035  
                                       i1l4386 0164                                         i1l4378 0128  
                                       i1l2874 0701                                         i1l2954 020B  
                                       i1l2946 01FB                                         i1l4706 002C  
                                       i1l4548 05C1                                         i1l2884 071C  
                                       u300_25 0450                                         i1l3944 0F4F  
                                       i1l2896 07DA                                         i1l2898 07E4  
                                       u213_25 05ED                                         i1l3990 0FE3  
                                       i1l4694 0017                                         i1l4686 000C  
                                       u214_25 05F4                                         u310_25 00C8  
                                       u311_25 00F1                                         u320_20 01BE  
                                       u320_22 01BF                                         u320_25 01BA  
                                       u312_25 0107                                         u313_25 0114  
                                       u154_25 0511                                         _FVRCON 0117  
                                       u315_25 0148                                         u307_25 0072  
                                       u171_25 0702                                         u316_25 0162  
                                       u308_25 007E                                         u156_25 0519  
                                       u172_25 070C                                         u148_25 0EDF  
                   __end_of_EUSART_is_tx_ready 0CFC                                         u317_25 018B  
                                       u309_25 00AA                                         u157_25 0523  
                                       u165_25 0EC2                                         u173_25 0714  
                                       u149_25 0EE4                                         u318_25 01A1  
                                       u158_25 052B                                         u319_20 01AE  
                                       u319_22 01AF                                         u176_25 07DD  
                                       u169_25 06FA                                         u178_25 07EA  
                                       u291_25 0FDC                                         u179_25 07F1  
                                       u366_27 01C9                                         _OSCCON 0099  
                                       u299_24 043F                                         u299_25 043E  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                              ?_ECCP2_CaptureISR 0070  
                            __end_of_SPI1_Open 04F3                             ??_ECCP2_CaptureISR 0072  
                                 Read_UART@ori 0058           __end_of_TMR1_DefaultInterruptHandler 0004  
                 _TMR1_DefaultInterruptHandler 0003                                   _CCPTMRS0bits 029E  
                                       ___bmul 0E1B                                         _Tx_spi 0E0B  
                                       ___wmul 0ED6                                      ??___awdiv 007B  
                                    ??___lbdiv 0071                                      ??___awmod 00C9  
                                    ??___lbmod 0075                        __end_of_TMR0_WriteTimer 0CE2  
                                    ??___lwdiv 007B                                      ??___lwmod 007E  
                          __end_of_New_request 01D9                               ?_TMR0_Initialize 0070  
                             ___awdiv@quotient 0040                                ___awmod@divisor 00C5  
                              ___awmod@counter 00C9                                         _subida 00C3  
                            __end_ofi1___awmod 0609                                ?_WDT_Initialize 0070  
                     i1SPI1_ExchangeBlock@data 0073                                      ?_CMP1_ISR 0070  
                                    ?_CMP2_ISR 0070       TMR1_SetInterruptHandler@InterruptHandler 00C5  
   IOCBF3_SetInterruptHandler@InterruptHandler 00C5     IOCBF0_SetInterruptHandler@InterruptHandler 00C5  
                             ?_PIN_MANAGER_IOC 0070                        __end_of_TMR1_WriteTimer 0DCF  
                             ___lbdiv@dividend 0071                                   ??_IOCBF0_ISR 007C  
                                 ??_IOCBF3_ISR 007C                          __end_of_TMR1_CallBack 0D52  
                             ?_TMR1_Initialize 0070                               ?_PWM3_Initialize 0070  
                            _SYSTEM_Initialize 07AA                                ___lbmod@divisor 0074  
                      __end_of__initialization 0068                                ___lbmod@counter 0077  
                              _CMP1_Initialize 0D68                             ?_SYSTEM_Initialize 0070  
                                  ?_Ini_matrix 0070                                 _Motor_Turn_Off 0D52  
                          ___bmul@multiplicand 00C5                                 __pcstackCOMMON 0070  
                                __end_of_Start 0FB4                                     _Write_UART 0FB4  
                                 __pidataBANK1 0D04                                   __pidataBANK2 0E76  
                          ??_SYSTEM_Initialize 00C7                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                              ?_ECCP2_Initialize 0070  
                            ??_SPI1_Initialize 00C5         __end_of_IOCBF0_DefaultInterruptHandler 0C98  
               _IOCBF0_DefaultInterruptHandler 0C97                                    Next_floor@i 00CE  
                                  Next_index@i 00CE                               ?_TMR2_Initialize 0070  
                      __end_of_TMR6_Initialize 0D3C                               ___lbdiv@quotient 0073  
                           ??_ECCP2_Initialize 00C5                                      ?i1___bmul 0070  
                                    ?i1_Tx_spi 0074                             __end_of_IOCBF0_ISR 0D9A  
                           __end_of_IOCBF3_ISR 0DA7                              __end_of_Read_UART 05C6  
                              _CMP2_Initialize 0D5D                             _spi1_configuration 0829  
                               _OPTION_REGbits 0095                                  ??_Route_empty 00C5  
                         _eusartRxStatusBuffer 00AA                              _velocidade_string 00E8  
                         __end_of_MATRIX_FLOOR 080E                                     Tx_spi@data 00C9  
                                      ??_Start 00D8                ??_EUSART_SetOverrunErrorHandler 00C7  
       __end_of_IOCBF3_DefaultInterruptHandler 0C99                 _IOCBF3_DefaultInterruptHandler 0C98  
                                   ??_CMP1_ISR 007C                                     ??_CMP2_ISR 007C  
                             i1___bmul@product 0071                              ?_Update_tx_buffer 0070  
                    __end_of_SYSTEM_Initialize 07D4             i1Matrix_update_floor@display_floor 007A  
             Matrix_update_floor@display_floor 00CF                                    ?_Next_floor 0070  
                                  ?_Next_index 0070                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                                  _current_floor 003C  
                         __end_of_EUSART_Write 0CF5                             ??_Update_tx_buffer 0043  
                       __end_of_Motor_Turn_Off 0D5D                            _Matrix_update_floor 0780  
                           __end_of_MATRIX_DIR 0823                                    _New_request 006C  
                            _Matrix_update_dir 03A3                               ??_FVR_Initialize 00C5  
                                   __pmaintext 030B                                        ?___bmul 00C5  
                                      ?_Tx_spi 00C9                             ?_Matrix_update_dir 0070  
                                      ?___wmul 0071                                     ??_TMR1_ISR 007E  
                                   __pintentry 0004                               ?_TMR0_WriteTimer 0070  
                                 ??_ISR_Floor1 007C                                   ??_ISR_Floor2 007C  
                                 ??_ISR_Floor3 007C                                   ??_ISR_Floor4 007C  
                                      _CM1CON0 0111                                        _CM1CON1 0112  
                                      _CM2CON0 0113                                        _CM2CON1 0114  
                                      _CCP2CON 029A                                        _CCP3CON 0313  
                                      _BAUDCON 019F                                        _APFCON0 011D  
                                      _APFCON1 011E                   ??_EUSART_DefaultErrorHandler 0070  
                                   ??i1___bmul 0071                                     ??i1_Tx_spi 0077  
                          ??_Matrix_update_dir 00CC                           ?_Matrix_update_floor 0070  
                                _eusartRxCount 0036                                        _OSCTUNE 0098  
                                      _SSP1ADD 0212                                        _SSP1BUF 0211  
                      __end_of_CMP1_Initialize 0D74                       ??_EUSART_SetErrorHandler 00C7  
                             ?_TMR1_WriteTimer 0070                            __end_of_Route_empty 0F0F  
                           __end_of_ISR_Floor1 0E3D                             __end_of_ISR_Floor2 0E76  
                           __end_of_ISR_Floor3 0DED                             __end_of_ISR_Floor4 0DFC  
                              ?_Motor_Turn_Off 0070                      __end_of_Matrix_update_dir 0424  
                                Read_UART@dest 005A                         _uart_read_buffer_count 0026  
                                  ?_Write_UART 0070                        __end_of_CMP2_Initialize 0D68  
                                      ___awdiv 04F3                                        ___lbdiv 0F2E  
                                      ___awmod 0540                                        ___lbmod 0EBB  
                                      ___lwdiv 06EF                                 _ECCP2_CallBack 0C96  
                                      ___lwmod 07D4                                 main@next_index 0137  
                             ?_TMR6_Initialize 0070                                        _descida 00C1  
                        ??_Matrix_update_floor 00CC                                        __ptext1 0F91  
                                      __ptext2 0CDC                                        __ptext3 0780  
                                      __ptext4 07AA                                        __ptext5 0CA5  
                                      __ptext6 0D32                                        __ptext7 0CFC  
                                      __ptext8 0E8B                                        __ptext9 0CD1  
               ??_TMR1_DefaultInterruptHandler 0070                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 0CD6                               Ini_matrix@i_1697 00D0  
                             ___awmod@dividend 00C7                       ??_PIN_MANAGER_Initialize 00C7  
                    ?_TMR1_SetInterruptHandler 00C5                                      _IOCBFbits 0396  
                          i1___bmul@multiplier 0072                                      _IOCBNbits 0395  
                                    _IOCBPbits 0394                                        _stop_2s 003A  
                                      clrloop0 0CE3                           end_of_initialization 0068  
                __end_ofi1_Matrix_update_floor 1000                              New_request@i_1650 0050  
                            New_request@i_1651 0052                              New_request@i_1652 0054  
                                   _next_floor 003B          __end_of_EUSART_SetOverrunErrorHandler 0CC2  
                _EUSART_SetOverrunErrorHandler 0CBD                                        init_ram 0CE8  
                                 New_request@i 004E                                        initloop 0CE9  
                            _EUSART_Initialize 0721                              New_request@index_ 0056  
                           ?_EUSART_Initialize 0070                         __end_of_ECCP2_CallBack 0C97  
                        TMR0_ReadTimer@readVal 0070                              New_request@origin 0078  
                                    _RCSTAbits 019D                             _EUSART_is_tx_ready 0CF5  
                                    _SPI1_Open 049D                                 _TMR0_ReadTimer 0CAE  
                          ??_EUSART_Initialize 00C7                               ??_WDT_Initialize 00C5  
                                   _velocidade 002C                            ?_EUSART_is_tx_ready 0070  
                             ___lbmod@dividend 0076                                    _Route_empty 0EF1  
                                    _TRISBbits 008D                                      i1___awmod 05C6  
                 ??_IOCBF0_SetInterruptHandler 00C7                   ??_IOCBF3_SetInterruptHandler 00C7  
                             ?_CMP1_Initialize 0070                         SPI1_ExchangeBlock@data 00C8  
                                  ___lbmod@rem 0078                      __end_of_EUSART_Initialize 0751  
                               __end_of_FLOORS 0829                                _SPI1_Initialize 0D74  
                         ??_EUSART_is_tx_ready 0070                                      _TXSTAbits 019E  
                                  _CCP3CONbits 0313                                   ??_Ini_matrix 00CC  
                                 _MATRIX_FLOOR 07FE                                ?_ECCP2_CallBack 0070  
                       __end_of_TMR0_ReadTimer 0CB3                               ?_CMP2_Initialize 0070  
                               __end_of___bmul 0E2B                                     ?_SPI1_Open 0070  
                               __end_of_Tx_spi 0E1B             __end_of_EUSART_DefaultErrorHandler 0C9D  
                   _EUSART_DefaultErrorHandler 0C9A                                 __end_of___wmul 0EF1  
                                 _EUSART_Write 0CEE                         ?_OSCILLATOR_Initialize 0070  
                      i1Matrix_update_dir@data 0043                        i1Matrix_update_dir@mask 0042  
                          start_initialization 0041                                      _Read_UART 0583  
                           __end_of_Ini_matrix 0686                   __end_ofi1_SPI1_ExchangeBlock 0F6E  
                                   ?i1___awmod 0070                                  ??_EUSART_Read 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 00C5                                   ??_Next_floor 00CB  
                                 ??_Next_index 00CB                                   ?_New_request 0078  
                        __end_of_MATRIX_CONFIG 081A                 ?_EUSART_SetOverrunErrorHandler 00C5  
                   _EUSART_FramingErrorHandler 00E0                                       ??___bmul 00C6  
                                     ??_Tx_spi 00CC                                ?_TMR0_ReadTimer 0070  
                                     ??___wmul 0075                         _EUSART_SetErrorHandler 0CB3  
                               Ini_matrix@data 00CD                                    __pdataBANK1 00E8  
                                  __pdataBANK2 0120                             i1___awmod@dividend 0072  
                              New_request@dest 007A                             __end_of_Next_floor 0648  
                           __end_of_Next_index 06EF                          TMR1_ISR@CountCallBack 0028  
                                    ___latbits 0001                                  _Motor_Turn_On 0DA7  
                                __pcstackBANK0 003E                                  __pcstackBANK1 00C5  
                                __pcstackBANK2 0135                                     ?_Read_UART 0070  
                      __end_of_SPI1_Initialize 0D80                               ??_Motor_Turn_Off 00D8  
                   __end_of_EUSART_Receive_ISR 06BC                                    Write_UART@i 0046  
             _EUSART_RxDefaultInterruptHandler 00E2                            __end_of_EUSART_Read 0F2E  
                                    __pnvBANK1 00DA                        _IOCBF3_InterruptHandler 00E4  
                 __end_of_EUSART_RxDataHandler 0E4F                               ___lwdiv@dividend 0079  
                       _PIN_MANAGER_Initialize 0751                           EUSART_Read@readValue 0070  
                                 ??_Write_UART 0045               __end_of_TMR1_SetInterruptHandler 0CD6  
                                     ?___awdiv 0077                                       ?___lbdiv 0070  
                                     ?___awmod 00C5                                       ?___lbmod 0074  
                                     ?___lwdiv 0077                                    ??_SPI1_Open 00C5  
                                     ?___lwmod 003E                                   _eusartRxHead 0038  
                                 _eusartRxTail 0037                              i1_TMR0_WriteTimer 0CA9  
                 ??_INTERRUPT_InterruptManager 007E                               _ECCP2_CaptureISR 0D80  
                           ?i1_TMR0_WriteTimer 0070                               _uart_read_buffer 00A0  
                               ?_Motor_Turn_On 0070                           i1Matrix_update_dir@i 0047  
                          i1_Matrix_update_dir 0424             __end_of_IOCBF0_SetInterruptHandler 0CCC  
                   _IOCBF0_SetInterruptHandler 0CC7                          Matrix_update_dir@data 00D3  
                        Matrix_update_dir@mask 00D1             __end_of_IOCBF3_SetInterruptHandler 0CD1  
                   _IOCBF3_SetInterruptHandler 0CCC                                    ??i1___awmod 0074  
                                     _CMP1_ISR 0D0C                                       _CMP2_ISR 0D15  
                             ___lwdiv@quotient 007B                            ??i1_TMR0_WriteTimer 0070  
                           __end_of_Write_UART 0FD8                                 _eusartRxBuffer 00B2  
                   __end_of_SPI1_ExchangeBlock 0F91                           New_request@index_ori 004C  
                                _TMR1_CallBack 0D47                              ??_TMR0_Initialize 00C5  
                               ___wmul@product 0075                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00C5                                       _LATBbits 010D  
                                    clear_ram0 0CE2                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 0035  
                        i1___bmul@multiplicand 0070                           ?i1_Matrix_update_dir 0070  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00C7  
                                     _PIR2bits 0012                                       _PIR3bits 0013  
                  __end_of_Matrix_update_floor 07AA                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216                           i1_SPI1_ExchangeBlock 0F4D  
    __end_of_EUSART_DefaultOverrunErrorHandler 0CA1            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0C9D  
                    __end_ofi1_TMR0_WriteTimer 0CAE                                       _TMR1_ISR 0EA2  
                                     _SSP1STAT 0214                              ??_PIN_MANAGER_IOC 007C  
                                    _position0 0030                                      _positionf 002E  
                            ??_TMR1_Initialize 00C7                              ??_PWM3_Initialize 00C5  
                                     i1___bmul 0DFC                                       i1_Tx_spi 0DCF  
                            ___wmul@multiplier 0071                                   ?_Route_empty 0070  
                                  ??_Read_UART 007C                               _ECCP2_Initialize 0D1E  
                                  _EUSART_Read 0F0F                               ?_SPI1_Initialize 0070  
                               ?_TMR1_CallBack 0070                        Matrix_update_dir@i_1708 00D5  
                            ??_TMR2_Initialize 00C5                          i1_Matrix_update_floor 0FD8  
                       i1Matrix_update_floor@i 007B                               ??_ECCP2_CallBack 0072  
                        ??i1_Matrix_update_dir 0077                               _Update_tx_buffer 01D9  
                        ?i1_SPI1_ExchangeBlock 0070                              i1___awmod@divisor 0070  
                    i1Matrix_update_dir@i_1708 0046                        Matrix_update_dir@route_ 00CD  
                      ??_OSCILLATOR_Initialize 00C5                                 Tx_spi@dataSize 00CA  
                          _EUSART_ErrorHandler 00DC                              i1___awmod@counter 0074  
                  ?_EUSART_DefaultErrorHandler 0070                       _TMR1_SetInterruptHandler 0CD1  
                              ??_Motor_Turn_On 00D8                          _TMR1_InterruptHandler 00DA  
                    i1Matrix_update_dir@route_ 003E                                ___lwdiv@divisor 0077  
                         _EUSART_RxDataHandler 0E3D                                ___lwdiv@counter 007D  
                                     __ptext10 0D28                                       __ptext11 0D74  
                                     __ptext20 0CBD                                       __ptext12 0DB4  
                                     __ptext21 0CB8                                       __ptext13 0751  
                                     __ptext30 0540                                       __ptext22 0CB3  
                                     __ptext14 0CCC                                       __ptext31 0648  
                                     __ptext23 0D1E                                       __ptext15 0CC7  
                                     __ptext40 0EA2                                       __ptext32 0E4F  
                                     __ptext24 0D5D                                       __ptext16 0CD6  
                                     __ptext41 0DC1                                       __ptext33 0DA7  
                                     __ptext25 0D68                                       __ptext17 0CA1  
                                     __ptext50 0F2E                                       __ptext42 0D47  
                                     __ptext34 0D52                                       __ptext26 049D  
                                     __ptext18 0721                                       __ptext51 04F3  
                                     __ptext43 0003                                       __ptext35 03A3  
                                     __ptext27 0EF1                                       __ptext19 0CC2  
                                     __ptext60 0DFC                                       __ptext52 0CAE  
                                     __ptext44 0FB4                                       __ptext36 0E1B  
                                     __ptext28 06BC                                       __ptext61 0C9D  
                                     __ptext53 0CF5                                       __ptext45 01D9  
                                     __ptext37 0E0B                                       __ptext29 0609  
                                     __ptext70 0D8D                                       __ptext62 0C99  
                                     __ptext54 0CEE                                       __ptext46 0ED6  
                                     __ptext38 0F6E                                       __ptext71 0C97  
                                     __ptext63 0C9A                                       __ptext55 0686  
                                     __ptext47 07D4                                       __ptext80 0FD8  
                                     __ptext72 0E2B                                       __ptext64 0E3D  
                                     __ptext56 0583                                       __ptext48 06EF  
                                     __ptext81 0DCF                                       __ptext73 0D80  
                                     __ptext65 0F0F                                       __ptext57 006C  
                                     __ptext49 0EBB                                       __ptext82 0F4D  
                                     __ptext74 0C96                                       __ptext66 0D3C  
                                     __ptext58 05C6                                       __ptext75 0D15  
                                     __ptext67 0D9A                                       __ptext59 0424  
                                     __ptext76 0DED                                       __ptext68 0C98  
                                     __ptext77 0D0C                                       __ptext69 0E61  
                                     __ptext78 0DDE                                       __ptext79 0CA9  
                                 _SSP1CON1bits 0215                                     _IOCBF0_ISR 0D8D  
                                   _IOCBF3_ISR 0D9A                        TMR0_WriteTimer@timerVal 00C5  
                            ??_TMR0_WriteTimer 00C5                 i1Matrix_update_dir@display_dir 0045  
                             ??_TMR0_ReadTimer 0070                           Matrix_update_floor@i 00D0  
                      ?_EUSART_SetErrorHandler 00C5                  i1SPI1_ExchangeBlock@blockSize 0071  
                      Matrix_update_floor@data 00CD  EUSART_SetOverrunErrorHandler@interruptHandler 00C5  
                    i1TMR0_WriteTimer@timerVal 0070                                       int$flags 007E  
                                     _position 0032             __end_of_INTERRUPT_InterruptManager 003F  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0CBD  
                _EUSART_SetFramingErrorHandler 0CB8                              ??_TMR1_WriteTimer 0072  
                                   _MATRIX_DIR 081A                    SPI1_ExchangeBlock@blockSize 00C6  
                    i1Matrix_update_floor@data 0078                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                                ??_TMR1_CallBack 007E  
                                     intlevel1 0000                         ?i1_Matrix_update_floor 0070  
                            _uart_write_buffer 0120                               ___lwmod@dividend 0040  
                      ?_PIN_MANAGER_Initialize 0070                       __end_of_ECCP2_CaptureISR 0D8D  
                            ??_TMR6_Initialize 00C5                 __end_of_EUSART_SetErrorHandler 0CB8  
         __end_of_EUSART_SetRxInterruptHandler 0CC7                   _EUSART_SetRxInterruptHandler 0CC2  
                       ??i1_SPI1_ExchangeBlock 0073                             _EUSART_Receive_ISR 0686  
EUSART_SetFramingErrorHandler@interruptHandler 00C5                                _position_string 00EC  
                                   _ISR_Floor1 0E2B                                     _ISR_Floor2 0E61  
                                   _ISR_Floor3 0DDE                                     _ISR_Floor4 0DED  
                                __pstringtext1 07FE                                  __pstringtext2 080E  
                                __pstringtext3 081A                                  __pstringtext4 0823  
                                __pstringtext5 0829                                 _FVR_Initialize 0CA1  
                                   _OPTION_REG 0095                            ?_EUSART_Receive_ISR 0070  
                              ___lwmod@divisor 003E                                _TMR0_Initialize 0D28  
                           Matrix_update_dir@i 00D6                                ___lwmod@counter 0042  
                             Next_floor@index_ 00CC                    ?_IOCBF0_SetInterruptHandler 00C5  
                  ?_IOCBF3_SetInterruptHandler 00C5                                    ?_IOCBF0_ISR 0070  
                           EUSART_Write@txData 0070                                    ?_IOCBF3_ISR 0070  
                             Next_index@index_ 00CC                 __end_of_PIN_MANAGER_Initialize 0780  
             ??_IOCBF0_DefaultInterruptHandler 0070                ?_IOCBF0_DefaultInterruptHandler 0070  
                              _PIN_MANAGER_IOC 0D3C                           ??_EUSART_Receive_ISR 0070  
                              _TMR1_Initialize 0E8B                                _PWM3_Initialize 0DB4  
                   __end_of_spi1_configuration 082D  
