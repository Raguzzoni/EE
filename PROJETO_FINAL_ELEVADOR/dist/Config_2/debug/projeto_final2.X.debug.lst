

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Jun 18 01:14:53 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	stringtext6,global,class=STRCODE,space=0,delta=2,noexec
    12                           	psect	stringtext7,global,class=STRCODE,space=0,delta=2,noexec
    13                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	inittext,global,class=CODE,space=0,delta=2
    19                           	psect	clrtext,global,class=CODE,space=0,delta=2
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2,group=2
    58                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,space=0,delta=2
    61                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2,group=3
    67                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2,group=1
    68                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2,group=1
    69                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2,group=1
    70                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2,group=2
    71                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2,group=1
    72                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2,group=1
    73                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2,group=3
    74                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2,group=3
    75                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2,group=3
    76                           	psect	text53,local,class=CODE,space=0,merge=1,delta=2,group=3
    77                           	psect	text54,local,class=CODE,space=0,merge=1,delta=2,group=2
    78                           	psect	text55,local,class=CODE,space=0,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,space=0,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,space=0,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,space=0,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,space=0,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,space=0,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,space=0,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,space=0,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,space=0,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,space=0,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,space=0,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,space=0,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,space=0,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,space=0,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,space=0,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,space=0,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,space=0,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,space=0,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,space=0,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,space=0,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,space=0,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,space=0,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,space=0,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,space=0,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,space=0,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,space=0,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,space=0,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,space=0,merge=1,delta=2,group=2
   106                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   107                           	dabs	1,0x7E,2
   108     0000                     
   109                           ; Generated 27/03/2025 GMT
   110                           ; 
   111                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution. Publication is not required when
   125                           ;        this file is used in an embedded application.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC16F1827 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143     0008                     bsr             equ	8
   144     0005                     fsr0h           equ	5
   145     0004                     fsr0l           equ	4
   146     0007                     fsr1h           equ	7
   147     0006                     fsr1l           equ	6
   148     0000                     indf            equ	0
   149     0000                     indf0           equ	0
   150     0001                     indf1           equ	1
   151     000B                     intcon          equ	11
   152     0002                     pc              equ	2
   153     0002                     pcl             equ	2
   154     000A                     pclath          equ	10
   155     0003                     status          equ	3
   156     0009                     wreg            equ	9
   157     0000                     INDF0           equ	0	;# 
   158     0001                     INDF1           equ	1	;# 
   159     0002                     PCL             equ	2	;# 
   160     0003                     STATUS          equ	3	;# 
   161     0004                     FSR0L           equ	4	;# 
   162     0005                     FSR0H           equ	5	;# 
   163     0006                     FSR1L           equ	6	;# 
   164     0007                     FSR1H           equ	7	;# 
   165     0008                     BSR             equ	8	;# 
   166     0009                     WREG            equ	9	;# 
   167     000A                     PCLATH          equ	10	;# 
   168     000B                     INTCON          equ	11	;# 
   169     000C                     PORTA           equ	12	;# 
   170     000D                     PORTB           equ	13	;# 
   171     0011                     PIR1            equ	17	;# 
   172     0012                     PIR2            equ	18	;# 
   173     0013                     PIR3            equ	19	;# 
   174     0014                     PIR4            equ	20	;# 
   175     0015                     TMR0            equ	21	;# 
   176     0016                     TMR1            equ	22	;# 
   177     0016                     TMR1L           equ	22	;# 
   178     0017                     TMR1H           equ	23	;# 
   179     0018                     T1CON           equ	24	;# 
   180     0019                     T1GCON          equ	25	;# 
   181     001A                     TMR2            equ	26	;# 
   182     001B                     PR2             equ	27	;# 
   183     001C                     T2CON           equ	28	;# 
   184     001E                     CPSCON0         equ	30	;# 
   185     001F                     CPSCON1         equ	31	;# 
   186     008C                     TRISA           equ	140	;# 
   187     008D                     TRISB           equ	141	;# 
   188     0091                     PIE1            equ	145	;# 
   189     0092                     PIE2            equ	146	;# 
   190     0093                     PIE3            equ	147	;# 
   191     0094                     PIE4            equ	148	;# 
   192     0095                     OPTION_REG      equ	149	;# 
   193     0096                     PCON            equ	150	;# 
   194     0097                     WDTCON          equ	151	;# 
   195     0098                     OSCTUNE         equ	152	;# 
   196     0099                     OSCCON          equ	153	;# 
   197     009A                     OSCSTAT         equ	154	;# 
   198     009B                     ADRES           equ	155	;# 
   199     009B                     ADRESL          equ	155	;# 
   200     009C                     ADRESH          equ	156	;# 
   201     009D                     ADCON0          equ	157	;# 
   202     009E                     ADCON1          equ	158	;# 
   203     010C                     LATA            equ	268	;# 
   204     010D                     LATB            equ	269	;# 
   205     0111                     CM1CON0         equ	273	;# 
   206     0112                     CM1CON1         equ	274	;# 
   207     0113                     CM2CON0         equ	275	;# 
   208     0114                     CM2CON1         equ	276	;# 
   209     0115                     CMOUT           equ	277	;# 
   210     0116                     BORCON          equ	278	;# 
   211     0117                     FVRCON          equ	279	;# 
   212     0118                     DACCON0         equ	280	;# 
   213     0119                     DACCON1         equ	281	;# 
   214     011A                     SRCON0          equ	282	;# 
   215     011B                     SRCON1          equ	283	;# 
   216     011D                     APFCON0         equ	285	;# 
   217     011E                     APFCON1         equ	286	;# 
   218     018C                     ANSELA          equ	396	;# 
   219     018D                     ANSELB          equ	397	;# 
   220     0191                     EEADR           equ	401	;# 
   221     0191                     EEADRL          equ	401	;# 
   222     0192                     EEADRH          equ	402	;# 
   223     0193                     EEDAT           equ	403	;# 
   224     0193                     EEDATL          equ	403	;# 
   225     0193                     EEDATA          equ	403	;# 
   226     0194                     EEDATH          equ	404	;# 
   227     0195                     EECON1          equ	405	;# 
   228     0196                     EECON2          equ	406	;# 
   229     0199                     RCREG           equ	409	;# 
   230     019A                     TXREG           equ	410	;# 
   231     019B                     SP1BRG          equ	411	;# 
   232     019B                     SP1BRGL         equ	411	;# 
   233     019B                     SPBRG           equ	411	;# 
   234     019B                     SPBRGL          equ	411	;# 
   235     019C                     SP1BRGH         equ	412	;# 
   236     019C                     SPBRGH          equ	412	;# 
   237     019D                     RCSTA           equ	413	;# 
   238     019E                     TXSTA           equ	414	;# 
   239     019F                     BAUDCON         equ	415	;# 
   240     020C                     WPUA            equ	524	;# 
   241     020D                     WPUB            equ	525	;# 
   242     0211                     SSP1BUF         equ	529	;# 
   243     0211                     SSPBUF          equ	529	;# 
   244     0212                     SSP1ADD         equ	530	;# 
   245     0212                     SSPADD          equ	530	;# 
   246     0213                     SSP1MSK         equ	531	;# 
   247     0213                     SSPMSK          equ	531	;# 
   248     0214                     SSP1STAT        equ	532	;# 
   249     0214                     SSPSTAT         equ	532	;# 
   250     0215                     SSP1CON1        equ	533	;# 
   251     0215                     SSPCON1         equ	533	;# 
   252     0215                     SSPCON          equ	533	;# 
   253     0216                     SSP1CON2        equ	534	;# 
   254     0216                     SSPCON2         equ	534	;# 
   255     0217                     SSP1CON3        equ	535	;# 
   256     0217                     SSPCON3         equ	535	;# 
   257     0219                     SSP2BUF         equ	537	;# 
   258     021A                     SSP2ADD         equ	538	;# 
   259     021B                     SSP2MSK         equ	539	;# 
   260     021C                     SSP2STAT        equ	540	;# 
   261     021D                     SSP2CON1        equ	541	;# 
   262     021E                     SSP2CON2        equ	542	;# 
   263     021F                     SSP2CON3        equ	543	;# 
   264     0291                     CCPR1           equ	657	;# 
   265     0291                     CCPR1L          equ	657	;# 
   266     0292                     CCPR1H          equ	658	;# 
   267     0293                     CCP1CON         equ	659	;# 
   268     0294                     PWM1CON         equ	660	;# 
   269     0295                     CCP1AS          equ	661	;# 
   270     0295                     ECCP1AS         equ	661	;# 
   271     0296                     PSTR1CON        equ	662	;# 
   272     0298                     CCPR2           equ	664	;# 
   273     0298                     CCPR2L          equ	664	;# 
   274     0299                     CCPR2H          equ	665	;# 
   275     029A                     CCP2CON         equ	666	;# 
   276     029B                     PWM2CON         equ	667	;# 
   277     029C                     CCP2AS          equ	668	;# 
   278     029C                     ECCP2AS         equ	668	;# 
   279     029D                     PSTR2CON        equ	669	;# 
   280     029E                     CCPTMRS         equ	670	;# 
   281     029E                     CCPTMRS0        equ	670	;# 
   282     0311                     CCPR3           equ	785	;# 
   283     0311                     CCPR3L          equ	785	;# 
   284     0312                     CCPR3H          equ	786	;# 
   285     0313                     CCP3CON         equ	787	;# 
   286     0318                     CCPR4           equ	792	;# 
   287     0318                     CCPR4L          equ	792	;# 
   288     0319                     CCPR4H          equ	793	;# 
   289     031A                     CCP4CON         equ	794	;# 
   290     0394                     IOCBP           equ	916	;# 
   291     0395                     IOCBN           equ	917	;# 
   292     0396                     IOCBF           equ	918	;# 
   293     039A                     CLKRCON         equ	922	;# 
   294     039C                     MDCON           equ	924	;# 
   295     039D                     MDSRC           equ	925	;# 
   296     039E                     MDCARL          equ	926	;# 
   297     039F                     MDCARH          equ	927	;# 
   298     0415                     TMR4            equ	1045	;# 
   299     0416                     PR4             equ	1046	;# 
   300     0417                     T4CON           equ	1047	;# 
   301     041C                     TMR6            equ	1052	;# 
   302     041D                     PR6             equ	1053	;# 
   303     041E                     T6CON           equ	1054	;# 
   304     0FE4                     STATUS_SHAD     equ	4068	;# 
   305     0FE5                     WREG_SHAD       equ	4069	;# 
   306     0FE6                     BSR_SHAD        equ	4070	;# 
   307     0FE7                     PCLATH_SHAD     equ	4071	;# 
   308     0FE8                     FSR0L_SHAD      equ	4072	;# 
   309     0FE9                     FSR0H_SHAD      equ	4073	;# 
   310     0FEA                     FSR1L_SHAD      equ	4074	;# 
   311     0FEB                     FSR1H_SHAD      equ	4075	;# 
   312     0FED                     STKPTR          equ	4077	;# 
   313     0FEE                     TOSL            equ	4078	;# 
   314     0FEF                     TOSH            equ	4079	;# 
   315     0000                     INDF0           equ	0	;# 
   316     0001                     INDF1           equ	1	;# 
   317     0002                     PCL             equ	2	;# 
   318     0003                     STATUS          equ	3	;# 
   319     0004                     FSR0L           equ	4	;# 
   320     0005                     FSR0H           equ	5	;# 
   321     0006                     FSR1L           equ	6	;# 
   322     0007                     FSR1H           equ	7	;# 
   323     0008                     BSR             equ	8	;# 
   324     0009                     WREG            equ	9	;# 
   325     000A                     PCLATH          equ	10	;# 
   326     000B                     INTCON          equ	11	;# 
   327     000C                     PORTA           equ	12	;# 
   328     000D                     PORTB           equ	13	;# 
   329     0011                     PIR1            equ	17	;# 
   330     0012                     PIR2            equ	18	;# 
   331     0013                     PIR3            equ	19	;# 
   332     0014                     PIR4            equ	20	;# 
   333     0015                     TMR0            equ	21	;# 
   334     0016                     TMR1            equ	22	;# 
   335     0016                     TMR1L           equ	22	;# 
   336     0017                     TMR1H           equ	23	;# 
   337     0018                     T1CON           equ	24	;# 
   338     0019                     T1GCON          equ	25	;# 
   339     001A                     TMR2            equ	26	;# 
   340     001B                     PR2             equ	27	;# 
   341     001C                     T2CON           equ	28	;# 
   342     001E                     CPSCON0         equ	30	;# 
   343     001F                     CPSCON1         equ	31	;# 
   344     008C                     TRISA           equ	140	;# 
   345     008D                     TRISB           equ	141	;# 
   346     0091                     PIE1            equ	145	;# 
   347     0092                     PIE2            equ	146	;# 
   348     0093                     PIE3            equ	147	;# 
   349     0094                     PIE4            equ	148	;# 
   350     0095                     OPTION_REG      equ	149	;# 
   351     0096                     PCON            equ	150	;# 
   352     0097                     WDTCON          equ	151	;# 
   353     0098                     OSCTUNE         equ	152	;# 
   354     0099                     OSCCON          equ	153	;# 
   355     009A                     OSCSTAT         equ	154	;# 
   356     009B                     ADRES           equ	155	;# 
   357     009B                     ADRESL          equ	155	;# 
   358     009C                     ADRESH          equ	156	;# 
   359     009D                     ADCON0          equ	157	;# 
   360     009E                     ADCON1          equ	158	;# 
   361     010C                     LATA            equ	268	;# 
   362     010D                     LATB            equ	269	;# 
   363     0111                     CM1CON0         equ	273	;# 
   364     0112                     CM1CON1         equ	274	;# 
   365     0113                     CM2CON0         equ	275	;# 
   366     0114                     CM2CON1         equ	276	;# 
   367     0115                     CMOUT           equ	277	;# 
   368     0116                     BORCON          equ	278	;# 
   369     0117                     FVRCON          equ	279	;# 
   370     0118                     DACCON0         equ	280	;# 
   371     0119                     DACCON1         equ	281	;# 
   372     011A                     SRCON0          equ	282	;# 
   373     011B                     SRCON1          equ	283	;# 
   374     011D                     APFCON0         equ	285	;# 
   375     011E                     APFCON1         equ	286	;# 
   376     018C                     ANSELA          equ	396	;# 
   377     018D                     ANSELB          equ	397	;# 
   378     0191                     EEADR           equ	401	;# 
   379     0191                     EEADRL          equ	401	;# 
   380     0192                     EEADRH          equ	402	;# 
   381     0193                     EEDAT           equ	403	;# 
   382     0193                     EEDATL          equ	403	;# 
   383     0193                     EEDATA          equ	403	;# 
   384     0194                     EEDATH          equ	404	;# 
   385     0195                     EECON1          equ	405	;# 
   386     0196                     EECON2          equ	406	;# 
   387     0199                     RCREG           equ	409	;# 
   388     019A                     TXREG           equ	410	;# 
   389     019B                     SP1BRG          equ	411	;# 
   390     019B                     SP1BRGL         equ	411	;# 
   391     019B                     SPBRG           equ	411	;# 
   392     019B                     SPBRGL          equ	411	;# 
   393     019C                     SP1BRGH         equ	412	;# 
   394     019C                     SPBRGH          equ	412	;# 
   395     019D                     RCSTA           equ	413	;# 
   396     019E                     TXSTA           equ	414	;# 
   397     019F                     BAUDCON         equ	415	;# 
   398     020C                     WPUA            equ	524	;# 
   399     020D                     WPUB            equ	525	;# 
   400     0211                     SSP1BUF         equ	529	;# 
   401     0211                     SSPBUF          equ	529	;# 
   402     0212                     SSP1ADD         equ	530	;# 
   403     0212                     SSPADD          equ	530	;# 
   404     0213                     SSP1MSK         equ	531	;# 
   405     0213                     SSPMSK          equ	531	;# 
   406     0214                     SSP1STAT        equ	532	;# 
   407     0214                     SSPSTAT         equ	532	;# 
   408     0215                     SSP1CON1        equ	533	;# 
   409     0215                     SSPCON1         equ	533	;# 
   410     0215                     SSPCON          equ	533	;# 
   411     0216                     SSP1CON2        equ	534	;# 
   412     0216                     SSPCON2         equ	534	;# 
   413     0217                     SSP1CON3        equ	535	;# 
   414     0217                     SSPCON3         equ	535	;# 
   415     0219                     SSP2BUF         equ	537	;# 
   416     021A                     SSP2ADD         equ	538	;# 
   417     021B                     SSP2MSK         equ	539	;# 
   418     021C                     SSP2STAT        equ	540	;# 
   419     021D                     SSP2CON1        equ	541	;# 
   420     021E                     SSP2CON2        equ	542	;# 
   421     021F                     SSP2CON3        equ	543	;# 
   422     0291                     CCPR1           equ	657	;# 
   423     0291                     CCPR1L          equ	657	;# 
   424     0292                     CCPR1H          equ	658	;# 
   425     0293                     CCP1CON         equ	659	;# 
   426     0294                     PWM1CON         equ	660	;# 
   427     0295                     CCP1AS          equ	661	;# 
   428     0295                     ECCP1AS         equ	661	;# 
   429     0296                     PSTR1CON        equ	662	;# 
   430     0298                     CCPR2           equ	664	;# 
   431     0298                     CCPR2L          equ	664	;# 
   432     0299                     CCPR2H          equ	665	;# 
   433     029A                     CCP2CON         equ	666	;# 
   434     029B                     PWM2CON         equ	667	;# 
   435     029C                     CCP2AS          equ	668	;# 
   436     029C                     ECCP2AS         equ	668	;# 
   437     029D                     PSTR2CON        equ	669	;# 
   438     029E                     CCPTMRS         equ	670	;# 
   439     029E                     CCPTMRS0        equ	670	;# 
   440     0311                     CCPR3           equ	785	;# 
   441     0311                     CCPR3L          equ	785	;# 
   442     0312                     CCPR3H          equ	786	;# 
   443     0313                     CCP3CON         equ	787	;# 
   444     0318                     CCPR4           equ	792	;# 
   445     0318                     CCPR4L          equ	792	;# 
   446     0319                     CCPR4H          equ	793	;# 
   447     031A                     CCP4CON         equ	794	;# 
   448     0394                     IOCBP           equ	916	;# 
   449     0395                     IOCBN           equ	917	;# 
   450     0396                     IOCBF           equ	918	;# 
   451     039A                     CLKRCON         equ	922	;# 
   452     039C                     MDCON           equ	924	;# 
   453     039D                     MDSRC           equ	925	;# 
   454     039E                     MDCARL          equ	926	;# 
   455     039F                     MDCARH          equ	927	;# 
   456     0415                     TMR4            equ	1045	;# 
   457     0416                     PR4             equ	1046	;# 
   458     0417                     T4CON           equ	1047	;# 
   459     041C                     TMR6            equ	1052	;# 
   460     041D                     PR6             equ	1053	;# 
   461     041E                     T6CON           equ	1054	;# 
   462     0FE4                     STATUS_SHAD     equ	4068	;# 
   463     0FE5                     WREG_SHAD       equ	4069	;# 
   464     0FE6                     BSR_SHAD        equ	4070	;# 
   465     0FE7                     PCLATH_SHAD     equ	4071	;# 
   466     0FE8                     FSR0L_SHAD      equ	4072	;# 
   467     0FE9                     FSR0H_SHAD      equ	4073	;# 
   468     0FEA                     FSR1L_SHAD      equ	4074	;# 
   469     0FEB                     FSR1H_SHAD      equ	4075	;# 
   470     0FED                     STKPTR          equ	4077	;# 
   471     0FEE                     TOSL            equ	4078	;# 
   472     0FEF                     TOSH            equ	4079	;# 
   473     0000                     INDF0           equ	0	;# 
   474     0001                     INDF1           equ	1	;# 
   475     0002                     PCL             equ	2	;# 
   476     0003                     STATUS          equ	3	;# 
   477     0004                     FSR0L           equ	4	;# 
   478     0005                     FSR0H           equ	5	;# 
   479     0006                     FSR1L           equ	6	;# 
   480     0007                     FSR1H           equ	7	;# 
   481     0008                     BSR             equ	8	;# 
   482     0009                     WREG            equ	9	;# 
   483     000A                     PCLATH          equ	10	;# 
   484     000B                     INTCON          equ	11	;# 
   485     000C                     PORTA           equ	12	;# 
   486     000D                     PORTB           equ	13	;# 
   487     0011                     PIR1            equ	17	;# 
   488     0012                     PIR2            equ	18	;# 
   489     0013                     PIR3            equ	19	;# 
   490     0014                     PIR4            equ	20	;# 
   491     0015                     TMR0            equ	21	;# 
   492     0016                     TMR1            equ	22	;# 
   493     0016                     TMR1L           equ	22	;# 
   494     0017                     TMR1H           equ	23	;# 
   495     0018                     T1CON           equ	24	;# 
   496     0019                     T1GCON          equ	25	;# 
   497     001A                     TMR2            equ	26	;# 
   498     001B                     PR2             equ	27	;# 
   499     001C                     T2CON           equ	28	;# 
   500     001E                     CPSCON0         equ	30	;# 
   501     001F                     CPSCON1         equ	31	;# 
   502     008C                     TRISA           equ	140	;# 
   503     008D                     TRISB           equ	141	;# 
   504     0091                     PIE1            equ	145	;# 
   505     0092                     PIE2            equ	146	;# 
   506     0093                     PIE3            equ	147	;# 
   507     0094                     PIE4            equ	148	;# 
   508     0095                     OPTION_REG      equ	149	;# 
   509     0096                     PCON            equ	150	;# 
   510     0097                     WDTCON          equ	151	;# 
   511     0098                     OSCTUNE         equ	152	;# 
   512     0099                     OSCCON          equ	153	;# 
   513     009A                     OSCSTAT         equ	154	;# 
   514     009B                     ADRES           equ	155	;# 
   515     009B                     ADRESL          equ	155	;# 
   516     009C                     ADRESH          equ	156	;# 
   517     009D                     ADCON0          equ	157	;# 
   518     009E                     ADCON1          equ	158	;# 
   519     010C                     LATA            equ	268	;# 
   520     010D                     LATB            equ	269	;# 
   521     0111                     CM1CON0         equ	273	;# 
   522     0112                     CM1CON1         equ	274	;# 
   523     0113                     CM2CON0         equ	275	;# 
   524     0114                     CM2CON1         equ	276	;# 
   525     0115                     CMOUT           equ	277	;# 
   526     0116                     BORCON          equ	278	;# 
   527     0117                     FVRCON          equ	279	;# 
   528     0118                     DACCON0         equ	280	;# 
   529     0119                     DACCON1         equ	281	;# 
   530     011A                     SRCON0          equ	282	;# 
   531     011B                     SRCON1          equ	283	;# 
   532     011D                     APFCON0         equ	285	;# 
   533     011E                     APFCON1         equ	286	;# 
   534     018C                     ANSELA          equ	396	;# 
   535     018D                     ANSELB          equ	397	;# 
   536     0191                     EEADR           equ	401	;# 
   537     0191                     EEADRL          equ	401	;# 
   538     0192                     EEADRH          equ	402	;# 
   539     0193                     EEDAT           equ	403	;# 
   540     0193                     EEDATL          equ	403	;# 
   541     0193                     EEDATA          equ	403	;# 
   542     0194                     EEDATH          equ	404	;# 
   543     0195                     EECON1          equ	405	;# 
   544     0196                     EECON2          equ	406	;# 
   545     0199                     RCREG           equ	409	;# 
   546     019A                     TXREG           equ	410	;# 
   547     019B                     SP1BRG          equ	411	;# 
   548     019B                     SP1BRGL         equ	411	;# 
   549     019B                     SPBRG           equ	411	;# 
   550     019B                     SPBRGL          equ	411	;# 
   551     019C                     SP1BRGH         equ	412	;# 
   552     019C                     SPBRGH          equ	412	;# 
   553     019D                     RCSTA           equ	413	;# 
   554     019E                     TXSTA           equ	414	;# 
   555     019F                     BAUDCON         equ	415	;# 
   556     020C                     WPUA            equ	524	;# 
   557     020D                     WPUB            equ	525	;# 
   558     0211                     SSP1BUF         equ	529	;# 
   559     0211                     SSPBUF          equ	529	;# 
   560     0212                     SSP1ADD         equ	530	;# 
   561     0212                     SSPADD          equ	530	;# 
   562     0213                     SSP1MSK         equ	531	;# 
   563     0213                     SSPMSK          equ	531	;# 
   564     0214                     SSP1STAT        equ	532	;# 
   565     0214                     SSPSTAT         equ	532	;# 
   566     0215                     SSP1CON1        equ	533	;# 
   567     0215                     SSPCON1         equ	533	;# 
   568     0215                     SSPCON          equ	533	;# 
   569     0216                     SSP1CON2        equ	534	;# 
   570     0216                     SSPCON2         equ	534	;# 
   571     0217                     SSP1CON3        equ	535	;# 
   572     0217                     SSPCON3         equ	535	;# 
   573     0219                     SSP2BUF         equ	537	;# 
   574     021A                     SSP2ADD         equ	538	;# 
   575     021B                     SSP2MSK         equ	539	;# 
   576     021C                     SSP2STAT        equ	540	;# 
   577     021D                     SSP2CON1        equ	541	;# 
   578     021E                     SSP2CON2        equ	542	;# 
   579     021F                     SSP2CON3        equ	543	;# 
   580     0291                     CCPR1           equ	657	;# 
   581     0291                     CCPR1L          equ	657	;# 
   582     0292                     CCPR1H          equ	658	;# 
   583     0293                     CCP1CON         equ	659	;# 
   584     0294                     PWM1CON         equ	660	;# 
   585     0295                     CCP1AS          equ	661	;# 
   586     0295                     ECCP1AS         equ	661	;# 
   587     0296                     PSTR1CON        equ	662	;# 
   588     0298                     CCPR2           equ	664	;# 
   589     0298                     CCPR2L          equ	664	;# 
   590     0299                     CCPR2H          equ	665	;# 
   591     029A                     CCP2CON         equ	666	;# 
   592     029B                     PWM2CON         equ	667	;# 
   593     029C                     CCP2AS          equ	668	;# 
   594     029C                     ECCP2AS         equ	668	;# 
   595     029D                     PSTR2CON        equ	669	;# 
   596     029E                     CCPTMRS         equ	670	;# 
   597     029E                     CCPTMRS0        equ	670	;# 
   598     0311                     CCPR3           equ	785	;# 
   599     0311                     CCPR3L          equ	785	;# 
   600     0312                     CCPR3H          equ	786	;# 
   601     0313                     CCP3CON         equ	787	;# 
   602     0318                     CCPR4           equ	792	;# 
   603     0318                     CCPR4L          equ	792	;# 
   604     0319                     CCPR4H          equ	793	;# 
   605     031A                     CCP4CON         equ	794	;# 
   606     0394                     IOCBP           equ	916	;# 
   607     0395                     IOCBN           equ	917	;# 
   608     0396                     IOCBF           equ	918	;# 
   609     039A                     CLKRCON         equ	922	;# 
   610     039C                     MDCON           equ	924	;# 
   611     039D                     MDSRC           equ	925	;# 
   612     039E                     MDCARL          equ	926	;# 
   613     039F                     MDCARH          equ	927	;# 
   614     0415                     TMR4            equ	1045	;# 
   615     0416                     PR4             equ	1046	;# 
   616     0417                     T4CON           equ	1047	;# 
   617     041C                     TMR6            equ	1052	;# 
   618     041D                     PR6             equ	1053	;# 
   619     041E                     T6CON           equ	1054	;# 
   620     0FE4                     STATUS_SHAD     equ	4068	;# 
   621     0FE5                     WREG_SHAD       equ	4069	;# 
   622     0FE6                     BSR_SHAD        equ	4070	;# 
   623     0FE7                     PCLATH_SHAD     equ	4071	;# 
   624     0FE8                     FSR0L_SHAD      equ	4072	;# 
   625     0FE9                     FSR0H_SHAD      equ	4073	;# 
   626     0FEA                     FSR1L_SHAD      equ	4074	;# 
   627     0FEB                     FSR1H_SHAD      equ	4075	;# 
   628     0FED                     STKPTR          equ	4077	;# 
   629     0FEE                     TOSL            equ	4078	;# 
   630     0FEF                     TOSH            equ	4079	;# 
   631     0000                     INDF0           equ	0	;# 
   632     0001                     INDF1           equ	1	;# 
   633     0002                     PCL             equ	2	;# 
   634     0003                     STATUS          equ	3	;# 
   635     0004                     FSR0L           equ	4	;# 
   636     0005                     FSR0H           equ	5	;# 
   637     0006                     FSR1L           equ	6	;# 
   638     0007                     FSR1H           equ	7	;# 
   639     0008                     BSR             equ	8	;# 
   640     0009                     WREG            equ	9	;# 
   641     000A                     PCLATH          equ	10	;# 
   642     000B                     INTCON          equ	11	;# 
   643     000C                     PORTA           equ	12	;# 
   644     000D                     PORTB           equ	13	;# 
   645     0011                     PIR1            equ	17	;# 
   646     0012                     PIR2            equ	18	;# 
   647     0013                     PIR3            equ	19	;# 
   648     0014                     PIR4            equ	20	;# 
   649     0015                     TMR0            equ	21	;# 
   650     0016                     TMR1            equ	22	;# 
   651     0016                     TMR1L           equ	22	;# 
   652     0017                     TMR1H           equ	23	;# 
   653     0018                     T1CON           equ	24	;# 
   654     0019                     T1GCON          equ	25	;# 
   655     001A                     TMR2            equ	26	;# 
   656     001B                     PR2             equ	27	;# 
   657     001C                     T2CON           equ	28	;# 
   658     001E                     CPSCON0         equ	30	;# 
   659     001F                     CPSCON1         equ	31	;# 
   660     008C                     TRISA           equ	140	;# 
   661     008D                     TRISB           equ	141	;# 
   662     0091                     PIE1            equ	145	;# 
   663     0092                     PIE2            equ	146	;# 
   664     0093                     PIE3            equ	147	;# 
   665     0094                     PIE4            equ	148	;# 
   666     0095                     OPTION_REG      equ	149	;# 
   667     0096                     PCON            equ	150	;# 
   668     0097                     WDTCON          equ	151	;# 
   669     0098                     OSCTUNE         equ	152	;# 
   670     0099                     OSCCON          equ	153	;# 
   671     009A                     OSCSTAT         equ	154	;# 
   672     009B                     ADRES           equ	155	;# 
   673     009B                     ADRESL          equ	155	;# 
   674     009C                     ADRESH          equ	156	;# 
   675     009D                     ADCON0          equ	157	;# 
   676     009E                     ADCON1          equ	158	;# 
   677     010C                     LATA            equ	268	;# 
   678     010D                     LATB            equ	269	;# 
   679     0111                     CM1CON0         equ	273	;# 
   680     0112                     CM1CON1         equ	274	;# 
   681     0113                     CM2CON0         equ	275	;# 
   682     0114                     CM2CON1         equ	276	;# 
   683     0115                     CMOUT           equ	277	;# 
   684     0116                     BORCON          equ	278	;# 
   685     0117                     FVRCON          equ	279	;# 
   686     0118                     DACCON0         equ	280	;# 
   687     0119                     DACCON1         equ	281	;# 
   688     011A                     SRCON0          equ	282	;# 
   689     011B                     SRCON1          equ	283	;# 
   690     011D                     APFCON0         equ	285	;# 
   691     011E                     APFCON1         equ	286	;# 
   692     018C                     ANSELA          equ	396	;# 
   693     018D                     ANSELB          equ	397	;# 
   694     0191                     EEADR           equ	401	;# 
   695     0191                     EEADRL          equ	401	;# 
   696     0192                     EEADRH          equ	402	;# 
   697     0193                     EEDAT           equ	403	;# 
   698     0193                     EEDATL          equ	403	;# 
   699     0193                     EEDATA          equ	403	;# 
   700     0194                     EEDATH          equ	404	;# 
   701     0195                     EECON1          equ	405	;# 
   702     0196                     EECON2          equ	406	;# 
   703     0199                     RCREG           equ	409	;# 
   704     019A                     TXREG           equ	410	;# 
   705     019B                     SP1BRG          equ	411	;# 
   706     019B                     SP1BRGL         equ	411	;# 
   707     019B                     SPBRG           equ	411	;# 
   708     019B                     SPBRGL          equ	411	;# 
   709     019C                     SP1BRGH         equ	412	;# 
   710     019C                     SPBRGH          equ	412	;# 
   711     019D                     RCSTA           equ	413	;# 
   712     019E                     TXSTA           equ	414	;# 
   713     019F                     BAUDCON         equ	415	;# 
   714     020C                     WPUA            equ	524	;# 
   715     020D                     WPUB            equ	525	;# 
   716     0211                     SSP1BUF         equ	529	;# 
   717     0211                     SSPBUF          equ	529	;# 
   718     0212                     SSP1ADD         equ	530	;# 
   719     0212                     SSPADD          equ	530	;# 
   720     0213                     SSP1MSK         equ	531	;# 
   721     0213                     SSPMSK          equ	531	;# 
   722     0214                     SSP1STAT        equ	532	;# 
   723     0214                     SSPSTAT         equ	532	;# 
   724     0215                     SSP1CON1        equ	533	;# 
   725     0215                     SSPCON1         equ	533	;# 
   726     0215                     SSPCON          equ	533	;# 
   727     0216                     SSP1CON2        equ	534	;# 
   728     0216                     SSPCON2         equ	534	;# 
   729     0217                     SSP1CON3        equ	535	;# 
   730     0217                     SSPCON3         equ	535	;# 
   731     0219                     SSP2BUF         equ	537	;# 
   732     021A                     SSP2ADD         equ	538	;# 
   733     021B                     SSP2MSK         equ	539	;# 
   734     021C                     SSP2STAT        equ	540	;# 
   735     021D                     SSP2CON1        equ	541	;# 
   736     021E                     SSP2CON2        equ	542	;# 
   737     021F                     SSP2CON3        equ	543	;# 
   738     0291                     CCPR1           equ	657	;# 
   739     0291                     CCPR1L          equ	657	;# 
   740     0292                     CCPR1H          equ	658	;# 
   741     0293                     CCP1CON         equ	659	;# 
   742     0294                     PWM1CON         equ	660	;# 
   743     0295                     CCP1AS          equ	661	;# 
   744     0295                     ECCP1AS         equ	661	;# 
   745     0296                     PSTR1CON        equ	662	;# 
   746     0298                     CCPR2           equ	664	;# 
   747     0298                     CCPR2L          equ	664	;# 
   748     0299                     CCPR2H          equ	665	;# 
   749     029A                     CCP2CON         equ	666	;# 
   750     029B                     PWM2CON         equ	667	;# 
   751     029C                     CCP2AS          equ	668	;# 
   752     029C                     ECCP2AS         equ	668	;# 
   753     029D                     PSTR2CON        equ	669	;# 
   754     029E                     CCPTMRS         equ	670	;# 
   755     029E                     CCPTMRS0        equ	670	;# 
   756     0311                     CCPR3           equ	785	;# 
   757     0311                     CCPR3L          equ	785	;# 
   758     0312                     CCPR3H          equ	786	;# 
   759     0313                     CCP3CON         equ	787	;# 
   760     0318                     CCPR4           equ	792	;# 
   761     0318                     CCPR4L          equ	792	;# 
   762     0319                     CCPR4H          equ	793	;# 
   763     031A                     CCP4CON         equ	794	;# 
   764     0394                     IOCBP           equ	916	;# 
   765     0395                     IOCBN           equ	917	;# 
   766     0396                     IOCBF           equ	918	;# 
   767     039A                     CLKRCON         equ	922	;# 
   768     039C                     MDCON           equ	924	;# 
   769     039D                     MDSRC           equ	925	;# 
   770     039E                     MDCARL          equ	926	;# 
   771     039F                     MDCARH          equ	927	;# 
   772     0415                     TMR4            equ	1045	;# 
   773     0416                     PR4             equ	1046	;# 
   774     0417                     T4CON           equ	1047	;# 
   775     041C                     TMR6            equ	1052	;# 
   776     041D                     PR6             equ	1053	;# 
   777     041E                     T6CON           equ	1054	;# 
   778     0FE4                     STATUS_SHAD     equ	4068	;# 
   779     0FE5                     WREG_SHAD       equ	4069	;# 
   780     0FE6                     BSR_SHAD        equ	4070	;# 
   781     0FE7                     PCLATH_SHAD     equ	4071	;# 
   782     0FE8                     FSR0L_SHAD      equ	4072	;# 
   783     0FE9                     FSR0H_SHAD      equ	4073	;# 
   784     0FEA                     FSR1L_SHAD      equ	4074	;# 
   785     0FEB                     FSR1H_SHAD      equ	4075	;# 
   786     0FED                     STKPTR          equ	4077	;# 
   787     0FEE                     TOSL            equ	4078	;# 
   788     0FEF                     TOSH            equ	4079	;# 
   789     0000                     INDF0           equ	0	;# 
   790     0001                     INDF1           equ	1	;# 
   791     0002                     PCL             equ	2	;# 
   792     0003                     STATUS          equ	3	;# 
   793     0004                     FSR0L           equ	4	;# 
   794     0005                     FSR0H           equ	5	;# 
   795     0006                     FSR1L           equ	6	;# 
   796     0007                     FSR1H           equ	7	;# 
   797     0008                     BSR             equ	8	;# 
   798     0009                     WREG            equ	9	;# 
   799     000A                     PCLATH          equ	10	;# 
   800     000B                     INTCON          equ	11	;# 
   801     000C                     PORTA           equ	12	;# 
   802     000D                     PORTB           equ	13	;# 
   803     0011                     PIR1            equ	17	;# 
   804     0012                     PIR2            equ	18	;# 
   805     0013                     PIR3            equ	19	;# 
   806     0014                     PIR4            equ	20	;# 
   807     0015                     TMR0            equ	21	;# 
   808     0016                     TMR1            equ	22	;# 
   809     0016                     TMR1L           equ	22	;# 
   810     0017                     TMR1H           equ	23	;# 
   811     0018                     T1CON           equ	24	;# 
   812     0019                     T1GCON          equ	25	;# 
   813     001A                     TMR2            equ	26	;# 
   814     001B                     PR2             equ	27	;# 
   815     001C                     T2CON           equ	28	;# 
   816     001E                     CPSCON0         equ	30	;# 
   817     001F                     CPSCON1         equ	31	;# 
   818     008C                     TRISA           equ	140	;# 
   819     008D                     TRISB           equ	141	;# 
   820     0091                     PIE1            equ	145	;# 
   821     0092                     PIE2            equ	146	;# 
   822     0093                     PIE3            equ	147	;# 
   823     0094                     PIE4            equ	148	;# 
   824     0095                     OPTION_REG      equ	149	;# 
   825     0096                     PCON            equ	150	;# 
   826     0097                     WDTCON          equ	151	;# 
   827     0098                     OSCTUNE         equ	152	;# 
   828     0099                     OSCCON          equ	153	;# 
   829     009A                     OSCSTAT         equ	154	;# 
   830     009B                     ADRES           equ	155	;# 
   831     009B                     ADRESL          equ	155	;# 
   832     009C                     ADRESH          equ	156	;# 
   833     009D                     ADCON0          equ	157	;# 
   834     009E                     ADCON1          equ	158	;# 
   835     010C                     LATA            equ	268	;# 
   836     010D                     LATB            equ	269	;# 
   837     0111                     CM1CON0         equ	273	;# 
   838     0112                     CM1CON1         equ	274	;# 
   839     0113                     CM2CON0         equ	275	;# 
   840     0114                     CM2CON1         equ	276	;# 
   841     0115                     CMOUT           equ	277	;# 
   842     0116                     BORCON          equ	278	;# 
   843     0117                     FVRCON          equ	279	;# 
   844     0118                     DACCON0         equ	280	;# 
   845     0119                     DACCON1         equ	281	;# 
   846     011A                     SRCON0          equ	282	;# 
   847     011B                     SRCON1          equ	283	;# 
   848     011D                     APFCON0         equ	285	;# 
   849     011E                     APFCON1         equ	286	;# 
   850     018C                     ANSELA          equ	396	;# 
   851     018D                     ANSELB          equ	397	;# 
   852     0191                     EEADR           equ	401	;# 
   853     0191                     EEADRL          equ	401	;# 
   854     0192                     EEADRH          equ	402	;# 
   855     0193                     EEDAT           equ	403	;# 
   856     0193                     EEDATL          equ	403	;# 
   857     0193                     EEDATA          equ	403	;# 
   858     0194                     EEDATH          equ	404	;# 
   859     0195                     EECON1          equ	405	;# 
   860     0196                     EECON2          equ	406	;# 
   861     0199                     RCREG           equ	409	;# 
   862     019A                     TXREG           equ	410	;# 
   863     019B                     SP1BRG          equ	411	;# 
   864     019B                     SP1BRGL         equ	411	;# 
   865     019B                     SPBRG           equ	411	;# 
   866     019B                     SPBRGL          equ	411	;# 
   867     019C                     SP1BRGH         equ	412	;# 
   868     019C                     SPBRGH          equ	412	;# 
   869     019D                     RCSTA           equ	413	;# 
   870     019E                     TXSTA           equ	414	;# 
   871     019F                     BAUDCON         equ	415	;# 
   872     020C                     WPUA            equ	524	;# 
   873     020D                     WPUB            equ	525	;# 
   874     0211                     SSP1BUF         equ	529	;# 
   875     0211                     SSPBUF          equ	529	;# 
   876     0212                     SSP1ADD         equ	530	;# 
   877     0212                     SSPADD          equ	530	;# 
   878     0213                     SSP1MSK         equ	531	;# 
   879     0213                     SSPMSK          equ	531	;# 
   880     0214                     SSP1STAT        equ	532	;# 
   881     0214                     SSPSTAT         equ	532	;# 
   882     0215                     SSP1CON1        equ	533	;# 
   883     0215                     SSPCON1         equ	533	;# 
   884     0215                     SSPCON          equ	533	;# 
   885     0216                     SSP1CON2        equ	534	;# 
   886     0216                     SSPCON2         equ	534	;# 
   887     0217                     SSP1CON3        equ	535	;# 
   888     0217                     SSPCON3         equ	535	;# 
   889     0219                     SSP2BUF         equ	537	;# 
   890     021A                     SSP2ADD         equ	538	;# 
   891     021B                     SSP2MSK         equ	539	;# 
   892     021C                     SSP2STAT        equ	540	;# 
   893     021D                     SSP2CON1        equ	541	;# 
   894     021E                     SSP2CON2        equ	542	;# 
   895     021F                     SSP2CON3        equ	543	;# 
   896     0291                     CCPR1           equ	657	;# 
   897     0291                     CCPR1L          equ	657	;# 
   898     0292                     CCPR1H          equ	658	;# 
   899     0293                     CCP1CON         equ	659	;# 
   900     0294                     PWM1CON         equ	660	;# 
   901     0295                     CCP1AS          equ	661	;# 
   902     0295                     ECCP1AS         equ	661	;# 
   903     0296                     PSTR1CON        equ	662	;# 
   904     0298                     CCPR2           equ	664	;# 
   905     0298                     CCPR2L          equ	664	;# 
   906     0299                     CCPR2H          equ	665	;# 
   907     029A                     CCP2CON         equ	666	;# 
   908     029B                     PWM2CON         equ	667	;# 
   909     029C                     CCP2AS          equ	668	;# 
   910     029C                     ECCP2AS         equ	668	;# 
   911     029D                     PSTR2CON        equ	669	;# 
   912     029E                     CCPTMRS         equ	670	;# 
   913     029E                     CCPTMRS0        equ	670	;# 
   914     0311                     CCPR3           equ	785	;# 
   915     0311                     CCPR3L          equ	785	;# 
   916     0312                     CCPR3H          equ	786	;# 
   917     0313                     CCP3CON         equ	787	;# 
   918     0318                     CCPR4           equ	792	;# 
   919     0318                     CCPR4L          equ	792	;# 
   920     0319                     CCPR4H          equ	793	;# 
   921     031A                     CCP4CON         equ	794	;# 
   922     0394                     IOCBP           equ	916	;# 
   923     0395                     IOCBN           equ	917	;# 
   924     0396                     IOCBF           equ	918	;# 
   925     039A                     CLKRCON         equ	922	;# 
   926     039C                     MDCON           equ	924	;# 
   927     039D                     MDSRC           equ	925	;# 
   928     039E                     MDCARL          equ	926	;# 
   929     039F                     MDCARH          equ	927	;# 
   930     0415                     TMR4            equ	1045	;# 
   931     0416                     PR4             equ	1046	;# 
   932     0417                     T4CON           equ	1047	;# 
   933     041C                     TMR6            equ	1052	;# 
   934     041D                     PR6             equ	1053	;# 
   935     041E                     T6CON           equ	1054	;# 
   936     0FE4                     STATUS_SHAD     equ	4068	;# 
   937     0FE5                     WREG_SHAD       equ	4069	;# 
   938     0FE6                     BSR_SHAD        equ	4070	;# 
   939     0FE7                     PCLATH_SHAD     equ	4071	;# 
   940     0FE8                     FSR0L_SHAD      equ	4072	;# 
   941     0FE9                     FSR0H_SHAD      equ	4073	;# 
   942     0FEA                     FSR1L_SHAD      equ	4074	;# 
   943     0FEB                     FSR1H_SHAD      equ	4075	;# 
   944     0FED                     STKPTR          equ	4077	;# 
   945     0FEE                     TOSL            equ	4078	;# 
   946     0FEF                     TOSH            equ	4079	;# 
   947     0000                     INDF0           equ	0	;# 
   948     0001                     INDF1           equ	1	;# 
   949     0002                     PCL             equ	2	;# 
   950     0003                     STATUS          equ	3	;# 
   951     0004                     FSR0L           equ	4	;# 
   952     0005                     FSR0H           equ	5	;# 
   953     0006                     FSR1L           equ	6	;# 
   954     0007                     FSR1H           equ	7	;# 
   955     0008                     BSR             equ	8	;# 
   956     0009                     WREG            equ	9	;# 
   957     000A                     PCLATH          equ	10	;# 
   958     000B                     INTCON          equ	11	;# 
   959     000C                     PORTA           equ	12	;# 
   960     000D                     PORTB           equ	13	;# 
   961     0011                     PIR1            equ	17	;# 
   962     0012                     PIR2            equ	18	;# 
   963     0013                     PIR3            equ	19	;# 
   964     0014                     PIR4            equ	20	;# 
   965     0015                     TMR0            equ	21	;# 
   966     0016                     TMR1            equ	22	;# 
   967     0016                     TMR1L           equ	22	;# 
   968     0017                     TMR1H           equ	23	;# 
   969     0018                     T1CON           equ	24	;# 
   970     0019                     T1GCON          equ	25	;# 
   971     001A                     TMR2            equ	26	;# 
   972     001B                     PR2             equ	27	;# 
   973     001C                     T2CON           equ	28	;# 
   974     001E                     CPSCON0         equ	30	;# 
   975     001F                     CPSCON1         equ	31	;# 
   976     008C                     TRISA           equ	140	;# 
   977     008D                     TRISB           equ	141	;# 
   978     0091                     PIE1            equ	145	;# 
   979     0092                     PIE2            equ	146	;# 
   980     0093                     PIE3            equ	147	;# 
   981     0094                     PIE4            equ	148	;# 
   982     0095                     OPTION_REG      equ	149	;# 
   983     0096                     PCON            equ	150	;# 
   984     0097                     WDTCON          equ	151	;# 
   985     0098                     OSCTUNE         equ	152	;# 
   986     0099                     OSCCON          equ	153	;# 
   987     009A                     OSCSTAT         equ	154	;# 
   988     009B                     ADRES           equ	155	;# 
   989     009B                     ADRESL          equ	155	;# 
   990     009C                     ADRESH          equ	156	;# 
   991     009D                     ADCON0          equ	157	;# 
   992     009E                     ADCON1          equ	158	;# 
   993     010C                     LATA            equ	268	;# 
   994     010D                     LATB            equ	269	;# 
   995     0111                     CM1CON0         equ	273	;# 
   996     0112                     CM1CON1         equ	274	;# 
   997     0113                     CM2CON0         equ	275	;# 
   998     0114                     CM2CON1         equ	276	;# 
   999     0115                     CMOUT           equ	277	;# 
  1000     0116                     BORCON          equ	278	;# 
  1001     0117                     FVRCON          equ	279	;# 
  1002     0118                     DACCON0         equ	280	;# 
  1003     0119                     DACCON1         equ	281	;# 
  1004     011A                     SRCON0          equ	282	;# 
  1005     011B                     SRCON1          equ	283	;# 
  1006     011D                     APFCON0         equ	285	;# 
  1007     011E                     APFCON1         equ	286	;# 
  1008     018C                     ANSELA          equ	396	;# 
  1009     018D                     ANSELB          equ	397	;# 
  1010     0191                     EEADR           equ	401	;# 
  1011     0191                     EEADRL          equ	401	;# 
  1012     0192                     EEADRH          equ	402	;# 
  1013     0193                     EEDAT           equ	403	;# 
  1014     0193                     EEDATL          equ	403	;# 
  1015     0193                     EEDATA          equ	403	;# 
  1016     0194                     EEDATH          equ	404	;# 
  1017     0195                     EECON1          equ	405	;# 
  1018     0196                     EECON2          equ	406	;# 
  1019     0199                     RCREG           equ	409	;# 
  1020     019A                     TXREG           equ	410	;# 
  1021     019B                     SP1BRG          equ	411	;# 
  1022     019B                     SP1BRGL         equ	411	;# 
  1023     019B                     SPBRG           equ	411	;# 
  1024     019B                     SPBRGL          equ	411	;# 
  1025     019C                     SP1BRGH         equ	412	;# 
  1026     019C                     SPBRGH          equ	412	;# 
  1027     019D                     RCSTA           equ	413	;# 
  1028     019E                     TXSTA           equ	414	;# 
  1029     019F                     BAUDCON         equ	415	;# 
  1030     020C                     WPUA            equ	524	;# 
  1031     020D                     WPUB            equ	525	;# 
  1032     0211                     SSP1BUF         equ	529	;# 
  1033     0211                     SSPBUF          equ	529	;# 
  1034     0212                     SSP1ADD         equ	530	;# 
  1035     0212                     SSPADD          equ	530	;# 
  1036     0213                     SSP1MSK         equ	531	;# 
  1037     0213                     SSPMSK          equ	531	;# 
  1038     0214                     SSP1STAT        equ	532	;# 
  1039     0214                     SSPSTAT         equ	532	;# 
  1040     0215                     SSP1CON1        equ	533	;# 
  1041     0215                     SSPCON1         equ	533	;# 
  1042     0215                     SSPCON          equ	533	;# 
  1043     0216                     SSP1CON2        equ	534	;# 
  1044     0216                     SSPCON2         equ	534	;# 
  1045     0217                     SSP1CON3        equ	535	;# 
  1046     0217                     SSPCON3         equ	535	;# 
  1047     0219                     SSP2BUF         equ	537	;# 
  1048     021A                     SSP2ADD         equ	538	;# 
  1049     021B                     SSP2MSK         equ	539	;# 
  1050     021C                     SSP2STAT        equ	540	;# 
  1051     021D                     SSP2CON1        equ	541	;# 
  1052     021E                     SSP2CON2        equ	542	;# 
  1053     021F                     SSP2CON3        equ	543	;# 
  1054     0291                     CCPR1           equ	657	;# 
  1055     0291                     CCPR1L          equ	657	;# 
  1056     0292                     CCPR1H          equ	658	;# 
  1057     0293                     CCP1CON         equ	659	;# 
  1058     0294                     PWM1CON         equ	660	;# 
  1059     0295                     CCP1AS          equ	661	;# 
  1060     0295                     ECCP1AS         equ	661	;# 
  1061     0296                     PSTR1CON        equ	662	;# 
  1062     0298                     CCPR2           equ	664	;# 
  1063     0298                     CCPR2L          equ	664	;# 
  1064     0299                     CCPR2H          equ	665	;# 
  1065     029A                     CCP2CON         equ	666	;# 
  1066     029B                     PWM2CON         equ	667	;# 
  1067     029C                     CCP2AS          equ	668	;# 
  1068     029C                     ECCP2AS         equ	668	;# 
  1069     029D                     PSTR2CON        equ	669	;# 
  1070     029E                     CCPTMRS         equ	670	;# 
  1071     029E                     CCPTMRS0        equ	670	;# 
  1072     0311                     CCPR3           equ	785	;# 
  1073     0311                     CCPR3L          equ	785	;# 
  1074     0312                     CCPR3H          equ	786	;# 
  1075     0313                     CCP3CON         equ	787	;# 
  1076     0318                     CCPR4           equ	792	;# 
  1077     0318                     CCPR4L          equ	792	;# 
  1078     0319                     CCPR4H          equ	793	;# 
  1079     031A                     CCP4CON         equ	794	;# 
  1080     0394                     IOCBP           equ	916	;# 
  1081     0395                     IOCBN           equ	917	;# 
  1082     0396                     IOCBF           equ	918	;# 
  1083     039A                     CLKRCON         equ	922	;# 
  1084     039C                     MDCON           equ	924	;# 
  1085     039D                     MDSRC           equ	925	;# 
  1086     039E                     MDCARL          equ	926	;# 
  1087     039F                     MDCARH          equ	927	;# 
  1088     0415                     TMR4            equ	1045	;# 
  1089     0416                     PR4             equ	1046	;# 
  1090     0417                     T4CON           equ	1047	;# 
  1091     041C                     TMR6            equ	1052	;# 
  1092     041D                     PR6             equ	1053	;# 
  1093     041E                     T6CON           equ	1054	;# 
  1094     0FE4                     STATUS_SHAD     equ	4068	;# 
  1095     0FE5                     WREG_SHAD       equ	4069	;# 
  1096     0FE6                     BSR_SHAD        equ	4070	;# 
  1097     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1098     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1099     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1100     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1101     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1102     0FED                     STKPTR          equ	4077	;# 
  1103     0FEE                     TOSL            equ	4078	;# 
  1104     0FEF                     TOSH            equ	4079	;# 
  1105     0000                     INDF0           equ	0	;# 
  1106     0001                     INDF1           equ	1	;# 
  1107     0002                     PCL             equ	2	;# 
  1108     0003                     STATUS          equ	3	;# 
  1109     0004                     FSR0L           equ	4	;# 
  1110     0005                     FSR0H           equ	5	;# 
  1111     0006                     FSR1L           equ	6	;# 
  1112     0007                     FSR1H           equ	7	;# 
  1113     0008                     BSR             equ	8	;# 
  1114     0009                     WREG            equ	9	;# 
  1115     000A                     PCLATH          equ	10	;# 
  1116     000B                     INTCON          equ	11	;# 
  1117     000C                     PORTA           equ	12	;# 
  1118     000D                     PORTB           equ	13	;# 
  1119     0011                     PIR1            equ	17	;# 
  1120     0012                     PIR2            equ	18	;# 
  1121     0013                     PIR3            equ	19	;# 
  1122     0014                     PIR4            equ	20	;# 
  1123     0015                     TMR0            equ	21	;# 
  1124     0016                     TMR1            equ	22	;# 
  1125     0016                     TMR1L           equ	22	;# 
  1126     0017                     TMR1H           equ	23	;# 
  1127     0018                     T1CON           equ	24	;# 
  1128     0019                     T1GCON          equ	25	;# 
  1129     001A                     TMR2            equ	26	;# 
  1130     001B                     PR2             equ	27	;# 
  1131     001C                     T2CON           equ	28	;# 
  1132     001E                     CPSCON0         equ	30	;# 
  1133     001F                     CPSCON1         equ	31	;# 
  1134     008C                     TRISA           equ	140	;# 
  1135     008D                     TRISB           equ	141	;# 
  1136     0091                     PIE1            equ	145	;# 
  1137     0092                     PIE2            equ	146	;# 
  1138     0093                     PIE3            equ	147	;# 
  1139     0094                     PIE4            equ	148	;# 
  1140     0095                     OPTION_REG      equ	149	;# 
  1141     0096                     PCON            equ	150	;# 
  1142     0097                     WDTCON          equ	151	;# 
  1143     0098                     OSCTUNE         equ	152	;# 
  1144     0099                     OSCCON          equ	153	;# 
  1145     009A                     OSCSTAT         equ	154	;# 
  1146     009B                     ADRES           equ	155	;# 
  1147     009B                     ADRESL          equ	155	;# 
  1148     009C                     ADRESH          equ	156	;# 
  1149     009D                     ADCON0          equ	157	;# 
  1150     009E                     ADCON1          equ	158	;# 
  1151     010C                     LATA            equ	268	;# 
  1152     010D                     LATB            equ	269	;# 
  1153     0111                     CM1CON0         equ	273	;# 
  1154     0112                     CM1CON1         equ	274	;# 
  1155     0113                     CM2CON0         equ	275	;# 
  1156     0114                     CM2CON1         equ	276	;# 
  1157     0115                     CMOUT           equ	277	;# 
  1158     0116                     BORCON          equ	278	;# 
  1159     0117                     FVRCON          equ	279	;# 
  1160     0118                     DACCON0         equ	280	;# 
  1161     0119                     DACCON1         equ	281	;# 
  1162     011A                     SRCON0          equ	282	;# 
  1163     011B                     SRCON1          equ	283	;# 
  1164     011D                     APFCON0         equ	285	;# 
  1165     011E                     APFCON1         equ	286	;# 
  1166     018C                     ANSELA          equ	396	;# 
  1167     018D                     ANSELB          equ	397	;# 
  1168     0191                     EEADR           equ	401	;# 
  1169     0191                     EEADRL          equ	401	;# 
  1170     0192                     EEADRH          equ	402	;# 
  1171     0193                     EEDAT           equ	403	;# 
  1172     0193                     EEDATL          equ	403	;# 
  1173     0193                     EEDATA          equ	403	;# 
  1174     0194                     EEDATH          equ	404	;# 
  1175     0195                     EECON1          equ	405	;# 
  1176     0196                     EECON2          equ	406	;# 
  1177     0199                     RCREG           equ	409	;# 
  1178     019A                     TXREG           equ	410	;# 
  1179     019B                     SP1BRG          equ	411	;# 
  1180     019B                     SP1BRGL         equ	411	;# 
  1181     019B                     SPBRG           equ	411	;# 
  1182     019B                     SPBRGL          equ	411	;# 
  1183     019C                     SP1BRGH         equ	412	;# 
  1184     019C                     SPBRGH          equ	412	;# 
  1185     019D                     RCSTA           equ	413	;# 
  1186     019E                     TXSTA           equ	414	;# 
  1187     019F                     BAUDCON         equ	415	;# 
  1188     020C                     WPUA            equ	524	;# 
  1189     020D                     WPUB            equ	525	;# 
  1190     0211                     SSP1BUF         equ	529	;# 
  1191     0211                     SSPBUF          equ	529	;# 
  1192     0212                     SSP1ADD         equ	530	;# 
  1193     0212                     SSPADD          equ	530	;# 
  1194     0213                     SSP1MSK         equ	531	;# 
  1195     0213                     SSPMSK          equ	531	;# 
  1196     0214                     SSP1STAT        equ	532	;# 
  1197     0214                     SSPSTAT         equ	532	;# 
  1198     0215                     SSP1CON1        equ	533	;# 
  1199     0215                     SSPCON1         equ	533	;# 
  1200     0215                     SSPCON          equ	533	;# 
  1201     0216                     SSP1CON2        equ	534	;# 
  1202     0216                     SSPCON2         equ	534	;# 
  1203     0217                     SSP1CON3        equ	535	;# 
  1204     0217                     SSPCON3         equ	535	;# 
  1205     0219                     SSP2BUF         equ	537	;# 
  1206     021A                     SSP2ADD         equ	538	;# 
  1207     021B                     SSP2MSK         equ	539	;# 
  1208     021C                     SSP2STAT        equ	540	;# 
  1209     021D                     SSP2CON1        equ	541	;# 
  1210     021E                     SSP2CON2        equ	542	;# 
  1211     021F                     SSP2CON3        equ	543	;# 
  1212     0291                     CCPR1           equ	657	;# 
  1213     0291                     CCPR1L          equ	657	;# 
  1214     0292                     CCPR1H          equ	658	;# 
  1215     0293                     CCP1CON         equ	659	;# 
  1216     0294                     PWM1CON         equ	660	;# 
  1217     0295                     CCP1AS          equ	661	;# 
  1218     0295                     ECCP1AS         equ	661	;# 
  1219     0296                     PSTR1CON        equ	662	;# 
  1220     0298                     CCPR2           equ	664	;# 
  1221     0298                     CCPR2L          equ	664	;# 
  1222     0299                     CCPR2H          equ	665	;# 
  1223     029A                     CCP2CON         equ	666	;# 
  1224     029B                     PWM2CON         equ	667	;# 
  1225     029C                     CCP2AS          equ	668	;# 
  1226     029C                     ECCP2AS         equ	668	;# 
  1227     029D                     PSTR2CON        equ	669	;# 
  1228     029E                     CCPTMRS         equ	670	;# 
  1229     029E                     CCPTMRS0        equ	670	;# 
  1230     0311                     CCPR3           equ	785	;# 
  1231     0311                     CCPR3L          equ	785	;# 
  1232     0312                     CCPR3H          equ	786	;# 
  1233     0313                     CCP3CON         equ	787	;# 
  1234     0318                     CCPR4           equ	792	;# 
  1235     0318                     CCPR4L          equ	792	;# 
  1236     0319                     CCPR4H          equ	793	;# 
  1237     031A                     CCP4CON         equ	794	;# 
  1238     0394                     IOCBP           equ	916	;# 
  1239     0395                     IOCBN           equ	917	;# 
  1240     0396                     IOCBF           equ	918	;# 
  1241     039A                     CLKRCON         equ	922	;# 
  1242     039C                     MDCON           equ	924	;# 
  1243     039D                     MDSRC           equ	925	;# 
  1244     039E                     MDCARL          equ	926	;# 
  1245     039F                     MDCARH          equ	927	;# 
  1246     0415                     TMR4            equ	1045	;# 
  1247     0416                     PR4             equ	1046	;# 
  1248     0417                     T4CON           equ	1047	;# 
  1249     041C                     TMR6            equ	1052	;# 
  1250     041D                     PR6             equ	1053	;# 
  1251     041E                     T6CON           equ	1054	;# 
  1252     0FE4                     STATUS_SHAD     equ	4068	;# 
  1253     0FE5                     WREG_SHAD       equ	4069	;# 
  1254     0FE6                     BSR_SHAD        equ	4070	;# 
  1255     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1256     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1257     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1258     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1259     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1260     0FED                     STKPTR          equ	4077	;# 
  1261     0FEE                     TOSL            equ	4078	;# 
  1262     0FEF                     TOSH            equ	4079	;# 
  1263     0000                     INDF0           equ	0	;# 
  1264     0001                     INDF1           equ	1	;# 
  1265     0002                     PCL             equ	2	;# 
  1266     0003                     STATUS          equ	3	;# 
  1267     0004                     FSR0L           equ	4	;# 
  1268     0005                     FSR0H           equ	5	;# 
  1269     0006                     FSR1L           equ	6	;# 
  1270     0007                     FSR1H           equ	7	;# 
  1271     0008                     BSR             equ	8	;# 
  1272     0009                     WREG            equ	9	;# 
  1273     000A                     PCLATH          equ	10	;# 
  1274     000B                     INTCON          equ	11	;# 
  1275     000C                     PORTA           equ	12	;# 
  1276     000D                     PORTB           equ	13	;# 
  1277     0011                     PIR1            equ	17	;# 
  1278     0012                     PIR2            equ	18	;# 
  1279     0013                     PIR3            equ	19	;# 
  1280     0014                     PIR4            equ	20	;# 
  1281     0015                     TMR0            equ	21	;# 
  1282     0016                     TMR1            equ	22	;# 
  1283     0016                     TMR1L           equ	22	;# 
  1284     0017                     TMR1H           equ	23	;# 
  1285     0018                     T1CON           equ	24	;# 
  1286     0019                     T1GCON          equ	25	;# 
  1287     001A                     TMR2            equ	26	;# 
  1288     001B                     PR2             equ	27	;# 
  1289     001C                     T2CON           equ	28	;# 
  1290     001E                     CPSCON0         equ	30	;# 
  1291     001F                     CPSCON1         equ	31	;# 
  1292     008C                     TRISA           equ	140	;# 
  1293     008D                     TRISB           equ	141	;# 
  1294     0091                     PIE1            equ	145	;# 
  1295     0092                     PIE2            equ	146	;# 
  1296     0093                     PIE3            equ	147	;# 
  1297     0094                     PIE4            equ	148	;# 
  1298     0095                     OPTION_REG      equ	149	;# 
  1299     0096                     PCON            equ	150	;# 
  1300     0097                     WDTCON          equ	151	;# 
  1301     0098                     OSCTUNE         equ	152	;# 
  1302     0099                     OSCCON          equ	153	;# 
  1303     009A                     OSCSTAT         equ	154	;# 
  1304     009B                     ADRES           equ	155	;# 
  1305     009B                     ADRESL          equ	155	;# 
  1306     009C                     ADRESH          equ	156	;# 
  1307     009D                     ADCON0          equ	157	;# 
  1308     009E                     ADCON1          equ	158	;# 
  1309     010C                     LATA            equ	268	;# 
  1310     010D                     LATB            equ	269	;# 
  1311     0111                     CM1CON0         equ	273	;# 
  1312     0112                     CM1CON1         equ	274	;# 
  1313     0113                     CM2CON0         equ	275	;# 
  1314     0114                     CM2CON1         equ	276	;# 
  1315     0115                     CMOUT           equ	277	;# 
  1316     0116                     BORCON          equ	278	;# 
  1317     0117                     FVRCON          equ	279	;# 
  1318     0118                     DACCON0         equ	280	;# 
  1319     0119                     DACCON1         equ	281	;# 
  1320     011A                     SRCON0          equ	282	;# 
  1321     011B                     SRCON1          equ	283	;# 
  1322     011D                     APFCON0         equ	285	;# 
  1323     011E                     APFCON1         equ	286	;# 
  1324     018C                     ANSELA          equ	396	;# 
  1325     018D                     ANSELB          equ	397	;# 
  1326     0191                     EEADR           equ	401	;# 
  1327     0191                     EEADRL          equ	401	;# 
  1328     0192                     EEADRH          equ	402	;# 
  1329     0193                     EEDAT           equ	403	;# 
  1330     0193                     EEDATL          equ	403	;# 
  1331     0193                     EEDATA          equ	403	;# 
  1332     0194                     EEDATH          equ	404	;# 
  1333     0195                     EECON1          equ	405	;# 
  1334     0196                     EECON2          equ	406	;# 
  1335     0199                     RCREG           equ	409	;# 
  1336     019A                     TXREG           equ	410	;# 
  1337     019B                     SP1BRG          equ	411	;# 
  1338     019B                     SP1BRGL         equ	411	;# 
  1339     019B                     SPBRG           equ	411	;# 
  1340     019B                     SPBRGL          equ	411	;# 
  1341     019C                     SP1BRGH         equ	412	;# 
  1342     019C                     SPBRGH          equ	412	;# 
  1343     019D                     RCSTA           equ	413	;# 
  1344     019E                     TXSTA           equ	414	;# 
  1345     019F                     BAUDCON         equ	415	;# 
  1346     020C                     WPUA            equ	524	;# 
  1347     020D                     WPUB            equ	525	;# 
  1348     0211                     SSP1BUF         equ	529	;# 
  1349     0211                     SSPBUF          equ	529	;# 
  1350     0212                     SSP1ADD         equ	530	;# 
  1351     0212                     SSPADD          equ	530	;# 
  1352     0213                     SSP1MSK         equ	531	;# 
  1353     0213                     SSPMSK          equ	531	;# 
  1354     0214                     SSP1STAT        equ	532	;# 
  1355     0214                     SSPSTAT         equ	532	;# 
  1356     0215                     SSP1CON1        equ	533	;# 
  1357     0215                     SSPCON1         equ	533	;# 
  1358     0215                     SSPCON          equ	533	;# 
  1359     0216                     SSP1CON2        equ	534	;# 
  1360     0216                     SSPCON2         equ	534	;# 
  1361     0217                     SSP1CON3        equ	535	;# 
  1362     0217                     SSPCON3         equ	535	;# 
  1363     0219                     SSP2BUF         equ	537	;# 
  1364     021A                     SSP2ADD         equ	538	;# 
  1365     021B                     SSP2MSK         equ	539	;# 
  1366     021C                     SSP2STAT        equ	540	;# 
  1367     021D                     SSP2CON1        equ	541	;# 
  1368     021E                     SSP2CON2        equ	542	;# 
  1369     021F                     SSP2CON3        equ	543	;# 
  1370     0291                     CCPR1           equ	657	;# 
  1371     0291                     CCPR1L          equ	657	;# 
  1372     0292                     CCPR1H          equ	658	;# 
  1373     0293                     CCP1CON         equ	659	;# 
  1374     0294                     PWM1CON         equ	660	;# 
  1375     0295                     CCP1AS          equ	661	;# 
  1376     0295                     ECCP1AS         equ	661	;# 
  1377     0296                     PSTR1CON        equ	662	;# 
  1378     0298                     CCPR2           equ	664	;# 
  1379     0298                     CCPR2L          equ	664	;# 
  1380     0299                     CCPR2H          equ	665	;# 
  1381     029A                     CCP2CON         equ	666	;# 
  1382     029B                     PWM2CON         equ	667	;# 
  1383     029C                     CCP2AS          equ	668	;# 
  1384     029C                     ECCP2AS         equ	668	;# 
  1385     029D                     PSTR2CON        equ	669	;# 
  1386     029E                     CCPTMRS         equ	670	;# 
  1387     029E                     CCPTMRS0        equ	670	;# 
  1388     0311                     CCPR3           equ	785	;# 
  1389     0311                     CCPR3L          equ	785	;# 
  1390     0312                     CCPR3H          equ	786	;# 
  1391     0313                     CCP3CON         equ	787	;# 
  1392     0318                     CCPR4           equ	792	;# 
  1393     0318                     CCPR4L          equ	792	;# 
  1394     0319                     CCPR4H          equ	793	;# 
  1395     031A                     CCP4CON         equ	794	;# 
  1396     0394                     IOCBP           equ	916	;# 
  1397     0395                     IOCBN           equ	917	;# 
  1398     0396                     IOCBF           equ	918	;# 
  1399     039A                     CLKRCON         equ	922	;# 
  1400     039C                     MDCON           equ	924	;# 
  1401     039D                     MDSRC           equ	925	;# 
  1402     039E                     MDCARL          equ	926	;# 
  1403     039F                     MDCARH          equ	927	;# 
  1404     0415                     TMR4            equ	1045	;# 
  1405     0416                     PR4             equ	1046	;# 
  1406     0417                     T4CON           equ	1047	;# 
  1407     041C                     TMR6            equ	1052	;# 
  1408     041D                     PR6             equ	1053	;# 
  1409     041E                     T6CON           equ	1054	;# 
  1410     0FE4                     STATUS_SHAD     equ	4068	;# 
  1411     0FE5                     WREG_SHAD       equ	4069	;# 
  1412     0FE6                     BSR_SHAD        equ	4070	;# 
  1413     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1414     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1415     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1416     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1417     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1418     0FED                     STKPTR          equ	4077	;# 
  1419     0FEE                     TOSL            equ	4078	;# 
  1420     0FEF                     TOSH            equ	4079	;# 
  1421     0000                     INDF0           equ	0	;# 
  1422     0001                     INDF1           equ	1	;# 
  1423     0002                     PCL             equ	2	;# 
  1424     0003                     STATUS          equ	3	;# 
  1425     0004                     FSR0L           equ	4	;# 
  1426     0005                     FSR0H           equ	5	;# 
  1427     0006                     FSR1L           equ	6	;# 
  1428     0007                     FSR1H           equ	7	;# 
  1429     0008                     BSR             equ	8	;# 
  1430     0009                     WREG            equ	9	;# 
  1431     000A                     PCLATH          equ	10	;# 
  1432     000B                     INTCON          equ	11	;# 
  1433     000C                     PORTA           equ	12	;# 
  1434     000D                     PORTB           equ	13	;# 
  1435     0011                     PIR1            equ	17	;# 
  1436     0012                     PIR2            equ	18	;# 
  1437     0013                     PIR3            equ	19	;# 
  1438     0014                     PIR4            equ	20	;# 
  1439     0015                     TMR0            equ	21	;# 
  1440     0016                     TMR1            equ	22	;# 
  1441     0016                     TMR1L           equ	22	;# 
  1442     0017                     TMR1H           equ	23	;# 
  1443     0018                     T1CON           equ	24	;# 
  1444     0019                     T1GCON          equ	25	;# 
  1445     001A                     TMR2            equ	26	;# 
  1446     001B                     PR2             equ	27	;# 
  1447     001C                     T2CON           equ	28	;# 
  1448     001E                     CPSCON0         equ	30	;# 
  1449     001F                     CPSCON1         equ	31	;# 
  1450     008C                     TRISA           equ	140	;# 
  1451     008D                     TRISB           equ	141	;# 
  1452     0091                     PIE1            equ	145	;# 
  1453     0092                     PIE2            equ	146	;# 
  1454     0093                     PIE3            equ	147	;# 
  1455     0094                     PIE4            equ	148	;# 
  1456     0095                     OPTION_REG      equ	149	;# 
  1457     0096                     PCON            equ	150	;# 
  1458     0097                     WDTCON          equ	151	;# 
  1459     0098                     OSCTUNE         equ	152	;# 
  1460     0099                     OSCCON          equ	153	;# 
  1461     009A                     OSCSTAT         equ	154	;# 
  1462     009B                     ADRES           equ	155	;# 
  1463     009B                     ADRESL          equ	155	;# 
  1464     009C                     ADRESH          equ	156	;# 
  1465     009D                     ADCON0          equ	157	;# 
  1466     009E                     ADCON1          equ	158	;# 
  1467     010C                     LATA            equ	268	;# 
  1468     010D                     LATB            equ	269	;# 
  1469     0111                     CM1CON0         equ	273	;# 
  1470     0112                     CM1CON1         equ	274	;# 
  1471     0113                     CM2CON0         equ	275	;# 
  1472     0114                     CM2CON1         equ	276	;# 
  1473     0115                     CMOUT           equ	277	;# 
  1474     0116                     BORCON          equ	278	;# 
  1475     0117                     FVRCON          equ	279	;# 
  1476     0118                     DACCON0         equ	280	;# 
  1477     0119                     DACCON1         equ	281	;# 
  1478     011A                     SRCON0          equ	282	;# 
  1479     011B                     SRCON1          equ	283	;# 
  1480     011D                     APFCON0         equ	285	;# 
  1481     011E                     APFCON1         equ	286	;# 
  1482     018C                     ANSELA          equ	396	;# 
  1483     018D                     ANSELB          equ	397	;# 
  1484     0191                     EEADR           equ	401	;# 
  1485     0191                     EEADRL          equ	401	;# 
  1486     0192                     EEADRH          equ	402	;# 
  1487     0193                     EEDAT           equ	403	;# 
  1488     0193                     EEDATL          equ	403	;# 
  1489     0193                     EEDATA          equ	403	;# 
  1490     0194                     EEDATH          equ	404	;# 
  1491     0195                     EECON1          equ	405	;# 
  1492     0196                     EECON2          equ	406	;# 
  1493     0199                     RCREG           equ	409	;# 
  1494     019A                     TXREG           equ	410	;# 
  1495     019B                     SP1BRG          equ	411	;# 
  1496     019B                     SP1BRGL         equ	411	;# 
  1497     019B                     SPBRG           equ	411	;# 
  1498     019B                     SPBRGL          equ	411	;# 
  1499     019C                     SP1BRGH         equ	412	;# 
  1500     019C                     SPBRGH          equ	412	;# 
  1501     019D                     RCSTA           equ	413	;# 
  1502     019E                     TXSTA           equ	414	;# 
  1503     019F                     BAUDCON         equ	415	;# 
  1504     020C                     WPUA            equ	524	;# 
  1505     020D                     WPUB            equ	525	;# 
  1506     0211                     SSP1BUF         equ	529	;# 
  1507     0211                     SSPBUF          equ	529	;# 
  1508     0212                     SSP1ADD         equ	530	;# 
  1509     0212                     SSPADD          equ	530	;# 
  1510     0213                     SSP1MSK         equ	531	;# 
  1511     0213                     SSPMSK          equ	531	;# 
  1512     0214                     SSP1STAT        equ	532	;# 
  1513     0214                     SSPSTAT         equ	532	;# 
  1514     0215                     SSP1CON1        equ	533	;# 
  1515     0215                     SSPCON1         equ	533	;# 
  1516     0215                     SSPCON          equ	533	;# 
  1517     0216                     SSP1CON2        equ	534	;# 
  1518     0216                     SSPCON2         equ	534	;# 
  1519     0217                     SSP1CON3        equ	535	;# 
  1520     0217                     SSPCON3         equ	535	;# 
  1521     0219                     SSP2BUF         equ	537	;# 
  1522     021A                     SSP2ADD         equ	538	;# 
  1523     021B                     SSP2MSK         equ	539	;# 
  1524     021C                     SSP2STAT        equ	540	;# 
  1525     021D                     SSP2CON1        equ	541	;# 
  1526     021E                     SSP2CON2        equ	542	;# 
  1527     021F                     SSP2CON3        equ	543	;# 
  1528     0291                     CCPR1           equ	657	;# 
  1529     0291                     CCPR1L          equ	657	;# 
  1530     0292                     CCPR1H          equ	658	;# 
  1531     0293                     CCP1CON         equ	659	;# 
  1532     0294                     PWM1CON         equ	660	;# 
  1533     0295                     CCP1AS          equ	661	;# 
  1534     0295                     ECCP1AS         equ	661	;# 
  1535     0296                     PSTR1CON        equ	662	;# 
  1536     0298                     CCPR2           equ	664	;# 
  1537     0298                     CCPR2L          equ	664	;# 
  1538     0299                     CCPR2H          equ	665	;# 
  1539     029A                     CCP2CON         equ	666	;# 
  1540     029B                     PWM2CON         equ	667	;# 
  1541     029C                     CCP2AS          equ	668	;# 
  1542     029C                     ECCP2AS         equ	668	;# 
  1543     029D                     PSTR2CON        equ	669	;# 
  1544     029E                     CCPTMRS         equ	670	;# 
  1545     029E                     CCPTMRS0        equ	670	;# 
  1546     0311                     CCPR3           equ	785	;# 
  1547     0311                     CCPR3L          equ	785	;# 
  1548     0312                     CCPR3H          equ	786	;# 
  1549     0313                     CCP3CON         equ	787	;# 
  1550     0318                     CCPR4           equ	792	;# 
  1551     0318                     CCPR4L          equ	792	;# 
  1552     0319                     CCPR4H          equ	793	;# 
  1553     031A                     CCP4CON         equ	794	;# 
  1554     0394                     IOCBP           equ	916	;# 
  1555     0395                     IOCBN           equ	917	;# 
  1556     0396                     IOCBF           equ	918	;# 
  1557     039A                     CLKRCON         equ	922	;# 
  1558     039C                     MDCON           equ	924	;# 
  1559     039D                     MDSRC           equ	925	;# 
  1560     039E                     MDCARL          equ	926	;# 
  1561     039F                     MDCARH          equ	927	;# 
  1562     0415                     TMR4            equ	1045	;# 
  1563     0416                     PR4             equ	1046	;# 
  1564     0417                     T4CON           equ	1047	;# 
  1565     041C                     TMR6            equ	1052	;# 
  1566     041D                     PR6             equ	1053	;# 
  1567     041E                     T6CON           equ	1054	;# 
  1568     0FE4                     STATUS_SHAD     equ	4068	;# 
  1569     0FE5                     WREG_SHAD       equ	4069	;# 
  1570     0FE6                     BSR_SHAD        equ	4070	;# 
  1571     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1572     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1573     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1574     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1575     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1576     0FED                     STKPTR          equ	4077	;# 
  1577     0FEE                     TOSL            equ	4078	;# 
  1578     0FEF                     TOSH            equ	4079	;# 
  1579     0000                     INDF0           equ	0	;# 
  1580     0001                     INDF1           equ	1	;# 
  1581     0002                     PCL             equ	2	;# 
  1582     0003                     STATUS          equ	3	;# 
  1583     0004                     FSR0L           equ	4	;# 
  1584     0005                     FSR0H           equ	5	;# 
  1585     0006                     FSR1L           equ	6	;# 
  1586     0007                     FSR1H           equ	7	;# 
  1587     0008                     BSR             equ	8	;# 
  1588     0009                     WREG            equ	9	;# 
  1589     000A                     PCLATH          equ	10	;# 
  1590     000B                     INTCON          equ	11	;# 
  1591     000C                     PORTA           equ	12	;# 
  1592     000D                     PORTB           equ	13	;# 
  1593     0011                     PIR1            equ	17	;# 
  1594     0012                     PIR2            equ	18	;# 
  1595     0013                     PIR3            equ	19	;# 
  1596     0014                     PIR4            equ	20	;# 
  1597     0015                     TMR0            equ	21	;# 
  1598     0016                     TMR1            equ	22	;# 
  1599     0016                     TMR1L           equ	22	;# 
  1600     0017                     TMR1H           equ	23	;# 
  1601     0018                     T1CON           equ	24	;# 
  1602     0019                     T1GCON          equ	25	;# 
  1603     001A                     TMR2            equ	26	;# 
  1604     001B                     PR2             equ	27	;# 
  1605     001C                     T2CON           equ	28	;# 
  1606     001E                     CPSCON0         equ	30	;# 
  1607     001F                     CPSCON1         equ	31	;# 
  1608     008C                     TRISA           equ	140	;# 
  1609     008D                     TRISB           equ	141	;# 
  1610     0091                     PIE1            equ	145	;# 
  1611     0092                     PIE2            equ	146	;# 
  1612     0093                     PIE3            equ	147	;# 
  1613     0094                     PIE4            equ	148	;# 
  1614     0095                     OPTION_REG      equ	149	;# 
  1615     0096                     PCON            equ	150	;# 
  1616     0097                     WDTCON          equ	151	;# 
  1617     0098                     OSCTUNE         equ	152	;# 
  1618     0099                     OSCCON          equ	153	;# 
  1619     009A                     OSCSTAT         equ	154	;# 
  1620     009B                     ADRES           equ	155	;# 
  1621     009B                     ADRESL          equ	155	;# 
  1622     009C                     ADRESH          equ	156	;# 
  1623     009D                     ADCON0          equ	157	;# 
  1624     009E                     ADCON1          equ	158	;# 
  1625     010C                     LATA            equ	268	;# 
  1626     010D                     LATB            equ	269	;# 
  1627     0111                     CM1CON0         equ	273	;# 
  1628     0112                     CM1CON1         equ	274	;# 
  1629     0113                     CM2CON0         equ	275	;# 
  1630     0114                     CM2CON1         equ	276	;# 
  1631     0115                     CMOUT           equ	277	;# 
  1632     0116                     BORCON          equ	278	;# 
  1633     0117                     FVRCON          equ	279	;# 
  1634     0118                     DACCON0         equ	280	;# 
  1635     0119                     DACCON1         equ	281	;# 
  1636     011A                     SRCON0          equ	282	;# 
  1637     011B                     SRCON1          equ	283	;# 
  1638     011D                     APFCON0         equ	285	;# 
  1639     011E                     APFCON1         equ	286	;# 
  1640     018C                     ANSELA          equ	396	;# 
  1641     018D                     ANSELB          equ	397	;# 
  1642     0191                     EEADR           equ	401	;# 
  1643     0191                     EEADRL          equ	401	;# 
  1644     0192                     EEADRH          equ	402	;# 
  1645     0193                     EEDAT           equ	403	;# 
  1646     0193                     EEDATL          equ	403	;# 
  1647     0193                     EEDATA          equ	403	;# 
  1648     0194                     EEDATH          equ	404	;# 
  1649     0195                     EECON1          equ	405	;# 
  1650     0196                     EECON2          equ	406	;# 
  1651     0199                     RCREG           equ	409	;# 
  1652     019A                     TXREG           equ	410	;# 
  1653     019B                     SP1BRG          equ	411	;# 
  1654     019B                     SP1BRGL         equ	411	;# 
  1655     019B                     SPBRG           equ	411	;# 
  1656     019B                     SPBRGL          equ	411	;# 
  1657     019C                     SP1BRGH         equ	412	;# 
  1658     019C                     SPBRGH          equ	412	;# 
  1659     019D                     RCSTA           equ	413	;# 
  1660     019E                     TXSTA           equ	414	;# 
  1661     019F                     BAUDCON         equ	415	;# 
  1662     020C                     WPUA            equ	524	;# 
  1663     020D                     WPUB            equ	525	;# 
  1664     0211                     SSP1BUF         equ	529	;# 
  1665     0211                     SSPBUF          equ	529	;# 
  1666     0212                     SSP1ADD         equ	530	;# 
  1667     0212                     SSPADD          equ	530	;# 
  1668     0213                     SSP1MSK         equ	531	;# 
  1669     0213                     SSPMSK          equ	531	;# 
  1670     0214                     SSP1STAT        equ	532	;# 
  1671     0214                     SSPSTAT         equ	532	;# 
  1672     0215                     SSP1CON1        equ	533	;# 
  1673     0215                     SSPCON1         equ	533	;# 
  1674     0215                     SSPCON          equ	533	;# 
  1675     0216                     SSP1CON2        equ	534	;# 
  1676     0216                     SSPCON2         equ	534	;# 
  1677     0217                     SSP1CON3        equ	535	;# 
  1678     0217                     SSPCON3         equ	535	;# 
  1679     0219                     SSP2BUF         equ	537	;# 
  1680     021A                     SSP2ADD         equ	538	;# 
  1681     021B                     SSP2MSK         equ	539	;# 
  1682     021C                     SSP2STAT        equ	540	;# 
  1683     021D                     SSP2CON1        equ	541	;# 
  1684     021E                     SSP2CON2        equ	542	;# 
  1685     021F                     SSP2CON3        equ	543	;# 
  1686     0291                     CCPR1           equ	657	;# 
  1687     0291                     CCPR1L          equ	657	;# 
  1688     0292                     CCPR1H          equ	658	;# 
  1689     0293                     CCP1CON         equ	659	;# 
  1690     0294                     PWM1CON         equ	660	;# 
  1691     0295                     CCP1AS          equ	661	;# 
  1692     0295                     ECCP1AS         equ	661	;# 
  1693     0296                     PSTR1CON        equ	662	;# 
  1694     0298                     CCPR2           equ	664	;# 
  1695     0298                     CCPR2L          equ	664	;# 
  1696     0299                     CCPR2H          equ	665	;# 
  1697     029A                     CCP2CON         equ	666	;# 
  1698     029B                     PWM2CON         equ	667	;# 
  1699     029C                     CCP2AS          equ	668	;# 
  1700     029C                     ECCP2AS         equ	668	;# 
  1701     029D                     PSTR2CON        equ	669	;# 
  1702     029E                     CCPTMRS         equ	670	;# 
  1703     029E                     CCPTMRS0        equ	670	;# 
  1704     0311                     CCPR3           equ	785	;# 
  1705     0311                     CCPR3L          equ	785	;# 
  1706     0312                     CCPR3H          equ	786	;# 
  1707     0313                     CCP3CON         equ	787	;# 
  1708     0318                     CCPR4           equ	792	;# 
  1709     0318                     CCPR4L          equ	792	;# 
  1710     0319                     CCPR4H          equ	793	;# 
  1711     031A                     CCP4CON         equ	794	;# 
  1712     0394                     IOCBP           equ	916	;# 
  1713     0395                     IOCBN           equ	917	;# 
  1714     0396                     IOCBF           equ	918	;# 
  1715     039A                     CLKRCON         equ	922	;# 
  1716     039C                     MDCON           equ	924	;# 
  1717     039D                     MDSRC           equ	925	;# 
  1718     039E                     MDCARL          equ	926	;# 
  1719     039F                     MDCARH          equ	927	;# 
  1720     0415                     TMR4            equ	1045	;# 
  1721     0416                     PR4             equ	1046	;# 
  1722     0417                     T4CON           equ	1047	;# 
  1723     041C                     TMR6            equ	1052	;# 
  1724     041D                     PR6             equ	1053	;# 
  1725     041E                     T6CON           equ	1054	;# 
  1726     0FE4                     STATUS_SHAD     equ	4068	;# 
  1727     0FE5                     WREG_SHAD       equ	4069	;# 
  1728     0FE6                     BSR_SHAD        equ	4070	;# 
  1729     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1730     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1731     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1732     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1733     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1734     0FED                     STKPTR          equ	4077	;# 
  1735     0FEE                     TOSL            equ	4078	;# 
  1736     0FEF                     TOSH            equ	4079	;# 
  1737     0000                     INDF0           equ	0	;# 
  1738     0001                     INDF1           equ	1	;# 
  1739     0002                     PCL             equ	2	;# 
  1740     0003                     STATUS          equ	3	;# 
  1741     0004                     FSR0L           equ	4	;# 
  1742     0005                     FSR0H           equ	5	;# 
  1743     0006                     FSR1L           equ	6	;# 
  1744     0007                     FSR1H           equ	7	;# 
  1745     0008                     BSR             equ	8	;# 
  1746     0009                     WREG            equ	9	;# 
  1747     000A                     PCLATH          equ	10	;# 
  1748     000B                     INTCON          equ	11	;# 
  1749     000C                     PORTA           equ	12	;# 
  1750     000D                     PORTB           equ	13	;# 
  1751     0011                     PIR1            equ	17	;# 
  1752     0012                     PIR2            equ	18	;# 
  1753     0013                     PIR3            equ	19	;# 
  1754     0014                     PIR4            equ	20	;# 
  1755     0015                     TMR0            equ	21	;# 
  1756     0016                     TMR1            equ	22	;# 
  1757     0016                     TMR1L           equ	22	;# 
  1758     0017                     TMR1H           equ	23	;# 
  1759     0018                     T1CON           equ	24	;# 
  1760     0019                     T1GCON          equ	25	;# 
  1761     001A                     TMR2            equ	26	;# 
  1762     001B                     PR2             equ	27	;# 
  1763     001C                     T2CON           equ	28	;# 
  1764     001E                     CPSCON0         equ	30	;# 
  1765     001F                     CPSCON1         equ	31	;# 
  1766     008C                     TRISA           equ	140	;# 
  1767     008D                     TRISB           equ	141	;# 
  1768     0091                     PIE1            equ	145	;# 
  1769     0092                     PIE2            equ	146	;# 
  1770     0093                     PIE3            equ	147	;# 
  1771     0094                     PIE4            equ	148	;# 
  1772     0095                     OPTION_REG      equ	149	;# 
  1773     0096                     PCON            equ	150	;# 
  1774     0097                     WDTCON          equ	151	;# 
  1775     0098                     OSCTUNE         equ	152	;# 
  1776     0099                     OSCCON          equ	153	;# 
  1777     009A                     OSCSTAT         equ	154	;# 
  1778     009B                     ADRES           equ	155	;# 
  1779     009B                     ADRESL          equ	155	;# 
  1780     009C                     ADRESH          equ	156	;# 
  1781     009D                     ADCON0          equ	157	;# 
  1782     009E                     ADCON1          equ	158	;# 
  1783     010C                     LATA            equ	268	;# 
  1784     010D                     LATB            equ	269	;# 
  1785     0111                     CM1CON0         equ	273	;# 
  1786     0112                     CM1CON1         equ	274	;# 
  1787     0113                     CM2CON0         equ	275	;# 
  1788     0114                     CM2CON1         equ	276	;# 
  1789     0115                     CMOUT           equ	277	;# 
  1790     0116                     BORCON          equ	278	;# 
  1791     0117                     FVRCON          equ	279	;# 
  1792     0118                     DACCON0         equ	280	;# 
  1793     0119                     DACCON1         equ	281	;# 
  1794     011A                     SRCON0          equ	282	;# 
  1795     011B                     SRCON1          equ	283	;# 
  1796     011D                     APFCON0         equ	285	;# 
  1797     011E                     APFCON1         equ	286	;# 
  1798     018C                     ANSELA          equ	396	;# 
  1799     018D                     ANSELB          equ	397	;# 
  1800     0191                     EEADR           equ	401	;# 
  1801     0191                     EEADRL          equ	401	;# 
  1802     0192                     EEADRH          equ	402	;# 
  1803     0193                     EEDAT           equ	403	;# 
  1804     0193                     EEDATL          equ	403	;# 
  1805     0193                     EEDATA          equ	403	;# 
  1806     0194                     EEDATH          equ	404	;# 
  1807     0195                     EECON1          equ	405	;# 
  1808     0196                     EECON2          equ	406	;# 
  1809     0199                     RCREG           equ	409	;# 
  1810     019A                     TXREG           equ	410	;# 
  1811     019B                     SP1BRG          equ	411	;# 
  1812     019B                     SP1BRGL         equ	411	;# 
  1813     019B                     SPBRG           equ	411	;# 
  1814     019B                     SPBRGL          equ	411	;# 
  1815     019C                     SP1BRGH         equ	412	;# 
  1816     019C                     SPBRGH          equ	412	;# 
  1817     019D                     RCSTA           equ	413	;# 
  1818     019E                     TXSTA           equ	414	;# 
  1819     019F                     BAUDCON         equ	415	;# 
  1820     020C                     WPUA            equ	524	;# 
  1821     020D                     WPUB            equ	525	;# 
  1822     0211                     SSP1BUF         equ	529	;# 
  1823     0211                     SSPBUF          equ	529	;# 
  1824     0212                     SSP1ADD         equ	530	;# 
  1825     0212                     SSPADD          equ	530	;# 
  1826     0213                     SSP1MSK         equ	531	;# 
  1827     0213                     SSPMSK          equ	531	;# 
  1828     0214                     SSP1STAT        equ	532	;# 
  1829     0214                     SSPSTAT         equ	532	;# 
  1830     0215                     SSP1CON1        equ	533	;# 
  1831     0215                     SSPCON1         equ	533	;# 
  1832     0215                     SSPCON          equ	533	;# 
  1833     0216                     SSP1CON2        equ	534	;# 
  1834     0216                     SSPCON2         equ	534	;# 
  1835     0217                     SSP1CON3        equ	535	;# 
  1836     0217                     SSPCON3         equ	535	;# 
  1837     0219                     SSP2BUF         equ	537	;# 
  1838     021A                     SSP2ADD         equ	538	;# 
  1839     021B                     SSP2MSK         equ	539	;# 
  1840     021C                     SSP2STAT        equ	540	;# 
  1841     021D                     SSP2CON1        equ	541	;# 
  1842     021E                     SSP2CON2        equ	542	;# 
  1843     021F                     SSP2CON3        equ	543	;# 
  1844     0291                     CCPR1           equ	657	;# 
  1845     0291                     CCPR1L          equ	657	;# 
  1846     0292                     CCPR1H          equ	658	;# 
  1847     0293                     CCP1CON         equ	659	;# 
  1848     0294                     PWM1CON         equ	660	;# 
  1849     0295                     CCP1AS          equ	661	;# 
  1850     0295                     ECCP1AS         equ	661	;# 
  1851     0296                     PSTR1CON        equ	662	;# 
  1852     0298                     CCPR2           equ	664	;# 
  1853     0298                     CCPR2L          equ	664	;# 
  1854     0299                     CCPR2H          equ	665	;# 
  1855     029A                     CCP2CON         equ	666	;# 
  1856     029B                     PWM2CON         equ	667	;# 
  1857     029C                     CCP2AS          equ	668	;# 
  1858     029C                     ECCP2AS         equ	668	;# 
  1859     029D                     PSTR2CON        equ	669	;# 
  1860     029E                     CCPTMRS         equ	670	;# 
  1861     029E                     CCPTMRS0        equ	670	;# 
  1862     0311                     CCPR3           equ	785	;# 
  1863     0311                     CCPR3L          equ	785	;# 
  1864     0312                     CCPR3H          equ	786	;# 
  1865     0313                     CCP3CON         equ	787	;# 
  1866     0318                     CCPR4           equ	792	;# 
  1867     0318                     CCPR4L          equ	792	;# 
  1868     0319                     CCPR4H          equ	793	;# 
  1869     031A                     CCP4CON         equ	794	;# 
  1870     0394                     IOCBP           equ	916	;# 
  1871     0395                     IOCBN           equ	917	;# 
  1872     0396                     IOCBF           equ	918	;# 
  1873     039A                     CLKRCON         equ	922	;# 
  1874     039C                     MDCON           equ	924	;# 
  1875     039D                     MDSRC           equ	925	;# 
  1876     039E                     MDCARL          equ	926	;# 
  1877     039F                     MDCARH          equ	927	;# 
  1878     0415                     TMR4            equ	1045	;# 
  1879     0416                     PR4             equ	1046	;# 
  1880     0417                     T4CON           equ	1047	;# 
  1881     041C                     TMR6            equ	1052	;# 
  1882     041D                     PR6             equ	1053	;# 
  1883     041E                     T6CON           equ	1054	;# 
  1884     0FE4                     STATUS_SHAD     equ	4068	;# 
  1885     0FE5                     WREG_SHAD       equ	4069	;# 
  1886     0FE6                     BSR_SHAD        equ	4070	;# 
  1887     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1888     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1889     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1890     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1891     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1892     0FED                     STKPTR          equ	4077	;# 
  1893     0FEE                     TOSL            equ	4078	;# 
  1894     0FEF                     TOSH            equ	4079	;# 
  1895     0000                     INDF0           equ	0	;# 
  1896     0001                     INDF1           equ	1	;# 
  1897     0002                     PCL             equ	2	;# 
  1898     0003                     STATUS          equ	3	;# 
  1899     0004                     FSR0L           equ	4	;# 
  1900     0005                     FSR0H           equ	5	;# 
  1901     0006                     FSR1L           equ	6	;# 
  1902     0007                     FSR1H           equ	7	;# 
  1903     0008                     BSR             equ	8	;# 
  1904     0009                     WREG            equ	9	;# 
  1905     000A                     PCLATH          equ	10	;# 
  1906     000B                     INTCON          equ	11	;# 
  1907     000C                     PORTA           equ	12	;# 
  1908     000D                     PORTB           equ	13	;# 
  1909     0011                     PIR1            equ	17	;# 
  1910     0012                     PIR2            equ	18	;# 
  1911     0013                     PIR3            equ	19	;# 
  1912     0014                     PIR4            equ	20	;# 
  1913     0015                     TMR0            equ	21	;# 
  1914     0016                     TMR1            equ	22	;# 
  1915     0016                     TMR1L           equ	22	;# 
  1916     0017                     TMR1H           equ	23	;# 
  1917     0018                     T1CON           equ	24	;# 
  1918     0019                     T1GCON          equ	25	;# 
  1919     001A                     TMR2            equ	26	;# 
  1920     001B                     PR2             equ	27	;# 
  1921     001C                     T2CON           equ	28	;# 
  1922     001E                     CPSCON0         equ	30	;# 
  1923     001F                     CPSCON1         equ	31	;# 
  1924     008C                     TRISA           equ	140	;# 
  1925     008D                     TRISB           equ	141	;# 
  1926     0091                     PIE1            equ	145	;# 
  1927     0092                     PIE2            equ	146	;# 
  1928     0093                     PIE3            equ	147	;# 
  1929     0094                     PIE4            equ	148	;# 
  1930     0095                     OPTION_REG      equ	149	;# 
  1931     0096                     PCON            equ	150	;# 
  1932     0097                     WDTCON          equ	151	;# 
  1933     0098                     OSCTUNE         equ	152	;# 
  1934     0099                     OSCCON          equ	153	;# 
  1935     009A                     OSCSTAT         equ	154	;# 
  1936     009B                     ADRES           equ	155	;# 
  1937     009B                     ADRESL          equ	155	;# 
  1938     009C                     ADRESH          equ	156	;# 
  1939     009D                     ADCON0          equ	157	;# 
  1940     009E                     ADCON1          equ	158	;# 
  1941     010C                     LATA            equ	268	;# 
  1942     010D                     LATB            equ	269	;# 
  1943     0111                     CM1CON0         equ	273	;# 
  1944     0112                     CM1CON1         equ	274	;# 
  1945     0113                     CM2CON0         equ	275	;# 
  1946     0114                     CM2CON1         equ	276	;# 
  1947     0115                     CMOUT           equ	277	;# 
  1948     0116                     BORCON          equ	278	;# 
  1949     0117                     FVRCON          equ	279	;# 
  1950     0118                     DACCON0         equ	280	;# 
  1951     0119                     DACCON1         equ	281	;# 
  1952     011A                     SRCON0          equ	282	;# 
  1953     011B                     SRCON1          equ	283	;# 
  1954     011D                     APFCON0         equ	285	;# 
  1955     011E                     APFCON1         equ	286	;# 
  1956     018C                     ANSELA          equ	396	;# 
  1957     018D                     ANSELB          equ	397	;# 
  1958     0191                     EEADR           equ	401	;# 
  1959     0191                     EEADRL          equ	401	;# 
  1960     0192                     EEADRH          equ	402	;# 
  1961     0193                     EEDAT           equ	403	;# 
  1962     0193                     EEDATL          equ	403	;# 
  1963     0193                     EEDATA          equ	403	;# 
  1964     0194                     EEDATH          equ	404	;# 
  1965     0195                     EECON1          equ	405	;# 
  1966     0196                     EECON2          equ	406	;# 
  1967     0199                     RCREG           equ	409	;# 
  1968     019A                     TXREG           equ	410	;# 
  1969     019B                     SP1BRG          equ	411	;# 
  1970     019B                     SP1BRGL         equ	411	;# 
  1971     019B                     SPBRG           equ	411	;# 
  1972     019B                     SPBRGL          equ	411	;# 
  1973     019C                     SP1BRGH         equ	412	;# 
  1974     019C                     SPBRGH          equ	412	;# 
  1975     019D                     RCSTA           equ	413	;# 
  1976     019E                     TXSTA           equ	414	;# 
  1977     019F                     BAUDCON         equ	415	;# 
  1978     020C                     WPUA            equ	524	;# 
  1979     020D                     WPUB            equ	525	;# 
  1980     0211                     SSP1BUF         equ	529	;# 
  1981     0211                     SSPBUF          equ	529	;# 
  1982     0212                     SSP1ADD         equ	530	;# 
  1983     0212                     SSPADD          equ	530	;# 
  1984     0213                     SSP1MSK         equ	531	;# 
  1985     0213                     SSPMSK          equ	531	;# 
  1986     0214                     SSP1STAT        equ	532	;# 
  1987     0214                     SSPSTAT         equ	532	;# 
  1988     0215                     SSP1CON1        equ	533	;# 
  1989     0215                     SSPCON1         equ	533	;# 
  1990     0215                     SSPCON          equ	533	;# 
  1991     0216                     SSP1CON2        equ	534	;# 
  1992     0216                     SSPCON2         equ	534	;# 
  1993     0217                     SSP1CON3        equ	535	;# 
  1994     0217                     SSPCON3         equ	535	;# 
  1995     0219                     SSP2BUF         equ	537	;# 
  1996     021A                     SSP2ADD         equ	538	;# 
  1997     021B                     SSP2MSK         equ	539	;# 
  1998     021C                     SSP2STAT        equ	540	;# 
  1999     021D                     SSP2CON1        equ	541	;# 
  2000     021E                     SSP2CON2        equ	542	;# 
  2001     021F                     SSP2CON3        equ	543	;# 
  2002     0291                     CCPR1           equ	657	;# 
  2003     0291                     CCPR1L          equ	657	;# 
  2004     0292                     CCPR1H          equ	658	;# 
  2005     0293                     CCP1CON         equ	659	;# 
  2006     0294                     PWM1CON         equ	660	;# 
  2007     0295                     CCP1AS          equ	661	;# 
  2008     0295                     ECCP1AS         equ	661	;# 
  2009     0296                     PSTR1CON        equ	662	;# 
  2010     0298                     CCPR2           equ	664	;# 
  2011     0298                     CCPR2L          equ	664	;# 
  2012     0299                     CCPR2H          equ	665	;# 
  2013     029A                     CCP2CON         equ	666	;# 
  2014     029B                     PWM2CON         equ	667	;# 
  2015     029C                     CCP2AS          equ	668	;# 
  2016     029C                     ECCP2AS         equ	668	;# 
  2017     029D                     PSTR2CON        equ	669	;# 
  2018     029E                     CCPTMRS         equ	670	;# 
  2019     029E                     CCPTMRS0        equ	670	;# 
  2020     0311                     CCPR3           equ	785	;# 
  2021     0311                     CCPR3L          equ	785	;# 
  2022     0312                     CCPR3H          equ	786	;# 
  2023     0313                     CCP3CON         equ	787	;# 
  2024     0318                     CCPR4           equ	792	;# 
  2025     0318                     CCPR4L          equ	792	;# 
  2026     0319                     CCPR4H          equ	793	;# 
  2027     031A                     CCP4CON         equ	794	;# 
  2028     0394                     IOCBP           equ	916	;# 
  2029     0395                     IOCBN           equ	917	;# 
  2030     0396                     IOCBF           equ	918	;# 
  2031     039A                     CLKRCON         equ	922	;# 
  2032     039C                     MDCON           equ	924	;# 
  2033     039D                     MDSRC           equ	925	;# 
  2034     039E                     MDCARL          equ	926	;# 
  2035     039F                     MDCARH          equ	927	;# 
  2036     0415                     TMR4            equ	1045	;# 
  2037     0416                     PR4             equ	1046	;# 
  2038     0417                     T4CON           equ	1047	;# 
  2039     041C                     TMR6            equ	1052	;# 
  2040     041D                     PR6             equ	1053	;# 
  2041     041E                     T6CON           equ	1054	;# 
  2042     0FE4                     STATUS_SHAD     equ	4068	;# 
  2043     0FE5                     WREG_SHAD       equ	4069	;# 
  2044     0FE6                     BSR_SHAD        equ	4070	;# 
  2045     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2046     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2047     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2048     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2049     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2050     0FED                     STKPTR          equ	4077	;# 
  2051     0FEE                     TOSL            equ	4078	;# 
  2052     0FEF                     TOSH            equ	4079	;# 
  2053     0000                     INDF0           equ	0	;# 
  2054     0001                     INDF1           equ	1	;# 
  2055     0002                     PCL             equ	2	;# 
  2056     0003                     STATUS          equ	3	;# 
  2057     0004                     FSR0L           equ	4	;# 
  2058     0005                     FSR0H           equ	5	;# 
  2059     0006                     FSR1L           equ	6	;# 
  2060     0007                     FSR1H           equ	7	;# 
  2061     0008                     BSR             equ	8	;# 
  2062     0009                     WREG            equ	9	;# 
  2063     000A                     PCLATH          equ	10	;# 
  2064     000B                     INTCON          equ	11	;# 
  2065     000C                     PORTA           equ	12	;# 
  2066     000D                     PORTB           equ	13	;# 
  2067     0011                     PIR1            equ	17	;# 
  2068     0012                     PIR2            equ	18	;# 
  2069     0013                     PIR3            equ	19	;# 
  2070     0014                     PIR4            equ	20	;# 
  2071     0015                     TMR0            equ	21	;# 
  2072     0016                     TMR1            equ	22	;# 
  2073     0016                     TMR1L           equ	22	;# 
  2074     0017                     TMR1H           equ	23	;# 
  2075     0018                     T1CON           equ	24	;# 
  2076     0019                     T1GCON          equ	25	;# 
  2077     001A                     TMR2            equ	26	;# 
  2078     001B                     PR2             equ	27	;# 
  2079     001C                     T2CON           equ	28	;# 
  2080     001E                     CPSCON0         equ	30	;# 
  2081     001F                     CPSCON1         equ	31	;# 
  2082     008C                     TRISA           equ	140	;# 
  2083     008D                     TRISB           equ	141	;# 
  2084     0091                     PIE1            equ	145	;# 
  2085     0092                     PIE2            equ	146	;# 
  2086     0093                     PIE3            equ	147	;# 
  2087     0094                     PIE4            equ	148	;# 
  2088     0095                     OPTION_REG      equ	149	;# 
  2089     0096                     PCON            equ	150	;# 
  2090     0097                     WDTCON          equ	151	;# 
  2091     0098                     OSCTUNE         equ	152	;# 
  2092     0099                     OSCCON          equ	153	;# 
  2093     009A                     OSCSTAT         equ	154	;# 
  2094     009B                     ADRES           equ	155	;# 
  2095     009B                     ADRESL          equ	155	;# 
  2096     009C                     ADRESH          equ	156	;# 
  2097     009D                     ADCON0          equ	157	;# 
  2098     009E                     ADCON1          equ	158	;# 
  2099     010C                     LATA            equ	268	;# 
  2100     010D                     LATB            equ	269	;# 
  2101     0111                     CM1CON0         equ	273	;# 
  2102     0112                     CM1CON1         equ	274	;# 
  2103     0113                     CM2CON0         equ	275	;# 
  2104     0114                     CM2CON1         equ	276	;# 
  2105     0115                     CMOUT           equ	277	;# 
  2106     0116                     BORCON          equ	278	;# 
  2107     0117                     FVRCON          equ	279	;# 
  2108     0118                     DACCON0         equ	280	;# 
  2109     0119                     DACCON1         equ	281	;# 
  2110     011A                     SRCON0          equ	282	;# 
  2111     011B                     SRCON1          equ	283	;# 
  2112     011D                     APFCON0         equ	285	;# 
  2113     011E                     APFCON1         equ	286	;# 
  2114     018C                     ANSELA          equ	396	;# 
  2115     018D                     ANSELB          equ	397	;# 
  2116     0191                     EEADR           equ	401	;# 
  2117     0191                     EEADRL          equ	401	;# 
  2118     0192                     EEADRH          equ	402	;# 
  2119     0193                     EEDAT           equ	403	;# 
  2120     0193                     EEDATL          equ	403	;# 
  2121     0193                     EEDATA          equ	403	;# 
  2122     0194                     EEDATH          equ	404	;# 
  2123     0195                     EECON1          equ	405	;# 
  2124     0196                     EECON2          equ	406	;# 
  2125     0199                     RCREG           equ	409	;# 
  2126     019A                     TXREG           equ	410	;# 
  2127     019B                     SP1BRG          equ	411	;# 
  2128     019B                     SP1BRGL         equ	411	;# 
  2129     019B                     SPBRG           equ	411	;# 
  2130     019B                     SPBRGL          equ	411	;# 
  2131     019C                     SP1BRGH         equ	412	;# 
  2132     019C                     SPBRGH          equ	412	;# 
  2133     019D                     RCSTA           equ	413	;# 
  2134     019E                     TXSTA           equ	414	;# 
  2135     019F                     BAUDCON         equ	415	;# 
  2136     020C                     WPUA            equ	524	;# 
  2137     020D                     WPUB            equ	525	;# 
  2138     0211                     SSP1BUF         equ	529	;# 
  2139     0211                     SSPBUF          equ	529	;# 
  2140     0212                     SSP1ADD         equ	530	;# 
  2141     0212                     SSPADD          equ	530	;# 
  2142     0213                     SSP1MSK         equ	531	;# 
  2143     0213                     SSPMSK          equ	531	;# 
  2144     0214                     SSP1STAT        equ	532	;# 
  2145     0214                     SSPSTAT         equ	532	;# 
  2146     0215                     SSP1CON1        equ	533	;# 
  2147     0215                     SSPCON1         equ	533	;# 
  2148     0215                     SSPCON          equ	533	;# 
  2149     0216                     SSP1CON2        equ	534	;# 
  2150     0216                     SSPCON2         equ	534	;# 
  2151     0217                     SSP1CON3        equ	535	;# 
  2152     0217                     SSPCON3         equ	535	;# 
  2153     0219                     SSP2BUF         equ	537	;# 
  2154     021A                     SSP2ADD         equ	538	;# 
  2155     021B                     SSP2MSK         equ	539	;# 
  2156     021C                     SSP2STAT        equ	540	;# 
  2157     021D                     SSP2CON1        equ	541	;# 
  2158     021E                     SSP2CON2        equ	542	;# 
  2159     021F                     SSP2CON3        equ	543	;# 
  2160     0291                     CCPR1           equ	657	;# 
  2161     0291                     CCPR1L          equ	657	;# 
  2162     0292                     CCPR1H          equ	658	;# 
  2163     0293                     CCP1CON         equ	659	;# 
  2164     0294                     PWM1CON         equ	660	;# 
  2165     0295                     CCP1AS          equ	661	;# 
  2166     0295                     ECCP1AS         equ	661	;# 
  2167     0296                     PSTR1CON        equ	662	;# 
  2168     0298                     CCPR2           equ	664	;# 
  2169     0298                     CCPR2L          equ	664	;# 
  2170     0299                     CCPR2H          equ	665	;# 
  2171     029A                     CCP2CON         equ	666	;# 
  2172     029B                     PWM2CON         equ	667	;# 
  2173     029C                     CCP2AS          equ	668	;# 
  2174     029C                     ECCP2AS         equ	668	;# 
  2175     029D                     PSTR2CON        equ	669	;# 
  2176     029E                     CCPTMRS         equ	670	;# 
  2177     029E                     CCPTMRS0        equ	670	;# 
  2178     0311                     CCPR3           equ	785	;# 
  2179     0311                     CCPR3L          equ	785	;# 
  2180     0312                     CCPR3H          equ	786	;# 
  2181     0313                     CCP3CON         equ	787	;# 
  2182     0318                     CCPR4           equ	792	;# 
  2183     0318                     CCPR4L          equ	792	;# 
  2184     0319                     CCPR4H          equ	793	;# 
  2185     031A                     CCP4CON         equ	794	;# 
  2186     0394                     IOCBP           equ	916	;# 
  2187     0395                     IOCBN           equ	917	;# 
  2188     0396                     IOCBF           equ	918	;# 
  2189     039A                     CLKRCON         equ	922	;# 
  2190     039C                     MDCON           equ	924	;# 
  2191     039D                     MDSRC           equ	925	;# 
  2192     039E                     MDCARL          equ	926	;# 
  2193     039F                     MDCARH          equ	927	;# 
  2194     0415                     TMR4            equ	1045	;# 
  2195     0416                     PR4             equ	1046	;# 
  2196     0417                     T4CON           equ	1047	;# 
  2197     041C                     TMR6            equ	1052	;# 
  2198     041D                     PR6             equ	1053	;# 
  2199     041E                     T6CON           equ	1054	;# 
  2200     0FE4                     STATUS_SHAD     equ	4068	;# 
  2201     0FE5                     WREG_SHAD       equ	4069	;# 
  2202     0FE6                     BSR_SHAD        equ	4070	;# 
  2203     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2204     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2205     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2206     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2207     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2208     0FED                     STKPTR          equ	4077	;# 
  2209     0FEE                     TOSL            equ	4078	;# 
  2210     0FEF                     TOSH            equ	4079	;# 
  2211     0000                     INDF0           equ	0	;# 
  2212     0001                     INDF1           equ	1	;# 
  2213     0002                     PCL             equ	2	;# 
  2214     0003                     STATUS          equ	3	;# 
  2215     0004                     FSR0L           equ	4	;# 
  2216     0005                     FSR0H           equ	5	;# 
  2217     0006                     FSR1L           equ	6	;# 
  2218     0007                     FSR1H           equ	7	;# 
  2219     0008                     BSR             equ	8	;# 
  2220     0009                     WREG            equ	9	;# 
  2221     000A                     PCLATH          equ	10	;# 
  2222     000B                     INTCON          equ	11	;# 
  2223     000C                     PORTA           equ	12	;# 
  2224     000D                     PORTB           equ	13	;# 
  2225     0011                     PIR1            equ	17	;# 
  2226     0012                     PIR2            equ	18	;# 
  2227     0013                     PIR3            equ	19	;# 
  2228     0014                     PIR4            equ	20	;# 
  2229     0015                     TMR0            equ	21	;# 
  2230     0016                     TMR1            equ	22	;# 
  2231     0016                     TMR1L           equ	22	;# 
  2232     0017                     TMR1H           equ	23	;# 
  2233     0018                     T1CON           equ	24	;# 
  2234     0019                     T1GCON          equ	25	;# 
  2235     001A                     TMR2            equ	26	;# 
  2236     001B                     PR2             equ	27	;# 
  2237     001C                     T2CON           equ	28	;# 
  2238     001E                     CPSCON0         equ	30	;# 
  2239     001F                     CPSCON1         equ	31	;# 
  2240     008C                     TRISA           equ	140	;# 
  2241     008D                     TRISB           equ	141	;# 
  2242     0091                     PIE1            equ	145	;# 
  2243     0092                     PIE2            equ	146	;# 
  2244     0093                     PIE3            equ	147	;# 
  2245     0094                     PIE4            equ	148	;# 
  2246     0095                     OPTION_REG      equ	149	;# 
  2247     0096                     PCON            equ	150	;# 
  2248     0097                     WDTCON          equ	151	;# 
  2249     0098                     OSCTUNE         equ	152	;# 
  2250     0099                     OSCCON          equ	153	;# 
  2251     009A                     OSCSTAT         equ	154	;# 
  2252     009B                     ADRES           equ	155	;# 
  2253     009B                     ADRESL          equ	155	;# 
  2254     009C                     ADRESH          equ	156	;# 
  2255     009D                     ADCON0          equ	157	;# 
  2256     009E                     ADCON1          equ	158	;# 
  2257     010C                     LATA            equ	268	;# 
  2258     010D                     LATB            equ	269	;# 
  2259     0111                     CM1CON0         equ	273	;# 
  2260     0112                     CM1CON1         equ	274	;# 
  2261     0113                     CM2CON0         equ	275	;# 
  2262     0114                     CM2CON1         equ	276	;# 
  2263     0115                     CMOUT           equ	277	;# 
  2264     0116                     BORCON          equ	278	;# 
  2265     0117                     FVRCON          equ	279	;# 
  2266     0118                     DACCON0         equ	280	;# 
  2267     0119                     DACCON1         equ	281	;# 
  2268     011A                     SRCON0          equ	282	;# 
  2269     011B                     SRCON1          equ	283	;# 
  2270     011D                     APFCON0         equ	285	;# 
  2271     011E                     APFCON1         equ	286	;# 
  2272     018C                     ANSELA          equ	396	;# 
  2273     018D                     ANSELB          equ	397	;# 
  2274     0191                     EEADR           equ	401	;# 
  2275     0191                     EEADRL          equ	401	;# 
  2276     0192                     EEADRH          equ	402	;# 
  2277     0193                     EEDAT           equ	403	;# 
  2278     0193                     EEDATL          equ	403	;# 
  2279     0193                     EEDATA          equ	403	;# 
  2280     0194                     EEDATH          equ	404	;# 
  2281     0195                     EECON1          equ	405	;# 
  2282     0196                     EECON2          equ	406	;# 
  2283     0199                     RCREG           equ	409	;# 
  2284     019A                     TXREG           equ	410	;# 
  2285     019B                     SP1BRG          equ	411	;# 
  2286     019B                     SP1BRGL         equ	411	;# 
  2287     019B                     SPBRG           equ	411	;# 
  2288     019B                     SPBRGL          equ	411	;# 
  2289     019C                     SP1BRGH         equ	412	;# 
  2290     019C                     SPBRGH          equ	412	;# 
  2291     019D                     RCSTA           equ	413	;# 
  2292     019E                     TXSTA           equ	414	;# 
  2293     019F                     BAUDCON         equ	415	;# 
  2294     020C                     WPUA            equ	524	;# 
  2295     020D                     WPUB            equ	525	;# 
  2296     0211                     SSP1BUF         equ	529	;# 
  2297     0211                     SSPBUF          equ	529	;# 
  2298     0212                     SSP1ADD         equ	530	;# 
  2299     0212                     SSPADD          equ	530	;# 
  2300     0213                     SSP1MSK         equ	531	;# 
  2301     0213                     SSPMSK          equ	531	;# 
  2302     0214                     SSP1STAT        equ	532	;# 
  2303     0214                     SSPSTAT         equ	532	;# 
  2304     0215                     SSP1CON1        equ	533	;# 
  2305     0215                     SSPCON1         equ	533	;# 
  2306     0215                     SSPCON          equ	533	;# 
  2307     0216                     SSP1CON2        equ	534	;# 
  2308     0216                     SSPCON2         equ	534	;# 
  2309     0217                     SSP1CON3        equ	535	;# 
  2310     0217                     SSPCON3         equ	535	;# 
  2311     0219                     SSP2BUF         equ	537	;# 
  2312     021A                     SSP2ADD         equ	538	;# 
  2313     021B                     SSP2MSK         equ	539	;# 
  2314     021C                     SSP2STAT        equ	540	;# 
  2315     021D                     SSP2CON1        equ	541	;# 
  2316     021E                     SSP2CON2        equ	542	;# 
  2317     021F                     SSP2CON3        equ	543	;# 
  2318     0291                     CCPR1           equ	657	;# 
  2319     0291                     CCPR1L          equ	657	;# 
  2320     0292                     CCPR1H          equ	658	;# 
  2321     0293                     CCP1CON         equ	659	;# 
  2322     0294                     PWM1CON         equ	660	;# 
  2323     0295                     CCP1AS          equ	661	;# 
  2324     0295                     ECCP1AS         equ	661	;# 
  2325     0296                     PSTR1CON        equ	662	;# 
  2326     0298                     CCPR2           equ	664	;# 
  2327     0298                     CCPR2L          equ	664	;# 
  2328     0299                     CCPR2H          equ	665	;# 
  2329     029A                     CCP2CON         equ	666	;# 
  2330     029B                     PWM2CON         equ	667	;# 
  2331     029C                     CCP2AS          equ	668	;# 
  2332     029C                     ECCP2AS         equ	668	;# 
  2333     029D                     PSTR2CON        equ	669	;# 
  2334     029E                     CCPTMRS         equ	670	;# 
  2335     029E                     CCPTMRS0        equ	670	;# 
  2336     0311                     CCPR3           equ	785	;# 
  2337     0311                     CCPR3L          equ	785	;# 
  2338     0312                     CCPR3H          equ	786	;# 
  2339     0313                     CCP3CON         equ	787	;# 
  2340     0318                     CCPR4           equ	792	;# 
  2341     0318                     CCPR4L          equ	792	;# 
  2342     0319                     CCPR4H          equ	793	;# 
  2343     031A                     CCP4CON         equ	794	;# 
  2344     0394                     IOCBP           equ	916	;# 
  2345     0395                     IOCBN           equ	917	;# 
  2346     0396                     IOCBF           equ	918	;# 
  2347     039A                     CLKRCON         equ	922	;# 
  2348     039C                     MDCON           equ	924	;# 
  2349     039D                     MDSRC           equ	925	;# 
  2350     039E                     MDCARL          equ	926	;# 
  2351     039F                     MDCARH          equ	927	;# 
  2352     0415                     TMR4            equ	1045	;# 
  2353     0416                     PR4             equ	1046	;# 
  2354     0417                     T4CON           equ	1047	;# 
  2355     041C                     TMR6            equ	1052	;# 
  2356     041D                     PR6             equ	1053	;# 
  2357     041E                     T6CON           equ	1054	;# 
  2358     0FE4                     STATUS_SHAD     equ	4068	;# 
  2359     0FE5                     WREG_SHAD       equ	4069	;# 
  2360     0FE6                     BSR_SHAD        equ	4070	;# 
  2361     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2362     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2363     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2364     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2365     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2366     0FED                     STKPTR          equ	4077	;# 
  2367     0FEE                     TOSL            equ	4078	;# 
  2368     0FEF                     TOSH            equ	4079	;# 
  2369     0000                     INDF0           equ	0	;# 
  2370     0001                     INDF1           equ	1	;# 
  2371     0002                     PCL             equ	2	;# 
  2372     0003                     STATUS          equ	3	;# 
  2373     0004                     FSR0L           equ	4	;# 
  2374     0005                     FSR0H           equ	5	;# 
  2375     0006                     FSR1L           equ	6	;# 
  2376     0007                     FSR1H           equ	7	;# 
  2377     0008                     BSR             equ	8	;# 
  2378     0009                     WREG            equ	9	;# 
  2379     000A                     PCLATH          equ	10	;# 
  2380     000B                     INTCON          equ	11	;# 
  2381     000C                     PORTA           equ	12	;# 
  2382     000D                     PORTB           equ	13	;# 
  2383     0011                     PIR1            equ	17	;# 
  2384     0012                     PIR2            equ	18	;# 
  2385     0013                     PIR3            equ	19	;# 
  2386     0014                     PIR4            equ	20	;# 
  2387     0015                     TMR0            equ	21	;# 
  2388     0016                     TMR1            equ	22	;# 
  2389     0016                     TMR1L           equ	22	;# 
  2390     0017                     TMR1H           equ	23	;# 
  2391     0018                     T1CON           equ	24	;# 
  2392     0019                     T1GCON          equ	25	;# 
  2393     001A                     TMR2            equ	26	;# 
  2394     001B                     PR2             equ	27	;# 
  2395     001C                     T2CON           equ	28	;# 
  2396     001E                     CPSCON0         equ	30	;# 
  2397     001F                     CPSCON1         equ	31	;# 
  2398     008C                     TRISA           equ	140	;# 
  2399     008D                     TRISB           equ	141	;# 
  2400     0091                     PIE1            equ	145	;# 
  2401     0092                     PIE2            equ	146	;# 
  2402     0093                     PIE3            equ	147	;# 
  2403     0094                     PIE4            equ	148	;# 
  2404     0095                     OPTION_REG      equ	149	;# 
  2405     0096                     PCON            equ	150	;# 
  2406     0097                     WDTCON          equ	151	;# 
  2407     0098                     OSCTUNE         equ	152	;# 
  2408     0099                     OSCCON          equ	153	;# 
  2409     009A                     OSCSTAT         equ	154	;# 
  2410     009B                     ADRES           equ	155	;# 
  2411     009B                     ADRESL          equ	155	;# 
  2412     009C                     ADRESH          equ	156	;# 
  2413     009D                     ADCON0          equ	157	;# 
  2414     009E                     ADCON1          equ	158	;# 
  2415     010C                     LATA            equ	268	;# 
  2416     010D                     LATB            equ	269	;# 
  2417     0111                     CM1CON0         equ	273	;# 
  2418     0112                     CM1CON1         equ	274	;# 
  2419     0113                     CM2CON0         equ	275	;# 
  2420     0114                     CM2CON1         equ	276	;# 
  2421     0115                     CMOUT           equ	277	;# 
  2422     0116                     BORCON          equ	278	;# 
  2423     0117                     FVRCON          equ	279	;# 
  2424     0118                     DACCON0         equ	280	;# 
  2425     0119                     DACCON1         equ	281	;# 
  2426     011A                     SRCON0          equ	282	;# 
  2427     011B                     SRCON1          equ	283	;# 
  2428     011D                     APFCON0         equ	285	;# 
  2429     011E                     APFCON1         equ	286	;# 
  2430     018C                     ANSELA          equ	396	;# 
  2431     018D                     ANSELB          equ	397	;# 
  2432     0191                     EEADR           equ	401	;# 
  2433     0191                     EEADRL          equ	401	;# 
  2434     0192                     EEADRH          equ	402	;# 
  2435     0193                     EEDAT           equ	403	;# 
  2436     0193                     EEDATL          equ	403	;# 
  2437     0193                     EEDATA          equ	403	;# 
  2438     0194                     EEDATH          equ	404	;# 
  2439     0195                     EECON1          equ	405	;# 
  2440     0196                     EECON2          equ	406	;# 
  2441     0199                     RCREG           equ	409	;# 
  2442     019A                     TXREG           equ	410	;# 
  2443     019B                     SP1BRG          equ	411	;# 
  2444     019B                     SP1BRGL         equ	411	;# 
  2445     019B                     SPBRG           equ	411	;# 
  2446     019B                     SPBRGL          equ	411	;# 
  2447     019C                     SP1BRGH         equ	412	;# 
  2448     019C                     SPBRGH          equ	412	;# 
  2449     019D                     RCSTA           equ	413	;# 
  2450     019E                     TXSTA           equ	414	;# 
  2451     019F                     BAUDCON         equ	415	;# 
  2452     020C                     WPUA            equ	524	;# 
  2453     020D                     WPUB            equ	525	;# 
  2454     0211                     SSP1BUF         equ	529	;# 
  2455     0211                     SSPBUF          equ	529	;# 
  2456     0212                     SSP1ADD         equ	530	;# 
  2457     0212                     SSPADD          equ	530	;# 
  2458     0213                     SSP1MSK         equ	531	;# 
  2459     0213                     SSPMSK          equ	531	;# 
  2460     0214                     SSP1STAT        equ	532	;# 
  2461     0214                     SSPSTAT         equ	532	;# 
  2462     0215                     SSP1CON1        equ	533	;# 
  2463     0215                     SSPCON1         equ	533	;# 
  2464     0215                     SSPCON          equ	533	;# 
  2465     0216                     SSP1CON2        equ	534	;# 
  2466     0216                     SSPCON2         equ	534	;# 
  2467     0217                     SSP1CON3        equ	535	;# 
  2468     0217                     SSPCON3         equ	535	;# 
  2469     0219                     SSP2BUF         equ	537	;# 
  2470     021A                     SSP2ADD         equ	538	;# 
  2471     021B                     SSP2MSK         equ	539	;# 
  2472     021C                     SSP2STAT        equ	540	;# 
  2473     021D                     SSP2CON1        equ	541	;# 
  2474     021E                     SSP2CON2        equ	542	;# 
  2475     021F                     SSP2CON3        equ	543	;# 
  2476     0291                     CCPR1           equ	657	;# 
  2477     0291                     CCPR1L          equ	657	;# 
  2478     0292                     CCPR1H          equ	658	;# 
  2479     0293                     CCP1CON         equ	659	;# 
  2480     0294                     PWM1CON         equ	660	;# 
  2481     0295                     CCP1AS          equ	661	;# 
  2482     0295                     ECCP1AS         equ	661	;# 
  2483     0296                     PSTR1CON        equ	662	;# 
  2484     0298                     CCPR2           equ	664	;# 
  2485     0298                     CCPR2L          equ	664	;# 
  2486     0299                     CCPR2H          equ	665	;# 
  2487     029A                     CCP2CON         equ	666	;# 
  2488     029B                     PWM2CON         equ	667	;# 
  2489     029C                     CCP2AS          equ	668	;# 
  2490     029C                     ECCP2AS         equ	668	;# 
  2491     029D                     PSTR2CON        equ	669	;# 
  2492     029E                     CCPTMRS         equ	670	;# 
  2493     029E                     CCPTMRS0        equ	670	;# 
  2494     0311                     CCPR3           equ	785	;# 
  2495     0311                     CCPR3L          equ	785	;# 
  2496     0312                     CCPR3H          equ	786	;# 
  2497     0313                     CCP3CON         equ	787	;# 
  2498     0318                     CCPR4           equ	792	;# 
  2499     0318                     CCPR4L          equ	792	;# 
  2500     0319                     CCPR4H          equ	793	;# 
  2501     031A                     CCP4CON         equ	794	;# 
  2502     0394                     IOCBP           equ	916	;# 
  2503     0395                     IOCBN           equ	917	;# 
  2504     0396                     IOCBF           equ	918	;# 
  2505     039A                     CLKRCON         equ	922	;# 
  2506     039C                     MDCON           equ	924	;# 
  2507     039D                     MDSRC           equ	925	;# 
  2508     039E                     MDCARL          equ	926	;# 
  2509     039F                     MDCARH          equ	927	;# 
  2510     0415                     TMR4            equ	1045	;# 
  2511     0416                     PR4             equ	1046	;# 
  2512     0417                     T4CON           equ	1047	;# 
  2513     041C                     TMR6            equ	1052	;# 
  2514     041D                     PR6             equ	1053	;# 
  2515     041E                     T6CON           equ	1054	;# 
  2516     0FE4                     STATUS_SHAD     equ	4068	;# 
  2517     0FE5                     WREG_SHAD       equ	4069	;# 
  2518     0FE6                     BSR_SHAD        equ	4070	;# 
  2519     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2520     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2521     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2522     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2523     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2524     0FED                     STKPTR          equ	4077	;# 
  2525     0FEE                     TOSL            equ	4078	;# 
  2526     0FEF                     TOSH            equ	4079	;# 
  2527     0000                     INDF0           equ	0	;# 
  2528     0001                     INDF1           equ	1	;# 
  2529     0002                     PCL             equ	2	;# 
  2530     0003                     STATUS          equ	3	;# 
  2531     0004                     FSR0L           equ	4	;# 
  2532     0005                     FSR0H           equ	5	;# 
  2533     0006                     FSR1L           equ	6	;# 
  2534     0007                     FSR1H           equ	7	;# 
  2535     0008                     BSR             equ	8	;# 
  2536     0009                     WREG            equ	9	;# 
  2537     000A                     PCLATH          equ	10	;# 
  2538     000B                     INTCON          equ	11	;# 
  2539     000C                     PORTA           equ	12	;# 
  2540     000D                     PORTB           equ	13	;# 
  2541     0011                     PIR1            equ	17	;# 
  2542     0012                     PIR2            equ	18	;# 
  2543     0013                     PIR3            equ	19	;# 
  2544     0014                     PIR4            equ	20	;# 
  2545     0015                     TMR0            equ	21	;# 
  2546     0016                     TMR1            equ	22	;# 
  2547     0016                     TMR1L           equ	22	;# 
  2548     0017                     TMR1H           equ	23	;# 
  2549     0018                     T1CON           equ	24	;# 
  2550     0019                     T1GCON          equ	25	;# 
  2551     001A                     TMR2            equ	26	;# 
  2552     001B                     PR2             equ	27	;# 
  2553     001C                     T2CON           equ	28	;# 
  2554     001E                     CPSCON0         equ	30	;# 
  2555     001F                     CPSCON1         equ	31	;# 
  2556     008C                     TRISA           equ	140	;# 
  2557     008D                     TRISB           equ	141	;# 
  2558     0091                     PIE1            equ	145	;# 
  2559     0092                     PIE2            equ	146	;# 
  2560     0093                     PIE3            equ	147	;# 
  2561     0094                     PIE4            equ	148	;# 
  2562     0095                     OPTION_REG      equ	149	;# 
  2563     0096                     PCON            equ	150	;# 
  2564     0097                     WDTCON          equ	151	;# 
  2565     0098                     OSCTUNE         equ	152	;# 
  2566     0099                     OSCCON          equ	153	;# 
  2567     009A                     OSCSTAT         equ	154	;# 
  2568     009B                     ADRES           equ	155	;# 
  2569     009B                     ADRESL          equ	155	;# 
  2570     009C                     ADRESH          equ	156	;# 
  2571     009D                     ADCON0          equ	157	;# 
  2572     009E                     ADCON1          equ	158	;# 
  2573     010C                     LATA            equ	268	;# 
  2574     010D                     LATB            equ	269	;# 
  2575     0111                     CM1CON0         equ	273	;# 
  2576     0112                     CM1CON1         equ	274	;# 
  2577     0113                     CM2CON0         equ	275	;# 
  2578     0114                     CM2CON1         equ	276	;# 
  2579     0115                     CMOUT           equ	277	;# 
  2580     0116                     BORCON          equ	278	;# 
  2581     0117                     FVRCON          equ	279	;# 
  2582     0118                     DACCON0         equ	280	;# 
  2583     0119                     DACCON1         equ	281	;# 
  2584     011A                     SRCON0          equ	282	;# 
  2585     011B                     SRCON1          equ	283	;# 
  2586     011D                     APFCON0         equ	285	;# 
  2587     011E                     APFCON1         equ	286	;# 
  2588     018C                     ANSELA          equ	396	;# 
  2589     018D                     ANSELB          equ	397	;# 
  2590     0191                     EEADR           equ	401	;# 
  2591     0191                     EEADRL          equ	401	;# 
  2592     0192                     EEADRH          equ	402	;# 
  2593     0193                     EEDAT           equ	403	;# 
  2594     0193                     EEDATL          equ	403	;# 
  2595     0193                     EEDATA          equ	403	;# 
  2596     0194                     EEDATH          equ	404	;# 
  2597     0195                     EECON1          equ	405	;# 
  2598     0196                     EECON2          equ	406	;# 
  2599     0199                     RCREG           equ	409	;# 
  2600     019A                     TXREG           equ	410	;# 
  2601     019B                     SP1BRG          equ	411	;# 
  2602     019B                     SP1BRGL         equ	411	;# 
  2603     019B                     SPBRG           equ	411	;# 
  2604     019B                     SPBRGL          equ	411	;# 
  2605     019C                     SP1BRGH         equ	412	;# 
  2606     019C                     SPBRGH          equ	412	;# 
  2607     019D                     RCSTA           equ	413	;# 
  2608     019E                     TXSTA           equ	414	;# 
  2609     019F                     BAUDCON         equ	415	;# 
  2610     020C                     WPUA            equ	524	;# 
  2611     020D                     WPUB            equ	525	;# 
  2612     0211                     SSP1BUF         equ	529	;# 
  2613     0211                     SSPBUF          equ	529	;# 
  2614     0212                     SSP1ADD         equ	530	;# 
  2615     0212                     SSPADD          equ	530	;# 
  2616     0213                     SSP1MSK         equ	531	;# 
  2617     0213                     SSPMSK          equ	531	;# 
  2618     0214                     SSP1STAT        equ	532	;# 
  2619     0214                     SSPSTAT         equ	532	;# 
  2620     0215                     SSP1CON1        equ	533	;# 
  2621     0215                     SSPCON1         equ	533	;# 
  2622     0215                     SSPCON          equ	533	;# 
  2623     0216                     SSP1CON2        equ	534	;# 
  2624     0216                     SSPCON2         equ	534	;# 
  2625     0217                     SSP1CON3        equ	535	;# 
  2626     0217                     SSPCON3         equ	535	;# 
  2627     0219                     SSP2BUF         equ	537	;# 
  2628     021A                     SSP2ADD         equ	538	;# 
  2629     021B                     SSP2MSK         equ	539	;# 
  2630     021C                     SSP2STAT        equ	540	;# 
  2631     021D                     SSP2CON1        equ	541	;# 
  2632     021E                     SSP2CON2        equ	542	;# 
  2633     021F                     SSP2CON3        equ	543	;# 
  2634     0291                     CCPR1           equ	657	;# 
  2635     0291                     CCPR1L          equ	657	;# 
  2636     0292                     CCPR1H          equ	658	;# 
  2637     0293                     CCP1CON         equ	659	;# 
  2638     0294                     PWM1CON         equ	660	;# 
  2639     0295                     CCP1AS          equ	661	;# 
  2640     0295                     ECCP1AS         equ	661	;# 
  2641     0296                     PSTR1CON        equ	662	;# 
  2642     0298                     CCPR2           equ	664	;# 
  2643     0298                     CCPR2L          equ	664	;# 
  2644     0299                     CCPR2H          equ	665	;# 
  2645     029A                     CCP2CON         equ	666	;# 
  2646     029B                     PWM2CON         equ	667	;# 
  2647     029C                     CCP2AS          equ	668	;# 
  2648     029C                     ECCP2AS         equ	668	;# 
  2649     029D                     PSTR2CON        equ	669	;# 
  2650     029E                     CCPTMRS         equ	670	;# 
  2651     029E                     CCPTMRS0        equ	670	;# 
  2652     0311                     CCPR3           equ	785	;# 
  2653     0311                     CCPR3L          equ	785	;# 
  2654     0312                     CCPR3H          equ	786	;# 
  2655     0313                     CCP3CON         equ	787	;# 
  2656     0318                     CCPR4           equ	792	;# 
  2657     0318                     CCPR4L          equ	792	;# 
  2658     0319                     CCPR4H          equ	793	;# 
  2659     031A                     CCP4CON         equ	794	;# 
  2660     0394                     IOCBP           equ	916	;# 
  2661     0395                     IOCBN           equ	917	;# 
  2662     0396                     IOCBF           equ	918	;# 
  2663     039A                     CLKRCON         equ	922	;# 
  2664     039C                     MDCON           equ	924	;# 
  2665     039D                     MDSRC           equ	925	;# 
  2666     039E                     MDCARL          equ	926	;# 
  2667     039F                     MDCARH          equ	927	;# 
  2668     0415                     TMR4            equ	1045	;# 
  2669     0416                     PR4             equ	1046	;# 
  2670     0417                     T4CON           equ	1047	;# 
  2671     041C                     TMR6            equ	1052	;# 
  2672     041D                     PR6             equ	1053	;# 
  2673     041E                     T6CON           equ	1054	;# 
  2674     0FE4                     STATUS_SHAD     equ	4068	;# 
  2675     0FE5                     WREG_SHAD       equ	4069	;# 
  2676     0FE6                     BSR_SHAD        equ	4070	;# 
  2677     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2678     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2679     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2680     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2681     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2682     0FED                     STKPTR          equ	4077	;# 
  2683     0FEE                     TOSL            equ	4078	;# 
  2684     0FEF                     TOSH            equ	4079	;# 
  2685                           
  2686                           	psect	idataBANK1
  2687     0BEF                     __pidataBANK1:
  2688                           
  2689                           ;initializer for _velocidade_string
  2690     0BEF  3430               	retlw	48
  2691     0BF0  3430               	retlw	48
  2692     0BF1  3430               	retlw	48
  2693     0BF2  3400               	retlw	0
  2694                           
  2695                           ;initializer for _position_string
  2696     0BF3  3430               	retlw	48
  2697     0BF4  3430               	retlw	48
  2698     0BF5  3430               	retlw	48
  2699     0BF6  3400               	retlw	0
  2700                           
  2701                           	psect	stringtext1
  2702     07FD                     __pstringtext1:
  2703     07FD                     _MATRIX_FLOOR:
  2704     07FD  3400               	retlw	0
  2705     07FE  3401               	retlw	1
  2706     07FF  34FF               	retlw	255
  2707     0800  3441               	retlw	65
  2708     0801  3471               	retlw	113
  2709     0802  3489               	retlw	137
  2710     0803  3485               	retlw	133
  2711     0804  3443               	retlw	67
  2712     0805  347E               	retlw	126
  2713     0806  3489               	retlw	137
  2714     0807  3489               	retlw	137
  2715     0808  3442               	retlw	66
  2716     0809  3408               	retlw	8
  2717     080A  34FF               	retlw	255
  2718     080B  3448               	retlw	72
  2719     080C  3438               	retlw	56
  2720     080D                     __end_of_MATRIX_FLOOR:
  2721                           
  2722                           	psect	stringtext2
  2723     080D                     __pstringtext2:
  2724     080D                     _MATRIX_CONFIG:
  2725     080D  3409               	retlw	9
  2726     080E  3400               	retlw	0
  2727     080F  340A               	retlw	10
  2728     0810  3400               	retlw	0
  2729     0811  340B               	retlw	11
  2730     0812  3407               	retlw	7
  2731     0813  340C               	retlw	12
  2732     0814  3401               	retlw	1
  2733     0815  340F               	retlw	15
  2734     0816  3401               	retlw	1
  2735     0817  340F               	retlw	15
  2736     0818  3400               	retlw	0
  2737     0819                     __end_of_MATRIX_CONFIG:
  2738                           
  2739                           	psect	stringtext3
  2740     0819                     __pstringtext3:
  2741     0819                     _MATRIX_DIR:
  2742     0819  3440               	retlw	64
  2743     081A  3420               	retlw	32
  2744     081B  3440               	retlw	64
  2745     081C  3440               	retlw	64
  2746     081D  3480               	retlw	128
  2747     081E  3440               	retlw	64
  2748     081F  3440               	retlw	64
  2749     0820  3440               	retlw	64
  2750     0821  3440               	retlw	64
  2751     0822                     __end_of_MATRIX_DIR:
  2752                           
  2753                           	psect	stringtext4
  2754     0822                     __pstringtext4:
  2755     0822                     _FLOORS:
  2756     0822  3400               	retlw	0
  2757     0823  3401               	retlw	1
  2758     0824  3402               	retlw	2
  2759     0825  3403               	retlw	3
  2760     0826  3402               	retlw	2
  2761     0827  3401               	retlw	1
  2762     0828                     __end_of_FLOORS:
  2763                           
  2764                           	psect	stringtext5
  2765     082D                     __pstringtext5:
  2766     082D                     _spi1_configuration:
  2767     082D  3403               	retlw	3
  2768     082E  3440               	retlw	64
  2769     082F  3413               	retlw	19
  2770     0830  3400               	retlw	0
  2771     0831                     __end_of_spi1_configuration:
  2772                           
  2773                           	psect	nvBANK1
  2774     00D9                     __pnvBANK1:
  2775     00D9                     _TMR1_InterruptHandler:
  2776     00D9                     	ds	2
  2777     00DB                     _EUSART_ErrorHandler:
  2778     00DB                     	ds	2
  2779     00DD                     _EUSART_OverrunErrorHandler:
  2780     00DD                     	ds	2
  2781     00DF                     _EUSART_FramingErrorHandler:
  2782     00DF                     	ds	2
  2783     00E1                     _EUSART_RxDefaultInterruptHandler:
  2784     00E1                     	ds	2
  2785     00E3                     _IOCBF3_InterruptHandler:
  2786     00E3                     	ds	2
  2787     00E5                     _IOCBF0_InterruptHandler:
  2788     00E5                     	ds	2
  2789     0015                     _TMR0           set	21
  2790     0018                     _T1CONbits      set	24
  2791     0018                     _T1CON          set	24
  2792     0016                     _TMR1L          set	22
  2793     0017                     _TMR1H          set	23
  2794     0019                     _T1GCON         set	25
  2795     001C                     _T2CON          set	28
  2796     001A                     _TMR2           set	26
  2797     001B                     _PR2            set	27
  2798     0011                     _PIR1bits       set	17
  2799     0012                     _PIR2bits       set	18
  2800     000B                     _INTCONbits     set	11
  2801     0013                     _PIR3bits       set	19
  2802     0095                     _OPTION_REG     set	149
  2803     008D                     _TRISBbits      set	141
  2804     0091                     _PIE1bits       set	145
  2805     0092                     _PIE2bits       set	146
  2806     0095                     _OPTION_REGbits set	149
  2807     008D                     _TRISB          set	141
  2808     008C                     _TRISA          set	140
  2809     0097                     _WDTCON         set	151
  2810     0098                     _OSCTUNE        set	152
  2811     0099                     _OSCCON         set	153
  2812     010D                     _LATBbits       set	269
  2813     0114                     _CM2CON1        set	276
  2814     0113                     _CM2CON0        set	275
  2815     0117                     _FVRCON         set	279
  2816     0112                     _CM1CON1        set	274
  2817     0111                     _CM1CON0        set	273
  2818     011E                     _APFCON1        set	286
  2819     011D                     _APFCON0        set	285
  2820     010D                     _LATB           set	269
  2821     010C                     _LATA           set	268
  2822     0116                     _BORCON         set	278
  2823     010C                     _LATAbits       set	268
  2824     0199                     _RCREG          set	409
  2825     019D                     _RCSTAbits      set	413
  2826     019A                     _TXREG          set	410
  2827     019C                     _SPBRGH         set	412
  2828     019B                     _SPBRGL         set	411
  2829     019E                     _TXSTA          set	414
  2830     019D                     _RCSTA          set	413
  2831     019F                     _BAUDCON        set	415
  2832     018C                     _ANSELA         set	396
  2833     018D                     _ANSELB         set	397
  2834     0211                     _SSP1BUF        set	529
  2835     0216                     _SSP1CON2       set	534
  2836     0215                     _SSP1CON1bits   set	533
  2837     0212                     _SSP1ADD        set	530
  2838     0215                     _SSP1CON1       set	533
  2839     0214                     _SSP1STAT       set	532
  2840     020C                     _WPUA           set	524
  2841     020D                     _WPUB           set	525
  2842     0298                     _CCPR2L         set	664
  2843     0299                     _CCPR2H         set	665
  2844     029A                     _CCP2CON        set	666
  2845     029E                     _CCPTMRS0bits   set	670
  2846     0313                     _CCP3CONbits    set	787
  2847     0312                     _CCPR3H         set	786
  2848     0311                     _CCPR3L         set	785
  2849     0313                     _CCP3CON        set	787
  2850     0394                     _IOCBPbits      set	916
  2851     0395                     _IOCBNbits      set	917
  2852     0396                     _IOCBFbits      set	918
  2853     041E                     _T6CON          set	1054
  2854     041C                     _TMR6           set	1052
  2855     041D                     _PR6            set	1053
  2856                           
  2857                           	psect	stringtext6
  2858     0828                     __pstringtext6:
  2859     0828                     STR_1:
  2860     0828  3425               	retlw	37	;'%'
  2861     0829  3430               	retlw	48	;'0'
  2862     082A  3433               	retlw	51	;'3'
  2863     082B  3464               	retlw	100	;'d'
  2864     082C  3400               	retlw	0
  2865                           
  2866                           	psect	stringtext7
  2867     0000                     __pstringtext7:
  2868     0828                     STR_2           equ	STR_1
  2869     0828                     STR_3           equ	STR_1
  2870     0828                     STR_4           equ	STR_1
  2871     0828                     STR_5           equ	STR_1
  2872                           
  2873                           	psect	cinit
  2874     0041                     start_initialization:	
  2875                           ; #config settings
  2876                           
  2877     0041                     __initialization:
  2878                           
  2879                           ; Initialize objects allocated to BANK1
  2880     0041  30EF               	movlw	low __pidataBANK1
  2881     0042  0084               	movwf	4
  2882     0043  308B               	movlw	(high __pidataBANK1)| (0+128)
  2883     0044  0085               	movwf	5
  2884     0045  30E7               	movlw	low __pdataBANK1
  2885     0046  0086               	movwf	6
  2886     0047  3000               	movlw	high __pdataBANK1
  2887     0048  0087               	movwf	7
  2888     0049  3008               	movlw	8
  2889     004A  318B  23D9  3180   	fcall	init_ram
  2890                           
  2891                           ; Clear objects allocated to BANK0
  2892     004D  3062               	movlw	low __pbssBANK0
  2893     004E  0084               	movwf	4
  2894     004F  3000               	movlw	high __pbssBANK0
  2895     0050  0085               	movwf	5
  2896     0051  300E               	movlw	14
  2897     0052  318B  23D3  3180   	fcall	clear_ram0
  2898                           
  2899                           ; Clear objects allocated to BANK1
  2900     0055  30A0               	movlw	low __pbssBANK1
  2901     0056  0084               	movwf	4
  2902     0057  3000               	movlw	high __pbssBANK1
  2903     0058  0085               	movwf	5
  2904     0059  3021               	movlw	33
  2905     005A  318B  23D3  3180   	fcall	clear_ram0
  2906                           
  2907                           ; Clear objects allocated to BANK2
  2908     005D  3020               	movlw	low __pbssBANK2
  2909     005E  0084               	movwf	4
  2910     005F  3001               	movlw	high __pbssBANK2
  2911     0060  0085               	movwf	5
  2912     0061  3040               	movlw	64
  2913     0062  318B  23D3         	fcall	clear_ram0
  2914     0064                     end_of_initialization:	
  2915                           ;End of C runtime variable initialization code
  2916                           
  2917     0064                     __end_of__initialization:
  2918     0064  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2919     0065  0020               	movlb	0
  2920     0066  3184  2CE1         	ljmp	_main	;jump to C main() function
  2921                           
  2922                           	psect	bssBANK0
  2923     0062                     __pbssBANK0:
  2924     0062                     _width:
  2925     0062                     	ds	2
  2926     0064                     _flags:
  2927     0064                     	ds	1
  2928     0065                     _eusartRxLastError:
  2929     0065                     	ds	1
  2930     0066                     _eusartRxCount:
  2931     0066                     	ds	1
  2932     0067                     _eusartRxTail:
  2933     0067                     	ds	1
  2934     0068                     _eusartRxHead:
  2935     0068                     	ds	1
  2936     0069                     _stop_2s:
  2937     0069                     	ds	1
  2938     006A                     _positionf:
  2939     006A                     	ds	1
  2940     006B                     _position0:
  2941     006B                     	ds	1
  2942     006C                     _position:
  2943     006C                     	ds	1
  2944     006D                     _next_floor:
  2945     006D                     	ds	1
  2946     006E                     _current_floor:
  2947     006E                     	ds	1
  2948     006F                     _index:
  2949     006F                     	ds	1
  2950                           
  2951                           	psect	bssBANK1
  2952     00A0                     __pbssBANK1:
  2953     00A0                     _eusartRxStatusBuffer:
  2954     00A0                     	ds	8
  2955     00A8                     _eusartRxBuffer:
  2956     00A8                     	ds	8
  2957     00B0                     _route:
  2958     00B0                     	ds	6
  2959     00B6                     _prec:
  2960     00B6                     	ds	2
  2961     00B8                     _buffer_count:
  2962     00B8                     	ds	2
  2963     00BA                     TMR1_ISR@CountCallBack:
  2964     00BA                     	ds	2
  2965     00BC                     _timer1ReloadVal:
  2966     00BC                     	ds	2
  2967     00BE                     _velocidade:
  2968     00BE                     	ds	2
  2969     00C0                     _timer0ReloadVal:
  2970     00C0                     	ds	1
  2971                           
  2972                           	psect	dataBANK1
  2973     00E7                     __pdataBANK1:
  2974     00E7                     _velocidade_string:
  2975     00E7                     	ds	4
  2976     00EB                     _position_string:
  2977     00EB                     	ds	4
  2978                           
  2979                           	psect	bssBANK2
  2980     0120                     __pbssBANK2:
  2981     0120                     _buffer:
  2982     0120                     	ds	10
  2983     012A                     _dbuf:
  2984     012A                     	ds	32
  2985     014A                     _route_list:
  2986     014A                     	ds	22
  2987                           
  2988                           	psect	inittext
  2989     0BD9                     init_ram:
  2990     0BD9  00FE               	movwf	126
  2991     0BDA                     initloop:
  2992     0BDA  0012               	moviw fsr0++
  2993     0BDB  001E               	movwi fsr1++
  2994     0BDC  0BFE               	decfsz	126,f
  2995     0BDD  2BDA               	goto	initloop
  2996     0BDE  3400               	retlw	0
  2997                           
  2998                           	psect	clrtext
  2999     0BD3                     clear_ram0:	
  3000                           ;	Called with FSR0 containing the base address, and
  3001                           ;	WREG with the size to clear
  3002                           
  3003     0BD3  0064               	clrwdt	;clear the watchdog before getting into this loop
  3004     0BD4                     clrloop0:
  3005     0BD4  0180               	clrf	0	;clear RAM location pointed to by FSR
  3006     0BD5  3101               	addfsr 0,1
  3007     0BD6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3008     0BD7  2BD4               	goto	clrloop0	;have we reached the end yet?
  3009     0BD8  3400               	retlw	0	;all done for this memory range, return
  3010                           
  3011                           	psect	cstackBANK1
  3012     00C1                     __pcstackBANK1:
  3013     00C1                     ?_IOCBF0_SetInterruptHandler:
  3014     00C1                     ?_IOCBF3_SetInterruptHandler:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017     00C1                     ?_EUSART_SetRxInterruptHandler:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020     00C1                     ?_EUSART_SetFramingErrorHandler:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023     00C1                     ?_EUSART_SetOverrunErrorHandler:	
  3024                           ; 1 bytes @ 0x0
  3025                           
  3026     00C1                     ?_EUSART_SetErrorHandler:	
  3027                           ; 1 bytes @ 0x0
  3028                           
  3029     00C1                     ?_TMR1_SetInterruptHandler:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032     00C1                     ?_SPI1_ExchangeBlock:	
  3033                           ; 1 bytes @ 0x0
  3034                           
  3035     00C1                     ?_Initialize_list:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038     00C1                     ?___bmul:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041     00C1                     SPI1_ExchangeBlock@block:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044     00C1                     TMR0_WriteTimer@timerVal:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047     00C1                     ___bmul@multiplicand:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050     00C1                     IOCBF0_SetInterruptHandler@InterruptHandler:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053     00C1                     IOCBF3_SetInterruptHandler@InterruptHandler:	
  3054                           ; 2 bytes @ 0x0
  3055                           
  3056     00C1                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3057                           ; 2 bytes @ 0x0
  3058                           
  3059     00C1                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3060                           ; 2 bytes @ 0x0
  3061                           
  3062     00C1                     EUSART_SetErrorHandler@interruptHandler:	
  3063                           ; 2 bytes @ 0x0
  3064                           
  3065     00C1                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3066                           ; 2 bytes @ 0x0
  3067                           
  3068     00C1                     TMR1_SetInterruptHandler@InterruptHandler:	
  3069                           ; 2 bytes @ 0x0
  3070                           
  3071     00C1                     Initialize_list@list:	
  3072                           ; 2 bytes @ 0x0
  3073                           
  3074     00C1                     ??_SPI1_Initialize:	
  3075                           ; 2 bytes @ 0x0
  3076                           
  3077     00C1                     ??_OSCILLATOR_Initialize:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080     00C1                     ??_WDT_Initialize:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083     00C1                     ??_ECCP2_Initialize:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086     00C1                     ??_FVR_Initialize:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089     00C1                     ??_CMP2_Initialize:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092     00C1                     ??_TMR2_Initialize:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095     00C1                     ??_TMR0_Initialize:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098     00C1                     ??_TMR6_Initialize:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101     00C1                     ??_CMP1_Initialize:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104     00C1                     ??_PWM3_Initialize:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107     00C1                     ??_SPI1_Open:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110     00C1                     ??_TMR0_WriteTimer:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113     00C1                     ??_Route_empty:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116                           
  3117                           ; 1 bytes @ 0x0
  3118     00C1                     	ds	1
  3119     00C2                     ___bmul@product:
  3120     00C2                     SPI1_ExchangeBlock@blockSize:	
  3121                           ; 1 bytes @ 0x1
  3122                           
  3123     00C2                     Route_empty@i:	
  3124                           ; 2 bytes @ 0x1
  3125                           
  3126     00C2                     ??___bmul:	
  3127                           ; 2 bytes @ 0x1
  3128                           
  3129                           
  3130                           ; 1 bytes @ 0x1
  3131     00C2                     	ds	1
  3132     00C3                     ___bmul@multiplier:
  3133     00C3                     ??_PIN_MANAGER_Initialize:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136     00C3                     ??_TMR1_Initialize:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139     00C3                     ??_EUSART_Initialize:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142     00C3                     ??_IOCBF0_SetInterruptHandler:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145     00C3                     ??_IOCBF3_SetInterruptHandler:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148     00C3                     ??_EUSART_SetRxInterruptHandler:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151     00C3                     ??_EUSART_SetFramingErrorHandler:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154     00C3                     ??_EUSART_SetOverrunErrorHandler:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157     00C3                     ??_EUSART_SetErrorHandler:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160     00C3                     ??_TMR1_SetInterruptHandler:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163     00C3                     ??_SYSTEM_Initialize:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166     00C3                     ??_Initialize_list:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169                           
  3170                           ; 1 bytes @ 0x2
  3171     00C3                     	ds	1
  3172     00C4                     SPI1_Open@spi1UniqueConfiguration:
  3173     00C4                     SPI1_ExchangeBlock@data:	
  3174                           ; 1 bytes @ 0x3
  3175                           
  3176     00C4                     ??_SPI1_ExchangeBlock:	
  3177                           ; 1 bytes @ 0x3
  3178                           
  3179                           
  3180                           ; 1 bytes @ 0x3
  3181     00C4                     	ds	1
  3182     00C5                     ?_Tx_spi:
  3183     00C5                     Tx_spi@data:	
  3184                           ; 1 bytes @ 0x4
  3185                           
  3186                           
  3187                           ; 1 bytes @ 0x4
  3188     00C5                     	ds	1
  3189     00C6                     Tx_spi@dataSize:
  3190                           
  3191                           ; 2 bytes @ 0x5
  3192     00C6                     	ds	2
  3193     00C8                     Ini_matrix@i:
  3194     00C8                     ??_Matrix_update_dir:	
  3195                           ; 1 bytes @ 0x7
  3196                           
  3197     00C8                     ??_Matrix_update_floor:	
  3198                           ; 1 bytes @ 0x7
  3199                           
  3200     00C8                     ??_Tx_spi:	
  3201                           ; 1 bytes @ 0x7
  3202                           
  3203     00C8                     ??_Ini_matrix:	
  3204                           ; 1 bytes @ 0x7
  3205                           
  3206                           
  3207                           ; 1 bytes @ 0x7
  3208     00C8                     	ds	1
  3209     00C9                     Ini_matrix@data:
  3210     00C9                     Matrix_update_floor@data:	
  3211                           ; 2 bytes @ 0x8
  3212                           
  3213     00C9                     Matrix_update_dir@route_:	
  3214                           ; 2 bytes @ 0x8
  3215                           
  3216                           
  3217                           ; 4 bytes @ 0x8
  3218     00C9                     	ds	2
  3219     00CB                     Ini_matrix@k:
  3220     00CB                     Matrix_update_floor@display_floor:	
  3221                           ; 1 bytes @ 0xA
  3222                           
  3223                           
  3224                           ; 1 bytes @ 0xA
  3225     00CB                     	ds	1
  3226     00CC                     Ini_matrix@i_1605:
  3227     00CC                     Matrix_update_floor@i:	
  3228                           ; 1 bytes @ 0xB
  3229                           
  3230                           
  3231                           ; 1 bytes @ 0xB
  3232     00CC                     	ds	1
  3233     00CD                     Matrix_update_dir@mask:
  3234                           
  3235                           ; 1 bytes @ 0xC
  3236     00CD                     	ds	1
  3237     00CE                     Matrix_update_dir@display_dir:
  3238                           
  3239                           ; 1 bytes @ 0xD
  3240     00CE                     	ds	1
  3241     00CF                     Matrix_update_dir@data:
  3242                           
  3243                           ; 2 bytes @ 0xE
  3244     00CF                     	ds	2
  3245     00D1                     Matrix_update_dir@i_1616:
  3246                           
  3247                           ; 1 bytes @ 0x10
  3248     00D1                     	ds	1
  3249     00D2                     Matrix_update_dir@i:
  3250                           
  3251                           ; 2 bytes @ 0x11
  3252     00D2                     	ds	2
  3253     00D4                     ??_Motor_Turn_Off:
  3254     00D4                     ??_Motor_Turn_On:	
  3255                           ; 1 bytes @ 0x13
  3256                           
  3257     00D4                     ??_Start:	
  3258                           ; 1 bytes @ 0x13
  3259                           
  3260     00D4                     ??_Idle:	
  3261                           ; 1 bytes @ 0x13
  3262                           
  3263                           
  3264                           ; 1 bytes @ 0x13
  3265     00D4                     	ds	2
  3266     00D6                     ??_main:
  3267                           
  3268                           ; 1 bytes @ 0x15
  3269     00D6                     	ds	2
  3270     00D8                     main@is_empty:
  3271                           
  3272                           ; 1 bytes @ 0x17
  3273     00D8                     	ds	1
  3274                           
  3275                           	psect	cstackCOMMON
  3276     0070                     __pcstackCOMMON:
  3277     0070                     ?_SPI1_Initialize:
  3278     0070                     ?_PIN_MANAGER_Initialize:	
  3279                           ; 1 bytes @ 0x0
  3280                           
  3281     0070                     ?_OSCILLATOR_Initialize:	
  3282                           ; 1 bytes @ 0x0
  3283                           
  3284     0070                     ?_WDT_Initialize:	
  3285                           ; 1 bytes @ 0x0
  3286                           
  3287     0070                     ?_ECCP2_Initialize:	
  3288                           ; 1 bytes @ 0x0
  3289                           
  3290     0070                     ?_FVR_Initialize:	
  3291                           ; 1 bytes @ 0x0
  3292                           
  3293     0070                     ?_CMP2_Initialize:	
  3294                           ; 1 bytes @ 0x0
  3295                           
  3296     0070                     ?_TMR2_Initialize:	
  3297                           ; 1 bytes @ 0x0
  3298                           
  3299     0070                     ?_TMR0_Initialize:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302     0070                     ?_TMR6_Initialize:	
  3303                           ; 1 bytes @ 0x0
  3304                           
  3305     0070                     ?_CMP1_Initialize:	
  3306                           ; 1 bytes @ 0x0
  3307                           
  3308     0070                     ?_PWM3_Initialize:	
  3309                           ; 1 bytes @ 0x0
  3310                           
  3311     0070                     ?_TMR1_Initialize:	
  3312                           ; 1 bytes @ 0x0
  3313                           
  3314     0070                     ?_EUSART_Initialize:	
  3315                           ; 1 bytes @ 0x0
  3316                           
  3317     0070                     ?_IOCBF0_DefaultInterruptHandler:	
  3318                           ; 1 bytes @ 0x0
  3319                           
  3320     0070                     ?_IOCBF3_DefaultInterruptHandler:	
  3321                           ; 1 bytes @ 0x0
  3322                           
  3323     0070                     ?_IOCBF0_ISR:	
  3324                           ; 1 bytes @ 0x0
  3325                           
  3326     0070                     ?_IOCBF3_ISR:	
  3327                           ; 1 bytes @ 0x0
  3328                           
  3329     0070                     ?_ECCP2_CaptureISR:	
  3330                           ; 1 bytes @ 0x0
  3331                           
  3332     0070                     ?_CMP1_ISR:	
  3333                           ; 1 bytes @ 0x0
  3334                           
  3335     0070                     ?_CMP2_ISR:	
  3336                           ; 1 bytes @ 0x0
  3337                           
  3338     0070                     ?_TMR1_ISR:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341     0070                     ?_ISR_Floor3:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344     0070                     ?_ISR_Floor4:	
  3345                           ; 1 bytes @ 0x0
  3346                           
  3347     0070                     ?_EUSART_Receive_ISR:	
  3348                           ; 1 bytes @ 0x0
  3349                           
  3350     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356     0070                     ?_EUSART_DefaultErrorHandler:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359     0070                     ?_EUSART_RxDataHandler:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362     0070                     ?_TMR1_DefaultInterruptHandler:	
  3363                           ; 1 bytes @ 0x0
  3364                           
  3365     0070                     ?_TMR1_CallBack:	
  3366                           ; 1 bytes @ 0x0
  3367                           
  3368     0070                     ?_Matrix_update_dir:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371     0070                     ?_Matrix_update_floor:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374     0070                     ?_ECCP2_CallBack:	
  3375                           ; 1 bytes @ 0x0
  3376                           
  3377     0070                     ?_putch:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380     0070                     ?_SYSTEM_Initialize:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383     0070                     ?_PIN_MANAGER_IOC:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386     0070                     ?_INTERRUPT_InterruptManager:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389     0070                     ?_SPI1_Open:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392     0070                     ?_EUSART_Read:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395     0070                     ?_EUSART_Write:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398     0070                     ?_TMR1_WriteTimer:	
  3399                           ; 1 bytes @ 0x0
  3400                           
  3401     0070                     ?_TMR0_ReadTimer:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404     0070                     ?_TMR0_WriteTimer:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407     0070                     ?_Motor_Turn_Off:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410     0070                     ?_Motor_Turn_On:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413     0070                     ?_Read_UART:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416     0070                     ?_Write_UART:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419     0070                     ?_Route_empty:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422     0070                     ?_Start:	
  3423                           ; 1 bytes @ 0x0
  3424                           
  3425     0070                     ?_Idle:	
  3426                           ; 1 bytes @ 0x0
  3427                           
  3428     0070                     ?_Ini_matrix:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431     0070                     ?_ISR_Floor2:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434     0070                     ?_ISR_Floor1:	
  3435                           ; 1 bytes @ 0x0
  3436                           
  3437     0070                     ?_main:	
  3438                           ; 1 bytes @ 0x0
  3439                           
  3440     0070                     ?i1_SPI1_ExchangeBlock:	
  3441                           ; 1 bytes @ 0x0
  3442                           
  3443     0070                     ?i1_Matrix_update_floor:	
  3444                           ; 1 bytes @ 0x0
  3445                           
  3446     0070                     ?_fputc:	
  3447                           ; 1 bytes @ 0x0
  3448                           
  3449     0070                     ?_Next_floor:	
  3450                           ; 2 bytes @ 0x0
  3451                           
  3452     0070                     ?___awmod:	
  3453                           ; 2 bytes @ 0x0
  3454                           
  3455     0070                     EUSART_Read@readValue:	
  3456                           ; 2 bytes @ 0x0
  3457                           
  3458     0070                     EUSART_Write@txData:	
  3459                           ; 1 bytes @ 0x0
  3460                           
  3461     0070                     TMR0_ReadTimer@readVal:	
  3462                           ; 1 bytes @ 0x0
  3463                           
  3464     0070                     putch@c:	
  3465                           ; 1 bytes @ 0x0
  3466                           
  3467     0070                     i1SPI1_ExchangeBlock@block:	
  3468                           ; 1 bytes @ 0x0
  3469                           
  3470     0070                     TMR1_WriteTimer@timerVal:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473     0070                     ECCP2_CallBack@capturedValue:	
  3474                           ; 2 bytes @ 0x0
  3475                           
  3476     0070                     ___awmod@divisor:	
  3477                           ; 2 bytes @ 0x0
  3478                           
  3479     0070                     fputc@c:	
  3480                           ; 2 bytes @ 0x0
  3481                           
  3482     0070                     ??_IOCBF0_DefaultInterruptHandler:	
  3483                           ; 2 bytes @ 0x0
  3484                           
  3485     0070                     ??_IOCBF3_DefaultInterruptHandler:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488     0070                     ??_EUSART_Receive_ISR:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497     0070                     ??_EUSART_DefaultErrorHandler:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500     0070                     ??_EUSART_RxDataHandler:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503     0070                     ??_TMR1_DefaultInterruptHandler:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506     0070                     ??_putch:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509     0070                     ??_EUSART_Read:	
  3510                           ; 1 bytes @ 0x0
  3511                           
  3512     0070                     ??_EUSART_Write:	
  3513                           ; 1 bytes @ 0x0
  3514                           
  3515     0070                     ??_TMR0_ReadTimer:	
  3516                           ; 1 bytes @ 0x0
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x0
  3520     0070                     	ds	1
  3521     0071                     ?___wmul:
  3522     0071                     ___wmul@multiplier:	
  3523                           ; 2 bytes @ 0x1
  3524                           
  3525     0071                     i1SPI1_ExchangeBlock@blockSize:	
  3526                           ; 2 bytes @ 0x1
  3527                           
  3528                           
  3529                           ; 2 bytes @ 0x1
  3530     0071                     	ds	1
  3531     0072                     ECCP2_CaptureISR@module:
  3532     0072                     ___awmod@dividend:	
  3533                           ; 2 bytes @ 0x2
  3534                           
  3535     0072                     fputc@fp:	
  3536                           ; 2 bytes @ 0x2
  3537                           
  3538     0072                     ??_ECCP2_CaptureISR:	
  3539                           ; 2 bytes @ 0x2
  3540                           
  3541     0072                     ??_ECCP2_CallBack:	
  3542                           ; 1 bytes @ 0x2
  3543                           
  3544     0072                     ??_TMR1_WriteTimer:	
  3545                           ; 1 bytes @ 0x2
  3546                           
  3547                           
  3548                           ; 1 bytes @ 0x2
  3549     0072                     	ds	1
  3550     0073                     i1SPI1_ExchangeBlock@data:
  3551     0073                     ___wmul@multiplicand:	
  3552                           ; 1 bytes @ 0x3
  3553                           
  3554     0073                     ??i1_SPI1_ExchangeBlock:	
  3555                           ; 2 bytes @ 0x3
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x3
  3559     0073                     	ds	1
  3560     0074                     ?i1_Tx_spi:
  3561     0074                     ___awmod@counter:	
  3562                           ; 1 bytes @ 0x4
  3563                           
  3564     0074                     i1Tx_spi@data:	
  3565                           ; 1 bytes @ 0x4
  3566                           
  3567     0074                     ??_fputc:	
  3568                           ; 1 bytes @ 0x4
  3569                           
  3570     0074                     ??___awmod:	
  3571                           ; 1 bytes @ 0x4
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x4
  3575     0074                     	ds	1
  3576     0075                     ___awmod@sign:
  3577     0075                     ___wmul@product:	
  3578                           ; 1 bytes @ 0x5
  3579                           
  3580     0075                     i1Tx_spi@dataSize:	
  3581                           ; 2 bytes @ 0x5
  3582                           
  3583     0075                     ??___wmul:	
  3584                           ; 2 bytes @ 0x5
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0x5
  3588     0075                     	ds	1
  3589     0076                     ?_New_request:
  3590     0076                     ?_abs:	
  3591                           ; 1 bytes @ 0x6
  3592                           
  3593     0076                     New_request@origin:	
  3594                           ; 2 bytes @ 0x6
  3595                           
  3596     0076                     abs@a:	
  3597                           ; 2 bytes @ 0x6
  3598                           
  3599     0076                     ??_Next_floor:	
  3600                           ; 2 bytes @ 0x6
  3601                           
  3602                           
  3603                           ; 1 bytes @ 0x6
  3604     0076                     	ds	1
  3605     0077                     ?___awdiv:
  3606     0077                     ?_read_prec_or_width:	
  3607                           ; 2 bytes @ 0x7
  3608                           
  3609     0077                     read_prec_or_width@fmt:	
  3610                           ; 2 bytes @ 0x7
  3611                           
  3612     0077                     Next_floor@index_:	
  3613                           ; 1 bytes @ 0x7
  3614                           
  3615     0077                     ___awdiv@divisor:	
  3616                           ; 2 bytes @ 0x7
  3617                           
  3618     0077                     ??i1_Tx_spi:	
  3619                           ; 2 bytes @ 0x7
  3620                           
  3621     0077                     ??i1_Matrix_update_floor:	
  3622                           ; 1 bytes @ 0x7
  3623                           
  3624                           
  3625                           ; 1 bytes @ 0x7
  3626     0077                     	ds	1
  3627     0078                     read_prec_or_width@ap:
  3628     0078                     New_request@dest:	
  3629                           ; 1 bytes @ 0x8
  3630                           
  3631     0078                     i1Matrix_update_floor@data:	
  3632                           ; 2 bytes @ 0x8
  3633                           
  3634     0078                     ??_abs:	
  3635                           ; 2 bytes @ 0x8
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0x8
  3639     0078                     	ds	1
  3640     0079                     ?_fputs:
  3641     0079                     fputs@s:	
  3642                           ; 2 bytes @ 0x9
  3643                           
  3644     0079                     Next_floor@i:	
  3645                           ; 1 bytes @ 0x9
  3646                           
  3647     0079                     ___awdiv@dividend:	
  3648                           ; 2 bytes @ 0x9
  3649                           
  3650     0079                     ??_read_prec_or_width:	
  3651                           ; 2 bytes @ 0x9
  3652                           
  3653                           
  3654                           ; 1 bytes @ 0x9
  3655     0079                     	ds	1
  3656     007A                     i1Matrix_update_floor@display_floor:
  3657     007A                     fputs@fp:	
  3658                           ; 1 bytes @ 0xA
  3659                           
  3660     007A                     ??_New_request:	
  3661                           ; 2 bytes @ 0xA
  3662                           
  3663                           
  3664                           ; 1 bytes @ 0xA
  3665     007A                     	ds	1
  3666     007B                     i1Matrix_update_floor@i:
  3667     007B                     ??___awdiv:	
  3668                           ; 1 bytes @ 0xB
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0xB
  3672     007B                     	ds	1
  3673     007C                     ??_ISR_Floor3:
  3674     007C                     ??_ISR_Floor4:	
  3675                           ; 1 bytes @ 0xC
  3676                           
  3677     007C                     ??_fputs:	
  3678                           ; 1 bytes @ 0xC
  3679                           
  3680     007C                     ??_Read_UART:	
  3681                           ; 1 bytes @ 0xC
  3682                           
  3683     007C                     ??_ISR_Floor2:	
  3684                           ; 1 bytes @ 0xC
  3685                           
  3686     007C                     ??_ISR_Floor1:	
  3687                           ; 1 bytes @ 0xC
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0xC
  3691     007C                     	ds	2
  3692     007E                     ??_IOCBF0_ISR:
  3693     007E                     ??_IOCBF3_ISR:	
  3694                           ; 1 bytes @ 0xE
  3695                           
  3696     007E                     ??_CMP1_ISR:	
  3697                           ; 1 bytes @ 0xE
  3698                           
  3699     007E                     ??_CMP2_ISR:	
  3700                           ; 1 bytes @ 0xE
  3701                           
  3702     007E                     ??_TMR1_ISR:	
  3703                           ; 1 bytes @ 0xE
  3704                           
  3705     007E                     ??_TMR1_CallBack:	
  3706                           ; 1 bytes @ 0xE
  3707                           
  3708     007E                     ??_sprintf:	
  3709                           ; 1 bytes @ 0xE
  3710                           
  3711     007E                     ??_PIN_MANAGER_IOC:	
  3712                           ; 1 bytes @ 0xE
  3713                           
  3714     007E                     ??_INTERRUPT_InterruptManager:	
  3715                           ; 1 bytes @ 0xE
  3716                           
  3717                           
  3718                           	psect	cstackBANK0
  3719     0020                     __pcstackBANK0:	
  3720                           ; 1 bytes @ 0xE
  3721                           
  3722     0020                     ___awdiv@counter:
  3723     0020                     read_prec_or_width@c:	
  3724                           ; 1 bytes @ 0x0
  3725                           
  3726     0020                     fputs@c:	
  3727                           ; 1 bytes @ 0x0
  3728                           
  3729     0020                     New_request@i:	
  3730                           ; 1 bytes @ 0x0
  3731                           
  3732                           
  3733                           ; 2 bytes @ 0x0
  3734     0020                     	ds	1
  3735     0021                     ___awdiv@sign:
  3736     0021                     read_prec_or_width@n:	
  3737                           ; 1 bytes @ 0x1
  3738                           
  3739     0021                     fputs@i:	
  3740                           ; 2 bytes @ 0x1
  3741                           
  3742                           
  3743                           ; 2 bytes @ 0x1
  3744     0021                     	ds	1
  3745     0022                     New_request@i_1562:
  3746     0022                     ___awdiv@quotient:	
  3747                           ; 2 bytes @ 0x2
  3748                           
  3749                           
  3750                           ; 2 bytes @ 0x2
  3751     0022                     	ds	1
  3752     0023                     ?_pad:
  3753     0023                     pad@fp:	
  3754                           ; 1 bytes @ 0x3
  3755                           
  3756                           
  3757                           ; 2 bytes @ 0x3
  3758     0023                     	ds	1
  3759     0024                     New_request@i_1563:
  3760                           
  3761                           ; 2 bytes @ 0x4
  3762     0024                     	ds	1
  3763     0025                     pad@buf:
  3764                           
  3765                           ; 1 bytes @ 0x5
  3766     0025                     	ds	1
  3767     0026                     New_request@i_1564:
  3768     0026                     pad@p:	
  3769                           ; 2 bytes @ 0x6
  3770                           
  3771                           
  3772                           ; 2 bytes @ 0x6
  3773     0026                     	ds	2
  3774     0028                     New_request@index_:
  3775     0028                     ??_pad:	
  3776                           ; 2 bytes @ 0x8
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x8
  3780     0028                     	ds	1
  3781     0029                     pad@i:
  3782                           
  3783                           ; 2 bytes @ 0x9
  3784     0029                     	ds	1
  3785     002A                     Read_UART@ori:
  3786                           
  3787                           ; 2 bytes @ 0xA
  3788     002A                     	ds	1
  3789     002B                     ?_dtoa:
  3790     002B                     dtoa@fp:	
  3791                           ; 1 bytes @ 0xB
  3792                           
  3793                           
  3794                           ; 2 bytes @ 0xB
  3795     002B                     	ds	1
  3796     002C                     Read_UART@dest:
  3797                           
  3798                           ; 2 bytes @ 0xC
  3799     002C                     	ds	1
  3800     002D                     dtoa@d:
  3801                           
  3802                           ; 2 bytes @ 0xD
  3803     002D                     	ds	2
  3804     002F                     ??_dtoa:
  3805                           
  3806                           ; 1 bytes @ 0xF
  3807     002F                     	ds	1
  3808     0030                     _dtoa$2209:
  3809                           
  3810                           ; 2 bytes @ 0x10
  3811     0030                     	ds	2
  3812     0032                     dtoa@p:
  3813                           
  3814                           ; 1 bytes @ 0x12
  3815     0032                     	ds	1
  3816     0033                     dtoa@w:
  3817                           
  3818                           ; 2 bytes @ 0x13
  3819     0033                     	ds	2
  3820     0035                     dtoa@s:
  3821                           
  3822                           ; 1 bytes @ 0x15
  3823     0035                     	ds	1
  3824     0036                     dtoa@i:
  3825                           
  3826                           ; 2 bytes @ 0x16
  3827     0036                     	ds	2
  3828     0038                     ?_vfpfcnvrt:
  3829     0038                     vfpfcnvrt@fp:	
  3830                           ; 1 bytes @ 0x18
  3831                           
  3832                           
  3833                           ; 2 bytes @ 0x18
  3834     0038                     	ds	2
  3835     003A                     vfpfcnvrt@fmt:
  3836                           
  3837                           ; 1 bytes @ 0x1A
  3838     003A                     	ds	1
  3839     003B                     vfpfcnvrt@ap:
  3840                           
  3841                           ; 1 bytes @ 0x1B
  3842     003B                     	ds	1
  3843     003C                     ??_vfpfcnvrt:
  3844                           
  3845                           ; 1 bytes @ 0x1C
  3846     003C                     	ds	4
  3847     0040                     vfpfcnvrt@convarg:
  3848                           
  3849                           ; 4 bytes @ 0x20
  3850     0040                     	ds	4
  3851     0044                     vfpfcnvrt@done:
  3852                           
  3853                           ; 1 bytes @ 0x24
  3854     0044                     	ds	1
  3855     0045                     vfpfcnvrt@cp:
  3856                           
  3857                           ; 2 bytes @ 0x25
  3858     0045                     	ds	2
  3859     0047                     ?_vfprintf:
  3860     0047                     vfprintf@fp:	
  3861                           ; 2 bytes @ 0x27
  3862                           
  3863                           
  3864                           ; 2 bytes @ 0x27
  3865     0047                     	ds	2
  3866     0049                     vfprintf@fmt:
  3867                           
  3868                           ; 2 bytes @ 0x29
  3869     0049                     	ds	2
  3870     004B                     vfprintf@ap:
  3871                           
  3872                           ; 1 bytes @ 0x2B
  3873     004B                     	ds	1
  3874     004C                     ??_vfprintf:
  3875                           
  3876                           ; 1 bytes @ 0x2C
  3877     004C                     	ds	1
  3878     004D                     vfprintf@cfmt:
  3879                           
  3880                           ; 2 bytes @ 0x2D
  3881     004D                     	ds	2
  3882     004F                     ?_sprintf:
  3883     004F                     sprintf@s:	
  3884                           ; 2 bytes @ 0x2F
  3885                           
  3886                           
  3887                           ; 1 bytes @ 0x2F
  3888     004F                     	ds	1
  3889     0050                     sprintf@fmt:
  3890                           
  3891                           ; 2 bytes @ 0x30
  3892     0050                     	ds	4
  3893     0054                     sprintf@ap:
  3894                           
  3895                           ; 1 bytes @ 0x34
  3896     0054                     	ds	1
  3897     0055                     sprintf@f:
  3898                           
  3899                           ; 11 bytes @ 0x35
  3900     0055                     	ds	11
  3901     0060                     ??_Write_UART:
  3902                           
  3903                           ; 1 bytes @ 0x40
  3904     0060                     	ds	2
  3905                           
  3906                           	psect	maintext
  3907     04E1                     __pmaintext:	
  3908 ;;
  3909 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3910 ;;
  3911 ;; *************** function _main *****************
  3912 ;; Defined at:
  3913 ;;		line 412 in file "main.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  is_empty        1   23[BANK1 ] _Bool 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : B1F/0
  3924 ;;		On exit  : 1F/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3927 ;;      Params:         0       0       0       0       0       0
  3928 ;;      Locals:         0       0       1       0       0       0
  3929 ;;      Temps:          0       0       2       0       0       0
  3930 ;;      Totals:         0       0       3       0       0       0
  3931 ;;Total ram usage:        3 bytes
  3932 ;; Hardware stack levels required when called: 17
  3933 ;; This function calls:
  3934 ;;		_EUSART_SetRxInterruptHandler
  3935 ;;		_IOCBF0_SetInterruptHandler
  3936 ;;		_IOCBF3_SetInterruptHandler
  3937 ;;		_Idle
  3938 ;;		_Ini_matrix
  3939 ;;		_Initialize_list
  3940 ;;		_Motor_Turn_Off
  3941 ;;		_Motor_Turn_On
  3942 ;;		_Route_empty
  3943 ;;		_SPI1_Open
  3944 ;;		_SYSTEM_Initialize
  3945 ;;		_Start
  3946 ;;		_TMR1_SetInterruptHandler
  3947 ;; This function is called by:
  3948 ;;		Startup code after reset
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952     04E1                     _main:	
  3953                           ;psect for function _main
  3954                           
  3955                           
  3956                           ;main.c: 414:     SYSTEM_Initialize();
  3957                           
  3958                           ;incstack = 0
  3959 ;; hardware stack exceeded
  3960                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3961     04E1  318E  26D1  3184   	fcall	_SYSTEM_Initialize
  3962                           
  3963                           ;main.c: 416:     IOCBF0_SetInterruptHandler(ISR_Floor1);
  3964     04E4  3043               	movlw	low _ISR_Floor1
  3965     04E5  00C1               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  3966     04E6  300E               	movlw	high _ISR_Floor1
  3967     04E7  00C2               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3968     04E8  318B  23B8  3184   	fcall	_IOCBF0_SetInterruptHandler
  3969                           
  3970                           ;main.c: 417:     IOCBF3_SetInterruptHandler(ISR_Floor2);
  3971     04EB  3082               	movlw	low _ISR_Floor2
  3972     04EC  00C1               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  3973     04ED  3006               	movlw	high _ISR_Floor2
  3974     04EE  00C2               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3975     04EF  318B  23BD  3184   	fcall	_IOCBF3_SetInterruptHandler
  3976                           
  3977                           ;main.c: 418:     EUSART_SetRxInterruptHandler(Read_UART);
  3978     04F2  30CA               	movlw	low _Read_UART
  3979     04F3  00C1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  3980     04F4  3006               	movlw	high _Read_UART
  3981     04F5  00C2               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  3982     04F6  318B  23B3  3184   	fcall	_EUSART_SetRxInterruptHandler
  3983                           
  3984                           ;main.c: 419:     TMR1_SetInterruptHandler(Write_UART);
  3985     04F9  3068               	movlw	low _Write_UART
  3986     04FA  00C1               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  3987     04FB  3000               	movlw	high _Write_UART
  3988     04FC  00C2               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3989     04FD  318B  23C2  3184   	fcall	_TMR1_SetInterruptHandler
  3990     0500  0022               	movlb	2	; select bank2
  3991     0501  148D               	bsf	13,1	;volatile
  3992                           
  3993                           ;main.c: 421:     SPI1_Open(SPI1_DEFAULT);
  3994     0502  3000               	movlw	0
  3995     0503  3185  253B  3184   	fcall	_SPI1_Open
  3996                           
  3997                           ;main.c: 422:     Ini_matrix();
  3998     0506  3187  2752  3184   	fcall	_Ini_matrix
  3999                           
  4000                           ;main.c: 424:     Initialize_list (&route_list);
  4001     0509  304A               	movlw	low _route_list
  4002     050A  00C1               	movwf	Initialize_list@list^(0+128)
  4003     050B  3001               	movlw	high _route_list
  4004     050C  00C2               	movwf	(Initialize_list@list^(0+128)+1)
  4005     050D  318C  2409  3184   	fcall	_Initialize_list
  4006                           
  4007                           ;main.c: 425:     Start();
  4008     0510  318E  2664  3184   	fcall	_Start
  4009                           
  4010                           ;main.c: 427:     (INTCONbits.GIE = 1);
  4011     0513  178B               	bsf	11,7	;volatile
  4012                           
  4013                           ;main.c: 428:     (INTCONbits.PEIE = 1);
  4014     0514  170B               	bsf	11,6	;volatile
  4015     0515                     l3996:
  4016                           
  4017                           ;main.c: 435:     {;main.c: 436:         _Bool is_empty = Route_empty();
  4018     0515  318D  25A6  3184   	fcall	_Route_empty
  4019     0518  0021               	movlb	1	; select bank1
  4020     0519  00D8               	movwf	main@is_empty^(0+128)
  4021                           
  4022                           ;main.c: 437:         if(is_empty) Idle();
  4023     051A  0858               	movf	main@is_empty^(0+128),w
  4024     051B  1903               	btfsc	3,2
  4025     051C  2D21               	goto	l4002
  4026     051D  318C  24C4  3184   	fcall	_Idle
  4027     0520  2D24               	goto	l4004
  4028     0521                     l4002:
  4029     0521  318C  249C  3184   	fcall	_Motor_Turn_On
  4030     0524                     l4004:
  4031                           
  4032                           ;main.c: 461:         if(stop_2s){
  4033     0524  0020               	movlb	0	; select bank0
  4034     0525  0869               	movf	_stop_2s,w
  4035     0526  1903               	btfsc	3,2
  4036     0527  2D15               	goto	l3996
  4037                           
  4038                           ;main.c: 462:             Motor_Turn_Off();
  4039     0528  318C  243B  3184   	fcall	_Motor_Turn_Off
  4040                           
  4041                           ;main.c: 463:             _delay((unsigned long)((2000)*(8000000/4000.0)));
  4042     052B  3015               	movlw	21
  4043     052C  0021               	movlb	1	; select bank1
  4044     052D  00D7               	movwf	(??_main^(0+128)+1)
  4045     052E  304B               	movlw	75
  4046     052F  00D6               	movwf	??_main^(0+128)
  4047     0530  30BE               	movlw	190
  4048     0531                     u2597:
  4049     0531  0B89               	decfsz	9,f
  4050     0532  2D31               	goto	u2597
  4051     0533  0BD6               	decfsz	??_main^(0+128),f
  4052     0534  2D31               	goto	u2597
  4053     0535  0BD7               	decfsz	(??_main^(0+128)+1),f
  4054     0536  2D31               	goto	u2597
  4055     0537  0000               	nop
  4056                           
  4057                           ;main.c: 464:             stop_2s = 0;
  4058     0538  0020               	movlb	0	; select bank0
  4059     0539  01E9               	clrf	_stop_2s
  4060     053A  2D15               	goto	l3996
  4061     053B                     __end_of_main:
  4062                           
  4063                           	psect	text1
  4064     0E64                     __ptext1:	
  4065 ;; *************** function _Start *****************
  4066 ;; Defined at:
  4067 ;;		line 224 in file "main.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  1    wreg      void 
  4074 ;; Registers used:
  4075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 1F/1
  4078 ;;		On exit  : 1F/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4081 ;;      Params:         0       0       0       0       0       0
  4082 ;;      Locals:         0       0       0       0       0       0
  4083 ;;      Temps:          0       0       2       0       0       0
  4084 ;;      Totals:         0       0       2       0       0       0
  4085 ;;Total ram usage:        2 bytes
  4086 ;; Hardware stack levels used: 1
  4087 ;; Hardware stack levels required when called: 16
  4088 ;; This function calls:
  4089 ;;		_Matrix_update_floor
  4090 ;;		_Motor_Turn_Off
  4091 ;;		_Motor_Turn_On
  4092 ;;		_TMR0_WriteTimer
  4093 ;; This function is called by:
  4094 ;;		_main
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098     0E64                     _Start:	
  4099                           ;psect for function _Start
  4100                           
  4101                           
  4102                           ;main.c: 225:     LATAbits.LATA7 = 0;
  4103                           
  4104                           ;incstack = 0
  4105 ;; hardware stack exceeded
  4106                           ; Regs used in _Start: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4107     0E64  0022               	movlb	2	; select bank2
  4108     0E65  138C               	bcf	12,7	;volatile
  4109                           
  4110                           ;main.c: 226:     Motor_Turn_On();
  4111     0E66  318C  249C  318E   	fcall	_Motor_Turn_On
  4112                           
  4113                           ;main.c: 227:     _delay((unsigned long)((7000)*(8000000/4000.0)));
  4114     0E69  3048               	movlw	72
  4115     0E6A  0021               	movlb	1	; select bank1
  4116     0E6B  00D5               	movwf	(??_Start^(0+128)+1)
  4117     0E6C  3006               	movlw	6
  4118     0E6D  00D4               	movwf	??_Start^(0+128)
  4119     0E6E  309F               	movlw	159
  4120     0E6F                     u2607:
  4121     0E6F  0B89               	decfsz	9,f
  4122     0E70  2E6F               	goto	u2607
  4123     0E71  0BD4               	decfsz	??_Start^(0+128),f
  4124     0E72  2E6F               	goto	u2607
  4125     0E73  0BD5               	decfsz	(??_Start^(0+128)+1),f
  4126     0E74  2E6F               	goto	u2607
  4127     0E75  3200               	nop2
  4128                           
  4129                           ;main.c: 228:     index = 0;
  4130     0E76  0020               	movlb	0	; select bank0
  4131     0E77  01EF               	clrf	_index
  4132                           
  4133                           ;main.c: 229:     Motor_Turn_Off();
  4134     0E78  318C  243B  318E   	fcall	_Motor_Turn_Off
  4135                           
  4136                           ;main.c: 230:     Matrix_update_floor(0);
  4137     0E7B  3000               	movlw	0
  4138     0E7C  318E  26FB  318E   	fcall	_Matrix_update_floor
  4139                           
  4140                           ;main.c: 231:     LATAbits.LATA7 = 0;
  4141     0E7F  0022               	movlb	2	; select bank2
  4142     0E80  138C               	bcf	12,7	;volatile
  4143                           
  4144                           ;main.c: 232:     TMR0_WriteTimer(0);
  4145     0E81  3000               	movlw	0
  4146     0E82  318B  23CD         	fcall	_TMR0_WriteTimer
  4147                           
  4148                           ;main.c: 233:     position = 0;
  4149     0E84  01EC               	clrf	_position
  4150     0E85  0008               	return
  4151     0E86                     __end_of_Start:
  4152                           
  4153                           	psect	text2
  4154     0BCD                     __ptext2:	
  4155 ;; *************** function _TMR0_WriteTimer *****************
  4156 ;; Defined at:
  4157 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  timerVal        1    wreg     unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg
  4166 ;; Tracked objects:
  4167 ;;		On entry : 1F/2
  4168 ;;		On exit  : 1F/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4171 ;;      Params:         0       0       0       0       0       0
  4172 ;;      Locals:         0       0       1       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0
  4174 ;;      Totals:         0       0       1       0       0       0
  4175 ;;Total ram usage:        1 bytes
  4176 ;; Hardware stack levels used: 1
  4177 ;; Hardware stack levels required when called: 12
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_Start
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185     0BCD                     _TMR0_WriteTimer:	
  4186                           ;psect for function _TMR0_WriteTimer
  4187                           
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _TMR0_WriteTimer: [wreg]
  4191                           ;TMR0_WriteTimer@timerVal stored from wreg
  4192     0BCD  0021               	movlb	1	; select bank1
  4193     0BCE  00C1               	movwf	TMR0_WriteTimer@timerVal^(0+128)
  4194                           
  4195                           ;mcc_generated_files/tmr0.c: 89: void TMR0_WriteTimer(uint8_t timerVal);mcc_generated_fi
      +                          les/tmr0.c: 90: {;mcc_generated_files/tmr0.c: 92:     TMR0 = timerVal;
  4196     0BCF  0841               	movf	TMR0_WriteTimer@timerVal^(0+128),w
  4197     0BD0  0020               	movlb	0	; select bank0
  4198     0BD1  0095               	movwf	21	;volatile
  4199     0BD2  0008               	return
  4200     0BD3                     __end_of_TMR0_WriteTimer:
  4201                           
  4202                           	psect	text3
  4203     0EFB                     __ptext3:	
  4204 ;; *************** function _Matrix_update_floor *****************
  4205 ;; Defined at:
  4206 ;;		line 272 in file "main.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  display_floo    1    wreg     unsigned char 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  display_floo    1   10[BANK1 ] unsigned char 
  4211 ;;  i               1   11[BANK1 ] unsigned char 
  4212 ;;  data            2    8[BANK1 ] unsigned char [2]
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 18/0
  4219 ;;		On exit  : 1F/1
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4222 ;;      Params:         0       0       0       0       0       0
  4223 ;;      Locals:         0       0       4       0       0       0
  4224 ;;      Temps:          0       0       1       0       0       0
  4225 ;;      Totals:         0       0       5       0       0       0
  4226 ;;Total ram usage:        5 bytes
  4227 ;; Hardware stack levels used: 1
  4228 ;; Hardware stack levels required when called: 14
  4229 ;; This function calls:
  4230 ;;		_Tx_spi
  4231 ;; This function is called by:
  4232 ;;		_Start
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236     0EFB                     _Matrix_update_floor:	
  4237                           ;psect for function _Matrix_update_floor
  4238                           
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4242                           ;Matrix_update_floor@display_floor stored from wreg
  4243     0EFB  0021               	movlb	1	; select bank1
  4244     0EFC  00CB               	movwf	Matrix_update_floor@display_floor^(0+128)
  4245                           
  4246                           ;main.c: 273:     uint8_t data[2];;main.c: 274:     display_floor = display_floor*4;
  4247     0EFD  084B               	movf	Matrix_update_floor@display_floor^(0+128),w
  4248     0EFE  00C8               	movwf	??_Matrix_update_floor^(0+128)
  4249     0EFF  3002               	movlw	2
  4250     0F00                     u2325:
  4251     0F00  35C8               	lslf	??_Matrix_update_floor^(0+128),f
  4252     0F01  0B89               	decfsz	9,f
  4253     0F02  2F00               	goto	u2325
  4254     0F03  0848               	movf	??_Matrix_update_floor^(0+128),w
  4255     0F04  00CB               	movwf	Matrix_update_floor@display_floor^(0+128)
  4256                           
  4257                           ;main.c: 276:    for(uint8_t i=5;i<=8;i++){
  4258     0F05  3005               	movlw	5
  4259     0F06  00CC               	movwf	Matrix_update_floor@i^(0+128)
  4260     0F07                     l3754:
  4261                           
  4262                           ;main.c: 277:         data[0] = i;
  4263     0F07  084C               	movf	Matrix_update_floor@i^(0+128),w
  4264     0F08  00C9               	movwf	Matrix_update_floor@data^(0+128)
  4265                           
  4266                           ;main.c: 278:         data[1] = MATRIX_FLOOR[display_floor];
  4267     0F09  084B               	movf	Matrix_update_floor@display_floor^(0+128),w
  4268     0F0A  3EFD               	addlw	low (_MATRIX_FLOOR| (0+32768))
  4269     0F0B  0084               	movwf	4
  4270     0F0C  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
  4271     0F0D  1803               	skipnc
  4272     0F0E  3E01               	addlw	1
  4273     0F0F  0085               	movwf	5
  4274     0F10  0800               	movf	0,w	;code access
  4275     0F11  00CA               	movwf	(Matrix_update_floor@data^(0+128)+1)
  4276                           
  4277                           ;main.c: 279:         Tx_spi(data, 2);
  4278     0F12  30C9               	movlw	(low (Matrix_update_floor@data| 0))& (0+255)
  4279     0F13  00C5               	movwf	Tx_spi@data^(0+128)
  4280     0F14  3002               	movlw	2
  4281     0F15  00C6               	movwf	Tx_spi@dataSize^(0+128)
  4282     0F16  3000               	movlw	0
  4283     0F17  00C7               	movwf	(Tx_spi@dataSize^(0+128)+1)
  4284     0F18  318C  24F0  318E   	fcall	_Tx_spi
  4285                           
  4286                           ;main.c: 280:         display_floor++;
  4287     0F1B  3001               	movlw	1
  4288     0F1C  0021               	movlb	1	; select bank1
  4289     0F1D  07CB               	addwf	Matrix_update_floor@display_floor^(0+128),f
  4290                           
  4291                           ;main.c: 281:     }
  4292     0F1E  3001               	movlw	1
  4293     0F1F  07CC               	addwf	Matrix_update_floor@i^(0+128),f
  4294     0F20  3009               	movlw	9
  4295     0F21  024C               	subwf	Matrix_update_floor@i^(0+128),w
  4296     0F22  1803               	btfsc	3,0
  4297     0F23  0008               	return
  4298     0F24  2F07               	goto	l3754
  4299     0F25                     __end_of_Matrix_update_floor:
  4300                           
  4301                           	psect	text4
  4302     0ED1                     __ptext4:	
  4303 ;; *************** function _SYSTEM_Initialize *****************
  4304 ;; Defined at:
  4305 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		wreg, status,2, status,0, pclath, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : B1F/0
  4316 ;;		On exit  : 1F/1
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4319 ;;      Params:         0       0       0       0       0       0
  4320 ;;      Locals:         0       0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0
  4322 ;;      Totals:         0       0       0       0       0       0
  4323 ;;Total ram usage:        0 bytes
  4324 ;; Hardware stack levels used: 1
  4325 ;; Hardware stack levels required when called: 14
  4326 ;; This function calls:
  4327 ;;		_CMP1_Initialize
  4328 ;;		_CMP2_Initialize
  4329 ;;		_ECCP2_Initialize
  4330 ;;		_EUSART_Initialize
  4331 ;;		_FVR_Initialize
  4332 ;;		_OSCILLATOR_Initialize
  4333 ;;		_PIN_MANAGER_Initialize
  4334 ;;		_PWM3_Initialize
  4335 ;;		_SPI1_Initialize
  4336 ;;		_TMR0_Initialize
  4337 ;;		_TMR1_Initialize
  4338 ;;		_TMR2_Initialize
  4339 ;;		_TMR6_Initialize
  4340 ;;		_WDT_Initialize
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346     0ED1                     _SYSTEM_Initialize:	
  4347                           ;psect for function _SYSTEM_Initialize
  4348                           
  4349                           
  4350                           ;mcc_generated_files/mcc.c: 53:     SPI1_Initialize();
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4354     0ED1  318C  2469  318E   	fcall	_SPI1_Initialize
  4355                           
  4356                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  4357     0ED4  318F  2725  318E   	fcall	_PIN_MANAGER_Initialize
  4358                           
  4359                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4360     0ED7  318B  23C7  318E   	fcall	_OSCILLATOR_Initialize
  4361                           
  4362                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4363     0EDA  318B  239B  318E   	fcall	_WDT_Initialize
  4364                           
  4365                           ;mcc_generated_files/mcc.c: 57:     ECCP2_Initialize();
  4366     0EDD  318C  241C  318E   	fcall	_ECCP2_Initialize
  4367                           
  4368                           ;mcc_generated_files/mcc.c: 58:     FVR_Initialize();
  4369     0EE0  318B  2397  318E   	fcall	_FVR_Initialize
  4370                           
  4371                           ;mcc_generated_files/mcc.c: 59:     CMP2_Initialize();
  4372     0EE3  318C  245D  318E   	fcall	_CMP2_Initialize
  4373                           
  4374                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  4375     0EE6  318B  23E7  318E   	fcall	_TMR2_Initialize
  4376                           
  4377                           ;mcc_generated_files/mcc.c: 61:     TMR0_Initialize();
  4378     0EE9  318C  2446  318E   	fcall	_TMR0_Initialize
  4379                           
  4380                           ;mcc_generated_files/mcc.c: 62:     TMR6_Initialize();
  4381     0EEC  318C  2426  318E   	fcall	_TMR6_Initialize
  4382                           
  4383                           ;mcc_generated_files/mcc.c: 63:     CMP1_Initialize();
  4384     0EEF  318C  2451  318E   	fcall	_CMP1_Initialize
  4385                           
  4386                           ;mcc_generated_files/mcc.c: 64:     PWM3_Initialize();
  4387     0EF2  318C  24A9  318E   	fcall	_PWM3_Initialize
  4388                           
  4389                           ;mcc_generated_files/mcc.c: 65:     TMR1_Initialize();
  4390     0EF5  318D  2522  318E   	fcall	_TMR1_Initialize
  4391                           
  4392                           ;mcc_generated_files/mcc.c: 66:     EUSART_Initialize();
  4393     0EF8  3187  27CD         	fcall	_EUSART_Initialize
  4394     0EFA  0008               	return
  4395     0EFB                     __end_of_SYSTEM_Initialize:
  4396                           
  4397                           	psect	text5
  4398     0B9B                     __ptext5:	
  4399 ;; *************** function _WDT_Initialize *****************
  4400 ;; Defined at:
  4401 ;;		line 79 in file "mcc_generated_files/mcc.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		None
  4410 ;; Tracked objects:
  4411 ;;		On entry : 1F/2
  4412 ;;		On exit  : 1F/1
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4415 ;;      Params:         0       0       0       0       0       0
  4416 ;;      Locals:         0       0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0
  4418 ;;      Totals:         0       0       0       0       0       0
  4419 ;;Total ram usage:        0 bytes
  4420 ;; Hardware stack levels used: 1
  4421 ;; Hardware stack levels required when called: 12
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_SYSTEM_Initialize
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429     0B9B                     _WDT_Initialize:	
  4430                           ;psect for function _WDT_Initialize
  4431                           
  4432                           
  4433                           ;mcc_generated_files/mcc.c: 82:     WDTCON = 0x16;
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _WDT_Initialize: []
  4437     0B9B  3016               	movlw	22
  4438     0B9C  0021               	movlb	1	; select bank1
  4439     0B9D  0097               	movwf	23	;volatile
  4440     0B9E  0008               	return
  4441     0B9F                     __end_of_WDT_Initialize:
  4442                           
  4443                           	psect	text6
  4444     0C26                     __ptext6:	
  4445 ;; *************** function _TMR6_Initialize *****************
  4446 ;; Defined at:
  4447 ;;		line 62 in file "mcc_generated_files/tmr6.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		status,2
  4456 ;; Tracked objects:
  4457 ;;		On entry : 1F/1
  4458 ;;		On exit  : 1F/8
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4461 ;;      Params:         0       0       0       0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0
  4464 ;;      Totals:         0       0       0       0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 12
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_SYSTEM_Initialize
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475     0C26                     _TMR6_Initialize:	
  4476                           ;psect for function _TMR6_Initialize
  4477                           
  4478                           
  4479                           ;mcc_generated_files/tmr6.c: 67:     PR6 = 0xFF;
  4480                           
  4481                           ;incstack = 0
  4482                           ; Regs used in _TMR6_Initialize: [status,2]
  4483     0C26  30FF               	movlw	255
  4484     0C27  0028               	movlb	8	; select bank8
  4485     0C28  009D               	movwf	29	;volatile
  4486                           
  4487                           ;mcc_generated_files/tmr6.c: 70:     TMR6 = 0x00;
  4488     0C29  019C               	clrf	28	;volatile
  4489                           
  4490                           ;mcc_generated_files/tmr6.c: 73:     PIR3bits.TMR6IF = 0;
  4491     0C2A  0020               	movlb	0	; select bank0
  4492     0C2B  1193               	bcf	19,3	;volatile
  4493                           
  4494                           ;mcc_generated_files/tmr6.c: 76:     T6CON = 0x06;
  4495     0C2C  3006               	movlw	6
  4496     0C2D  0028               	movlb	8	; select bank8
  4497     0C2E  009E               	movwf	30	;volatile
  4498     0C2F  0008               	return
  4499     0C30                     __end_of_TMR6_Initialize:
  4500                           
  4501                           	psect	text7
  4502     0BE7                     __ptext7:	
  4503 ;; *************** function _TMR2_Initialize *****************
  4504 ;; Defined at:
  4505 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		status,2
  4514 ;; Tracked objects:
  4515 ;;		On entry : 1F/1
  4516 ;;		On exit  : 1F/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4519 ;;      Params:         0       0       0       0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0
  4521 ;;      Temps:          0       0       0       0       0       0
  4522 ;;      Totals:         0       0       0       0       0       0
  4523 ;;Total ram usage:        0 bytes
  4524 ;; Hardware stack levels used: 1
  4525 ;; Hardware stack levels required when called: 12
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_SYSTEM_Initialize
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533     0BE7                     _TMR2_Initialize:	
  4534                           ;psect for function _TMR2_Initialize
  4535                           
  4536                           
  4537                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0x01;
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _TMR2_Initialize: [status,2]
  4541     0BE7  3001               	movlw	1
  4542     0BE8  0020               	movlb	0	; select bank0
  4543     0BE9  009B               	movwf	27	;volatile
  4544                           
  4545                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4546     0BEA  019A               	clrf	26	;volatile
  4547                           
  4548                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4549     0BEB  1091               	bcf	17,1	;volatile
  4550                           
  4551                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4552     0BEC  3004               	movlw	4
  4553     0BED  009C               	movwf	28	;volatile
  4554     0BEE  0008               	return
  4555     0BEF                     __end_of_TMR2_Initialize:
  4556                           
  4557                           	psect	text8
  4558     0D22                     __ptext8:	
  4559 ;; *************** function _TMR1_Initialize *****************
  4560 ;; Defined at:
  4561 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 1F/5
  4572 ;;		On exit  : 1F/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4575 ;;      Params:         0       0       0       0       0       0
  4576 ;;      Locals:         0       0       0       0       0       0
  4577 ;;      Temps:          0       0       0       0       0       0
  4578 ;;      Totals:         0       0       0       0       0       0
  4579 ;;Total ram usage:        0 bytes
  4580 ;; Hardware stack levels used: 1
  4581 ;; Hardware stack levels required when called: 13
  4582 ;; This function calls:
  4583 ;;		_TMR1_SetInterruptHandler
  4584 ;; This function is called by:
  4585 ;;		_SYSTEM_Initialize
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589     0D22                     _TMR1_Initialize:	
  4590                           ;psect for function _TMR1_Initialize
  4591                           
  4592                           
  4593                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4597     0D22  0020               	movlb	0	; select bank0
  4598     0D23  0199               	clrf	25	;volatile
  4599                           
  4600                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x15;
  4601     0D24  3015               	movlw	21
  4602     0D25  0097               	movwf	23	;volatile
  4603                           
  4604                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xA0;
  4605     0D26  30A0               	movlw	160
  4606     0D27  0096               	movwf	22	;volatile
  4607                           
  4608                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4609     0D28  1011               	bcf	17,0	;volatile
  4610                           
  4611                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4612     0D29  0817               	movf	23,w	;volatile
  4613     0D2A  0021               	movlb	1	; select bank1
  4614     0D2B  00BD               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
  4615     0D2C  0020               	movlb	0	; select bank0
  4616     0D2D  0816               	movf	22,w	;volatile
  4617     0D2E  0021               	movlb	1	; select bank1
  4618     0D2F  00BC               	movwf	_timer1ReloadVal^(0+128)	;volatile
  4619                           
  4620                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4621     0D30  1411               	bsf	17,0	;volatile
  4622                           
  4623                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4624     0D31  3003               	movlw	low _TMR1_DefaultInterruptHandler
  4625     0D32  00C1               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  4626     0D33  3000               	movlw	high _TMR1_DefaultInterruptHandler
  4627     0D34  00C2               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4628     0D35  318B  23C2         	fcall	_TMR1_SetInterruptHandler
  4629                           
  4630                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x01;
  4631     0D37  3001               	movlw	1
  4632     0D38  0020               	movlb	0	; select bank0
  4633     0D39  0098               	movwf	24	;volatile
  4634     0D3A  0008               	return
  4635     0D3B                     __end_of_TMR1_Initialize:
  4636                           
  4637                           	psect	text9
  4638     0BC2                     __ptext9:	
  4639 ;; *************** function _TMR1_SetInterruptHandler *****************
  4640 ;; Defined at:
  4641 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4644 ;;		 -> Write_UART(1), TMR1_DefaultInterruptHandler(1), 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;		None
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg
  4651 ;; Tracked objects:
  4652 ;;		On entry : 1F/1
  4653 ;;		On exit  : 1F/1
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4656 ;;      Params:         0       0       2       0       0       0
  4657 ;;      Locals:         0       0       0       0       0       0
  4658 ;;      Temps:          0       0       0       0       0       0
  4659 ;;      Totals:         0       0       2       0       0       0
  4660 ;;Total ram usage:        2 bytes
  4661 ;; Hardware stack levels used: 1
  4662 ;; Hardware stack levels required when called: 12
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_TMR1_Initialize
  4667 ;;		_main
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671     0BC2                     _TMR1_SetInterruptHandler:	
  4672                           ;psect for function _TMR1_SetInterruptHandler
  4673                           
  4674                           
  4675                           ;mcc_generated_files/tmr1.c: 186:     TMR1_InterruptHandler = InterruptHandler;
  4676                           
  4677                           ;incstack = 0
  4678                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4679     0BC2  0842               	movf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  4680     0BC3  00DA               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  4681     0BC4  0841               	movf	TMR1_SetInterruptHandler@InterruptHandler^(0+128),w
  4682     0BC5  00D9               	movwf	_TMR1_InterruptHandler^(0+128)
  4683     0BC6  0008               	return
  4684     0BC7                     __end_of_TMR1_SetInterruptHandler:
  4685                           
  4686                           	psect	text10
  4687     0C46                     __ptext10:	
  4688 ;; *************** function _TMR0_Initialize *****************
  4689 ;; Defined at:
  4690 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;		None
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;		None
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  1    wreg      void 
  4697 ;; Registers used:
  4698 ;;		wreg, status,2
  4699 ;; Tracked objects:
  4700 ;;		On entry : 1F/0
  4701 ;;		On exit  : 1F/1
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4704 ;;      Params:         0       0       0       0       0       0
  4705 ;;      Locals:         0       0       0       0       0       0
  4706 ;;      Temps:          0       0       0       0       0       0
  4707 ;;      Totals:         0       0       0       0       0       0
  4708 ;;Total ram usage:        0 bytes
  4709 ;; Hardware stack levels used: 1
  4710 ;; Hardware stack levels required when called: 12
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_SYSTEM_Initialize
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718     0C46                     _TMR0_Initialize:	
  4719                           ;psect for function _TMR0_Initialize
  4720                           
  4721                           
  4722                           ;mcc_generated_files/tmr0.c: 68:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xE8 
      +                          & 0x3F));
  4723                           
  4724                           ;incstack = 0
  4725                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4726     0C46  0021               	movlb	1	; select bank1
  4727     0C47  0815               	movf	21,w	;volatile
  4728     0C48  39C0               	andlw	192
  4729     0C49  3828               	iorlw	40
  4730     0C4A  0095               	movwf	21	;volatile
  4731                           
  4732                           ;mcc_generated_files/tmr0.c: 71:     TMR0 = 0x00;
  4733     0C4B  0020               	movlb	0	; select bank0
  4734     0C4C  0195               	clrf	21	;volatile
  4735                           
  4736                           ;mcc_generated_files/tmr0.c: 74:     timer0ReloadVal= 0;
  4737     0C4D  0021               	movlb	1	; select bank1
  4738     0C4E  01C0               	clrf	_timer0ReloadVal^(0+128)	;volatile
  4739                           
  4740                           ;mcc_generated_files/tmr0.c: 77:     INTCONbits.TMR0IF = 0;
  4741     0C4F  110B               	bcf	11,2	;volatile
  4742     0C50  0008               	return
  4743     0C51                     __end_of_TMR0_Initialize:
  4744                           
  4745                           	psect	text11
  4746     0C69                     __ptext11:	
  4747 ;; *************** function _SPI1_Initialize *****************
  4748 ;; Defined at:
  4749 ;;		line 62 in file "mcc_generated_files/spi1.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;		None
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		None
  4758 ;; Tracked objects:
  4759 ;;		On entry : B1F/0
  4760 ;;		On exit  : B1F/4
  4761 ;;		Unchanged: B00/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4763 ;;      Params:         0       0       0       0       0       0
  4764 ;;      Locals:         0       0       0       0       0       0
  4765 ;;      Temps:          0       0       0       0       0       0
  4766 ;;      Totals:         0       0       0       0       0       0
  4767 ;;Total ram usage:        0 bytes
  4768 ;; Hardware stack levels used: 1
  4769 ;; Hardware stack levels required when called: 12
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_SYSTEM_Initialize
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777     0C69                     _SPI1_Initialize:	
  4778                           ;psect for function _SPI1_Initialize
  4779                           
  4780                           
  4781                           ;mcc_generated_files/spi1.c: 65:     SSP1STAT = 0x40;
  4782                           
  4783                           ;incstack = 0
  4784                           ; Regs used in _SPI1_Initialize: []
  4785     0C69  3040               	movlw	64
  4786     0C6A  0024               	movlb	4	; select bank4
  4787     0C6B  0094               	movwf	20	;volatile
  4788                           
  4789                           ;mcc_generated_files/spi1.c: 66:     SSP1CON1 = 0x03;
  4790     0C6C  3003               	movlw	3
  4791     0C6D  0095               	movwf	21	;volatile
  4792                           
  4793                           ;mcc_generated_files/spi1.c: 67:     SSP1ADD = 0x13;
  4794     0C6E  3013               	movlw	19
  4795     0C6F  0092               	movwf	18	;volatile
  4796                           
  4797                           ;mcc_generated_files/spi1.c: 68:     TRISBbits.TRISB4 = 0;
  4798     0C70  0021               	movlb	1	; select bank1
  4799     0C71  120D               	bcf	13,4	;volatile
  4800                           
  4801                           ;mcc_generated_files/spi1.c: 69:     SSP1CON1bits.SSPEN = 0;
  4802     0C72  0024               	movlb	4	; select bank4
  4803     0C73  1295               	bcf	21,5	;volatile
  4804     0C74  0008               	return
  4805     0C75                     __end_of_SPI1_Initialize:
  4806                           
  4807                           	psect	text12
  4808     0CA9                     __ptext12:	
  4809 ;; *************** function _PWM3_Initialize *****************
  4810 ;; Defined at:
  4811 ;;		line 64 in file "mcc_generated_files/pwm3.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		wreg, status,2, status,0
  4820 ;; Tracked objects:
  4821 ;;		On entry : 1F/1
  4822 ;;		On exit  : 1F/5
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4825 ;;      Params:         0       0       0       0       0       0
  4826 ;;      Locals:         0       0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0
  4828 ;;      Totals:         0       0       0       0       0       0
  4829 ;;Total ram usage:        0 bytes
  4830 ;; Hardware stack levels used: 1
  4831 ;; Hardware stack levels required when called: 12
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_SYSTEM_Initialize
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839     0CA9                     _PWM3_Initialize:	
  4840                           ;psect for function _PWM3_Initialize
  4841                           
  4842                           
  4843                           ;mcc_generated_files/pwm3.c: 69:  CCP3CON = 0x1C;
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  4847     0CA9  301C               	movlw	28
  4848     0CAA  0026               	movlb	6	; select bank6
  4849     0CAB  0093               	movwf	19	;volatile
  4850                           
  4851                           ;mcc_generated_files/pwm3.c: 72:  CCPR3L = 0x7F;
  4852     0CAC  307F               	movlw	127
  4853     0CAD  0091               	movwf	17	;volatile
  4854                           
  4855                           ;mcc_generated_files/pwm3.c: 75:  CCPR3H = 0x01;
  4856     0CAE  3001               	movlw	1
  4857     0CAF  0092               	movwf	18	;volatile
  4858                           
  4859                           ;mcc_generated_files/pwm3.c: 78:  CCPTMRS0bits.C3TSEL = 0x2;
  4860     0CB0  0025               	movlb	5	; select bank5
  4861     0CB1  081E               	movf	30,w	;volatile
  4862     0CB2  39CF               	andlw	-49
  4863     0CB3  3820               	iorlw	32
  4864     0CB4  009E               	movwf	30	;volatile
  4865     0CB5  0008               	return
  4866     0CB6                     __end_of_PWM3_Initialize:
  4867                           
  4868                           	psect	text13
  4869     0F25                     __ptext13:	
  4870 ;; *************** function _PIN_MANAGER_Initialize *****************
  4871 ;; Defined at:
  4872 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;		None
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : B1F/4
  4883 ;;		On exit  : 1F/1
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4886 ;;      Params:         0       0       0       0       0       0
  4887 ;;      Locals:         0       0       0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0
  4889 ;;      Totals:         0       0       0       0       0       0
  4890 ;;Total ram usage:        0 bytes
  4891 ;; Hardware stack levels used: 1
  4892 ;; Hardware stack levels required when called: 13
  4893 ;; This function calls:
  4894 ;;		_IOCBF0_SetInterruptHandler
  4895 ;;		_IOCBF3_SetInterruptHandler
  4896 ;; This function is called by:
  4897 ;;		_SYSTEM_Initialize
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901     0F25                     _PIN_MANAGER_Initialize:	
  4902                           ;psect for function _PIN_MANAGER_Initialize
  4903                           
  4904                           
  4905                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4909     0F25  0022               	movlb	2	; select bank2
  4910     0F26  018C               	clrf	12	;volatile
  4911                           
  4912                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  4913     0F27  018D               	clrf	13	;volatile
  4914                           
  4915                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x37;
  4916     0F28  3037               	movlw	55
  4917     0F29  0021               	movlb	1	; select bank1
  4918     0F2A  008C               	movwf	12	;volatile
  4919                           
  4920                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x2D;
  4921     0F2B  302D               	movlw	45
  4922     0F2C  008D               	movwf	13	;volatile
  4923                           
  4924                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0xC0;
  4925     0F2D  30C0               	movlw	192
  4926     0F2E  0023               	movlb	3	; select bank3
  4927     0F2F  008D               	movwf	13	;volatile
  4928                           
  4929                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x03;
  4930     0F30  3003               	movlw	3
  4931     0F31  008C               	movwf	12	;volatile
  4932                           
  4933                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x09;
  4934     0F32  3009               	movlw	9
  4935     0F33  0024               	movlb	4	; select bank4
  4936     0F34  008D               	movwf	13	;volatile
  4937                           
  4938                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4939     0F35  018C               	clrf	12	;volatile
  4940                           
  4941                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 0;
  4942     0F36  0021               	movlb	1	; select bank1
  4943     0F37  1395               	bcf	21,7	;volatile
  4944                           
  4945                           ;mcc_generated_files/pin_manager.c: 89:     APFCON0 = 0xC9;
  4946     0F38  30C9               	movlw	201
  4947     0F39  0022               	movlb	2	; select bank2
  4948     0F3A  009D               	movwf	29	;volatile
  4949                           
  4950                           ;mcc_generated_files/pin_manager.c: 90:     APFCON1 = 0x01;
  4951     0F3B  3001               	movlw	1
  4952     0F3C  009E               	movwf	30	;volatile
  4953                           
  4954                           ;mcc_generated_files/pin_manager.c: 96:     IOCBFbits.IOCBF0 = 0;
  4955     0F3D  0027               	movlb	7	; select bank7
  4956     0F3E  1016               	bcf	22,0	;volatile
  4957                           
  4958                           ;mcc_generated_files/pin_manager.c: 98:     IOCBFbits.IOCBF3 = 0;
  4959     0F3F  1196               	bcf	22,3	;volatile
  4960                           
  4961                           ;mcc_generated_files/pin_manager.c: 100:     IOCBNbits.IOCBN0 = 1;
  4962     0F40  1415               	bsf	21,0	;volatile
  4963                           
  4964                           ;mcc_generated_files/pin_manager.c: 102:     IOCBNbits.IOCBN3 = 1;
  4965     0F41  1595               	bsf	21,3	;volatile
  4966                           
  4967                           ;mcc_generated_files/pin_manager.c: 104:     IOCBPbits.IOCBP0 = 0;
  4968     0F42  1014               	bcf	20,0	;volatile
  4969                           
  4970                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP3 = 0;
  4971     0F43  1194               	bcf	20,3	;volatile
  4972                           
  4973                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF0_SetInterruptHandler(IOCBF0_DefaultIn
      +                          terruptHandler);
  4974     0F44  308C               	movlw	low _IOCBF0_DefaultInterruptHandler
  4975     0F45  0021               	movlb	1	; select bank1
  4976     0F46  00C1               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  4977     0F47  300B               	movlw	high _IOCBF0_DefaultInterruptHandler
  4978     0F48  00C2               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4979     0F49  318B  23B8  318F   	fcall	_IOCBF0_SetInterruptHandler
  4980                           
  4981                           ;mcc_generated_files/pin_manager.c: 112:     IOCBF3_SetInterruptHandler(IOCBF3_DefaultIn
      +                          terruptHandler);
  4982     0F4C  308D               	movlw	low _IOCBF3_DefaultInterruptHandler
  4983     0F4D  00C1               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  4984     0F4E  300B               	movlw	high _IOCBF3_DefaultInterruptHandler
  4985     0F4F  00C2               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4986     0F50  318B  23BD         	fcall	_IOCBF3_SetInterruptHandler
  4987                           
  4988                           ;mcc_generated_files/pin_manager.c: 115:     INTCONbits.IOCIE = 1;
  4989     0F52  158B               	bsf	11,3	;volatile
  4990     0F53  0008               	return
  4991     0F54                     __end_of_PIN_MANAGER_Initialize:
  4992                           
  4993                           	psect	text14
  4994     0BBD                     __ptext14:	
  4995 ;; *************** function _IOCBF3_SetInterruptHandler *****************
  4996 ;; Defined at:
  4997 ;;		line 181 in file "mcc_generated_files/pin_manager.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5000 ;;		 -> ISR_Floor2(1), IOCBF3_DefaultInterruptHandler(1), 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;		None
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      void 
  5005 ;; Registers used:
  5006 ;;		wreg
  5007 ;; Tracked objects:
  5008 ;;		On entry : 1F/1
  5009 ;;		On exit  : 1F/1
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5012 ;;      Params:         0       0       2       0       0       0
  5013 ;;      Locals:         0       0       0       0       0       0
  5014 ;;      Temps:          0       0       0       0       0       0
  5015 ;;      Totals:         0       0       2       0       0       0
  5016 ;;Total ram usage:        2 bytes
  5017 ;; Hardware stack levels used: 1
  5018 ;; Hardware stack levels required when called: 12
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_PIN_MANAGER_Initialize
  5023 ;;		_main
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027     0BBD                     _IOCBF3_SetInterruptHandler:	
  5028                           ;psect for function _IOCBF3_SetInterruptHandler
  5029                           
  5030                           
  5031                           ;mcc_generated_files/pin_manager.c: 182:     IOCBF3_InterruptHandler = InterruptHandler;
  5032                           
  5033                           ;incstack = 0
  5034                           ; Regs used in _IOCBF3_SetInterruptHandler: [wreg]
  5035     0BBD  0842               	movf	(IOCBF3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5036     0BBE  00E4               	movwf	(_IOCBF3_InterruptHandler+1)^(0+128)
  5037     0BBF  0841               	movf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128),w
  5038     0BC0  00E3               	movwf	_IOCBF3_InterruptHandler^(0+128)
  5039     0BC1  0008               	return
  5040     0BC2                     __end_of_IOCBF3_SetInterruptHandler:
  5041                           
  5042                           	psect	text15
  5043     0BB8                     __ptext15:	
  5044 ;; *************** function _IOCBF0_SetInterruptHandler *****************
  5045 ;; Defined at:
  5046 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5049 ;;		 -> ISR_Floor1(1), IOCBF0_DefaultInterruptHandler(1), 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg
  5056 ;; Tracked objects:
  5057 ;;		On entry : 1F/1
  5058 ;;		On exit  : 1F/1
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5061 ;;      Params:         0       0       2       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0       0
  5064 ;;      Totals:         0       0       2       0       0       0
  5065 ;;Total ram usage:        2 bytes
  5066 ;; Hardware stack levels used: 1
  5067 ;; Hardware stack levels required when called: 12
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_PIN_MANAGER_Initialize
  5072 ;;		_main
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076     0BB8                     _IOCBF0_SetInterruptHandler:	
  5077                           ;psect for function _IOCBF0_SetInterruptHandler
  5078                           
  5079                           
  5080                           ;mcc_generated_files/pin_manager.c: 152:     IOCBF0_InterruptHandler = InterruptHandler;
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _IOCBF0_SetInterruptHandler: [wreg]
  5084     0BB8  0842               	movf	(IOCBF0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5085     0BB9  00E6               	movwf	(_IOCBF0_InterruptHandler+1)^(0+128)
  5086     0BBA  0841               	movf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128),w
  5087     0BBB  00E5               	movwf	_IOCBF0_InterruptHandler^(0+128)
  5088     0BBC  0008               	return
  5089     0BBD                     __end_of_IOCBF0_SetInterruptHandler:
  5090                           
  5091                           	psect	text16
  5092     0BC7                     __ptext16:	
  5093 ;; *************** function _OSCILLATOR_Initialize *****************
  5094 ;; Defined at:
  5095 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;		None
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      void 
  5102 ;; Registers used:
  5103 ;;		status,2
  5104 ;; Tracked objects:
  5105 ;;		On entry : 1F/1
  5106 ;;		On exit  : 1F/2
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5109 ;;      Params:         0       0       0       0       0       0
  5110 ;;      Locals:         0       0       0       0       0       0
  5111 ;;      Temps:          0       0       0       0       0       0
  5112 ;;      Totals:         0       0       0       0       0       0
  5113 ;;Total ram usage:        0 bytes
  5114 ;; Hardware stack levels used: 1
  5115 ;; Hardware stack levels required when called: 12
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_SYSTEM_Initialize
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123     0BC7                     _OSCILLATOR_Initialize:	
  5124                           ;psect for function _OSCILLATOR_Initialize
  5125                           
  5126                           
  5127                           ;mcc_generated_files/mcc.c: 72:     OSCCON = 0x70;
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
  5131     0BC7  3070               	movlw	112
  5132     0BC8  0099               	movwf	25	;volatile
  5133                           
  5134                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
  5135     0BC9  0198               	clrf	24	;volatile
  5136                           
  5137                           ;mcc_generated_files/mcc.c: 76:     BORCON = 0x00;
  5138     0BCA  0022               	movlb	2	; select bank2
  5139     0BCB  0196               	clrf	22	;volatile
  5140     0BCC  0008               	return
  5141     0BCD                     __end_of_OSCILLATOR_Initialize:
  5142                           
  5143                           	psect	text17
  5144     0B97                     __ptext17:	
  5145 ;; *************** function _FVR_Initialize *****************
  5146 ;; Defined at:
  5147 ;;		line 58 in file "mcc_generated_files/fvr.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		None
  5156 ;; Tracked objects:
  5157 ;;		On entry : 1F/1
  5158 ;;		On exit  : 1F/2
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5161 ;;      Params:         0       0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0
  5164 ;;      Totals:         0       0       0       0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used: 1
  5167 ;; Hardware stack levels required when called: 12
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_SYSTEM_Initialize
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175     0B97                     _FVR_Initialize:	
  5176                           ;psect for function _FVR_Initialize
  5177                           
  5178                           
  5179                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x84;
  5180                           
  5181                           ;incstack = 0
  5182                           ; Regs used in _FVR_Initialize: []
  5183     0B97  3084               	movlw	132
  5184     0B98  0022               	movlb	2	; select bank2
  5185     0B99  0097               	movwf	23	;volatile
  5186     0B9A  0008               	return
  5187     0B9B                     __end_of_FVR_Initialize:
  5188                           
  5189                           	psect	text18
  5190     07CD                     __ptext18:	
  5191 ;; *************** function _EUSART_Initialize *****************
  5192 ;; Defined at:
  5193 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;		None
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;		None
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  1    wreg      void 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0, pclath, cstack
  5202 ;; Tracked objects:
  5203 ;;		On entry : 1F/0
  5204 ;;		On exit  : 1F/1
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5207 ;;      Params:         0       0       0       0       0       0
  5208 ;;      Locals:         0       0       0       0       0       0
  5209 ;;      Temps:          0       0       0       0       0       0
  5210 ;;      Totals:         0       0       0       0       0       0
  5211 ;;Total ram usage:        0 bytes
  5212 ;; Hardware stack levels used: 1
  5213 ;; Hardware stack levels required when called: 13
  5214 ;; This function calls:
  5215 ;;		_EUSART_SetErrorHandler
  5216 ;;		_EUSART_SetFramingErrorHandler
  5217 ;;		_EUSART_SetOverrunErrorHandler
  5218 ;;		_EUSART_SetRxInterruptHandler
  5219 ;; This function is called by:
  5220 ;;		_SYSTEM_Initialize
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224     07CD                     _EUSART_Initialize:	
  5225                           ;psect for function _EUSART_Initialize
  5226                           
  5227                           
  5228                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
  5229                           
  5230                           ;incstack = 0
  5231                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5232     07CD  0021               	movlb	1	; select bank1
  5233     07CE  1291               	bcf	17,5	;volatile
  5234                           
  5235                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5236     07CF  3054               	movlw	low _EUSART_Receive_ISR
  5237     07D0  00C1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5238     07D1  300F               	movlw	high _EUSART_Receive_ISR
  5239     07D2  00C2               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5240     07D3  318B  23B3  3187   	fcall	_EUSART_SetRxInterruptHandler
  5241                           
  5242                           ;mcc_generated_files/eusart.c: 91:     BAUDCON = 0x08;
  5243     07D6  3008               	movlw	8
  5244     07D7  0023               	movlb	3	; select bank3
  5245     07D8  009F               	movwf	31	;volatile
  5246                           
  5247                           ;mcc_generated_files/eusart.c: 94:     RCSTA = 0x90;
  5248     07D9  3090               	movlw	144
  5249     07DA  009D               	movwf	29	;volatile
  5250                           
  5251                           ;mcc_generated_files/eusart.c: 97:     TXSTA = 0xA4;
  5252     07DB  30A4               	movlw	164
  5253     07DC  009E               	movwf	30	;volatile
  5254                           
  5255                           ;mcc_generated_files/eusart.c: 100:     SPBRGL = 0x67;
  5256     07DD  3067               	movlw	103
  5257     07DE  009B               	movwf	27	;volatile
  5258                           
  5259                           ;mcc_generated_files/eusart.c: 103:     SPBRGH = 0x00;
  5260     07DF  019C               	clrf	28	;volatile
  5261                           
  5262                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5263     07E0  308E               	movlw	low _EUSART_DefaultFramingErrorHandler
  5264     07E1  0021               	movlb	1	; select bank1
  5265     07E2  00C1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5266     07E3  300B               	movlw	high _EUSART_DefaultFramingErrorHandler
  5267     07E4  00C2               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5268     07E5  318B  23A9  3187   	fcall	_EUSART_SetFramingErrorHandler
  5269                           
  5270                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5271     07E8  3093               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5272     07E9  00C1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5273     07EA  300B               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5274     07EB  00C2               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5275     07EC  318B  23AE  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5276                           
  5277                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5278     07EF  3090               	movlw	low _EUSART_DefaultErrorHandler
  5279     07F0  00C1               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5280     07F1  300B               	movlw	high _EUSART_DefaultErrorHandler
  5281     07F2  00C2               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5282     07F3  318B  23A4         	fcall	_EUSART_SetErrorHandler
  5283                           
  5284                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
  5285     07F5  0020               	movlb	0	; select bank0
  5286     07F6  01E5               	clrf	_eusartRxLastError	;volatile
  5287                           
  5288                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
  5289     07F7  01E8               	clrf	_eusartRxHead	;volatile
  5290                           
  5291                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
  5292     07F8  01E7               	clrf	_eusartRxTail	;volatile
  5293                           
  5294                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
  5295     07F9  01E6               	clrf	_eusartRxCount	;volatile
  5296                           
  5297                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
  5298     07FA  0021               	movlb	1	; select bank1
  5299     07FB  1691               	bsf	17,5	;volatile
  5300     07FC  0008               	return
  5301     07FD                     __end_of_EUSART_Initialize:
  5302                           
  5303                           	psect	text19
  5304     0BB3                     __ptext19:	
  5305 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5306 ;; Defined at:
  5307 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5310 ;;		 -> Read_UART(1), EUSART_Receive_ISR(1), 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg
  5317 ;; Tracked objects:
  5318 ;;		On entry : 1F/1
  5319 ;;		On exit  : 1F/1
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5322 ;;      Params:         0       0       2       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0
  5325 ;;      Totals:         0       0       2       0       0       0
  5326 ;;Total ram usage:        2 bytes
  5327 ;; Hardware stack levels used: 1
  5328 ;; Hardware stack levels required when called: 12
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_EUSART_Initialize
  5333 ;;		_main
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337     0BB3                     _EUSART_SetRxInterruptHandler:	
  5338                           ;psect for function _EUSART_SetRxInterruptHandler
  5339                           
  5340                           
  5341                           ;mcc_generated_files/eusart.c: 235:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5345     0BB3  0842               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5346     0BB4  00E2               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5347     0BB5  0841               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5348     0BB6  00E1               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5349     0BB7  0008               	return
  5350     0BB8                     __end_of_EUSART_SetRxInterruptHandler:
  5351                           
  5352                           	psect	text20
  5353     0BAE                     __ptext20:	
  5354 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5355 ;; Defined at:
  5356 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5359 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      void 
  5364 ;; Registers used:
  5365 ;;		wreg
  5366 ;; Tracked objects:
  5367 ;;		On entry : 1F/1
  5368 ;;		On exit  : 1F/1
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5371 ;;      Params:         0       0       2       0       0       0
  5372 ;;      Locals:         0       0       0       0       0       0
  5373 ;;      Temps:          0       0       0       0       0       0
  5374 ;;      Totals:         0       0       2       0       0       0
  5375 ;;Total ram usage:        2 bytes
  5376 ;; Hardware stack levels used: 1
  5377 ;; Hardware stack levels required when called: 12
  5378 ;; This function calls:
  5379 ;;		Nothing
  5380 ;; This function is called by:
  5381 ;;		_EUSART_Initialize
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385     0BAE                     _EUSART_SetOverrunErrorHandler:	
  5386                           ;psect for function _EUSART_SetOverrunErrorHandler
  5387                           
  5388                           
  5389                           ;mcc_generated_files/eusart.c: 226:     EUSART_OverrunErrorHandler = interruptHandler;
  5390                           
  5391                           ;incstack = 0
  5392                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5393     0BAE  0842               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5394     0BAF  00DE               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5395     0BB0  0841               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5396     0BB1  00DD               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5397     0BB2  0008               	return
  5398     0BB3                     __end_of_EUSART_SetOverrunErrorHandler:
  5399                           
  5400                           	psect	text21
  5401     0BA9                     __ptext21:	
  5402 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5403 ;; Defined at:
  5404 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5407 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;		None
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      void 
  5412 ;; Registers used:
  5413 ;;		wreg
  5414 ;; Tracked objects:
  5415 ;;		On entry : 1F/1
  5416 ;;		On exit  : 1F/1
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5419 ;;      Params:         0       0       2       0       0       0
  5420 ;;      Locals:         0       0       0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0
  5422 ;;      Totals:         0       0       2       0       0       0
  5423 ;;Total ram usage:        2 bytes
  5424 ;; Hardware stack levels used: 1
  5425 ;; Hardware stack levels required when called: 12
  5426 ;; This function calls:
  5427 ;;		Nothing
  5428 ;; This function is called by:
  5429 ;;		_EUSART_Initialize
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433     0BA9                     _EUSART_SetFramingErrorHandler:	
  5434                           ;psect for function _EUSART_SetFramingErrorHandler
  5435                           
  5436                           
  5437                           ;mcc_generated_files/eusart.c: 222:     EUSART_FramingErrorHandler = interruptHandler;
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5441     0BA9  0842               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5442     0BAA  00E0               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5443     0BAB  0841               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5444     0BAC  00DF               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5445     0BAD  0008               	return
  5446     0BAE                     __end_of_EUSART_SetFramingErrorHandler:
  5447                           
  5448                           	psect	text22
  5449     0BA4                     __ptext22:	
  5450 ;; *************** function _EUSART_SetErrorHandler *****************
  5451 ;; Defined at:
  5452 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5455 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg
  5462 ;; Tracked objects:
  5463 ;;		On entry : 1F/1
  5464 ;;		On exit  : 1F/1
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5467 ;;      Params:         0       0       2       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0
  5470 ;;      Totals:         0       0       2       0       0       0
  5471 ;;Total ram usage:        2 bytes
  5472 ;; Hardware stack levels used: 1
  5473 ;; Hardware stack levels required when called: 12
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_EUSART_Initialize
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481     0BA4                     _EUSART_SetErrorHandler:	
  5482                           ;psect for function _EUSART_SetErrorHandler
  5483                           
  5484                           
  5485                           ;mcc_generated_files/eusart.c: 230:     EUSART_ErrorHandler = interruptHandler;
  5486                           
  5487                           ;incstack = 0
  5488                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5489     0BA4  0842               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5490     0BA5  00DC               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5491     0BA6  0841               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5492     0BA7  00DB               	movwf	_EUSART_ErrorHandler^(0+128)
  5493     0BA8  0008               	return
  5494     0BA9                     __end_of_EUSART_SetErrorHandler:
  5495                           
  5496                           	psect	text23
  5497     0C1C                     __ptext23:	
  5498 ;; *************** function _ECCP2_Initialize *****************
  5499 ;; Defined at:
  5500 ;;		line 58 in file "mcc_generated_files/eccp2.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;		None
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		status,2
  5509 ;; Tracked objects:
  5510 ;;		On entry : 1F/1
  5511 ;;		On exit  : 1F/1
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5514 ;;      Params:         0       0       0       0       0       0
  5515 ;;      Locals:         0       0       0       0       0       0
  5516 ;;      Temps:          0       0       0       0       0       0
  5517 ;;      Totals:         0       0       0       0       0       0
  5518 ;;Total ram usage:        0 bytes
  5519 ;; Hardware stack levels used: 1
  5520 ;; Hardware stack levels required when called: 12
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_SYSTEM_Initialize
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528     0C1C                     _ECCP2_Initialize:	
  5529                           ;psect for function _ECCP2_Initialize
  5530                           
  5531                           
  5532                           ;mcc_generated_files/eccp2.c: 63:  CCP2CON = 0x35;
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _ECCP2_Initialize: [status,2]
  5536     0C1C  3035               	movlw	53
  5537     0C1D  0025               	movlb	5	; select bank5
  5538     0C1E  009A               	movwf	26	;volatile
  5539                           
  5540                           ;mcc_generated_files/eccp2.c: 66:  CCPR2H = 0x00;
  5541     0C1F  0199               	clrf	25	;volatile
  5542                           
  5543                           ;mcc_generated_files/eccp2.c: 69:  CCPR2L = 0x00;
  5544     0C20  0198               	clrf	24	;volatile
  5545                           
  5546                           ;mcc_generated_files/eccp2.c: 72:     PIR2bits.CCP2IF = 0;
  5547     0C21  0020               	movlb	0	; select bank0
  5548     0C22  1012               	bcf	18,0	;volatile
  5549                           
  5550                           ;mcc_generated_files/eccp2.c: 75:     PIE2bits.CCP2IE = 1;
  5551     0C23  0021               	movlb	1	; select bank1
  5552     0C24  1412               	bsf	18,0	;volatile
  5553     0C25  0008               	return
  5554     0C26                     __end_of_ECCP2_Initialize:
  5555                           
  5556                           	psect	text24
  5557     0C5D                     __ptext24:	
  5558 ;; *************** function _CMP2_Initialize *****************
  5559 ;; Defined at:
  5560 ;;		line 59 in file "mcc_generated_files/cmp2.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		None
  5569 ;; Tracked objects:
  5570 ;;		On entry : 1F/2
  5571 ;;		On exit  : 1F/1
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5574 ;;      Params:         0       0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0
  5577 ;;      Totals:         0       0       0       0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used: 1
  5580 ;; Hardware stack levels required when called: 12
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_SYSTEM_Initialize
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588     0C5D                     _CMP2_Initialize:	
  5589                           ;psect for function _CMP2_Initialize
  5590                           
  5591                           
  5592                           ;mcc_generated_files/cmp2.c: 66:     PIE2bits.C2IE = 0;
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in _CMP2_Initialize: []
  5596     0C5D  0021               	movlb	1	; select bank1
  5597     0C5E  1312               	bcf	18,6	;volatile
  5598                           
  5599                           ;mcc_generated_files/cmp2.c: 69:     CM2CON0 = 0x84;
  5600     0C5F  3084               	movlw	132
  5601     0C60  0022               	movlb	2	; select bank2
  5602     0C61  0093               	movwf	19	;volatile
  5603                           
  5604                           ;mcc_generated_files/cmp2.c: 72:     CM2CON1 = 0xA1;
  5605     0C62  30A1               	movlw	161
  5606     0C63  0094               	movwf	20	;volatile
  5607                           
  5608                           ;mcc_generated_files/cmp2.c: 75:     PIR2bits.C2IF = 0;
  5609     0C64  0020               	movlb	0	; select bank0
  5610     0C65  1312               	bcf	18,6	;volatile
  5611                           
  5612                           ;mcc_generated_files/cmp2.c: 78:     PIE2bits.C2IE = 1;
  5613     0C66  0021               	movlb	1	; select bank1
  5614     0C67  1712               	bsf	18,6	;volatile
  5615     0C68  0008               	return
  5616     0C69                     __end_of_CMP2_Initialize:
  5617                           
  5618                           	psect	text25
  5619     0C51                     __ptext25:	
  5620 ;; *************** function _CMP1_Initialize *****************
  5621 ;; Defined at:
  5622 ;;		line 60 in file "mcc_generated_files/cmp1.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		None
  5631 ;; Tracked objects:
  5632 ;;		On entry : 1F/8
  5633 ;;		On exit  : 1F/1
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5636 ;;      Params:         0       0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0
  5639 ;;      Totals:         0       0       0       0       0       0
  5640 ;;Total ram usage:        0 bytes
  5641 ;; Hardware stack levels used: 1
  5642 ;; Hardware stack levels required when called: 12
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_SYSTEM_Initialize
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650     0C51                     _CMP1_Initialize:	
  5651                           ;psect for function _CMP1_Initialize
  5652                           
  5653                           
  5654                           ;mcc_generated_files/cmp1.c: 67:     PIE2bits.C1IE = 0;
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _CMP1_Initialize: []
  5658     0C51  0021               	movlb	1	; select bank1
  5659     0C52  1292               	bcf	18,5	;volatile
  5660                           
  5661                           ;mcc_generated_files/cmp1.c: 70:     CM1CON0 = 0x84;
  5662     0C53  3084               	movlw	132
  5663     0C54  0022               	movlb	2	; select bank2
  5664     0C55  0091               	movwf	17	;volatile
  5665                           
  5666                           ;mcc_generated_files/cmp1.c: 73:     CM1CON1 = 0xA0;
  5667     0C56  30A0               	movlw	160
  5668     0C57  0092               	movwf	18	;volatile
  5669                           
  5670                           ;mcc_generated_files/cmp1.c: 76:     PIR2bits.C1IF = 0;
  5671     0C58  0020               	movlb	0	; select bank0
  5672     0C59  1292               	bcf	18,5	;volatile
  5673                           
  5674                           ;mcc_generated_files/cmp1.c: 79:     PIE2bits.C1IE = 1;
  5675     0C5A  0021               	movlb	1	; select bank1
  5676     0C5B  1692               	bsf	18,5	;volatile
  5677     0C5C  0008               	return
  5678     0C5D                     __end_of_CMP1_Initialize:
  5679                           
  5680                           	psect	text26
  5681     053B                     __ptext26:	
  5682 ;; *************** function _SPI1_Open *****************
  5683 ;; Defined at:
  5684 ;;		line 72 in file "mcc_generated_files/spi1.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  spi1UniqueCo    1    wreg     enum E358
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  spi1UniqueCo    1    3[BANK1 ] enum E358
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      _Bool 
  5691 ;; Registers used:
  5692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5693 ;; Tracked objects:
  5694 ;;		On entry : 1F/2
  5695 ;;		On exit  : 1F/4
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5698 ;;      Params:         0       0       0       0       0       0
  5699 ;;      Locals:         0       0       1       0       0       0
  5700 ;;      Temps:          0       0       3       0       0       0
  5701 ;;      Totals:         0       0       4       0       0       0
  5702 ;;Total ram usage:        4 bytes
  5703 ;; Hardware stack levels used: 1
  5704 ;; Hardware stack levels required when called: 12
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_main
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712     053B                     _SPI1_Open:	
  5713                           ;psect for function _SPI1_Open
  5714                           
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath]
  5718                           ;SPI1_Open@spi1UniqueConfiguration stored from wreg
  5719     053B  0021               	movlb	1	; select bank1
  5720     053C  00C4               	movwf	SPI1_Open@spi1UniqueConfiguration^(0+128)
  5721                           
  5722                           ;mcc_generated_files/spi1.c: 72: _Bool SPI1_Open(spi1_modes_t spi1UniqueConfiguration);m
      +                          cc_generated_files/spi1.c: 73: {;mcc_generated_files/spi1.c: 74:     if(!SSP1CON1bits.SS
      +                          PEN)
  5723     053D  0024               	movlb	4	; select bank4
  5724     053E  1A95               	btfsc	21,5	;volatile
  5725     053F  0008               	return
  5726                           
  5727                           ;mcc_generated_files/spi1.c: 75:     {;mcc_generated_files/spi1.c: 76:         SSP1STAT 
      +                          = spi1_configuration[spi1UniqueConfiguration].stat;
  5728     0540  0021               	movlb	1	; select bank1
  5729     0541  0844               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5730     0542  00C1               	movwf	??_SPI1_Open^(0+128)
  5731     0543  01C2               	clrf	(??_SPI1_Open^(0+128)+1)
  5732     0544  35C1               	lslf	??_SPI1_Open^(0+128),f
  5733     0545  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5734     0546  35C1               	lslf	??_SPI1_Open^(0+128),f
  5735     0547  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5736     0548  302E               	movlw	low (_spi1_configuration+1)
  5737     0549  0741               	addwf	??_SPI1_Open^(0+128),w
  5738     054A  0084               	movwf	4
  5739     054B  3008               	movlw	high (_spi1_configuration+1)
  5740     054C  3D42               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5741     054D  3880               	iorlw	128
  5742     054E  0085               	movwf	5
  5743     054F  0800               	movf	0,w	;code access
  5744     0550  0024               	movlb	4	; select bank4
  5745     0551  0094               	movwf	20	;volatile
  5746                           
  5747                           ;mcc_generated_files/spi1.c: 77:         SSP1CON1 = spi1_configuration[spi1UniqueConfigu
      +                          ration].con1;
  5748     0552  0021               	movlb	1	; select bank1
  5749     0553  0844               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5750     0554  00C1               	movwf	??_SPI1_Open^(0+128)
  5751     0555  01C2               	clrf	(??_SPI1_Open^(0+128)+1)
  5752     0556  35C1               	lslf	??_SPI1_Open^(0+128),f
  5753     0557  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5754     0558  35C1               	lslf	??_SPI1_Open^(0+128),f
  5755     0559  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5756     055A  302D               	movlw	low _spi1_configuration
  5757     055B  0741               	addwf	??_SPI1_Open^(0+128),w
  5758     055C  0084               	movwf	4
  5759     055D  3008               	movlw	high _spi1_configuration
  5760     055E  3D42               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5761     055F  3880               	iorlw	128
  5762     0560  0085               	movwf	5
  5763     0561  0800               	movf	0,w	;code access
  5764     0562  0024               	movlb	4	; select bank4
  5765     0563  0095               	movwf	21	;volatile
  5766                           
  5767                           ;mcc_generated_files/spi1.c: 78:         SSP1CON2 = 0x00;
  5768     0564  0196               	clrf	22	;volatile
  5769                           
  5770                           ;mcc_generated_files/spi1.c: 79:         SSP1ADD = spi1_configuration[spi1UniqueConfigur
      +                          ation].add;
  5771     0565  0021               	movlb	1	; select bank1
  5772     0566  0844               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5773     0567  00C1               	movwf	??_SPI1_Open^(0+128)
  5774     0568  01C2               	clrf	(??_SPI1_Open^(0+128)+1)
  5775     0569  35C1               	lslf	??_SPI1_Open^(0+128),f
  5776     056A  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5777     056B  35C1               	lslf	??_SPI1_Open^(0+128),f
  5778     056C  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5779     056D  302F               	movlw	low (_spi1_configuration+2)
  5780     056E  0741               	addwf	??_SPI1_Open^(0+128),w
  5781     056F  0084               	movwf	4
  5782     0570  3008               	movlw	high (_spi1_configuration+2)
  5783     0571  3D42               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5784     0572  3880               	iorlw	128
  5785     0573  0085               	movwf	5
  5786     0574  0800               	movf	0,w	;code access
  5787     0575  0024               	movlb	4	; select bank4
  5788     0576  0092               	movwf	18	;volatile
  5789                           
  5790                           ;mcc_generated_files/spi1.c: 80:         TRISBbits.TRISB4 = spi1_configuration[spi1Uniqu
      +                          eConfiguration].operation;
  5791     0577  0021               	movlb	1	; select bank1
  5792     0578  0844               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5793     0579  00C1               	movwf	??_SPI1_Open^(0+128)
  5794     057A  01C2               	clrf	(??_SPI1_Open^(0+128)+1)
  5795     057B  35C1               	lslf	??_SPI1_Open^(0+128),f
  5796     057C  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5797     057D  35C1               	lslf	??_SPI1_Open^(0+128),f
  5798     057E  0DC2               	rlf	(??_SPI1_Open^(0+128)+1),f
  5799     057F  3030               	movlw	low (_spi1_configuration+3)
  5800     0580  0741               	addwf	??_SPI1_Open^(0+128),w
  5801     0581  0084               	movwf	4
  5802     0582  3008               	movlw	high (_spi1_configuration+3)
  5803     0583  3D42               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5804     0584  3880               	iorlw	128
  5805     0585  0085               	movwf	5
  5806     0586  0800               	movf	0,w	;code access
  5807     0587  00C3               	movwf	(??_SPI1_Open+2)^(0+128)
  5808     0588  0EC3               	swapf	(??_SPI1_Open+2)^(0+128),f
  5809     0589  080D               	movf	13,w	;volatile
  5810     058A  0643               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5811     058B  39EF               	andlw	-17
  5812     058C  0643               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5813     058D  008D               	movwf	13	;volatile
  5814                           
  5815                           ;mcc_generated_files/spi1.c: 81:         SSP1CON1bits.SSPEN = 1;
  5816     058E  0024               	movlb	4	; select bank4
  5817     058F  1695               	bsf	21,5	;volatile
  5818     0590  0008               	return
  5819     0591                     __end_of_SPI1_Open:
  5820                           
  5821                           	psect	text27
  5822     0DA6                     __ptext27:	
  5823 ;; *************** function _Route_empty *****************
  5824 ;; Defined at:
  5825 ;;		line 206 in file "main.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;		None
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  i               2    1[BANK1 ] int 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      _Bool 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5834 ;; Tracked objects:
  5835 ;;		On entry : 1F/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5839 ;;      Params:         0       0       0       0       0       0
  5840 ;;      Locals:         0       0       2       0       0       0
  5841 ;;      Temps:          0       0       1       0       0       0
  5842 ;;      Totals:         0       0       3       0       0       0
  5843 ;;Total ram usage:        3 bytes
  5844 ;; Hardware stack levels used: 1
  5845 ;; Hardware stack levels required when called: 12
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853     0DA6                     _Route_empty:	
  5854                           ;psect for function _Route_empty
  5855                           
  5856                           
  5857                           ;main.c: 207:   for(int i=0; i<6; i++){
  5858                           
  5859                           ;incstack = 0
  5860                           ; Regs used in _Route_empty: [wreg+fsr1l+fsr1h+status,2+status,0]
  5861     0DA6  0021               	movlb	1	; select bank1
  5862     0DA7  01C2               	clrf	Route_empty@i^(0+128)
  5863     0DA8  01C3               	clrf	(Route_empty@i+1)^(0+128)
  5864     0DA9                     l3870:
  5865                           
  5866                           ;main.c: 208:       if (route[i] != 0) return 0;
  5867     0DA9  0021               	movlb	1	; select bank1
  5868     0DAA  0842               	movf	Route_empty@i^(0+128),w
  5869     0DAB  3EB0               	addlw	(low (_route| 0))& (0+255)
  5870     0DAC  0086               	movwf	6
  5871     0DAD  0187               	clrf	7
  5872     0DAE  0801               	movf	1,w
  5873     0DAF  1903               	btfsc	3,2
  5874     0DB0  2DB3               	goto	l3876
  5875     0DB1  3000               	movlw	0
  5876     0DB2  0008               	return
  5877     0DB3                     l3876:
  5878                           
  5879                           ;main.c: 209:     }
  5880     0DB3  3001               	movlw	1
  5881     0DB4  07C2               	addwf	Route_empty@i^(0+128),f
  5882     0DB5  3000               	movlw	0
  5883     0DB6  3DC3               	addwfc	(Route_empty@i+1)^(0+128),f
  5884     0DB7  0843               	movf	(Route_empty@i+1)^(0+128),w
  5885     0DB8  3A80               	xorlw	128
  5886     0DB9  00C1               	movwf	??_Route_empty^(0+128)
  5887     0DBA  3080               	movlw	128
  5888     0DBB  0241               	subwf	??_Route_empty^(0+128),w
  5889     0DBC  1D03               	skipz
  5890     0DBD  2DC0               	goto	u2405
  5891     0DBE  3006               	movlw	6
  5892     0DBF  0242               	subwf	Route_empty@i^(0+128),w
  5893     0DC0                     u2405:
  5894     0DC0  1C03               	skipc
  5895     0DC1  2DA9               	goto	l3870
  5896                           
  5897                           ;main.c: 210:   return 1;
  5898     0DC2  3001               	movlw	1
  5899     0DC3  0008               	return
  5900     0DC4                     __end_of_Route_empty:
  5901                           
  5902                           	psect	text28
  5903     0C09                     __ptext28:	
  5904 ;; *************** function _Initialize_list *****************
  5905 ;; Defined at:
  5906 ;;		line 24 in file "main.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;  list            2    0[BANK1 ] PTR struct .
  5909 ;;		 -> route_list(22), 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr1l, fsr1h
  5916 ;; Tracked objects:
  5917 ;;		On entry : 1F/1
  5918 ;;		On exit  : 1F/1
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5921 ;;      Params:         0       0       2       0       0       0
  5922 ;;      Locals:         0       0       0       0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0
  5924 ;;      Totals:         0       0       2       0       0       0
  5925 ;;Total ram usage:        2 bytes
  5926 ;; Hardware stack levels used: 1
  5927 ;; Hardware stack levels required when called: 12
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_main
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935     0C09                     _Initialize_list:	
  5936                           ;psect for function _Initialize_list
  5937                           
  5938                           
  5939                           ;main.c: 25: list->count = 0;
  5940                           
  5941                           ;incstack = 0
  5942                           ; Regs used in _Initialize_list: [wregfsr1]
  5943     0C09  0841               	movf	Initialize_list@list^(0+128),w
  5944     0C0A  0086               	movwf	6
  5945     0C0B  0842               	movf	(Initialize_list@list+1)^(0+128),w
  5946     0C0C  0087               	movwf	7
  5947     0C0D  3154               	addfsr 1,20
  5948     0C0E  3000               	movlw	0
  5949     0C0F  3FC0               	movwi [0]fsr1
  5950     0C10  3FC1               	movwi [1]fsr1
  5951     0C11  0008               	return
  5952     0C12                     __end_of_Initialize_list:
  5953                           
  5954                           	psect	text29
  5955     0752                     __ptext29:	
  5956 ;; *************** function _Ini_matrix *****************
  5957 ;; Defined at:
  5958 ;;		line 255 in file "main.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  i               1   11[BANK1 ] unsigned char 
  5963 ;;  i               1    7[BANK1 ] unsigned char 
  5964 ;;  data            2    8[BANK1 ] unsigned char [2]
  5965 ;;  k               1   10[BANK1 ] unsigned char 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      void 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5970 ;; Tracked objects:
  5971 ;;		On entry : 1F/4
  5972 ;;		On exit  : 1F/1
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5975 ;;      Params:         0       0       0       0       0       0
  5976 ;;      Locals:         0       0       5       0       0       0
  5977 ;;      Temps:          0       0       0       0       0       0
  5978 ;;      Totals:         0       0       5       0       0       0
  5979 ;;Total ram usage:        5 bytes
  5980 ;; Hardware stack levels used: 1
  5981 ;; Hardware stack levels required when called: 14
  5982 ;; This function calls:
  5983 ;;		_Tx_spi
  5984 ;; This function is called by:
  5985 ;;		_main
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989     0752                     _Ini_matrix:	
  5990                           ;psect for function _Ini_matrix
  5991                           
  5992                           
  5993                           ;main.c: 256:     uint8_t data[2];;main.c: 257:     uint8_t k=0;
  5994                           
  5995                           ;incstack = 0
  5996                           ; Regs used in _Ini_matrix: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5997     0752  0021               	movlb	1	; select bank1
  5998     0753  01CB               	clrf	Ini_matrix@k^(0+128)
  5999                           
  6000                           ;main.c: 259:     for(uint8_t i=0;i<6;i++){
  6001     0754  01C8               	clrf	Ini_matrix@i^(0+128)
  6002     0755                     l3918:
  6003                           
  6004                           ;main.c: 260:         data[0]= MATRIX_CONFIG[k];
  6005     0755  084B               	movf	Ini_matrix@k^(0+128),w
  6006     0756  3E0D               	addlw	low (_MATRIX_CONFIG| (0+32768))
  6007     0757  0084               	movwf	4
  6008     0758  3088               	movlw	high (_MATRIX_CONFIG| (0+32768))
  6009     0759  1803               	skipnc
  6010     075A  3E01               	addlw	1
  6011     075B  0085               	movwf	5
  6012     075C  0800               	movf	0,w	;code access
  6013     075D  00C9               	movwf	Ini_matrix@data^(0+128)
  6014                           
  6015                           ;main.c: 261:         data[1]= MATRIX_CONFIG[k+1];
  6016     075E  084B               	movf	Ini_matrix@k^(0+128),w
  6017     075F  3E0E               	addlw	low ((_MATRIX_CONFIG+1)| (0+32768))
  6018     0760  0084               	movwf	4
  6019     0761  3088               	movlw	high ((_MATRIX_CONFIG+1)| (0+32768))
  6020     0762  1803               	skipnc
  6021     0763  3E01               	addlw	1
  6022     0764  0085               	movwf	5
  6023     0765  0800               	movf	0,w	;code access
  6024     0766  00CA               	movwf	(Ini_matrix@data^(0+128)+1)
  6025                           
  6026                           ;main.c: 262:         k=k+2;
  6027     0767  084B               	movf	Ini_matrix@k^(0+128),w
  6028     0768  3E02               	addlw	2
  6029     0769  00CB               	movwf	Ini_matrix@k^(0+128)
  6030                           
  6031                           ;main.c: 263:         Tx_spi(data, 2);
  6032     076A  30C9               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6033     076B  00C5               	movwf	Tx_spi@data^(0+128)
  6034     076C  3002               	movlw	2
  6035     076D  00C6               	movwf	Tx_spi@dataSize^(0+128)
  6036     076E  3000               	movlw	0
  6037     076F  00C7               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6038     0770  318C  24F0  3187   	fcall	_Tx_spi
  6039                           
  6040                           ;main.c: 264:     }
  6041     0773  3001               	movlw	1
  6042     0774  0021               	movlb	1	; select bank1
  6043     0775  07C8               	addwf	Ini_matrix@i^(0+128),f
  6044     0776  3006               	movlw	6
  6045     0777  0248               	subwf	Ini_matrix@i^(0+128),w
  6046     0778  1C03               	skipc
  6047     0779  2F55               	goto	l3918
  6048                           
  6049                           ;main.c: 266:     data[1] = 0b00000000;
  6050     077A  01CA               	clrf	(Ini_matrix@data^(0+128)+1)
  6051                           
  6052                           ;main.c: 267:     for(uint8_t i=1;i<9;i++){
  6053     077B  3001               	movlw	1
  6054     077C  00CC               	movwf	Ini_matrix@i_1605^(0+128)
  6055     077D                     l3936:
  6056                           
  6057                           ;main.c: 268:     data[0] = i;
  6058     077D  084C               	movf	Ini_matrix@i_1605^(0+128),w
  6059     077E  00C9               	movwf	Ini_matrix@data^(0+128)
  6060                           
  6061                           ;main.c: 269:     Tx_spi(data, 2);
  6062     077F  30C9               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6063     0780  00C5               	movwf	Tx_spi@data^(0+128)
  6064     0781  3002               	movlw	2
  6065     0782  00C6               	movwf	Tx_spi@dataSize^(0+128)
  6066     0783  3000               	movlw	0
  6067     0784  00C7               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6068     0785  318C  24F0  3187   	fcall	_Tx_spi
  6069                           
  6070                           ;main.c: 270:     }
  6071     0788  3001               	movlw	1
  6072     0789  0021               	movlb	1	; select bank1
  6073     078A  07CC               	addwf	Ini_matrix@i_1605^(0+128),f
  6074     078B  3009               	movlw	9
  6075     078C  024C               	subwf	Ini_matrix@i_1605^(0+128),w
  6076     078D  1803               	btfsc	3,0
  6077     078E  0008               	return
  6078     078F  2F7D               	goto	l3936
  6079     0790                     __end_of_Ini_matrix:
  6080                           
  6081                           	psect	text30
  6082     0CC4                     __ptext30:	
  6083 ;; *************** function _Idle *****************
  6084 ;; Defined at:
  6085 ;;		line 236 in file "main.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;		None
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;		None
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 1F/1
  6096 ;;		On exit  : 18/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6099 ;;      Params:         0       0       0       0       0       0
  6100 ;;      Locals:         0       0       0       0       0       0
  6101 ;;      Temps:          0       0       0       0       0       0
  6102 ;;      Totals:         0       0       0       0       0       0
  6103 ;;Total ram usage:        0 bytes
  6104 ;; Hardware stack levels used: 1
  6105 ;; Hardware stack levels required when called: 16
  6106 ;; This function calls:
  6107 ;;		_Motor_Turn_Off
  6108 ;;		_Motor_Turn_On
  6109 ;; This function is called by:
  6110 ;;		_main
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114     0CC4                     _Idle:	
  6115                           ;psect for function _Idle
  6116                           
  6117                           
  6118                           ;main.c: 237:   if(index == 0){
  6119                           
  6120                           ;incstack = 0
  6121 ;; hardware stack exceeded
  6122                           ; Regs used in _Idle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6123     0CC4  0020               	movlb	0	; select bank0
  6124     0CC5  086F               	movf	_index,w
  6125     0CC6  1D03               	btfss	3,2
  6126     0CC7  2CCD               	goto	l838
  6127                           
  6128                           ;main.c: 238:       LATAbits.LATA7 = 1;
  6129     0CC8  0022               	movlb	2	; select bank2
  6130     0CC9  178C               	bsf	12,7	;volatile
  6131                           
  6132                           ;main.c: 239:       Motor_Turn_Off();
  6133     0CCA  318C  243B         	fcall	_Motor_Turn_Off
  6134                           
  6135                           ;main.c: 240:     }
  6136     0CCC  0008               	return
  6137     0CCD                     l838:	
  6138                           ;main.c: 241:   else{
  6139                           
  6140                           
  6141                           ;main.c: 242:       LATAbits.LATA7 = 0;
  6142     0CCD  0022               	movlb	2	; select bank2
  6143     0CCE  138C               	bcf	12,7	;volatile
  6144                           
  6145                           ;main.c: 243:       Motor_Turn_On();
  6146     0CCF  318C  249C         	fcall	_Motor_Turn_On
  6147     0CD1  0008               	return
  6148     0CD2                     __end_of_Idle:
  6149                           
  6150                           	psect	text31
  6151     0C9C                     __ptext31:	
  6152 ;; *************** function _Motor_Turn_On *****************
  6153 ;; Defined at:
  6154 ;;		line 13 in file "main.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;		None
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6163 ;; Tracked objects:
  6164 ;;		On entry : 1C/1
  6165 ;;		On exit  : 18/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6168 ;;      Params:         0       0       0       0       0       0
  6169 ;;      Locals:         0       0       0       0       0       0
  6170 ;;      Temps:          0       0       0       0       0       0
  6171 ;;      Totals:         0       0       0       0       0       0
  6172 ;;Total ram usage:        0 bytes
  6173 ;; Hardware stack levels used: 1
  6174 ;; Hardware stack levels required when called: 15
  6175 ;; This function calls:
  6176 ;;		_Matrix_update_dir
  6177 ;; This function is called by:
  6178 ;;		_Start
  6179 ;;		_Idle
  6180 ;;		_main
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184     0C9C                     _Motor_Turn_On:	
  6185                           ;psect for function _Motor_Turn_On
  6186                           
  6187                           
  6188                           ;main.c: 14:     if(CCP3CONbits.CCP3M != 0x0C){
  6189                           
  6190                           ;incstack = 0
  6191 ;; hardware stack exceeded
  6192                           ; Regs used in _Motor_Turn_On: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6193     0C9C  0026               	movlb	6	; select bank6
  6194     0C9D  0813               	movf	19,w	;volatile
  6195     0C9E  390F               	andlw	15
  6196     0C9F  3A0C               	xorlw	12
  6197     0CA0  1903               	skipnz
  6198     0CA1  0008               	return
  6199                           
  6200                           ;main.c: 15:         CCP3CONbits.CCP3M = 0x0C;
  6201     0CA2  0813               	movf	19,w	;volatile
  6202     0CA3  39F0               	andlw	-16
  6203     0CA4  380C               	iorlw	12
  6204     0CA5  0093               	movwf	19	;volatile
  6205                           
  6206                           ;main.c: 16:         Matrix_update_dir();
  6207     0CA6  3184  2467         	fcall	_Matrix_update_dir
  6208     0CA8  0008               	return
  6209     0CA9                     __end_of_Motor_Turn_On:
  6210                           
  6211                           	psect	text32
  6212     0C3B                     __ptext32:	
  6213 ;; *************** function _Motor_Turn_Off *****************
  6214 ;; Defined at:
  6215 ;;		line 6 in file "main.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 1D/0
  6226 ;;		On exit  : 18/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6229 ;;      Params:         0       0       0       0       0       0
  6230 ;;      Locals:         0       0       0       0       0       0
  6231 ;;      Temps:          0       0       0       0       0       0
  6232 ;;      Totals:         0       0       0       0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used: 1
  6235 ;; Hardware stack levels required when called: 15
  6236 ;; This function calls:
  6237 ;;		_Matrix_update_dir
  6238 ;; This function is called by:
  6239 ;;		_Start
  6240 ;;		_Idle
  6241 ;;		_main
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245     0C3B                     _Motor_Turn_Off:	
  6246                           ;psect for function _Motor_Turn_Off
  6247                           
  6248                           
  6249                           ;main.c: 7:     if(CCP3CONbits.CCP3M != 0x00){
  6250                           
  6251                           ;incstack = 0
  6252 ;; hardware stack exceeded
  6253                           ; Regs used in _Motor_Turn_Off: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6254     0C3B  0026               	movlb	6	; select bank6
  6255     0C3C  0813               	movf	19,w	;volatile
  6256     0C3D  390F               	andlw	15
  6257     0C3E  3A00               	xorlw	0
  6258     0C3F  1903               	skipnz
  6259     0C40  0008               	return
  6260                           
  6261                           ;main.c: 8:         CCP3CONbits.CCP3M = 0x00;
  6262     0C41  30F0               	movlw	-16
  6263     0C42  0593               	andwf	19,f	;volatile
  6264                           
  6265                           ;main.c: 9:         Matrix_update_dir();
  6266     0C43  3184  2467         	fcall	_Matrix_update_dir
  6267     0C45  0008               	return
  6268     0C46                     __end_of_Motor_Turn_Off:
  6269                           
  6270                           	psect	text33
  6271     0467                     __ptext33:	
  6272 ;; *************** function _Matrix_update_dir *****************
  6273 ;; Defined at:
  6274 ;;		line 283 in file "main.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;		None
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  i               1   16[BANK1 ] unsigned char 
  6279 ;;  i               2   17[BANK1 ] int 
  6280 ;;  route_          4    8[BANK1 ] _Bool [4]
  6281 ;;  data            2   14[BANK1 ] unsigned char [2]
  6282 ;;  display_dir     1   13[BANK1 ] unsigned char 
  6283 ;;  mask            1   12[BANK1 ] unsigned char 
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 1F/6
  6290 ;;		On exit  : 1F/1
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6293 ;;      Params:         0       0       0       0       0       0
  6294 ;;      Locals:         0       0      11       0       0       0
  6295 ;;      Temps:          0       0       1       0       0       0
  6296 ;;      Totals:         0       0      12       0       0       0
  6297 ;;Total ram usage:       12 bytes
  6298 ;; Hardware stack levels used: 1
  6299 ;; Hardware stack levels required when called: 14
  6300 ;; This function calls:
  6301 ;;		_Tx_spi
  6302 ;;		___bmul
  6303 ;; This function is called by:
  6304 ;;		_Motor_Turn_Off
  6305 ;;		_Motor_Turn_On
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309     0467                     _Matrix_update_dir:	
  6310                           ;psect for function _Matrix_update_dir
  6311                           
  6312                           
  6313                           ;main.c: 284:     uint8_t data[2];;main.c: 285:     uint8_t display_dir;;main.c: 287:   
      +                            _Bool route_[4];;main.c: 288:     route_[0] = route[0];
  6314                           
  6315                           ;incstack = 0
  6316 ;; hardware stack exceeded
  6317                           ; Regs used in _Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6318     0467  0021               	movlb	1	; select bank1
  6319     0468  0830               	movf	_route^(0+128),w
  6320     0469  00C9               	movwf	Matrix_update_dir@route_^(0+128)
  6321                           
  6322                           ;main.c: 289:     route_[1] = route[1] | route[5];
  6323     046A  0831               	movf	(_route^(0+128)+1),w
  6324     046B  0435               	iorwf	(_route^(0+128)+5),w
  6325     046C  00CA               	movwf	(Matrix_update_dir@route_^(0+128)+1)
  6326                           
  6327                           ;main.c: 290:     route_[2] = route[2] | route[4];
  6328     046D  0832               	movf	(_route^(0+128)+2),w
  6329     046E  0434               	iorwf	(_route^(0+128)+4),w
  6330     046F  00CB               	movwf	(Matrix_update_dir@route_^(0+128)+2)
  6331                           
  6332                           ;main.c: 291:     route_[3] = route[3];
  6333     0470  0833               	movf	(_route^(0+128)+3),w
  6334     0471  00CC               	movwf	(Matrix_update_dir@route_^(0+128)+3)
  6335                           
  6336                           ;main.c: 293:     uint8_t mask = 0;
  6337     0472  01CD               	clrf	Matrix_update_dir@mask^(0+128)
  6338                           
  6339                           ;main.c: 295:     for (int i = 0; i < 4; i++) {
  6340     0473  01D2               	clrf	Matrix_update_dir@i^(0+128)
  6341     0474  01D3               	clrf	(Matrix_update_dir@i+1)^(0+128)
  6342     0475                     l3230:
  6343                           
  6344                           ;main.c: 296:         if (route_[i]) mask |= (1 << i);
  6345     0475  0021               	movlb	1	; select bank1
  6346     0476  0852               	movf	Matrix_update_dir@i^(0+128),w
  6347     0477  3EC9               	addlw	(low (Matrix_update_dir@route_| 0))& (0+255)
  6348     0478  0086               	movwf	6
  6349     0479  0187               	clrf	7
  6350     047A  0801               	movf	1,w
  6351     047B  1903               	btfsc	3,2
  6352     047C  2C86               	goto	l3234
  6353     047D  3001               	movlw	1
  6354     047E  00C8               	movwf	??_Matrix_update_dir^(0+128)
  6355     047F  0A52               	incf	Matrix_update_dir@i^(0+128),w
  6356     0480  2C82               	goto	u1944
  6357     0481                     u1945:
  6358     0481  35C8               	lslf	??_Matrix_update_dir^(0+128),f
  6359     0482                     u1944:
  6360     0482  0B89               	decfsz	9,f
  6361     0483  2C81               	goto	u1945
  6362     0484  0848               	movf	??_Matrix_update_dir^(0+128),w
  6363     0485  04CD               	iorwf	Matrix_update_dir@mask^(0+128),f
  6364     0486                     l3234:
  6365                           
  6366                           ;main.c: 297:     }
  6367     0486  3001               	movlw	1
  6368     0487  07D2               	addwf	Matrix_update_dir@i^(0+128),f
  6369     0488  3000               	movlw	0
  6370     0489  3DD3               	addwfc	(Matrix_update_dir@i+1)^(0+128),f
  6371     048A  0853               	movf	(Matrix_update_dir@i+1)^(0+128),w
  6372     048B  3A80               	xorlw	128
  6373     048C  00C8               	movwf	??_Matrix_update_dir^(0+128)
  6374     048D  3080               	movlw	128
  6375     048E  0248               	subwf	??_Matrix_update_dir^(0+128),w
  6376     048F  1D03               	skipz
  6377     0490  2C93               	goto	u1955
  6378     0491  3004               	movlw	4
  6379     0492  0252               	subwf	Matrix_update_dir@i^(0+128),w
  6380     0493                     u1955:
  6381     0493  1C03               	skipc
  6382     0494  2C75               	goto	l3230
  6383                           
  6384                           ;main.c: 299:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
  6385     0495  0026               	movlb	6	; select bank6
  6386     0496  0813               	movf	19,w	;volatile
  6387     0497  390F               	andlw	15
  6388     0498  3A00               	xorlw	0
  6389     0499  1D03               	skipz
  6390     049A  2C9E               	goto	l3242
  6391     049B  3006               	movlw	6
  6392     049C  0021               	movlb	1	; select bank1
  6393     049D  2CA8               	goto	L1
  6394     049E                     l3242:
  6395     049E  3003               	movlw	3
  6396     049F  0021               	movlb	1	; select bank1
  6397     04A0  00C1               	movwf	___bmul@multiplicand^(0+128)
  6398     04A1  0022               	movlb	2	; select bank2
  6399     04A2  0D0C               	rlf	12,w	;volatile
  6400     04A3  0D0C               	rlf	12,w	;volatile
  6401     04A4  3901               	andlw	1
  6402     04A5  318D  2500  3184   	fcall	___bmul
  6403     04A8                     L1:
  6404     04A8  00CE               	movwf	Matrix_update_dir@display_dir^(0+128)
  6405                           
  6406                           ;main.c: 301:     data[0] = 1;
  6407     04A9  3001               	movlw	1
  6408     04AA  00CF               	movwf	Matrix_update_dir@data^(0+128)
  6409                           
  6410                           ;main.c: 302:     data[1] = MATRIX_DIR[display_dir] | mask;
  6411     04AB  084E               	movf	Matrix_update_dir@display_dir^(0+128),w
  6412     04AC  3E19               	addlw	low (_MATRIX_DIR| (0+32768))
  6413     04AD  0084               	movwf	4
  6414     04AE  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6415     04AF  1803               	skipnc
  6416     04B0  3E01               	addlw	1
  6417     04B1  0085               	movwf	5
  6418     04B2  0800               	movf	0,w	;code access
  6419     04B3  044D               	iorwf	Matrix_update_dir@mask^(0+128),w
  6420     04B4  00D0               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6421                           
  6422                           ;main.c: 303:     Tx_spi(data, 2);
  6423     04B5  30CF               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6424     04B6  00C5               	movwf	Tx_spi@data^(0+128)
  6425     04B7  3002               	movlw	2
  6426     04B8  00C6               	movwf	Tx_spi@dataSize^(0+128)
  6427     04B9  3000               	movlw	0
  6428     04BA  00C7               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6429     04BB  318C  24F0  3184   	fcall	_Tx_spi
  6430                           
  6431                           ;main.c: 304:     display_dir++;
  6432     04BE  3001               	movlw	1
  6433     04BF  0021               	movlb	1	; select bank1
  6434     04C0  07CE               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6435                           
  6436                           ;main.c: 306:     for(uint8_t i=2;i<=3;i++){
  6437     04C1  3002               	movlw	2
  6438     04C2  00D1               	movwf	Matrix_update_dir@i_1616^(0+128)
  6439     04C3                     l3258:
  6440                           
  6441                           ;main.c: 307:         data[0] = i;
  6442     04C3  0851               	movf	Matrix_update_dir@i_1616^(0+128),w
  6443     04C4  00CF               	movwf	Matrix_update_dir@data^(0+128)
  6444                           
  6445                           ;main.c: 308:         data[1] = MATRIX_DIR[display_dir];
  6446     04C5  084E               	movf	Matrix_update_dir@display_dir^(0+128),w
  6447     04C6  3E19               	addlw	low (_MATRIX_DIR| (0+32768))
  6448     04C7  0084               	movwf	4
  6449     04C8  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6450     04C9  1803               	skipnc
  6451     04CA  3E01               	addlw	1
  6452     04CB  0085               	movwf	5
  6453     04CC  0800               	movf	0,w	;code access
  6454     04CD  00D0               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6455                           
  6456                           ;main.c: 309:         Tx_spi(data, 2);
  6457     04CE  30CF               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6458     04CF  00C5               	movwf	Tx_spi@data^(0+128)
  6459     04D0  3002               	movlw	2
  6460     04D1  00C6               	movwf	Tx_spi@dataSize^(0+128)
  6461     04D2  3000               	movlw	0
  6462     04D3  00C7               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6463     04D4  318C  24F0  3184   	fcall	_Tx_spi
  6464                           
  6465                           ;main.c: 310:         display_dir++;
  6466     04D7  3001               	movlw	1
  6467     04D8  0021               	movlb	1	; select bank1
  6468     04D9  07CE               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6469                           
  6470                           ;main.c: 312:     }
  6471     04DA  3001               	movlw	1
  6472     04DB  07D1               	addwf	Matrix_update_dir@i_1616^(0+128),f
  6473     04DC  3004               	movlw	4
  6474     04DD  0251               	subwf	Matrix_update_dir@i_1616^(0+128),w
  6475     04DE  1803               	btfsc	3,0
  6476     04DF  0008               	return
  6477     04E0  2CC3               	goto	l3258
  6478     04E1                     __end_of_Matrix_update_dir:
  6479                           
  6480                           	psect	text34
  6481     0D00                     __ptext34:	
  6482 ;; *************** function ___bmul *****************
  6483 ;; Defined at:
  6484 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;  multiplier      1    wreg     unsigned char 
  6487 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  multiplier      1    2[BANK1 ] unsigned char 
  6490 ;;  product         1    1[BANK1 ] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      unsigned char 
  6493 ;; Registers used:
  6494 ;;		wreg, status,2, status,0
  6495 ;; Tracked objects:
  6496 ;;		On entry : 1F/2
  6497 ;;		On exit  : 1F/1
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6500 ;;      Params:         0       0       1       0       0       0
  6501 ;;      Locals:         0       0       2       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0
  6503 ;;      Totals:         0       0       3       0       0       0
  6504 ;;Total ram usage:        3 bytes
  6505 ;; Hardware stack levels used: 1
  6506 ;; Hardware stack levels required when called: 12
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_Matrix_update_dir
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514     0D00                     ___bmul:	
  6515                           ;psect for function ___bmul
  6516                           
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6520                           ;___bmul@multiplier stored from wreg
  6521     0D00  0021               	movlb	1	; select bank1
  6522     0D01  00C3               	movwf	___bmul@multiplier^(0+128)
  6523     0D02  01C2               	clrf	___bmul@product^(0+128)
  6524     0D03                     l3168:
  6525     0D03  1C43               	btfss	___bmul@multiplier^(0+128),0
  6526     0D04  2D07               	goto	l3172
  6527     0D05  0841               	movf	___bmul@multiplicand^(0+128),w
  6528     0D06  07C2               	addwf	___bmul@product^(0+128),f
  6529     0D07                     l3172:
  6530     0D07  1003               	clrc
  6531     0D08  0DC1               	rlf	___bmul@multiplicand^(0+128),f
  6532     0D09  1003               	clrc
  6533     0D0A  0CC3               	rrf	___bmul@multiplier^(0+128),f
  6534     0D0B  0843               	movf	___bmul@multiplier^(0+128),w
  6535     0D0C  1D03               	btfss	3,2
  6536     0D0D  2D03               	goto	l3168
  6537     0D0E  0842               	movf	___bmul@product^(0+128),w
  6538     0D0F  0008               	return
  6539     0D10                     __end_of___bmul:
  6540                           
  6541                           	psect	text35
  6542     0CF0                     __ptext35:	
  6543 ;; *************** function _Tx_spi *****************
  6544 ;; Defined at:
  6545 ;;		line 248 in file "main.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  data            1    4[BANK1 ] PTR unsigned char 
  6548 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  6549 ;;  dataSize        2    5[BANK1 ] unsigned int 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 1F/1
  6558 ;;		On exit  : 1F/2
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6561 ;;      Params:         0       0       3       0       0       0
  6562 ;;      Locals:         0       0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0
  6564 ;;      Totals:         0       0       3       0       0       0
  6565 ;;Total ram usage:        3 bytes
  6566 ;; Hardware stack levels used: 1
  6567 ;; Hardware stack levels required when called: 13
  6568 ;; This function calls:
  6569 ;;		_SPI1_ExchangeBlock
  6570 ;; This function is called by:
  6571 ;;		_Ini_matrix
  6572 ;;		_Matrix_update_floor
  6573 ;;		_Matrix_update_dir
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577     0CF0                     _Tx_spi:	
  6578                           ;psect for function _Tx_spi
  6579                           
  6580                           
  6581                           ;main.c: 249:     LATBbits.LATB1 = 0;
  6582                           
  6583                           ;incstack = 0
  6584 ;; hardware stack exceeded
  6585                           ; Regs used in _Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6586     0CF0  0022               	movlb	2	; select bank2
  6587     0CF1  108D               	bcf	13,1	;volatile
  6588                           
  6589                           ;main.c: 250:     __nop();
  6590     0CF2  0000               	nop
  6591                           
  6592                           ;main.c: 251:     __nop();
  6593     0CF3  0000               	nop
  6594                           
  6595                           ;main.c: 252:     SPI1_ExchangeBlock(data,dataSize);
  6596     0CF4  0021               	movlb	1	; select bank1
  6597     0CF5  0845               	movf	Tx_spi@data^(0+128),w
  6598     0CF6  00C1               	movwf	SPI1_ExchangeBlock@block^(0+128)
  6599     0CF7  0847               	movf	(Tx_spi@dataSize+1)^(0+128),w
  6600     0CF8  00C3               	movwf	(SPI1_ExchangeBlock@blockSize+1)^(0+128)
  6601     0CF9  0846               	movf	Tx_spi@dataSize^(0+128),w
  6602     0CFA  00C2               	movwf	SPI1_ExchangeBlock@blockSize^(0+128)
  6603     0CFB  318E  2686         	fcall	_SPI1_ExchangeBlock
  6604                           
  6605                           ;main.c: 253:     LATBbits.LATB1 = 1;
  6606     0CFD  0022               	movlb	2	; select bank2
  6607     0CFE  148D               	bsf	13,1	;volatile
  6608     0CFF  0008               	return
  6609     0D00                     __end_of_Tx_spi:
  6610                           
  6611                           	psect	text36
  6612     0E86                     __ptext36:	
  6613 ;; *************** function _SPI1_ExchangeBlock *****************
  6614 ;; Defined at:
  6615 ;;		line 100 in file "mcc_generated_files/spi1.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  block           1    0[BANK1 ] PTR void 
  6618 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  6619 ;;  blockSize       2    1[BANK1 ] unsigned int 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  data            1    3[BANK1 ] PTR unsigned char 
  6622 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6627 ;; Tracked objects:
  6628 ;;		On entry : 1F/1
  6629 ;;		On exit  : 1F/1
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6632 ;;      Params:         0       0       3       0       0       0
  6633 ;;      Locals:         0       0       1       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0
  6635 ;;      Totals:         0       0       4       0       0       0
  6636 ;;Total ram usage:        4 bytes
  6637 ;; Hardware stack levels used: 1
  6638 ;; Hardware stack levels required when called: 12
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_Tx_spi
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646     0E86                     _SPI1_ExchangeBlock:	
  6647                           ;psect for function _SPI1_ExchangeBlock
  6648                           
  6649                           
  6650                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
  6651                           
  6652                           ;incstack = 0
  6653 ;; hardware stack exceeded
  6654                           ; Regs used in _SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
  6655     0E86  0841               	movf	SPI1_ExchangeBlock@block^(0+128),w
  6656     0E87  00C4               	movwf	SPI1_ExchangeBlock@data^(0+128)
  6657     0E88                     l3098:	
  6658                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  6659                           
  6660                           
  6661                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  6662     0E88  3001               	movlw	1
  6663     0E89  02C2               	subwf	SPI1_ExchangeBlock@blockSize^(0+128),f
  6664     0E8A  3000               	movlw	0
  6665     0E8B  3BC3               	subwfb	(SPI1_ExchangeBlock@blockSize+1)^(0+128),f
  6666     0E8C  0A42               	incf	SPI1_ExchangeBlock@blockSize^(0+128),w
  6667     0E8D  1903               	btfsc	3,2
  6668     0E8E  0A43               	incf	(SPI1_ExchangeBlock@blockSize+1)^(0+128),w
  6669     0E8F  1903               	btfsc	3,2
  6670     0E90  0008               	return
  6671                           
  6672                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
  6673     0E91  0844               	movf	SPI1_ExchangeBlock@data^(0+128),w
  6674     0E92  0086               	movwf	6
  6675     0E93  0187               	clrf	7
  6676     0E94  0801               	movf	1,w
  6677     0E95  0024               	movlb	4	; select bank4
  6678     0E96  0091               	movwf	17	;volatile
  6679     0E97                     l452:	
  6680                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
  6681                           
  6682     0E97  0020               	movlb	0	; select bank0
  6683     0E98  1991               	btfsc	17,3	;volatile
  6684     0E99  2E9D               	goto	l454
  6685     0E9A  0022               	movlb	2	; select bank2
  6686     0E9B  108D               	bcf	13,1	;volatile
  6687     0E9C  2E97               	goto	l452
  6688     0E9D                     l454:
  6689                           
  6690                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
  6691     0E9D  1191               	bcf	17,3	;volatile
  6692                           
  6693                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
  6694     0E9E  0021               	movlb	1	; select bank1
  6695     0E9F  0844               	movf	SPI1_ExchangeBlock@data^(0+128),w
  6696     0EA0  0086               	movwf	6
  6697     0EA1  0187               	clrf	7
  6698     0EA2  0024               	movlb	4	; select bank4
  6699     0EA3  0811               	movf	17,w	;volatile
  6700     0EA4  0081               	movwf	1
  6701     0EA5  3001               	movlw	1
  6702     0EA6  0021               	movlb	1	; select bank1
  6703     0EA7  07C4               	addwf	SPI1_ExchangeBlock@data^(0+128),f
  6704     0EA8  2E88               	goto	l3098
  6705     0EA9                     __end_of_SPI1_ExchangeBlock:
  6706                           
  6707                           	psect	intentry
  6708     0004                     __pintentry:	
  6709 ;; *************** function _INTERRUPT_InterruptManager *****************
  6710 ;; Defined at:
  6711 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  1    wreg      void 
  6718 ;; Registers used:
  6719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6725 ;;      Params:         0       0       0       0       0       0
  6726 ;;      Locals:         0       0       0       0       0       0
  6727 ;;      Temps:          0       0       0       0       0       0
  6728 ;;      Totals:         0       0       0       0       0       0
  6729 ;;Total ram usage:        0 bytes
  6730 ;; Hardware stack levels used: 1
  6731 ;; Hardware stack levels required when called: 11
  6732 ;; This function calls:
  6733 ;;		NULL
  6734 ;;		_CMP1_ISR
  6735 ;;		_CMP2_ISR
  6736 ;;		_ECCP2_CaptureISR
  6737 ;;		_EUSART_Receive_ISR
  6738 ;;		_PIN_MANAGER_IOC
  6739 ;;		_Read_UART
  6740 ;;		_TMR1_ISR
  6741 ;; This function is called by:
  6742 ;;		Interrupt level 1
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746     0004                     _INTERRUPT_InterruptManager:
  6747                           
  6748                           ;incstack = 0
  6749 ;; hardware stack exceeded
  6750     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6751                           
  6752                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6753     0005  3180               	pagesel	$
  6754                           
  6755                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  6756     0006  198B               	btfsc	11,3	;volatile
  6757     0007  1C0B               	btfss	11,0	;volatile
  6758     0008  280C               	goto	i1l3950
  6759                           
  6760                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  6761     0009  318C  2430  3180   	fcall	_PIN_MANAGER_IOC
  6762     000C                     i1l3950:
  6763                           
  6764                           ;mcc_generated_files/interrupt_manager.c: 59:     if(INTCONbits.PEIE == 1)
  6765     000C  1F0B               	btfss	11,6	;volatile
  6766     000D  283D               	goto	i1l263
  6767                           
  6768                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.CCP2IE == 1 && PIR2bits.CCP2IF == 1)
  6769     000E  0021               	movlb	1	; select bank1
  6770     000F  1C12               	btfss	18,0	;volatile
  6771     0010  2817               	goto	i1l3958
  6772     0011  0020               	movlb	0	; select bank0
  6773     0012  1C12               	btfss	18,0	;volatile
  6774     0013  2817               	goto	i1l3958
  6775                           
  6776                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             ECCP2_CaptureISR();
  6777     0014  318C  2475  3180   	fcall	_ECCP2_CaptureISR
  6778     0017                     i1l3958:
  6779                           
  6780                           ;mcc_generated_files/interrupt_manager.c: 65:         if(PIE1bits.RCIE == 1 && PIR1bits.
      +                          RCIF == 1)
  6781     0017  0021               	movlb	1	; select bank1
  6782     0018  1E91               	btfss	17,5	;volatile
  6783     0019  2823               	goto	i1l3964
  6784     001A  0020               	movlb	0	; select bank0
  6785     001B  1E91               	btfss	17,5	;volatile
  6786     001C  2823               	goto	i1l3964
  6787                           
  6788                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
  6789     001D  0021               	movlb	1	; select bank1
  6790     001E  0862               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  6791     001F  008A               	movwf	10
  6792     0020  0861               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  6793     0021  000A               	callw
  6794     0022  3180               	pagesel	$
  6795     0023                     i1l3964:
  6796                           
  6797                           ;mcc_generated_files/interrupt_manager.c: 69:         if(PIE2bits.C1IE == 1 && PIR2bits.
      +                          C1IF == 1)
  6798     0023  0021               	movlb	1	; select bank1
  6799     0024  1E92               	btfss	18,5	;volatile
  6800     0025  282C               	goto	i1l3970
  6801     0026  0020               	movlb	0	; select bank0
  6802     0027  1E92               	btfss	18,5	;volatile
  6803     0028  282C               	goto	i1l3970
  6804                           
  6805                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             CMP1_ISR();
  6806     0029  318B  23F7  3180   	fcall	_CMP1_ISR
  6807     002C                     i1l3970:
  6808                           
  6809                           ;mcc_generated_files/interrupt_manager.c: 73:         if(PIE2bits.C2IE == 1 && PIR2bits.
      +                          C2IF == 1)
  6810     002C  0021               	movlb	1	; select bank1
  6811     002D  1F12               	btfss	18,6	;volatile
  6812     002E  2835               	goto	i1l3976
  6813     002F  0020               	movlb	0	; select bank0
  6814     0030  1F12               	btfss	18,6	;volatile
  6815     0031  2835               	goto	i1l3976
  6816                           
  6817                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             CMP2_ISR();
  6818     0032  318C  2400  3180   	fcall	_CMP2_ISR
  6819     0035                     i1l3976:
  6820                           
  6821                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1)
  6822     0035  0021               	movlb	1	; select bank1
  6823     0036  1C11               	btfss	17,0	;volatile
  6824     0037  283D               	goto	i1l263
  6825     0038  0020               	movlb	0	; select bank0
  6826     0039  1C11               	btfss	17,0	;volatile
  6827     003A  283D               	goto	i1l263
  6828                           
  6829                           ;mcc_generated_files/interrupt_manager.c: 78:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 79:             TMR1_ISR();
  6830     003B  318D  258B         	fcall	_TMR1_ISR
  6831     003D                     i1l263:
  6832     003D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6833     003E  0009               	retfie
  6834     003F                     __end_of_INTERRUPT_InterruptManager:
  6835                           
  6836                           	psect	text38
  6837     0D8B                     __ptext38:	
  6838 ;; *************** function _TMR1_ISR *****************
  6839 ;; Defined at:
  6840 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 1F/0
  6851 ;;		On exit  : 1F/1
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6854 ;;      Params:         0       0       0       0       0       0
  6855 ;;      Locals:         0       0       0       0       0       0
  6856 ;;      Temps:          0       0       0       0       0       0
  6857 ;;      Totals:         0       0       0       0       0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels used: 1
  6860 ;; Hardware stack levels required when called: 10
  6861 ;; This function calls:
  6862 ;;		_TMR1_CallBack
  6863 ;;		_TMR1_WriteTimer
  6864 ;; This function is called by:
  6865 ;;		_INTERRUPT_InterruptManager
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869     0D8B                     _TMR1_ISR:	
  6870                           ;psect for function _TMR1_ISR
  6871                           
  6872                           
  6873                           ;mcc_generated_files/tmr1.c: 159:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr1.c: 162:     PIR1bits.TMR1IF = 0;
  6874                           
  6875                           ;incstack = 0
  6876 ;; hardware stack exceeded
  6877                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6878     0D8B  1011               	bcf	17,0	;volatile
  6879                           
  6880                           ;mcc_generated_files/tmr1.c: 163:     TMR1_WriteTimer(timer1ReloadVal);
  6881     0D8C  0021               	movlb	1	; select bank1
  6882     0D8D  083D               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
  6883     0D8E  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  6884     0D8F  083C               	movf	_timer1ReloadVal^(0+128),w	;volatile
  6885     0D90  00F0               	movwf	TMR1_WriteTimer@timerVal
  6886     0D91  318C  24E1  318D   	fcall	_TMR1_WriteTimer
  6887                           
  6888                           ;mcc_generated_files/tmr1.c: 166:     if (++CountCallBack >= 10)
  6889     0D94  3001               	movlw	1
  6890     0D95  0021               	movlb	1	; select bank1
  6891     0D96  07BA               	addwf	TMR1_ISR@CountCallBack^(0+128),f	;volatile
  6892     0D97  3000               	movlw	0
  6893     0D98  3DBB               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+128),f	;volatile
  6894     0D99  3000               	movlw	0
  6895     0D9A  023B               	subwf	(TMR1_ISR@CountCallBack+1)^(0+128),w	;volatile
  6896     0D9B  300A               	movlw	10
  6897     0D9C  1903               	skipnz
  6898     0D9D  023A               	subwf	TMR1_ISR@CountCallBack^(0+128),w	;volatile
  6899     0D9E  1C03               	skipc
  6900     0D9F  0008               	return
  6901                           
  6902                           ;mcc_generated_files/tmr1.c: 167:     {;mcc_generated_files/tmr1.c: 169:         TMR1_Ca
      +                          llBack();
  6903     0DA0  318C  2412         	fcall	_TMR1_CallBack
  6904                           
  6905                           ;mcc_generated_files/tmr1.c: 172:         CountCallBack = 0;
  6906     0DA2  0021               	movlb	1	; select bank1
  6907     0DA3  01BA               	clrf	TMR1_ISR@CountCallBack^(0+128)	;volatile
  6908     0DA4  01BB               	clrf	(TMR1_ISR@CountCallBack+1)^(0+128)	;volatile
  6909     0DA5  0008               	return
  6910     0DA6                     __end_of_TMR1_ISR:
  6911                           
  6912                           	psect	text39
  6913     0CE1                     __ptext39:	
  6914 ;; *************** function _TMR1_WriteTimer *****************
  6915 ;; Defined at:
  6916 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  timerVal        2    0[COMMON] unsigned short 
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg
  6925 ;; Tracked objects:
  6926 ;;		On entry : 1F/1
  6927 ;;		On exit  : 1F/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6930 ;;      Params:         2       0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0
  6933 ;;      Totals:         2       0       0       0       0       0
  6934 ;;Total ram usage:        2 bytes
  6935 ;; Hardware stack levels used: 1
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_TMR1_ISR
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943     0CE1                     _TMR1_WriteTimer:	
  6944                           ;psect for function _TMR1_WriteTimer
  6945                           
  6946                           
  6947                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in _TMR1_WriteTimer: [wreg]
  6951     0CE1  0020               	movlb	0	; select bank0
  6952     0CE2  1D18               	btfss	24,2	;volatile
  6953     0CE3  2CEB               	goto	i1l3646
  6954                           
  6955                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  6956     0CE4  1018               	bcf	24,0	;volatile
  6957                           
  6958                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  6959     0CE5  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6960     0CE6  0097               	movwf	23	;volatile
  6961                           
  6962                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  6963     0CE7  0870               	movf	TMR1_WriteTimer@timerVal,w
  6964     0CE8  0096               	movwf	22	;volatile
  6965                           
  6966                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  6967     0CE9  1418               	bsf	24,0	;volatile
  6968                           
  6969                           ;mcc_generated_files/tmr1.c: 133:     }
  6970     0CEA  0008               	return
  6971     0CEB                     i1l3646:
  6972                           
  6973                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  6974     0CEB  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6975     0CEC  0097               	movwf	23	;volatile
  6976                           
  6977                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  6978     0CED  0870               	movf	TMR1_WriteTimer@timerVal,w
  6979     0CEE  0096               	movwf	22	;volatile
  6980     0CEF  0008               	return
  6981     0CF0                     __end_of_TMR1_WriteTimer:
  6982                           
  6983                           	psect	text40
  6984     0C12                     __ptext40:	
  6985 ;; *************** function _TMR1_CallBack *****************
  6986 ;; Defined at:
  6987 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 1F/1
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7001 ;;      Params:         0       0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0
  7004 ;;      Totals:         0       0       0       0       0       0
  7005 ;;Total ram usage:        0 bytes
  7006 ;; Hardware stack levels used: 1
  7007 ;; Hardware stack levels required when called: 9
  7008 ;; This function calls:
  7009 ;;		NULL
  7010 ;;		_TMR1_DefaultInterruptHandler
  7011 ;;		_Write_UART
  7012 ;; This function is called by:
  7013 ;;		_TMR1_ISR
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017     0C12                     _TMR1_CallBack:	
  7018                           ;psect for function _TMR1_CallBack
  7019                           
  7020                           
  7021                           ;mcc_generated_files/tmr1.c: 179:     if(TMR1_InterruptHandler)
  7022                           
  7023                           ;incstack = 0
  7024 ;; hardware stack exceeded
  7025                           ; Regs used in _TMR1_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7026     0C12  0859               	movf	_TMR1_InterruptHandler^(0+128),w
  7027     0C13  045A               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  7028     0C14  1903               	btfsc	3,2
  7029     0C15  0008               	return
  7030                           
  7031                           ;mcc_generated_files/tmr1.c: 180:     {;mcc_generated_files/tmr1.c: 181:         TMR1_In
      +                          terruptHandler();
  7032     0C16  085A               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  7033     0C17  008A               	movwf	10
  7034     0C18  0859               	movf	_TMR1_InterruptHandler^(0+128),w
  7035     0C19  000A               	callw
  7036     0C1A  318C               	pagesel	$
  7037     0C1B  0008               	return
  7038     0C1C                     __end_of_TMR1_CallBack:
  7039                           
  7040                           	psect	text41
  7041     0003                     __ptext41:	
  7042 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7043 ;; Defined at:
  7044 ;;		line 189 in file "mcc_generated_files/tmr1.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      void 
  7051 ;; Registers used:
  7052 ;;		None
  7053 ;; Tracked objects:
  7054 ;;		On entry : 1F/1
  7055 ;;		On exit  : 1F/1
  7056 ;;		Unchanged: 1F/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7058 ;;      Params:         0       0       0       0       0       0
  7059 ;;      Locals:         0       0       0       0       0       0
  7060 ;;      Temps:          0       0       0       0       0       0
  7061 ;;      Totals:         0       0       0       0       0       0
  7062 ;;Total ram usage:        0 bytes
  7063 ;; Hardware stack levels used: 1
  7064 ;; This function calls:
  7065 ;;		Nothing
  7066 ;; This function is called by:
  7067 ;;		_TMR1_Initialize
  7068 ;;		_TMR1_CallBack
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072     0003                     _TMR1_DefaultInterruptHandler:	
  7073                           ;psect for function _TMR1_DefaultInterruptHandler
  7074                           
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7078     0003  0008               	return
  7079     0004                     __end_of_TMR1_DefaultInterruptHandler:
  7080                           
  7081                           	psect	text42
  7082     0068                     __ptext42:	
  7083 ;; *************** function _Write_UART *****************
  7084 ;; Defined at:
  7085 ;;		line 113 in file "main.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      void 
  7092 ;; Registers used:
  7093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 1F/1
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7099 ;;      Params:         0       0       0       0       0       0
  7100 ;;      Locals:         0       0       0       0       0       0
  7101 ;;      Temps:          0       2       0       0       0       0
  7102 ;;      Totals:         0       2       0       0       0       0
  7103 ;;Total ram usage:        2 bytes
  7104 ;; Hardware stack levels used: 1
  7105 ;; Hardware stack levels required when called: 8
  7106 ;; This function calls:
  7107 ;;		_EUSART_Write
  7108 ;;		_TMR0_ReadTimer
  7109 ;;		___awdiv
  7110 ;;		___wmul
  7111 ;;		_sprintf
  7112 ;; This function is called by:
  7113 ;;		_main
  7114 ;;		_TMR1_CallBack
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118     0068                     _Write_UART:	
  7119                           ;psect for function _Write_UART
  7120                           
  7121                           
  7122                           ;main.c: 125:     EUSART_Write(current_floor + '0' +1);
  7123                           
  7124                           ;incstack = 0
  7125 ;; hardware stack exceeded
  7126                           ; Regs used in _Write_UART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7127     0068  0020               	movlb	0	; select bank0
  7128     0069  086E               	movf	_current_floor,w
  7129     006A  3E31               	addlw	49
  7130     006B  318B  23DF  3180   	fcall	_EUSART_Write
  7131                           
  7132                           ;main.c: 126:     EUSART_Write(',');
  7133     006E  302C               	movlw	44
  7134     006F  318B  23DF  3180   	fcall	_EUSART_Write
  7135                           
  7136                           ;main.c: 128:     EUSART_Write(next_floor + '0'+1);
  7137     0072  0020               	movlb	0	; select bank0
  7138     0073  086D               	movf	_next_floor,w
  7139     0074  3E31               	addlw	49
  7140     0075  318B  23DF  3180   	fcall	_EUSART_Write
  7141                           
  7142                           ;main.c: 129:     EUSART_Write(',');
  7143     0078  302C               	movlw	44
  7144     0079  318B  23DF  3180   	fcall	_EUSART_Write
  7145                           
  7146                           ;main.c: 133:         if(LATAbits.LATA7 == 0 && CCP3CONbits.CCP3M!=0){
  7147     007C  0022               	movlb	2	; select bank2
  7148     007D  1B8C               	btfsc	12,7	;volatile
  7149     007E  2917               	goto	i1l3304
  7150     007F  0026               	movlb	6	; select bank6
  7151     0080  0813               	movf	19,w	;volatile
  7152     0081  390F               	andlw	15
  7153     0082  3A00               	xorlw	0
  7154     0083  1903               	skipnz
  7155     0084  2917               	goto	i1l3304
  7156                           
  7157                           ;main.c: 134:             EUSART_Write('2');
  7158     0085  3032               	movlw	50
  7159     0086  318B  23DF  3180   	fcall	_EUSART_Write
  7160                           
  7161                           ;main.c: 135:             EUSART_Write(',');
  7162     0089  302C               	movlw	44
  7163     008A  318B  23DF  3180   	fcall	_EUSART_Write
  7164                           
  7165                           ;main.c: 137:             position = 180 - TMR0_ReadTimer()*180/113;
  7166     008D  3071               	movlw	113
  7167     008E  00F7               	movwf	___awdiv@divisor
  7168     008F  3000               	movlw	0
  7169     0090  00F8               	movwf	___awdiv@divisor+1
  7170     0091  318B  239F  3180   	fcall	_TMR0_ReadTimer
  7171     0094  00E0               	movwf	??_Write_UART
  7172     0095  01E1               	clrf	??_Write_UART+1
  7173     0096  0860               	movf	??_Write_UART,w
  7174     0097  00F1               	movwf	___wmul@multiplier
  7175     0098  0861               	movf	??_Write_UART+1,w
  7176     0099  00F2               	movwf	___wmul@multiplier+1
  7177     009A  30B4               	movlw	180
  7178     009B  00F3               	movwf	___wmul@multiplicand
  7179     009C  3000               	movlw	0
  7180     009D  00F4               	movwf	___wmul@multiplicand+1
  7181     009E  318D  2555  3180   	fcall	___wmul
  7182     00A1  0872               	movf	?___wmul+1,w
  7183     00A2  00FA               	movwf	___awdiv@dividend+1
  7184     00A3  0871               	movf	?___wmul,w
  7185     00A4  00F9               	movwf	___awdiv@dividend
  7186     00A5  3186  2635  3180   	fcall	___awdiv
  7187     00A8  0877               	movf	?___awdiv,w
  7188     00A9  3CB4               	sublw	180
  7189     00AA  00EC               	movwf	_position
  7190                           
  7191                           ;main.c: 138:             sprintf(position_string, "%03d", position);
  7192     00AB  30EB               	movlw	(low (_position_string| 0))& (0+255)
  7193     00AC  00CF               	movwf	sprintf@s
  7194     00AD  3028               	movlw	low (STR_1| (0+32768))
  7195     00AE  00D0               	movwf	sprintf@fmt
  7196     00AF  3088               	movlw	high (STR_1| (0+32768))
  7197     00B0  00D1               	movwf	sprintf@fmt+1
  7198     00B1  086C               	movf	_position,w
  7199     00B2  00E0               	movwf	??_Write_UART
  7200     00B3  01E1               	clrf	??_Write_UART+1
  7201     00B4  0860               	movf	??_Write_UART,w
  7202     00B5  00D2               	movwf	?_sprintf+3
  7203     00B6  0861               	movf	??_Write_UART+1,w
  7204     00B7  00D3               	movwf	?_sprintf+4
  7205     00B8  318D  2570  3180   	fcall	_sprintf
  7206                           
  7207                           ;main.c: 140:             EUSART_Write(position_string[0]);
  7208     00BB  0021               	movlb	1	; select bank1
  7209     00BC  086B               	movf	_position_string^(0+128),w
  7210     00BD  318B  23DF  3180   	fcall	_EUSART_Write
  7211                           
  7212                           ;main.c: 141:             EUSART_Write(position_string[1]);
  7213     00C0  0021               	movlb	1	; select bank1
  7214     00C1  086C               	movf	(_position_string^(0+128)+1),w
  7215     00C2  318B  23DF  3180   	fcall	_EUSART_Write
  7216                           
  7217                           ;main.c: 142:             EUSART_Write(position_string[2]);
  7218     00C5  0021               	movlb	1	; select bank1
  7219     00C6  086D               	movf	(_position_string^(0+128)+2),w
  7220     00C7  318B  23DF  3180   	fcall	_EUSART_Write
  7221                           
  7222                           ;main.c: 143:             EUSART_Write(',');
  7223     00CA  302C               	movlw	44
  7224     00CB  318B  23DF  3180   	fcall	_EUSART_Write
  7225                           
  7226                           ;main.c: 145:             position0 = position;
  7227     00CE  0020               	movlb	0	; select bank0
  7228     00CF  086C               	movf	_position,w
  7229     00D0  00EB               	movwf	_position0
  7230                           
  7231                           ;main.c: 146:             velocidade = (position-position0)*100/3;
  7232     00D1  3003               	movlw	3
  7233     00D2  00F7               	movwf	___awdiv@divisor
  7234     00D3  3000               	movlw	0
  7235     00D4  00F8               	movwf	___awdiv@divisor+1
  7236     00D5  086B               	movf	_position0,w
  7237     00D6  026C               	subwf	_position,w
  7238     00D7  00F1               	movwf	___wmul@multiplier
  7239     00D8  01F2               	clrf	___wmul@multiplier+1
  7240     00D9  1C03               	skipc
  7241     00DA  03F2               	decf	___wmul@multiplier+1,f
  7242     00DB  3064               	movlw	100
  7243     00DC  00F3               	movwf	___wmul@multiplicand
  7244     00DD  3000               	movlw	0
  7245     00DE  00F4               	movwf	___wmul@multiplicand+1
  7246     00DF  318D  2555  3180   	fcall	___wmul
  7247     00E2  0872               	movf	?___wmul+1,w
  7248     00E3  00FA               	movwf	___awdiv@dividend+1
  7249     00E4  0871               	movf	?___wmul,w
  7250     00E5  00F9               	movwf	___awdiv@dividend
  7251     00E6  3186  2635  3180   	fcall	___awdiv
  7252     00E9  0878               	movf	?___awdiv+1,w
  7253     00EA  0021               	movlb	1	; select bank1
  7254     00EB  00BF               	movwf	(_velocidade+1)^(0+128)
  7255     00EC  0877               	movf	?___awdiv,w
  7256     00ED  00BE               	movwf	_velocidade^(0+128)
  7257                           
  7258                           ;main.c: 147:             sprintf(velocidade_string, "%03d", velocidade);
  7259     00EE  30E7               	movlw	(low (_velocidade_string| 0))& (0+255)
  7260     00EF  0020               	movlb	0	; select bank0
  7261     00F0  00CF               	movwf	sprintf@s
  7262     00F1  3028               	movlw	low (STR_1| (0+32768))
  7263     00F2  00D0               	movwf	sprintf@fmt
  7264     00F3  3088               	movlw	high (STR_1| (0+32768))
  7265     00F4  00D1               	movwf	sprintf@fmt+1
  7266     00F5  0021               	movlb	1	; select bank1
  7267     00F6  083F               	movf	(_velocidade+1)^(0+128),w
  7268     00F7  0020               	movlb	0	; select bank0
  7269     00F8  00D3               	movwf	?_sprintf+4
  7270     00F9  0021               	movlb	1	; select bank1
  7271     00FA  083E               	movf	_velocidade^(0+128),w
  7272     00FB  0020               	movlb	0	; select bank0
  7273     00FC  00D2               	movwf	?_sprintf+3
  7274     00FD  318D  2570  3180   	fcall	_sprintf
  7275                           
  7276                           ;main.c: 148:             EUSART_Write(velocidade_string[0]);
  7277     0100  0021               	movlb	1	; select bank1
  7278     0101  0867               	movf	_velocidade_string^(0+128),w
  7279     0102  318B  23DF  3180   	fcall	_EUSART_Write
  7280                           
  7281                           ;main.c: 149:             EUSART_Write(velocidade_string[1]);
  7282     0105  0021               	movlb	1	; select bank1
  7283     0106  0868               	movf	(_velocidade_string^(0+128)+1),w
  7284     0107  318B  23DF  3180   	fcall	_EUSART_Write
  7285                           
  7286                           ;main.c: 150:             EUSART_Write('.');
  7287     010A  302E               	movlw	46
  7288     010B  318B  23DF  3180   	fcall	_EUSART_Write
  7289                           
  7290                           ;main.c: 151:             EUSART_Write(velocidade_string[2]);
  7291     010E  0021               	movlb	1	; select bank1
  7292     010F  0869               	movf	(_velocidade_string^(0+128)+2),w
  7293     0110  318B  23DF  3180   	fcall	_EUSART_Write
  7294                           
  7295                           ;main.c: 152:             EUSART_Write(',');
  7296     0113  302C               	movlw	44
  7297     0114  318B  23DF  3180   	fcall	_EUSART_Write
  7298     0117                     i1l3304:
  7299                           
  7300                           ;main.c: 157:         if(LATAbits.LATA7 == 1 && CCP3CONbits.CCP3M!=0){
  7301     0117  0022               	movlb	2	; select bank2
  7302     0118  1F8C               	btfss	12,7	;volatile
  7303     0119  29B2               	goto	i1l3338
  7304     011A  0026               	movlb	6	; select bank6
  7305     011B  0813               	movf	19,w	;volatile
  7306     011C  390F               	andlw	15
  7307     011D  3A00               	xorlw	0
  7308     011E  1903               	skipnz
  7309     011F  29B2               	goto	i1l3338
  7310                           
  7311                           ;main.c: 158:             EUSART_Write('3');
  7312     0120  3033               	movlw	51
  7313     0121  318B  23DF  3180   	fcall	_EUSART_Write
  7314                           
  7315                           ;main.c: 159:             EUSART_Write(',');
  7316     0124  302C               	movlw	44
  7317     0125  318B  23DF  3180   	fcall	_EUSART_Write
  7318                           
  7319                           ;main.c: 162:             position0 = position;
  7320     0128  0020               	movlb	0	; select bank0
  7321     0129  086C               	movf	_position,w
  7322     012A  00EB               	movwf	_position0
  7323                           
  7324                           ;main.c: 163:             position = TMR0_ReadTimer()*180/122;
  7325     012B  307A               	movlw	122
  7326     012C  00F7               	movwf	___awdiv@divisor
  7327     012D  3000               	movlw	0
  7328     012E  00F8               	movwf	___awdiv@divisor+1
  7329     012F  318B  239F  3180   	fcall	_TMR0_ReadTimer
  7330     0132  00E0               	movwf	??_Write_UART
  7331     0133  01E1               	clrf	??_Write_UART+1
  7332     0134  0860               	movf	??_Write_UART,w
  7333     0135  00F1               	movwf	___wmul@multiplier
  7334     0136  0861               	movf	??_Write_UART+1,w
  7335     0137  00F2               	movwf	___wmul@multiplier+1
  7336     0138  30B4               	movlw	180
  7337     0139  00F3               	movwf	___wmul@multiplicand
  7338     013A  3000               	movlw	0
  7339     013B  00F4               	movwf	___wmul@multiplicand+1
  7340     013C  318D  2555  3180   	fcall	___wmul
  7341     013F  0872               	movf	?___wmul+1,w
  7342     0140  00FA               	movwf	___awdiv@dividend+1
  7343     0141  0871               	movf	?___wmul,w
  7344     0142  00F9               	movwf	___awdiv@dividend
  7345     0143  3186  2635  3180   	fcall	___awdiv
  7346     0146  0877               	movf	?___awdiv,w
  7347     0147  00EC               	movwf	_position
  7348                           
  7349                           ;main.c: 164:             sprintf(position_string, "%03d", position);
  7350     0148  30EB               	movlw	(low (_position_string| 0))& (0+255)
  7351     0149  00CF               	movwf	sprintf@s
  7352     014A  3028               	movlw	low (STR_1| (0+32768))
  7353     014B  00D0               	movwf	sprintf@fmt
  7354     014C  3088               	movlw	high (STR_1| (0+32768))
  7355     014D  00D1               	movwf	sprintf@fmt+1
  7356     014E  086C               	movf	_position,w
  7357     014F  00E0               	movwf	??_Write_UART
  7358     0150  01E1               	clrf	??_Write_UART+1
  7359     0151  0860               	movf	??_Write_UART,w
  7360     0152  00D2               	movwf	?_sprintf+3
  7361     0153  0861               	movf	??_Write_UART+1,w
  7362     0154  00D3               	movwf	?_sprintf+4
  7363     0155  318D  2570  3180   	fcall	_sprintf
  7364                           
  7365                           ;main.c: 165:             EUSART_Write(position_string[0]);
  7366     0158  0021               	movlb	1	; select bank1
  7367     0159  086B               	movf	_position_string^(0+128),w
  7368     015A  318B  23DF  3180   	fcall	_EUSART_Write
  7369                           
  7370                           ;main.c: 166:             EUSART_Write(position_string[1]);
  7371     015D  0021               	movlb	1	; select bank1
  7372     015E  086C               	movf	(_position_string^(0+128)+1),w
  7373     015F  318B  23DF  3180   	fcall	_EUSART_Write
  7374                           
  7375                           ;main.c: 167:             EUSART_Write(position_string[2]);
  7376     0162  0021               	movlb	1	; select bank1
  7377     0163  086D               	movf	(_position_string^(0+128)+2),w
  7378     0164  318B  23DF  3180   	fcall	_EUSART_Write
  7379                           
  7380                           ;main.c: 168:             EUSART_Write(',');
  7381     0167  302C               	movlw	44
  7382     0168  318B  23DF  3180   	fcall	_EUSART_Write
  7383                           
  7384                           ;main.c: 170:             velocidade = (position-position0)*100/3;
  7385     016B  3003               	movlw	3
  7386     016C  00F7               	movwf	___awdiv@divisor
  7387     016D  3000               	movlw	0
  7388     016E  00F8               	movwf	___awdiv@divisor+1
  7389     016F  0020               	movlb	0	; select bank0
  7390     0170  086B               	movf	_position0,w
  7391     0171  026C               	subwf	_position,w
  7392     0172  00F1               	movwf	___wmul@multiplier
  7393     0173  01F2               	clrf	___wmul@multiplier+1
  7394     0174  1C03               	skipc
  7395     0175  03F2               	decf	___wmul@multiplier+1,f
  7396     0176  3064               	movlw	100
  7397     0177  00F3               	movwf	___wmul@multiplicand
  7398     0178  3000               	movlw	0
  7399     0179  00F4               	movwf	___wmul@multiplicand+1
  7400     017A  318D  2555  3180   	fcall	___wmul
  7401     017D  0872               	movf	?___wmul+1,w
  7402     017E  00FA               	movwf	___awdiv@dividend+1
  7403     017F  0871               	movf	?___wmul,w
  7404     0180  00F9               	movwf	___awdiv@dividend
  7405     0181  3186  2635  3180   	fcall	___awdiv
  7406     0184  0878               	movf	?___awdiv+1,w
  7407     0185  0021               	movlb	1	; select bank1
  7408     0186  00BF               	movwf	(_velocidade+1)^(0+128)
  7409     0187  0877               	movf	?___awdiv,w
  7410     0188  00BE               	movwf	_velocidade^(0+128)
  7411                           
  7412                           ;main.c: 171:             sprintf(velocidade_string, "%03d", velocidade);
  7413     0189  30E7               	movlw	(low (_velocidade_string| 0))& (0+255)
  7414     018A  0020               	movlb	0	; select bank0
  7415     018B  00CF               	movwf	sprintf@s
  7416     018C  3028               	movlw	low (STR_1| (0+32768))
  7417     018D  00D0               	movwf	sprintf@fmt
  7418     018E  3088               	movlw	high (STR_1| (0+32768))
  7419     018F  00D1               	movwf	sprintf@fmt+1
  7420     0190  0021               	movlb	1	; select bank1
  7421     0191  083F               	movf	(_velocidade+1)^(0+128),w
  7422     0192  0020               	movlb	0	; select bank0
  7423     0193  00D3               	movwf	?_sprintf+4
  7424     0194  0021               	movlb	1	; select bank1
  7425     0195  083E               	movf	_velocidade^(0+128),w
  7426     0196  0020               	movlb	0	; select bank0
  7427     0197  00D2               	movwf	?_sprintf+3
  7428     0198  318D  2570  3180   	fcall	_sprintf
  7429                           
  7430                           ;main.c: 172:             EUSART_Write(velocidade_string[0]);
  7431     019B  0021               	movlb	1	; select bank1
  7432     019C  0867               	movf	_velocidade_string^(0+128),w
  7433     019D  318B  23DF  3180   	fcall	_EUSART_Write
  7434                           
  7435                           ;main.c: 173:             EUSART_Write(velocidade_string[1]);
  7436     01A0  0021               	movlb	1	; select bank1
  7437     01A1  0868               	movf	(_velocidade_string^(0+128)+1),w
  7438     01A2  318B  23DF  3180   	fcall	_EUSART_Write
  7439                           
  7440                           ;main.c: 174:             EUSART_Write('.');
  7441     01A5  302E               	movlw	46
  7442     01A6  318B  23DF  3180   	fcall	_EUSART_Write
  7443                           
  7444                           ;main.c: 175:             EUSART_Write(velocidade_string[2]);
  7445     01A9  0021               	movlb	1	; select bank1
  7446     01AA  0869               	movf	(_velocidade_string^(0+128)+2),w
  7447     01AB  318B  23DF  3180   	fcall	_EUSART_Write
  7448                           
  7449                           ;main.c: 176:             EUSART_Write(',');
  7450     01AE  302C               	movlw	44
  7451     01AF  318B  23DF  3180   	fcall	_EUSART_Write
  7452     01B2                     i1l3338:
  7453                           
  7454                           ;main.c: 180:         if(CCP3CONbits.CCP3M==0){
  7455     01B2  0026               	movlb	6	; select bank6
  7456     01B3  0813               	movf	19,w	;volatile
  7457     01B4  390F               	andlw	15
  7458     01B5  3A00               	xorlw	0
  7459     01B6  1D03               	skipz
  7460     01B7  29E4               	goto	i1l3352
  7461                           
  7462                           ;main.c: 181:             EUSART_Write('0');
  7463     01B8  3030               	movlw	48
  7464     01B9  318B  23DF  3180   	fcall	_EUSART_Write
  7465                           
  7466                           ;main.c: 182:             EUSART_Write(',');
  7467     01BC  302C               	movlw	44
  7468     01BD  318B  23DF  3180   	fcall	_EUSART_Write
  7469                           
  7470                           ;main.c: 184:             sprintf(position_string, "%03d", position);
  7471     01C0  30EB               	movlw	(low (_position_string| 0))& (0+255)
  7472     01C1  0020               	movlb	0	; select bank0
  7473     01C2  00CF               	movwf	sprintf@s
  7474     01C3  3028               	movlw	low (STR_1| (0+32768))
  7475     01C4  00D0               	movwf	sprintf@fmt
  7476     01C5  3088               	movlw	high (STR_1| (0+32768))
  7477     01C6  00D1               	movwf	sprintf@fmt+1
  7478     01C7  086C               	movf	_position,w
  7479     01C8  00E0               	movwf	??_Write_UART
  7480     01C9  01E1               	clrf	??_Write_UART+1
  7481     01CA  0860               	movf	??_Write_UART,w
  7482     01CB  00D2               	movwf	?_sprintf+3
  7483     01CC  0861               	movf	??_Write_UART+1,w
  7484     01CD  00D3               	movwf	?_sprintf+4
  7485     01CE  318D  2570  3180   	fcall	_sprintf
  7486                           
  7487                           ;main.c: 185:             EUSART_Write(position_string[0]);
  7488     01D1  0021               	movlb	1	; select bank1
  7489     01D2  086B               	movf	_position_string^(0+128),w
  7490     01D3  318B  23DF  3180   	fcall	_EUSART_Write
  7491                           
  7492                           ;main.c: 186:             EUSART_Write(position_string[1]);
  7493     01D6  0021               	movlb	1	; select bank1
  7494     01D7  086C               	movf	(_position_string^(0+128)+1),w
  7495     01D8  318B  23DF  3180   	fcall	_EUSART_Write
  7496                           
  7497                           ;main.c: 187:             EUSART_Write(position_string[2]);
  7498     01DB  0021               	movlb	1	; select bank1
  7499     01DC  086D               	movf	(_position_string^(0+128)+2),w
  7500     01DD  318B  23DF  3180   	fcall	_EUSART_Write
  7501                           
  7502                           ;main.c: 188:             EUSART_Write(',');
  7503     01E0  302C               	movlw	44
  7504     01E1  318B  23DF  3180   	fcall	_EUSART_Write
  7505     01E4                     i1l3352:
  7506                           
  7507                           ;main.c: 198:         EUSART_Write('\r');
  7508     01E4  300D               	movlw	13
  7509     01E5  318B  23DF         	fcall	_EUSART_Write
  7510                           
  7511                           ;main.c: 201:         __nop();
  7512     01E7  0000               	nop
  7513     01E8  0008               	return
  7514     01E9                     __end_of_Write_UART:
  7515                           
  7516                           	psect	text43
  7517     0D70                     __ptext43:	
  7518 ;; *************** function _sprintf *****************
  7519 ;; Defined at:
  7520 ;;		line 9 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  7521 ;; Parameters:    Size  Location     Type
  7522 ;;  s               1   47[BANK0 ] PTR unsigned char 
  7523 ;;		 -> velocidade_string(4), position_string(4), 
  7524 ;;  fmt             2   48[BANK0 ] PTR const unsigned char 
  7525 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
  7526 ;;		 -> STR_1(5), 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  f              11   53[BANK0 ] struct _IO_FILE
  7529 ;;  ret             2    0        int 
  7530 ;;  ap              1   52[BANK0 ] PTR void [1]
  7531 ;;		 -> ?_sprintf(2), 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  2   47[BANK0 ] int 
  7534 ;; Registers used:
  7535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 1F/0
  7538 ;;		On exit  : 1F/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7541 ;;      Params:         0       5       0       0       0       0
  7542 ;;      Locals:         0      12       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0
  7544 ;;      Totals:         0      17       0       0       0       0
  7545 ;;Total ram usage:       17 bytes
  7546 ;; Hardware stack levels used: 1
  7547 ;; Hardware stack levels required when called: 7
  7548 ;; This function calls:
  7549 ;;		_vfprintf
  7550 ;; This function is called by:
  7551 ;;		_Write_UART
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555     0D70                     _sprintf:	
  7556                           ;psect for function _sprintf
  7557                           
  7558                           
  7559                           ;incstack = 0
  7560 ;; hardware stack exceeded
  7561                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7562     0D70  3052               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  7563     0D71  00D4               	movwf	sprintf@ap
  7564     0D72  084F               	movf	sprintf@s,w
  7565     0D73  00D5               	movwf	sprintf@f
  7566     0D74  01D6               	clrf	sprintf@f+1
  7567     0D75  01D7               	clrf	sprintf@f+2
  7568     0D76  01D8               	clrf	sprintf@f+3
  7569     0D77  01DE               	clrf	sprintf@f+9
  7570     0D78  01DF               	clrf	sprintf@f+10
  7571     0D79  3055               	movlw	low sprintf@f
  7572     0D7A  00C7               	movwf	vfprintf@fp
  7573     0D7B  3000               	movlw	high sprintf@f
  7574     0D7C  00C8               	movwf	vfprintf@fp+1
  7575     0D7D  0851               	movf	sprintf@fmt+1,w
  7576     0D7E  00CA               	movwf	vfprintf@fmt+1
  7577     0D7F  0850               	movf	sprintf@fmt,w
  7578     0D80  00C9               	movwf	vfprintf@fmt
  7579     0D81  3054               	movlw	(low (sprintf@ap| 0))& (0+255)
  7580     0D82  00CB               	movwf	vfprintf@ap
  7581     0D83  318D  253B         	fcall	_vfprintf
  7582     0D85  084F               	movf	sprintf@s,w
  7583     0D86  0757               	addwf	sprintf@f+2,w
  7584     0D87  0086               	movwf	6
  7585     0D88  0187               	clrf	7
  7586     0D89  0181               	clrf	1
  7587     0D8A  0008               	return
  7588     0D8B                     __end_of_sprintf:
  7589                           
  7590                           	psect	text44
  7591     0D3B                     __ptext44:	
  7592 ;; *************** function _vfprintf *****************
  7593 ;; Defined at:
  7594 ;;		line 1817 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  fp              2   39[BANK0 ] PTR struct _IO_FILE
  7597 ;;		 -> sprintf@f(11), 
  7598 ;;  fmt             2   41[BANK0 ] PTR const unsigned char 
  7599 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
  7600 ;;		 -> STR_1(5), 
  7601 ;;  ap              1   43[BANK0 ] PTR PTR void 
  7602 ;;		 -> sprintf@ap(1), 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  cfmt            2   45[BANK0 ] PTR unsigned char 
  7605 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
  7606 ;;		 -> STR_1(5), 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  2   39[BANK0 ] int 
  7609 ;; Registers used:
  7610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 1F/0
  7613 ;;		On exit  : 1F/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7616 ;;      Params:         0       5       0       0       0       0
  7617 ;;      Locals:         0       2       0       0       0       0
  7618 ;;      Temps:          0       1       0       0       0       0
  7619 ;;      Totals:         0       8       0       0       0       0
  7620 ;;Total ram usage:        8 bytes
  7621 ;; Hardware stack levels used: 1
  7622 ;; Hardware stack levels required when called: 6
  7623 ;; This function calls:
  7624 ;;		_vfpfcnvrt
  7625 ;; This function is called by:
  7626 ;;		_sprintf
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630     0D3B                     _vfprintf:	
  7631                           ;psect for function _vfprintf
  7632                           
  7633                           
  7634                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprintf
      +                          (FILE *fp, const char *fmt, va_list ap);D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\
      +                          c99\common\doprnt.c: 1818: {;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\
      +                          doprnt.c: 1820:     char *cfmt;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1822:     cfmt = (char *)fmt;
  7635                           
  7636                           ;incstack = 0
  7637 ;; hardware stack exceeded
  7638                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7639     0D3B  084A               	movf	vfprintf@fmt+1,w
  7640     0D3C  00CE               	movwf	vfprintf@cfmt+1
  7641     0D3D  0849               	movf	vfprintf@fmt,w
  7642     0D3E  00CD               	movwf	vfprintf@cfmt
  7643     0D3F                     i1l3104:	
  7644                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (*
      +                          cfmt) {
  7645                           
  7646                           
  7647                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (*
      +                          cfmt) {
  7648     0D3F  084D               	movf	vfprintf@cfmt,w
  7649     0D40  0084               	movwf	4
  7650     0D41  084E               	movf	vfprintf@cfmt+1,w
  7651     0D42  0085               	movwf	5
  7652     0D43  0012               	moviw fsr0++
  7653     0D44  1903               	btfsc	3,2
  7654     0D45  2D52               	goto	i1l3106
  7655                           
  7656                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvrt
      +                          (fp, &cfmt, ap);
  7657     0D46  0848               	movf	vfprintf@fp+1,w
  7658     0D47  00B9               	movwf	vfpfcnvrt@fp+1
  7659     0D48  0847               	movf	vfprintf@fp,w
  7660     0D49  00B8               	movwf	vfpfcnvrt@fp
  7661     0D4A  304D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  7662     0D4B  00BA               	movwf	vfpfcnvrt@fmt
  7663     0D4C  084B               	movf	vfprintf@ap,w
  7664     0D4D  00BB               	movwf	vfpfcnvrt@ap
  7665     0D4E  3183  231C  318D   	fcall	_vfpfcnvrt
  7666     0D51  2D3F               	goto	i1l3104
  7667     0D52                     i1l3106:
  7668                           
  7669                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  7670     0D52  01C7               	clrf	?_vfprintf
  7671     0D53  01C8               	clrf	?_vfprintf+1
  7672     0D54  0008               	return
  7673     0D55                     __end_of_vfprintf:
  7674                           
  7675                           	psect	text45
  7676     031C                     __ptext45:	
  7677 ;; *************** function _vfpfcnvrt *****************
  7678 ;; Defined at:
  7679 ;;		line 1177 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  fp              2   24[BANK0 ] PTR struct _IO_FILE
  7682 ;;		 -> sprintf@f(11), 
  7683 ;;  fmt             1   26[BANK0 ] PTR PTR unsigned char 
  7684 ;;		 -> vfprintf@cfmt(2), 
  7685 ;;  ap              1   27[BANK0 ] PTR PTR void 
  7686 ;;		 -> sprintf@ap(1), 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  convarg         4   32[BANK0 ] struct .
  7689 ;;  cp              2   37[BANK0 ] PTR unsigned char 
  7690 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
  7691 ;;		 -> STR_1(5), 
  7692 ;;  done            1   36[BANK0 ] _Bool 
  7693 ;;  c               1    0        unsigned char 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 1F/0
  7700 ;;		On exit  : 1F/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7703 ;;      Params:         0       4       0       0       0       0
  7704 ;;      Locals:         0       7       0       0       0       0
  7705 ;;      Temps:          0       4       0       0       0       0
  7706 ;;      Totals:         0      15       0       0       0       0
  7707 ;;Total ram usage:       15 bytes
  7708 ;; Hardware stack levels used: 1
  7709 ;; Hardware stack levels required when called: 5
  7710 ;; This function calls:
  7711 ;;		_dtoa
  7712 ;;		_fputc
  7713 ;;		_read_prec_or_width
  7714 ;; This function is called by:
  7715 ;;		_vfprintf
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719     031C                     _vfpfcnvrt:	
  7720                           ;psect for function _vfpfcnvrt
  7721                           
  7722                           
  7723                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(FI
      +                          LE *fp, char *fmt[], va_list ap);D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 1178: {;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1179:     char c, *cp;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\dop
      +                          rnt.c: 1180:     _Bool done;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\
      +                          doprnt.c: 1188:  } convarg;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\d
      +                          oprnt.c: 1201:     if ((*fmt)[0] == '%') {
  7724                           
  7725                           ;incstack = 0
  7726 ;; hardware stack exceeded
  7727                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7728     031C  083A               	movf	vfpfcnvrt@fmt,w
  7729     031D  0086               	movwf	6
  7730     031E  0187               	clrf	7
  7731     031F  3F40               	moviw [0]fsr1
  7732     0320  00BC               	movwf	??_vfpfcnvrt
  7733     0321  3F41               	moviw [1]fsr1
  7734     0322  00BD               	movwf	??_vfpfcnvrt+1
  7735     0323  083C               	movf	??_vfpfcnvrt,w
  7736     0324  0084               	movwf	4
  7737     0325  083D               	movf	??_vfpfcnvrt+1,w
  7738     0326  0085               	movwf	5
  7739     0327  0012               	moviw fsr0++
  7740     0328  3A25               	xorlw	37
  7741     0329  1D03               	btfss	3,2
  7742     032A  2BB7               	goto	i1l3074
  7743                           
  7744                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*f
      +                          mt;
  7745     032B  083A               	movf	vfpfcnvrt@fmt,w
  7746     032C  0086               	movwf	6
  7747     032D  0187               	clrf	7
  7748     032E  3001               	movlw	1
  7749     032F  0781               	addwf	1,f
  7750     0330  3141               	addfsr 1,1
  7751     0331  1803               	skipnc
  7752     0332  0A81               	incf	1,f
  7753                           
  7754                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         flag
      +                          s = width = 0;
  7755     0333  01E2               	clrf	_width
  7756     0334  01E3               	clrf	_width+1
  7757     0335  3000               	movlw	0
  7758     0336  00E4               	movwf	_flags
  7759                           
  7760                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         prec
      +                           = -1;
  7761     0337  30FF               	movlw	255
  7762     0338  0021               	movlb	1	; select bank1
  7763     0339  00B6               	movwf	_prec^(0+128)
  7764     033A  30FF               	movlw	255
  7765     033B  00B7               	movwf	(_prec^(0+128)+1)
  7766                           
  7767                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         done
      +                           = 0;
  7768     033C  0020               	movlb	0	; select bank0
  7769     033D  01C4               	clrf	vfpfcnvrt@done
  7770                           
  7771                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whil
      +                          e (!done) {
  7772     033E  2B4B               	goto	i1l3046
  7773     033F                     i1l1588:	
  7774                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1219:             
      +                              case '0' :
  7775                           
  7776                           
  7777                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:             
      +                                  flags |= (1 << 1);
  7778     033F  14E4               	bsf	_flags,1
  7779                           
  7780                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:             
      +                                  ++*fmt;
  7781     0340  083A               	movf	vfpfcnvrt@fmt,w
  7782     0341  0086               	movwf	6
  7783     0342  0187               	clrf	7
  7784     0343  3001               	movlw	1
  7785     0344  0781               	addwf	1,f
  7786     0345  3141               	addfsr 1,1
  7787     0346  1803               	skipnc
  7788     0347  0A81               	incf	1,f
  7789                           
  7790                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:             
      +                                  break;
  7791     0348  2B4B               	goto	i1l3046
  7792     0349                     i1l1590:	
  7793                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1242:             
      +                              default:
  7794                           
  7795                           
  7796                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:             
      +                                  done = 1;
  7797     0349  3001               	movlw	1
  7798     034A  00C4               	movwf	vfpfcnvrt@done
  7799     034B                     i1l3046:	
  7800                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:             
      +                                  break;
  7801                           
  7802                           
  7803                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whil
      +                          e (!done) {
  7804     034B  0844               	movf	vfpfcnvrt@done,w
  7805     034C  1D03               	btfss	3,2
  7806     034D  2B5F               	goto	i1l3048
  7807     034E  083A               	movf	vfpfcnvrt@fmt,w
  7808     034F  0086               	movwf	6
  7809     0350  0187               	clrf	7
  7810     0351  3F40               	moviw [0]fsr1
  7811     0352  00BC               	movwf	??_vfpfcnvrt
  7812     0353  3F41               	moviw [1]fsr1
  7813     0354  00BD               	movwf	??_vfpfcnvrt+1
  7814     0355  083C               	movf	??_vfpfcnvrt,w
  7815     0356  0084               	movwf	4
  7816     0357  083D               	movf	??_vfpfcnvrt+1,w
  7817     0358  0085               	movwf	5
  7818     0359  0800               	movf	0,w	;code access
  7819                           
  7820                           ; Switch size 1, requested type "simple"
  7821                           ; Number of cases is 1, Range of values is 48 to 48
  7822                           ; switch strategies available:
  7823                           ; Name         Instructions Cycles
  7824                           ; simple_byte            4     3 (average)
  7825                           ; direct_byte           11     9 (fixed)
  7826                           ; jumptable            263     9 (fixed)
  7827                           ;	Chosen strategy is simple_byte
  7828     035A  3A30               	xorlw	48	; case 48
  7829     035B  1903               	skipnz
  7830     035C  2B3F               	goto	i1l1588
  7831     035D  2B49               	goto	i1l1590
  7832     035E  2B4B               	goto	i1l3046
  7833     035F                     i1l3048:
  7834                           
  7835                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = re
      +                          ad_prec_or_width(fmt, ap);
  7836     035F  083A               	movf	vfpfcnvrt@fmt,w
  7837     0360  00F7               	movwf	read_prec_or_width@fmt
  7838     0361  083B               	movf	vfpfcnvrt@ap,w
  7839     0362  00F8               	movwf	read_prec_or_width@ap
  7840     0363  3185  2591  3183   	fcall	_read_prec_or_width
  7841     0366  0878               	movf	?_read_prec_or_width+1,w
  7842     0367  00E3               	movwf	_width+1
  7843     0368  0877               	movf	?_read_prec_or_width,w
  7844     0369  00E2               	movwf	_width
  7845                           
  7846                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width 
      +                          < 0) {
  7847     036A  1FE3               	btfss	_width+1,7
  7848     036B  2B72               	goto	i1l3056
  7849                           
  7850                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |= 
      +                          (1 << 0);
  7851     036C  1464               	bsf	_flags,0
  7852                           
  7853                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = -
      +                          width;
  7854     036D  09E2               	comf	_width,f
  7855     036E  09E3               	comf	_width+1,f
  7856     036F  0AE2               	incf	_width,f
  7857     0370  1903               	skipnz
  7858     0371  0AE3               	incf	_width+1,f
  7859     0372                     i1l3056:
  7860                           
  7861                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt;
  7862     0372  083A               	movf	vfpfcnvrt@fmt,w
  7863     0373  0086               	movwf	6
  7864     0374  0187               	clrf	7
  7865     0375  3F40               	moviw [0]fsr1
  7866     0376  00C5               	movwf	vfpfcnvrt@cp
  7867     0377  3F41               	moviw [1]fsr1
  7868     0378  00C6               	movwf	vfpfcnvrt@cp+1
  7869                           
  7870                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp ==
      +                           'd' || *cp == 'i') {
  7871     0379  0845               	movf	vfpfcnvrt@cp,w
  7872     037A  0084               	movwf	4
  7873     037B  0846               	movf	vfpfcnvrt@cp+1,w
  7874     037C  0085               	movwf	5
  7875     037D  0012               	moviw fsr0++
  7876     037E  3A64               	xorlw	100
  7877     037F  1903               	btfsc	3,2
  7878     0380  2B89               	goto	i1l3062
  7879     0381  0845               	movf	vfpfcnvrt@cp,w
  7880     0382  0084               	movwf	4
  7881     0383  0846               	movf	vfpfcnvrt@cp+1,w
  7882     0384  0085               	movwf	5
  7883     0385  0012               	moviw fsr0++
  7884     0386  3A69               	xorlw	105
  7885     0387  1D03               	btfss	3,2
  7886     0388  2BAD               	goto	i1l3070
  7887     0389                     i1l3062:
  7888                           
  7889                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.s
      +                          int = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  7890     0389  083B               	movf	vfpfcnvrt@ap,w
  7891     038A  0086               	movwf	6
  7892     038B  0187               	clrf	7
  7893     038C  0801               	movf	1,w
  7894     038D  0084               	movwf	4
  7895     038E  0185               	clrf	5
  7896     038F  3002               	movlw	2
  7897     0390  0781               	addwf	1,f
  7898     0391  3F00               	moviw [0]fsr0
  7899     0392  00C0               	movwf	vfpfcnvrt@convarg
  7900     0393  3F01               	moviw [1]fsr0
  7901     0394  00C1               	movwf	vfpfcnvrt@convarg+1
  7902                           
  7903                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = cp
      +                          +1;
  7904     0395  0845               	movf	vfpfcnvrt@cp,w
  7905     0396  3E01               	addlw	1
  7906     0397  00BC               	movwf	??_vfpfcnvrt
  7907     0398  3000               	movlw	0
  7908     0399  3D46               	addwfc	vfpfcnvrt@cp+1,w
  7909     039A  00BD               	movwf	??_vfpfcnvrt+1
  7910     039B  083A               	movf	vfpfcnvrt@fmt,w
  7911     039C  0086               	movwf	6
  7912     039D  0187               	clrf	7
  7913     039E  083C               	movf	??_vfpfcnvrt,w
  7914     039F  3FC0               	movwi [0]fsr1
  7915     03A0  083D               	movf	??_vfpfcnvrt+1,w
  7916     03A1  3FC1               	movwi [1]fsr1
  7917                           
  7918                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1432:    return (v
      +                          oid) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  7919     03A2  0839               	movf	vfpfcnvrt@fp+1,w
  7920     03A3  00AC               	movwf	dtoa@fp+1
  7921     03A4  0838               	movf	vfpfcnvrt@fp,w
  7922     03A5  00AB               	movwf	dtoa@fp
  7923     03A6  0841               	movf	vfpfcnvrt@convarg+1,w
  7924     03A7  00AE               	movwf	dtoa@d+1
  7925     03A8  0840               	movf	vfpfcnvrt@convarg,w
  7926     03A9  00AD               	movwf	dtoa@d
  7927     03AA  3183  23D1         	fcall	_dtoa
  7928     03AC  0008               	return
  7929     03AD                     i1l3070:
  7930                           
  7931                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*f
      +                          mt;
  7932     03AD  0020               	movlb	0	; select bank0
  7933     03AE  083A               	movf	vfpfcnvrt@fmt,w
  7934     03AF  0086               	movwf	6
  7935     03B0  0187               	clrf	7
  7936     03B1  3001               	movlw	1
  7937     03B2  0781               	addwf	1,f
  7938     03B3  3141               	addfsr 1,1
  7939     03B4  1803               	skipnc
  7940     03B5  0A81               	incf	1,f
  7941     03B6  0008               	return
  7942     03B7                     i1l3074:
  7943                           
  7944                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((i
      +                          nt)(*fmt)[0], fp);
  7945     03B7  083A               	movf	vfpfcnvrt@fmt,w
  7946     03B8  0086               	movwf	6
  7947     03B9  0187               	clrf	7
  7948     03BA  3F40               	moviw [0]fsr1
  7949     03BB  00BC               	movwf	??_vfpfcnvrt
  7950     03BC  3F41               	moviw [1]fsr1
  7951     03BD  00BD               	movwf	??_vfpfcnvrt+1
  7952     03BE  083C               	movf	??_vfpfcnvrt,w
  7953     03BF  0084               	movwf	4
  7954     03C0  083D               	movf	??_vfpfcnvrt+1,w
  7955     03C1  0085               	movwf	5
  7956     03C2  0800               	movf	0,w	;code access
  7957     03C3  00BE               	movwf	??_vfpfcnvrt+2
  7958     03C4  01BF               	clrf	??_vfpfcnvrt+3
  7959     03C5  083E               	movf	??_vfpfcnvrt+2,w
  7960     03C6  00F0               	movwf	fputc@c
  7961     03C7  083F               	movf	??_vfpfcnvrt+3,w
  7962     03C8  00F1               	movwf	fputc@c+1
  7963     03C9  0839               	movf	vfpfcnvrt@fp+1,w
  7964     03CA  00F3               	movwf	fputc@fp+1
  7965     03CB  0838               	movf	vfpfcnvrt@fp,w
  7966     03CC  00F2               	movwf	fputc@fp
  7967     03CD  3185  25E7  3183   	fcall	_fputc
  7968     03D0  2BAD               	goto	i1l3070
  7969     03D1                     __end_of_vfpfcnvrt:
  7970                           
  7971                           	psect	text46
  7972     0591                     __ptext46:	
  7973 ;; *************** function _read_prec_or_width *****************
  7974 ;; Defined at:
  7975 ;;		line 1158 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  fmt             1    7[COMMON] PTR PTR const unsigned c
  7978 ;;		 -> vfprintf@cfmt(2), 
  7979 ;;  ap              1    8[COMMON] PTR PTR void [1]
  7980 ;;		 -> sprintf@ap(1), 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  c               1    0[BANK0 ] unsigned char 
  7983 ;;  n               2    1[BANK0 ] int 
  7984 ;; Return value:  Size  Location     Type
  7985 ;;                  2    7[COMMON] int 
  7986 ;; Registers used:
  7987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7988 ;; Tracked objects:
  7989 ;;		On entry : 1F/0
  7990 ;;		On exit  : 1F/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7993 ;;      Params:         2       0       0       0       0       0
  7994 ;;      Locals:         0       3       0       0       0       0
  7995 ;;      Temps:          3       0       0       0       0       0
  7996 ;;      Totals:         5       3       0       0       0       0
  7997 ;;Total ram usage:        8 bytes
  7998 ;; Hardware stack levels used: 1
  7999 ;; Hardware stack levels required when called: 1
  8000 ;; This function calls:
  8001 ;;		___wmul
  8002 ;; This function is called by:
  8003 ;;		_vfpfcnvrt
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007     0591                     _read_prec_or_width:	
  8008                           ;psect for function _read_prec_or_width
  8009                           
  8010                           
  8011                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n = 
      +                          0;
  8012                           
  8013                           ;incstack = 0
  8014                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8015     0591  01A1               	clrf	read_prec_or_width@n
  8016     0592  01A2               	clrf	read_prec_or_width@n+1
  8017                           
  8018                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*fm
      +                          t)[0] == '*') {
  8019     0593  0877               	movf	read_prec_or_width@fmt,w
  8020     0594  0086               	movwf	6
  8021     0595  0187               	clrf	7
  8022     0596  3F40               	moviw [0]fsr1
  8023     0597  00F9               	movwf	??_read_prec_or_width
  8024     0598  3F41               	moviw [1]fsr1
  8025     0599  00FA               	movwf	??_read_prec_or_width+1
  8026     059A  0879               	movf	??_read_prec_or_width,w
  8027     059B  0084               	movwf	4
  8028     059C  087A               	movf	??_read_prec_or_width+1,w
  8029     059D  0085               	movwf	5
  8030     059E  0012               	moviw fsr0++
  8031     059F  3A2A               	xorlw	42
  8032     05A0  1D03               	btfss	3,2
  8033     05A1  2DD0               	goto	i1l3024
  8034                           
  8035                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*f
      +                          mt;
  8036     05A2  0877               	movf	read_prec_or_width@fmt,w
  8037     05A3  0086               	movwf	6
  8038     05A4  0187               	clrf	7
  8039     05A5  3001               	movlw	1
  8040     05A6  0781               	addwf	1,f
  8041     05A7  3141               	addfsr 1,1
  8042     05A8  1803               	skipnc
  8043     05A9  0A81               	incf	1,f
  8044                           
  8045                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n = 
      +                          (*(int *)__va_arg(*(int **)*ap, (int)0));
  8046     05AA  0878               	movf	read_prec_or_width@ap,w
  8047     05AB  0086               	movwf	6
  8048     05AC  0187               	clrf	7
  8049     05AD  0801               	movf	1,w
  8050     05AE  0084               	movwf	4
  8051     05AF  0185               	clrf	5
  8052     05B0  3002               	movlw	2
  8053     05B1  0781               	addwf	1,f
  8054     05B2  3F00               	moviw [0]fsr0
  8055     05B3  00A1               	movwf	read_prec_or_width@n
  8056     05B4  3F01               	moviw [1]fsr0
  8057     05B5  00A2               	movwf	read_prec_or_width@n+1
  8058                           
  8059                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else {
  8060     05B6  2DE2               	goto	i1l3026
  8061     05B7                     i1l3020:
  8062                           
  8063                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:             
      +                          n = n * 10 + c;
  8064     05B7  0822               	movf	read_prec_or_width@n+1,w
  8065     05B8  00F2               	movwf	___wmul@multiplier+1
  8066     05B9  0821               	movf	read_prec_or_width@n,w
  8067     05BA  00F1               	movwf	___wmul@multiplier
  8068     05BB  300A               	movlw	10
  8069     05BC  00F3               	movwf	___wmul@multiplicand
  8070     05BD  3000               	movlw	0
  8071     05BE  00F4               	movwf	___wmul@multiplicand+1
  8072     05BF  318D  2555  3185   	fcall	___wmul
  8073     05C2  0820               	movf	read_prec_or_width@c,w
  8074     05C3  0771               	addwf	?___wmul,w
  8075     05C4  00A1               	movwf	read_prec_or_width@n
  8076     05C5  3000               	movlw	0
  8077     05C6  3D72               	addwfc	?___wmul+1,w
  8078     05C7  00A2               	movwf	read_prec_or_width@n+1
  8079                           
  8080                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:             
      +                          ++*fmt;
  8081     05C8  0877               	movf	read_prec_or_width@fmt,w
  8082     05C9  0086               	movwf	6
  8083     05CA  0187               	clrf	7
  8084     05CB  3001               	movlw	1
  8085     05CC  0781               	addwf	1,f
  8086     05CD  3141               	addfsr 1,1
  8087     05CE  1803               	skipnc
  8088     05CF  0A81               	incf	1,f
  8089     05D0                     i1l3024:
  8090                           
  8091                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whil
      +                          e ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  8092     05D0  0877               	movf	read_prec_or_width@fmt,w
  8093     05D1  0086               	movwf	6
  8094     05D2  0187               	clrf	7
  8095     05D3  3F40               	moviw [0]fsr1
  8096     05D4  00F9               	movwf	??_read_prec_or_width
  8097     05D5  3F41               	moviw [1]fsr1
  8098     05D6  00FA               	movwf	??_read_prec_or_width+1
  8099     05D7  0879               	movf	??_read_prec_or_width,w
  8100     05D8  0084               	movwf	4
  8101     05D9  087A               	movf	??_read_prec_or_width+1,w
  8102     05DA  0085               	movwf	5
  8103     05DB  0800               	movf	0,w	;code access
  8104     05DC  3ED0               	addlw	208
  8105     05DD  00A0               	movwf	read_prec_or_width@c
  8106     05DE  300A               	movlw	10
  8107     05DF  0220               	subwf	read_prec_or_width@c,w
  8108     05E0  1C03               	skipc
  8109     05E1  2DB7               	goto	i1l3020
  8110     05E2                     i1l3026:
  8111                           
  8112                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return n
      +                          ;
  8113     05E2  0822               	movf	read_prec_or_width@n+1,w
  8114     05E3  00F8               	movwf	?_read_prec_or_width+1
  8115     05E4  0821               	movf	read_prec_or_width@n,w
  8116     05E5  00F7               	movwf	?_read_prec_or_width
  8117     05E6  0008               	return
  8118     05E7                     __end_of_read_prec_or_width:
  8119                           
  8120                           	psect	text47
  8121     0D55                     __ptext47:	
  8122 ;; *************** function ___wmul *****************
  8123 ;; Defined at:
  8124 ;;		line 15 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  multiplier      2    1[COMMON] unsigned int 
  8127 ;;  multiplicand    2    3[COMMON] unsigned int 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;  product         2    5[COMMON] unsigned int 
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  2    1[COMMON] unsigned int 
  8132 ;; Registers used:
  8133 ;;		wreg, status,2, status,0
  8134 ;; Tracked objects:
  8135 ;;		On entry : 1F/0
  8136 ;;		On exit  : 1F/0
  8137 ;;		Unchanged: 1F/0
  8138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8139 ;;      Params:         4       0       0       0       0       0
  8140 ;;      Locals:         2       0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0
  8142 ;;      Totals:         6       0       0       0       0       0
  8143 ;;Total ram usage:        6 bytes
  8144 ;; Hardware stack levels used: 1
  8145 ;; This function calls:
  8146 ;;		Nothing
  8147 ;; This function is called by:
  8148 ;;		_Write_UART
  8149 ;;		_read_prec_or_width
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153     0D55                     ___wmul:	
  8154                           ;psect for function ___wmul
  8155                           
  8156                           
  8157                           ;incstack = 0
  8158                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8159     0D55  01F5               	clrf	___wmul@product
  8160     0D56  01F6               	clrf	___wmul@product+1
  8161     0D57                     i1l2848:
  8162     0D57  1C71               	btfss	___wmul@multiplier,0
  8163     0D58  2D5D               	goto	i1l1069
  8164     0D59  0873               	movf	___wmul@multiplicand,w
  8165     0D5A  07F5               	addwf	___wmul@product,f
  8166     0D5B  0874               	movf	___wmul@multiplicand+1,w
  8167     0D5C  3DF6               	addwfc	___wmul@product+1,f
  8168     0D5D                     i1l1069:
  8169     0D5D  3001               	movlw	1
  8170     0D5E                     u136_25:
  8171     0D5E  35F3               	lslf	___wmul@multiplicand,f
  8172     0D5F  0DF4               	rlf	___wmul@multiplicand+1,f
  8173     0D60  0B89               	decfsz	9,f
  8174     0D61  2D5E               	goto	u136_25
  8175     0D62  3001               	movlw	1
  8176     0D63                     u137_25:
  8177     0D63  36F2               	lsrf	___wmul@multiplier+1,f
  8178     0D64  0CF1               	rrf	___wmul@multiplier,f
  8179     0D65  0B89               	decfsz	9,f
  8180     0D66  2D63               	goto	u137_25
  8181     0D67  0871               	movf	___wmul@multiplier,w
  8182     0D68  0472               	iorwf	___wmul@multiplier+1,w
  8183     0D69  1D03               	btfss	3,2
  8184     0D6A  2D57               	goto	i1l2848
  8185     0D6B  0876               	movf	___wmul@product+1,w
  8186     0D6C  00F2               	movwf	?___wmul+1
  8187     0D6D  0875               	movf	___wmul@product,w
  8188     0D6E  00F1               	movwf	?___wmul
  8189     0D6F  0008               	return
  8190     0D70                     __end_of___wmul:
  8191                           
  8192                           	psect	text48
  8193     03D1                     __ptext48:	
  8194 ;; *************** function _dtoa *****************
  8195 ;; Defined at:
  8196 ;;		line 513 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  fp              2   11[BANK0 ] PTR struct _IO_FILE
  8199 ;;		 -> sprintf@f(11), 
  8200 ;;  d               2   13[BANK0 ] int 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  i               2   22[BANK0 ] int 
  8203 ;;  w               2   19[BANK0 ] int 
  8204 ;;  s               1   21[BANK0 ] unsigned char 
  8205 ;;  p               1   18[BANK0 ] _Bool 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 1F/0
  8212 ;;		On exit  : 1F/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8215 ;;      Params:         0       4       0       0       0       0
  8216 ;;      Locals:         0       8       0       0       0       0
  8217 ;;      Temps:          0       1       0       0       0       0
  8218 ;;      Totals:         0      13       0       0       0       0
  8219 ;;Total ram usage:       13 bytes
  8220 ;; Hardware stack levels used: 1
  8221 ;; Hardware stack levels required when called: 4
  8222 ;; This function calls:
  8223 ;;		___awdiv
  8224 ;;		___awmod
  8225 ;;		_abs
  8226 ;;		_pad
  8227 ;; This function is called by:
  8228 ;;		_vfpfcnvrt
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232     03D1                     _dtoa:	
  8233                           ;psect for function _dtoa
  8234                           
  8235                           
  8236                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 513: static void d
      +                          toa(FILE *fp, vfpf_sint_t d);D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\
      +                          doprnt.c: 514: {;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 51
      +                          5:  char s;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 516:   
      +                            int i, w;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 520:  _
      +                          Bool p = 1;
  8237                           
  8238                           ;incstack = 0
  8239 ;; hardware stack exceeded
  8240                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8241     03D1  3001               	movlw	1
  8242     03D2  00B2               	movwf	dtoa@p
  8243                           
  8244                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 524:     s = d < 0
      +                           ? 1 : 0;
  8245     03D3  1FAE               	btfss	dtoa@d+1,7
  8246     03D4  2BD7               	goto	u163_20
  8247     03D5  3001               	movlw	1
  8248     03D6  2BD8               	goto	u164_20
  8249     03D7                     u163_20:
  8250     03D7  3000               	movlw	0
  8251     03D8                     u164_20:
  8252     03D8  00B5               	movwf	dtoa@s
  8253                           
  8254                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 535:     w = width
      +                          ;
  8255     03D9  0863               	movf	_width+1,w
  8256     03DA  00B4               	movwf	dtoa@w+1
  8257     03DB  0862               	movf	_width,w
  8258     03DC  00B3               	movwf	dtoa@w
  8259                           
  8260                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 536:     if (s
  8261     03DD  0835               	movf	dtoa@s,w
  8262     03DE  1903               	btfsc	3,2
  8263     03DF  2BEF               	goto	i1l1560
  8264                           
  8265                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 540:     ) {;D:\Mi
      +                          crochip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 541:         --w;
  8266     03E0  30FF               	movlw	255
  8267     03E1  07B3               	addwf	dtoa@w,f
  8268     03E2  30FF               	movlw	255
  8269     03E3  3DB4               	addwfc	dtoa@w+1,f
  8270                           
  8271                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-'
      +                           : '+';
  8272     03E4  0835               	movf	dtoa@s,w
  8273     03E5  1D03               	btfss	3,2
  8274     03E6  2BE9               	goto	i1l2978
  8275     03E7  302B               	movlw	43
  8276     03E8  2BEA               	goto	L2
  8277     03E9                     i1l2978:
  8278     03E9  302D               	movlw	45
  8279     03EA                     L2:
  8280     03EA  00B0               	movwf	_dtoa$2209
  8281     03EB  3000               	movlw	0
  8282     03EC  00B1               	movwf	_dtoa$2209+1
  8283     03ED  0830               	movf	_dtoa$2209,w
  8284     03EE  00B5               	movwf	dtoa@s
  8285     03EF                     i1l1560:	
  8286                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 543:     }
  8287                           
  8288                           
  8289                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 552:     i = sizeo
      +                          f(dbuf) - 1;
  8290     03EF  301F               	movlw	31
  8291     03F0  00B6               	movwf	dtoa@i
  8292     03F1  3000               	movlw	0
  8293     03F2  00B7               	movwf	dtoa@i+1
  8294                           
  8295                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] =
      +                           '\0';
  8296     03F3  0022               	movlb	2	; select bank2
  8297     03F4  01C9               	clrf	(_dbuf^(0+256)+31)
  8298                           
  8299                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 554:     while (!(
      +                          i < 1) && (d != 0
  8300     03F5  2C3E               	goto	i1l2992
  8301     03F6                     i1l2994:
  8302     03F6  0020               	movlb	0	; select bank0
  8303     03F7  082D               	movf	dtoa@d,w
  8304     03F8  042E               	iorwf	dtoa@d+1,w
  8305     03F9  1D03               	btfss	3,2
  8306     03FA  2C0C               	goto	i1l2982
  8307     03FB  0832               	movf	dtoa@p,w
  8308     03FC  1D03               	btfss	3,2
  8309     03FD  2C0C               	goto	i1l2982
  8310     03FE  0834               	movf	dtoa@w+1,w
  8311     03FF  3A80               	xorlw	128
  8312     0400  00AF               	movwf	??_dtoa
  8313     0401  3080               	movlw	128
  8314     0402  022F               	subwf	??_dtoa,w
  8315     0403  1D03               	skipz
  8316     0404  2C07               	goto	u170_25
  8317     0405  3001               	movlw	1
  8318     0406  0233               	subwf	dtoa@w,w
  8319     0407                     u170_25:
  8320     0407  1C03               	skipc
  8321     0408  2C4A               	goto	i1l3002
  8322     0409  0020               	movlb	0	; select bank0
  8323     040A  1CE4               	btfss	_flags,1
  8324     040B  2C4A               	goto	i1l3002
  8325     040C                     i1l2982:
  8326                           
  8327                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 563:     )) {;D:\M
      +                          icrochip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 564:         --i;
  8328     040C  30FF               	movlw	255
  8329     040D  07B6               	addwf	dtoa@i,f
  8330     040E  30FF               	movlw	255
  8331     040F  3DB7               	addwfc	dtoa@i+1,f
  8332                           
  8333                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 565:         dbuf[
      +                          i] = (char)((int)'0' + abs(d % 10));
  8334     0410  0836               	movf	dtoa@i,w
  8335     0411  3E2A               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8336     0412  0086               	movwf	6
  8337     0413  3001               	movlw	1	; select bank2/3
  8338     0414  0087               	movwf	7
  8339     0415  300A               	movlw	10
  8340     0416  00F0               	movwf	___awmod@divisor
  8341     0417  3000               	movlw	0
  8342     0418  00F1               	movwf	___awmod@divisor+1
  8343     0419  082E               	movf	dtoa@d+1,w
  8344     041A  00F3               	movwf	___awmod@dividend+1
  8345     041B  082D               	movf	dtoa@d,w
  8346     041C  00F2               	movwf	___awmod@dividend
  8347     041D  3187  270F  3183   	fcall	___awmod
  8348     0420  0871               	movf	?___awmod+1,w
  8349     0421  00F7               	movwf	abs@a+1
  8350     0422  0870               	movf	?___awmod,w
  8351     0423  00F6               	movwf	abs@a
  8352     0424  318C  24B6  3183   	fcall	_abs
  8353     0427  0876               	movf	?_abs,w
  8354     0428  3E30               	addlw	48
  8355     0429  0081               	movwf	1
  8356                           
  8357                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  8358     042A  01B2               	clrf	dtoa@p
  8359                           
  8360                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 571:         --w;
  8361     042B  30FF               	movlw	255
  8362     042C  07B3               	addwf	dtoa@w,f
  8363     042D  30FF               	movlw	255
  8364     042E  3DB4               	addwfc	dtoa@w+1,f
  8365                           
  8366                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 572:         d = d
      +                           / 10;
  8367     042F  300A               	movlw	10
  8368     0430  00F7               	movwf	___awdiv@divisor
  8369     0431  3000               	movlw	0
  8370     0432  00F8               	movwf	___awdiv@divisor+1
  8371     0433  082E               	movf	dtoa@d+1,w
  8372     0434  00FA               	movwf	___awdiv@dividend+1
  8373     0435  082D               	movf	dtoa@d,w
  8374     0436  00F9               	movwf	___awdiv@dividend
  8375     0437  3186  2635  3183   	fcall	___awdiv
  8376     043A  0878               	movf	?___awdiv+1,w
  8377     043B  00AE               	movwf	dtoa@d+1
  8378     043C  0877               	movf	?___awdiv,w
  8379     043D  00AD               	movwf	dtoa@d
  8380     043E                     i1l2992:
  8381                           
  8382                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 554:     while (!(
      +                          i < 1) && (d != 0
  8383     043E  0020               	movlb	0	; select bank0
  8384     043F  0837               	movf	dtoa@i+1,w
  8385     0440  3A80               	xorlw	128
  8386     0441  00AF               	movwf	??_dtoa
  8387     0442  3080               	movlw	128
  8388     0443  022F               	subwf	??_dtoa,w
  8389     0444  1D03               	skipz
  8390     0445  2C48               	goto	u167_25
  8391     0446  3001               	movlw	1
  8392     0447  0236               	subwf	dtoa@i,w
  8393     0448                     u167_25:
  8394     0448  1803               	btfsc	3,0
  8395     0449  2BF6               	goto	i1l2994
  8396     044A                     i1l3002:
  8397                           
  8398                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 576:     if (s != 
      +                          0) {
  8399     044A  0020               	movlb	0	; select bank0
  8400     044B  0835               	movf	dtoa@s,w
  8401     044C  1903               	btfsc	3,2
  8402     044D  2C59               	goto	i1l3008
  8403                           
  8404                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 577:         --i;
  8405     044E  30FF               	movlw	255
  8406     044F  07B6               	addwf	dtoa@i,f
  8407     0450  30FF               	movlw	255
  8408     0451  3DB7               	addwfc	dtoa@i+1,f
  8409                           
  8410                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 578:         dbuf[
      +                          i] = s;
  8411     0452  0836               	movf	dtoa@i,w
  8412     0453  3E2A               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8413     0454  0086               	movwf	6
  8414     0455  3001               	movlw	1	; select bank2/3
  8415     0456  0087               	movwf	7
  8416     0457  0835               	movf	dtoa@s,w
  8417     0458  0081               	movwf	1
  8418     0459                     i1l3008:
  8419                           
  8420                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 582:     return (v
      +                          oid) pad(fp, &dbuf[i], w);
  8421     0459  082C               	movf	dtoa@fp+1,w
  8422     045A  00A4               	movwf	pad@fp+1
  8423     045B  082B               	movf	dtoa@fp,w
  8424     045C  00A3               	movwf	pad@fp
  8425     045D  0836               	movf	dtoa@i,w
  8426     045E  3E2A               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8427     045F  00A5               	movwf	pad@buf
  8428     0460  0834               	movf	dtoa@w+1,w
  8429     0461  00A7               	movwf	pad@p+1
  8430     0462  0833               	movf	dtoa@w,w
  8431     0463  00A6               	movwf	pad@p
  8432     0464  318F  27C5         	fcall	_pad
  8433     0466  0008               	return
  8434     0467                     __end_of_dtoa:
  8435                           
  8436                           	psect	text49
  8437     0FC5                     __ptext49:	
  8438 ;; *************** function _pad *****************
  8439 ;; Defined at:
  8440 ;;		line 193 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  fp              2    3[BANK0 ] PTR struct _IO_FILE
  8443 ;;		 -> sprintf@f(11), 
  8444 ;;  buf             1    5[BANK0 ] PTR unsigned char 
  8445 ;;		 -> dbuf(32), 
  8446 ;;  p               2    6[BANK0 ] int 
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  i               2    9[BANK0 ] int 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      void 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 1F/0
  8455 ;;		On exit  : 1F/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8458 ;;      Params:         0       5       0       0       0       0
  8459 ;;      Locals:         0       2       0       0       0       0
  8460 ;;      Temps:          0       1       0       0       0       0
  8461 ;;      Totals:         0       8       0       0       0       0
  8462 ;;Total ram usage:        8 bytes
  8463 ;; Hardware stack levels used: 1
  8464 ;; Hardware stack levels required when called: 3
  8465 ;; This function calls:
  8466 ;;		_fputc
  8467 ;;		_fputs
  8468 ;; This function is called by:
  8469 ;;		_dtoa
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473     0FC5                     _pad:	
  8474                           ;psect for function _pad
  8475                           
  8476                           
  8477                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void p
      +                          ad(FILE *fp, char *buf, int p);D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\commo
      +                          n\doprnt.c: 194: {;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 
      +                          195:     int i;;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 199
      +                          :     if (flags & (1 << 0)) {
  8478                           
  8479                           ;incstack = 0
  8480 ;; hardware stack exceeded
  8481                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8482     0FC5  1C64               	btfss	_flags,0
  8483     0FC6  2FD0               	goto	i1l2946
  8484                           
  8485                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fputs
      +                          ((const char *)buf, fp);
  8486     0FC7  0825               	movf	pad@buf,w
  8487     0FC8  00F9               	movwf	fputs@s
  8488     0FC9  0824               	movf	pad@fp+1,w
  8489     0FCA  00FB               	movwf	fputs@fp+1
  8490     0FCB  0823               	movf	pad@fp,w
  8491     0FCC  00FA               	movwf	fputs@fp
  8492     0FCD  318E  2602  318F   	fcall	_fputs
  8493     0FD0                     i1l2946:
  8494                           
  8495                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) {
  8496     0FD0  1FA7               	btfss	pad@p+1,7
  8497     0FD1  2FD4               	goto	i1l1552
  8498                           
  8499                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  8500     0FD2  01A6               	clrf	pad@p
  8501     0FD3  01A7               	clrf	pad@p+1
  8502     0FD4                     i1l1552:	
  8503                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 207:  }
  8504                           
  8505                           
  8506                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  8507     0FD4  01A9               	clrf	pad@i
  8508     0FD5  01AA               	clrf	pad@i+1
  8509     0FD6                     i1l2954:	
  8510                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i 
      +                          < p) {
  8511                           
  8512                           
  8513                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i 
      +                          < p) {
  8514     0FD6  082A               	movf	pad@i+1,w
  8515     0FD7  3A80               	xorlw	128
  8516     0FD8  00A8               	movwf	??_pad
  8517     0FD9  0827               	movf	pad@p+1,w
  8518     0FDA  3A80               	xorlw	128
  8519     0FDB  0228               	subwf	??_pad,w
  8520     0FDC  1D03               	skipz
  8521     0FDD  2FE0               	goto	u160_25
  8522     0FDE  0826               	movf	pad@p,w
  8523     0FDF  0229               	subwf	pad@i,w
  8524     0FE0                     u160_25:
  8525     0FE0  1803               	btfsc	3,0
  8526     0FE1  2FF4               	goto	i1l1555
  8527                           
  8528                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fputc
      +                          (' ', fp);
  8529     0FE2  3020               	movlw	32
  8530     0FE3  00F0               	movwf	fputc@c
  8531     0FE4  3000               	movlw	0
  8532     0FE5  00F1               	movwf	fputc@c+1
  8533     0FE6  0020               	movlb	0	; select bank0
  8534     0FE7  0824               	movf	pad@fp+1,w
  8535     0FE8  00F3               	movwf	fputc@fp+1
  8536     0FE9  0823               	movf	pad@fp,w
  8537     0FEA  00F2               	movwf	fputc@fp
  8538     0FEB  3185  25E7  318F   	fcall	_fputc
  8539                           
  8540                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  8541     0FEE  3001               	movlw	1
  8542     0FEF  0020               	movlb	0	; select bank0
  8543     0FF0  07A9               	addwf	pad@i,f
  8544     0FF1  3000               	movlw	0
  8545     0FF2  3DAA               	addwfc	pad@i+1,f
  8546     0FF3  2FD6               	goto	i1l2954
  8547     0FF4                     i1l1555:
  8548                           
  8549                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fla
      +                          gs & (1 << 0))) {
  8550     0FF4  0020               	movlb	0	; select bank0
  8551     0FF5  1864               	btfsc	_flags,0
  8552     0FF6  0008               	return
  8553                           
  8554                           ;D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fputs
      +                          ((const char *)buf, fp);
  8555     0FF7  0825               	movf	pad@buf,w
  8556     0FF8  00F9               	movwf	fputs@s
  8557     0FF9  0824               	movf	pad@fp+1,w
  8558     0FFA  00FB               	movwf	fputs@fp+1
  8559     0FFB  0823               	movf	pad@fp,w
  8560     0FFC  00FA               	movwf	fputs@fp
  8561     0FFD  318E  2602         	fcall	_fputs
  8562     0FFF  0008               	return
  8563     1000                     __end_of_pad:
  8564                           
  8565                           	psect	text50
  8566     0E02                     __ptext50:	
  8567 ;; *************** function _fputs *****************
  8568 ;; Defined at:
  8569 ;;		line 8 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  s               1    9[COMMON] PTR const unsigned char 
  8572 ;;		 -> dbuf(32), 
  8573 ;;  fp              2   10[COMMON] PTR struct _IO_FILE
  8574 ;;		 -> sprintf@f(11), 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  i               2    1[BANK0 ] int 
  8577 ;;  c               1    0[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  2    9[COMMON] int 
  8580 ;; Registers used:
  8581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 1F/0
  8584 ;;		On exit  : 1F/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8587 ;;      Params:         3       0       0       0       0       0
  8588 ;;      Locals:         0       3       0       0       0       0
  8589 ;;      Temps:          2       0       0       0       0       0
  8590 ;;      Totals:         5       3       0       0       0       0
  8591 ;;Total ram usage:        8 bytes
  8592 ;; Hardware stack levels used: 1
  8593 ;; Hardware stack levels required when called: 2
  8594 ;; This function calls:
  8595 ;;		_fputc
  8596 ;; This function is called by:
  8597 ;;		_pad
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601     0E02                     _fputs:	
  8602                           ;psect for function _fputs
  8603                           
  8604                           
  8605                           ;incstack = 0
  8606 ;; hardware stack exceeded
  8607                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8608     0E02  01A1               	clrf	fputs@i
  8609     0E03  01A2               	clrf	fputs@i+1
  8610     0E04                     i1l2844:
  8611     0E04  0879               	movf	fputs@s,w
  8612     0E05  0721               	addwf	fputs@i,w
  8613     0E06  0086               	movwf	6
  8614     0E07  3001               	movlw	1	; select bank2/3
  8615     0E08  0087               	movwf	7
  8616     0E09  0801               	movf	1,w
  8617     0E0A  00A0               	movwf	fputs@c
  8618     0E0B  0820               	movf	fputs@c,w
  8619     0E0C  1903               	btfsc	3,2
  8620     0E0D  0008               	return
  8621     0E0E  0820               	movf	fputs@c,w
  8622     0E0F  00FC               	movwf	??_fputs
  8623     0E10  01FD               	clrf	??_fputs+1
  8624     0E11  087C               	movf	??_fputs,w
  8625     0E12  00F0               	movwf	fputc@c
  8626     0E13  087D               	movf	??_fputs+1,w
  8627     0E14  00F1               	movwf	fputc@c+1
  8628     0E15  087B               	movf	fputs@fp+1,w
  8629     0E16  00F3               	movwf	fputc@fp+1
  8630     0E17  087A               	movf	fputs@fp,w
  8631     0E18  00F2               	movwf	fputc@fp
  8632     0E19  3185  25E7  318E   	fcall	_fputc
  8633     0E1C  3001               	movlw	1
  8634     0E1D  0020               	movlb	0	; select bank0
  8635     0E1E  07A1               	addwf	fputs@i,f
  8636     0E1F  3000               	movlw	0
  8637     0E20  3DA2               	addwfc	fputs@i+1,f
  8638     0E21  2E04               	goto	i1l2844
  8639     0E22                     __end_of_fputs:
  8640                           
  8641                           	psect	text51
  8642     05E7                     __ptext51:	
  8643 ;; *************** function _fputc *****************
  8644 ;; Defined at:
  8645 ;;		line 8 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  c               2    0[COMMON] int 
  8648 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  8649 ;;		 -> sprintf@f(11), 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;		None
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  2    0[COMMON] int 
  8654 ;; Registers used:
  8655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8656 ;; Tracked objects:
  8657 ;;		On entry : 1F/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8661 ;;      Params:         4       0       0       0       0       0
  8662 ;;      Locals:         0       0       0       0       0       0
  8663 ;;      Temps:          5       0       0       0       0       0
  8664 ;;      Totals:         9       0       0       0       0       0
  8665 ;;Total ram usage:        9 bytes
  8666 ;; Hardware stack levels used: 1
  8667 ;; Hardware stack levels required when called: 1
  8668 ;; This function calls:
  8669 ;;		_putch
  8670 ;; This function is called by:
  8671 ;;		_pad
  8672 ;;		_vfpfcnvrt
  8673 ;;		_fputs
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677     05E7                     _fputc:	
  8678                           ;psect for function _fputc
  8679                           
  8680                           
  8681                           ;incstack = 0
  8682                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8683     05E7  0872               	movf	fputc@fp,w
  8684     05E8  0473               	iorwf	fputc@fp+1,w
  8685     05E9  1903               	btfsc	3,2
  8686     05EA  2DEF               	goto	i1l2826
  8687     05EB  0872               	movf	fputc@fp,w
  8688     05EC  0473               	iorwf	fputc@fp+1,w
  8689     05ED  1D03               	btfss	3,2
  8690     05EE  2DF3               	goto	i1l2828
  8691     05EF                     i1l2826:
  8692     05EF  0870               	movf	fputc@c,w
  8693     05F0  318B  238F         	fcall	_putch
  8694     05F2  0008               	return
  8695     05F3                     i1l2828:
  8696     05F3  0872               	movf	fputc@fp,w
  8697     05F4  0086               	movwf	6
  8698     05F5  0187               	clrf	7
  8699     05F6  3149               	addfsr 1,9
  8700     05F7  0016               	moviw fsr1++
  8701     05F8  0401               	iorwf	1,w
  8702     05F9  1903               	btfsc	3,2
  8703     05FA  2E17               	goto	i1l2832
  8704     05FB  0872               	movf	fputc@fp,w
  8705     05FC  0086               	movwf	6
  8706     05FD  0187               	clrf	7
  8707     05FE  3149               	addfsr 1,9
  8708     05FF  3F40               	moviw [0]fsr1
  8709     0600  00F4               	movwf	??_fputc
  8710     0601  3F41               	moviw [1]fsr1
  8711     0602  00F5               	movwf	??_fputc+1
  8712     0603  0872               	movf	fputc@fp,w
  8713     0604  0086               	movwf	6
  8714     0605  0187               	clrf	7
  8715     0606  3142               	addfsr 1,2
  8716     0607  3F40               	moviw [0]fsr1
  8717     0608  00F6               	movwf	??_fputc+2
  8718     0609  3F41               	moviw [1]fsr1
  8719     060A  00F7               	movwf	??_fputc+3
  8720     060B  0877               	movf	??_fputc+3,w
  8721     060C  3A80               	xorlw	128
  8722     060D  00F8               	movwf	??_fputc+4
  8723     060E  0875               	movf	??_fputc+1,w
  8724     060F  3A80               	xorlw	128
  8725     0610  0278               	subwf	??_fputc+4,w
  8726     0611  1D03               	skipz
  8727     0612  2E15               	goto	u133_25
  8728     0613  0874               	movf	??_fputc,w
  8729     0614  0276               	subwf	??_fputc+2,w
  8730     0615                     u133_25:
  8731     0615  1803               	skipnc
  8732     0616  0008               	return
  8733     0617                     i1l2832:
  8734     0617  0872               	movf	fputc@fp,w
  8735     0618  0086               	movwf	6
  8736     0619  0187               	clrf	7
  8737     061A  3142               	addfsr 1,2
  8738     061B  0872               	movf	fputc@fp,w
  8739     061C  0084               	movwf	4
  8740     061D  0873               	movf	fputc@fp+1,w
  8741     061E  0085               	movwf	5
  8742     061F  3F00               	moviw [0]fsr0
  8743     0620  00F4               	movwf	??_fputc
  8744     0621  3F01               	moviw [1]fsr0
  8745     0622  00F5               	movwf	??_fputc+1
  8746     0623  3F40               	moviw [0]fsr1
  8747     0624  0774               	addwf	??_fputc,w
  8748     0625  0084               	movwf	4
  8749     0626  3F41               	moviw [1]fsr1
  8750     0627  3D75               	addwfc	??_fputc+1,w
  8751     0628  0085               	movwf	5
  8752     0629  0870               	movf	fputc@c,w
  8753     062A  0080               	movwf	0
  8754     062B  0872               	movf	fputc@fp,w
  8755     062C  0086               	movwf	6
  8756     062D  0187               	clrf	7
  8757     062E  3142               	addfsr 1,2
  8758     062F  3001               	movlw	1
  8759     0630  0781               	addwf	1,f
  8760     0631  3141               	addfsr 1,1
  8761     0632  1803               	skipnc
  8762     0633  0A81               	incf	1,f
  8763     0634  0008               	return
  8764     0635                     __end_of_fputc:
  8765                           
  8766                           	psect	text52
  8767     0B8F                     __ptext52:	
  8768 ;; *************** function _putch *****************
  8769 ;; Defined at:
  8770 ;;		line 7 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\putch.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  c               1    wreg     unsigned char 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  c               1    0[COMMON] unsigned char 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  1    wreg      void 
  8777 ;; Registers used:
  8778 ;;		wreg
  8779 ;; Tracked objects:
  8780 ;;		On entry : 1F/0
  8781 ;;		On exit  : 1F/0
  8782 ;;		Unchanged: 1F/0
  8783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8784 ;;      Params:         0       0       0       0       0       0
  8785 ;;      Locals:         0       0       0       0       0       0
  8786 ;;      Temps:          0       0       0       0       0       0
  8787 ;;      Totals:         0       0       0       0       0       0
  8788 ;;Total ram usage:        0 bytes
  8789 ;; Hardware stack levels used: 1
  8790 ;; This function calls:
  8791 ;;		Nothing
  8792 ;; This function is called by:
  8793 ;;		_fputc
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797     0B8F                     _putch:	
  8798                           ;psect for function _putch
  8799                           
  8800                           
  8801                           ;incstack = 0
  8802                           ; Regs used in _putch: [wreg]
  8803     0B8F  0008               	return
  8804     0B90                     __end_of_putch:
  8805                           
  8806                           	psect	text53
  8807     0CB6                     __ptext53:	
  8808 ;; *************** function _abs *****************
  8809 ;; Defined at:
  8810 ;;		line 1 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\abs.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  a               2    6[COMMON] int 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;		None
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  2    6[COMMON] int 
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0
  8819 ;; Tracked objects:
  8820 ;;		On entry : 1F/0
  8821 ;;		On exit  : 1F/0
  8822 ;;		Unchanged: 1F/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8824 ;;      Params:         2       0       0       0       0       0
  8825 ;;      Locals:         0       0       0       0       0       0
  8826 ;;      Temps:          2       0       0       0       0       0
  8827 ;;      Totals:         4       0       0       0       0       0
  8828 ;;Total ram usage:        4 bytes
  8829 ;; Hardware stack levels used: 1
  8830 ;; This function calls:
  8831 ;;		Nothing
  8832 ;; This function is called by:
  8833 ;;		_dtoa
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837     0CB6                     _abs:	
  8838                           ;psect for function _abs
  8839                           
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _abs: [wreg+status,2+status,0]
  8843     0CB6  1FF7               	btfss	abs@a+1,7
  8844     0CB7  0008               	return
  8845     0CB8  0976               	comf	abs@a,w
  8846     0CB9  00F8               	movwf	??_abs
  8847     0CBA  0977               	comf	abs@a+1,w
  8848     0CBB  00F9               	movwf	??_abs+1
  8849     0CBC  0AF8               	incf	??_abs,f
  8850     0CBD  1903               	skipnz
  8851     0CBE  0AF9               	incf	??_abs+1,f
  8852     0CBF  0878               	movf	??_abs,w
  8853     0CC0  00F6               	movwf	?_abs
  8854     0CC1  0879               	movf	??_abs+1,w
  8855     0CC2  00F7               	movwf	?_abs+1
  8856     0CC3  0008               	return
  8857     0CC4                     __end_of_abs:
  8858                           
  8859                           	psect	text54
  8860     0635                     __ptext54:	
  8861 ;; *************** function ___awdiv *****************
  8862 ;; Defined at:
  8863 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  divisor         2    7[COMMON] int 
  8866 ;;  dividend        2    9[COMMON] int 
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  quotient        2    2[BANK0 ] int 
  8869 ;;  sign            1    1[BANK0 ] unsigned char 
  8870 ;;  counter         1    0[BANK0 ] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  2    7[COMMON] int 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2, status,0
  8875 ;; Tracked objects:
  8876 ;;		On entry : 1F/0
  8877 ;;		On exit  : 1F/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8880 ;;      Params:         4       0       0       0       0       0
  8881 ;;      Locals:         0       4       0       0       0       0
  8882 ;;      Temps:          0       0       0       0       0       0
  8883 ;;      Totals:         4       4       0       0       0       0
  8884 ;;Total ram usage:        8 bytes
  8885 ;; Hardware stack levels used: 1
  8886 ;; This function calls:
  8887 ;;		Nothing
  8888 ;; This function is called by:
  8889 ;;		_Write_UART
  8890 ;;		_dtoa
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894     0635                     ___awdiv:	
  8895                           ;psect for function ___awdiv
  8896                           
  8897                           
  8898                           ;incstack = 0
  8899                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8900     0635  01A1               	clrf	___awdiv@sign
  8901     0636  1FF8               	btfss	___awdiv@divisor+1,7
  8902     0637  2E3F               	goto	i1l2868
  8903     0638  09F7               	comf	___awdiv@divisor,f
  8904     0639  09F8               	comf	___awdiv@divisor+1,f
  8905     063A  0AF7               	incf	___awdiv@divisor,f
  8906     063B  1903               	skipnz
  8907     063C  0AF8               	incf	___awdiv@divisor+1,f
  8908     063D  3001               	movlw	1
  8909     063E  00A1               	movwf	___awdiv@sign
  8910     063F                     i1l2868:
  8911     063F  1FFA               	btfss	___awdiv@dividend+1,7
  8912     0640  2E48               	goto	i1l2874
  8913     0641  09F9               	comf	___awdiv@dividend,f
  8914     0642  09FA               	comf	___awdiv@dividend+1,f
  8915     0643  0AF9               	incf	___awdiv@dividend,f
  8916     0644  1903               	skipnz
  8917     0645  0AFA               	incf	___awdiv@dividend+1,f
  8918     0646  3001               	movlw	1
  8919     0647  06A1               	xorwf	___awdiv@sign,f
  8920     0648                     i1l2874:
  8921     0648  01A2               	clrf	___awdiv@quotient
  8922     0649  01A3               	clrf	___awdiv@quotient+1
  8923     064A  0877               	movf	___awdiv@divisor,w
  8924     064B  0478               	iorwf	___awdiv@divisor+1,w
  8925     064C  1903               	btfsc	3,2
  8926     064D  2E75               	goto	i1l2896
  8927     064E  3001               	movlw	1
  8928     064F  00A0               	movwf	___awdiv@counter
  8929     0650                     i1l2884:
  8930     0650  1BF8               	btfsc	___awdiv@divisor+1,7
  8931     0651  2E5A               	goto	i1l2886
  8932     0652  3001               	movlw	1
  8933     0653                     u142_25:
  8934     0653  35F7               	lslf	___awdiv@divisor,f
  8935     0654  0DF8               	rlf	___awdiv@divisor+1,f
  8936     0655  0B89               	decfsz	9,f
  8937     0656  2E53               	goto	u142_25
  8938     0657  3001               	movlw	1
  8939     0658  07A0               	addwf	___awdiv@counter,f
  8940     0659  2E50               	goto	i1l2884
  8941     065A                     i1l2886:
  8942     065A  3001               	movlw	1
  8943     065B                     u144_25:
  8944     065B  35A2               	lslf	___awdiv@quotient,f
  8945     065C  0DA3               	rlf	___awdiv@quotient+1,f
  8946     065D  0B89               	decfsz	9,f
  8947     065E  2E5B               	goto	u144_25
  8948     065F  0878               	movf	___awdiv@divisor+1,w
  8949     0660  027A               	subwf	___awdiv@dividend+1,w
  8950     0661  1D03               	skipz
  8951     0662  2E65               	goto	u145_25
  8952     0663  0877               	movf	___awdiv@divisor,w
  8953     0664  0279               	subwf	___awdiv@dividend,w
  8954     0665                     u145_25:
  8955     0665  1C03               	skipc
  8956     0666  2E6C               	goto	i1l2892
  8957     0667  0877               	movf	___awdiv@divisor,w
  8958     0668  02F9               	subwf	___awdiv@dividend,f
  8959     0669  0878               	movf	___awdiv@divisor+1,w
  8960     066A  3BFA               	subwfb	___awdiv@dividend+1,f
  8961     066B  1422               	bsf	___awdiv@quotient,0
  8962     066C                     i1l2892:
  8963     066C  3001               	movlw	1
  8964     066D                     u146_25:
  8965     066D  36F8               	lsrf	___awdiv@divisor+1,f
  8966     066E  0CF7               	rrf	___awdiv@divisor,f
  8967     066F  0B89               	decfsz	9,f
  8968     0670  2E6D               	goto	u146_25
  8969     0671  3001               	movlw	1
  8970     0672  02A0               	subwf	___awdiv@counter,f
  8971     0673  1D03               	btfss	3,2
  8972     0674  2E5A               	goto	i1l2886
  8973     0675                     i1l2896:
  8974     0675  0821               	movf	___awdiv@sign,w
  8975     0676  1903               	btfsc	3,2
  8976     0677  2E7D               	goto	i1l2900
  8977     0678  09A2               	comf	___awdiv@quotient,f
  8978     0679  09A3               	comf	___awdiv@quotient+1,f
  8979     067A  0AA2               	incf	___awdiv@quotient,f
  8980     067B  1903               	skipnz
  8981     067C  0AA3               	incf	___awdiv@quotient+1,f
  8982     067D                     i1l2900:
  8983     067D  0823               	movf	___awdiv@quotient+1,w
  8984     067E  00F8               	movwf	?___awdiv+1
  8985     067F  0822               	movf	___awdiv@quotient,w
  8986     0680  00F7               	movwf	?___awdiv
  8987     0681  0008               	return
  8988     0682                     __end_of___awdiv:
  8989                           
  8990                           	psect	text55
  8991     0B9F                     __ptext55:	
  8992 ;; *************** function _TMR0_ReadTimer *****************
  8993 ;; Defined at:
  8994 ;;		line 80 in file "mcc_generated_files/tmr0.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;		None
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  readVal         1    0[COMMON] unsigned char 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  1    wreg      unsigned char 
  9001 ;; Registers used:
  9002 ;;		wreg
  9003 ;; Tracked objects:
  9004 ;;		On entry : 1C/3
  9005 ;;		On exit  : 1F/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9008 ;;      Params:         0       0       0       0       0       0
  9009 ;;      Locals:         1       0       0       0       0       0
  9010 ;;      Temps:          0       0       0       0       0       0
  9011 ;;      Totals:         1       0       0       0       0       0
  9012 ;;Total ram usage:        1 bytes
  9013 ;; Hardware stack levels used: 1
  9014 ;; This function calls:
  9015 ;;		Nothing
  9016 ;; This function is called by:
  9017 ;;		_Write_UART
  9018 ;; This function uses a non-reentrant model
  9019 ;;
  9020                           
  9021     0B9F                     _TMR0_ReadTimer:	
  9022                           ;psect for function _TMR0_ReadTimer
  9023                           
  9024                           
  9025                           ;mcc_generated_files/tmr0.c: 82:     uint8_t readVal;;mcc_generated_files/tmr0.c: 84:   
      +                            readVal = TMR0;
  9026                           
  9027                           ;incstack = 0
  9028                           ; Regs used in _TMR0_ReadTimer: [wreg]
  9029     0B9F  0020               	movlb	0	; select bank0
  9030     0BA0  0815               	movf	21,w	;volatile
  9031     0BA1  00F0               	movwf	TMR0_ReadTimer@readVal
  9032                           
  9033                           ;mcc_generated_files/tmr0.c: 86:     return readVal;
  9034     0BA2  0870               	movf	TMR0_ReadTimer@readVal,w
  9035     0BA3  0008               	return
  9036     0BA4                     __end_of_TMR0_ReadTimer:
  9037                           
  9038                           	psect	text56
  9039     0BDF                     __ptext56:	
  9040 ;; *************** function _EUSART_Write *****************
  9041 ;; Defined at:
  9042 ;;		line 162 in file "mcc_generated_files/eusart.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  txData          1    wreg     unsigned char 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  txData          1    0[COMMON] unsigned char 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  1    wreg      void 
  9049 ;; Registers used:
  9050 ;;		wreg
  9051 ;; Tracked objects:
  9052 ;;		On entry : 18/0
  9053 ;;		On exit  : 1F/3
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9056 ;;      Params:         0       0       0       0       0       0
  9057 ;;      Locals:         1       0       0       0       0       0
  9058 ;;      Temps:          0       0       0       0       0       0
  9059 ;;      Totals:         1       0       0       0       0       0
  9060 ;;Total ram usage:        1 bytes
  9061 ;; Hardware stack levels used: 1
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_Write_UART
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069     0BDF                     _EUSART_Write:	
  9070                           ;psect for function _EUSART_Write
  9071                           
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _EUSART_Write: [wreg]
  9075                           ;EUSART_Write@txData stored from wreg
  9076     0BDF  00F0               	movwf	EUSART_Write@txData
  9077     0BE0                     i1l561:	
  9078                           ;mcc_generated_files/eusart.c: 165:     {;mcc_generated_files/eusart.c: 166:     }
  9079                           
  9080                           
  9081                           ;mcc_generated_files/eusart.c: 164:     while(0 == PIR1bits.TXIF)
  9082     0BE0  0020               	movlb	0	; select bank0
  9083     0BE1  1E11               	btfss	17,4	;volatile
  9084     0BE2  2BE0               	goto	i1l561
  9085                           
  9086                           ;mcc_generated_files/eusart.c: 168:     TXREG = txData;
  9087     0BE3  0870               	movf	EUSART_Write@txData,w
  9088     0BE4  0023               	movlb	3	; select bank3
  9089     0BE5  009A               	movwf	26	;volatile
  9090     0BE6  0008               	return
  9091     0BE7                     __end_of_EUSART_Write:
  9092                           
  9093                           	psect	text57
  9094     0F54                     __ptext57:	
  9095 ;; *************** function _EUSART_Receive_ISR *****************
  9096 ;; Defined at:
  9097 ;;		line 173 in file "mcc_generated_files/eusart.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;		None
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  1    wreg      void 
  9104 ;; Registers used:
  9105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 1F/1
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9111 ;;      Params:         0       0       0       0       0       0
  9112 ;;      Locals:         0       0       0       0       0       0
  9113 ;;      Temps:          0       0       0       0       0       0
  9114 ;;      Totals:         0       0       0       0       0       0
  9115 ;;Total ram usage:        0 bytes
  9116 ;; Hardware stack levels used: 1
  9117 ;; Hardware stack levels required when called: 2
  9118 ;; This function calls:
  9119 ;;		NULL
  9120 ;;		_EUSART_DefaultErrorHandler
  9121 ;;		_EUSART_DefaultFramingErrorHandler
  9122 ;;		_EUSART_DefaultOverrunErrorHandler
  9123 ;;		_EUSART_RxDataHandler
  9124 ;; This function is called by:
  9125 ;;		_EUSART_Initialize
  9126 ;;		_Read_UART
  9127 ;;		_INTERRUPT_InterruptManager
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131     0F54                     _EUSART_Receive_ISR:	
  9132                           ;psect for function _EUSART_Receive_ISR
  9133                           
  9134                           
  9135                           ;mcc_generated_files/eusart.c: 176:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  9136                           
  9137                           ;incstack = 0
  9138                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9139     0F54  0020               	movlb	0	; select bank0
  9140     0F55  0868               	movf	_eusartRxHead,w	;volatile
  9141     0F56  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9142     0F57  0086               	movwf	6
  9143     0F58  0187               	clrf	7
  9144     0F59  0181               	clrf	1
  9145                           
  9146                           ;mcc_generated_files/eusart.c: 178:     if(RCSTAbits.FERR){
  9147     0F5A  0023               	movlb	3	; select bank3
  9148     0F5B  1D1D               	btfss	29,2	;volatile
  9149     0F5C  2F69               	goto	i1l3626
  9150                           
  9151                           ;mcc_generated_files/eusart.c: 179:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  9152     0F5D  0020               	movlb	0	; select bank0
  9153     0F5E  0868               	movf	_eusartRxHead,w	;volatile
  9154     0F5F  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9155     0F60  0086               	movwf	6
  9156     0F61  0187               	clrf	7
  9157     0F62  1481               	bsf	1,1
  9158                           
  9159                           ;mcc_generated_files/eusart.c: 180:         EUSART_FramingErrorHandler();
  9160     0F63  0021               	movlb	1	; select bank1
  9161     0F64  0860               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  9162     0F65  008A               	movwf	10
  9163     0F66  085F               	movf	_EUSART_FramingErrorHandler^(0+128),w
  9164     0F67  000A               	callw
  9165     0F68  318F               	pagesel	$
  9166     0F69                     i1l3626:
  9167                           
  9168                           ;mcc_generated_files/eusart.c: 183:     if(RCSTAbits.OERR){
  9169     0F69  0023               	movlb	3	; select bank3
  9170     0F6A  1C9D               	btfss	29,1	;volatile
  9171     0F6B  2F78               	goto	i1l3632
  9172                           
  9173                           ;mcc_generated_files/eusart.c: 184:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  9174     0F6C  0020               	movlb	0	; select bank0
  9175     0F6D  0868               	movf	_eusartRxHead,w	;volatile
  9176     0F6E  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9177     0F6F  0086               	movwf	6
  9178     0F70  0187               	clrf	7
  9179     0F71  1501               	bsf	1,2
  9180                           
  9181                           ;mcc_generated_files/eusart.c: 185:         EUSART_OverrunErrorHandler();
  9182     0F72  0021               	movlb	1	; select bank1
  9183     0F73  085E               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  9184     0F74  008A               	movwf	10
  9185     0F75  085D               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  9186     0F76  000A               	callw
  9187     0F77  318F               	pagesel	$
  9188     0F78                     i1l3632:
  9189                           
  9190                           ;mcc_generated_files/eusart.c: 188:     if(eusartRxStatusBuffer[eusartRxHead].status){
  9191     0F78  0020               	movlb	0	; select bank0
  9192     0F79  0868               	movf	_eusartRxHead,w	;volatile
  9193     0F7A  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9194     0F7B  0086               	movwf	6
  9195     0F7C  0187               	clrf	7
  9196     0F7D  0801               	movf	1,w
  9197     0F7E  1903               	btfsc	3,2
  9198     0F7F  2F87               	goto	i1l3636
  9199                           
  9200                           ;mcc_generated_files/eusart.c: 189:         EUSART_ErrorHandler();
  9201     0F80  0021               	movlb	1	; select bank1
  9202     0F81  085C               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  9203     0F82  008A               	movwf	10
  9204     0F83  085B               	movf	_EUSART_ErrorHandler^(0+128),w
  9205     0F84  000A               	callw
  9206     0F85  318F               	pagesel	$
  9207                           
  9208                           ;mcc_generated_files/eusart.c: 190:     } else {
  9209     0F86  0008               	return
  9210     0F87                     i1l3636:
  9211                           
  9212                           ;mcc_generated_files/eusart.c: 191:         EUSART_RxDataHandler();
  9213     0F87  318D  2510         	fcall	_EUSART_RxDataHandler
  9214     0F89  0008               	return
  9215     0F8A                     __end_of_EUSART_Receive_ISR:
  9216                           
  9217                           	psect	text58
  9218     06CA                     __ptext58:	
  9219 ;; *************** function _Read_UART *****************
  9220 ;; Defined at:
  9221 ;;		line 94 in file "main.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;		None
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;  dest            2   12[BANK0 ] int 
  9226 ;;  ori             2   10[BANK0 ] int 
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 1F/1
  9233 ;;		On exit  : 1F/1
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9236 ;;      Params:         0       0       0       0       0       0
  9237 ;;      Locals:         0       4       0       0       0       0
  9238 ;;      Temps:          1       0       0       0       0       0
  9239 ;;      Totals:         1       4       0       0       0       0
  9240 ;;Total ram usage:        5 bytes
  9241 ;; Hardware stack levels used: 1
  9242 ;; Hardware stack levels required when called: 3
  9243 ;; This function calls:
  9244 ;;		_EUSART_Read
  9245 ;;		_EUSART_Receive_ISR
  9246 ;;		_New_request
  9247 ;; This function is called by:
  9248 ;;		_main
  9249 ;;		_INTERRUPT_InterruptManager
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253     06CA                     _Read_UART:	
  9254                           ;psect for function _Read_UART
  9255                           
  9256                           
  9257                           ;main.c: 95:     EUSART_Receive_ISR();
  9258                           
  9259                           ;incstack = 0
  9260                           ; Regs used in _Read_UART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9261     06CA  318F  2754  3186   	fcall	_EUSART_Receive_ISR
  9262                           
  9263                           ;main.c: 96:     buffer[buffer_count] = EUSART_Read();
  9264     06CD  318D  25E3  3186   	fcall	_EUSART_Read
  9265     06D0  00FC               	movwf	??_Read_UART
  9266     06D1  0838               	movf	_buffer_count^(0+128),w
  9267     06D2  3E20               	addlw	(low (_buffer| (0+256)))& (0+255)
  9268     06D3  0086               	movwf	6
  9269     06D4  3001               	movlw	1	; select bank2/3
  9270     06D5  0087               	movwf	7
  9271     06D6  087C               	movf	??_Read_UART,w
  9272     06D7  0081               	movwf	1
  9273                           
  9274                           ;main.c: 97:     if(buffer[buffer_count] =='\r'){
  9275     06D8  0838               	movf	_buffer_count^(0+128),w
  9276     06D9  3E20               	addlw	(low (_buffer| (0+256)))& (0+255)
  9277     06DA  0086               	movwf	6
  9278     06DB  3001               	movlw	1	; select bank2/3
  9279     06DC  0087               	movwf	7
  9280     06DD  300D               	movlw	13
  9281     06DE  0601               	xorwf	1,w
  9282     06DF  1D03               	btfss	3,2
  9283     06E0  2F0A               	goto	i1l3860
  9284                           
  9285                           ;main.c: 98:         __nop();
  9286     06E1  0000               	nop
  9287                           
  9288                           ;main.c: 99:         int ori = buffer[0] - '0';
  9289     06E2  0022               	movlb	2	; select bank2
  9290     06E3  0820               	movf	_buffer^(0+256),w
  9291     06E4  3ED0               	addlw	208
  9292     06E5  0020               	movlb	0	; select bank0
  9293     06E6  00AA               	movwf	Read_UART@ori
  9294     06E7  30FF               	movlw	255
  9295     06E8  1803               	skipnc
  9296     06E9  3000               	movlw	0
  9297     06EA  00AB               	movwf	Read_UART@ori+1
  9298                           
  9299                           ;main.c: 100:         int dest = buffer[1] - '0';
  9300     06EB  0022               	movlb	2	; select bank2
  9301     06EC  0821               	movf	(_buffer^(0+256)+1),w
  9302     06ED  3ED0               	addlw	208
  9303     06EE  0020               	movlb	0	; select bank0
  9304     06EF  00AC               	movwf	Read_UART@dest
  9305     06F0  30FF               	movlw	255
  9306     06F1  1803               	skipnc
  9307     06F2  3000               	movlw	0
  9308     06F3  00AD               	movwf	Read_UART@dest+1
  9309                           
  9310                           ;main.c: 101:         ori--;
  9311     06F4  30FF               	movlw	255
  9312     06F5  07AA               	addwf	Read_UART@ori,f
  9313     06F6  30FF               	movlw	255
  9314     06F7  3DAB               	addwfc	Read_UART@ori+1,f
  9315                           
  9316                           ;main.c: 102:         dest--;
  9317     06F8  30FF               	movlw	255
  9318     06F9  07AC               	addwf	Read_UART@dest,f
  9319     06FA  30FF               	movlw	255
  9320     06FB  3DAD               	addwfc	Read_UART@dest+1,f
  9321                           
  9322                           ;main.c: 103:         New_request(ori,dest);
  9323     06FC  082B               	movf	Read_UART@ori+1,w
  9324     06FD  00F7               	movwf	New_request@origin+1
  9325     06FE  082A               	movf	Read_UART@ori,w
  9326     06FF  00F6               	movwf	New_request@origin
  9327     0700  082D               	movf	Read_UART@dest+1,w
  9328     0701  00F9               	movwf	New_request@dest+1
  9329     0702  082C               	movf	Read_UART@dest,w
  9330     0703  00F8               	movwf	New_request@dest
  9331     0704  3181  21E9         	fcall	_New_request
  9332                           
  9333                           ;main.c: 104:         buffer_count = 0;
  9334     0706  0021               	movlb	1	; select bank1
  9335     0707  01B8               	clrf	_buffer_count^(0+128)
  9336     0708  01B9               	clrf	(_buffer_count+1)^(0+128)
  9337     0709  0008               	return
  9338     070A                     i1l3860:
  9339                           
  9340                           ;main.c: 108:     buffer_count++;
  9341     070A  3001               	movlw	1
  9342     070B  07B8               	addwf	_buffer_count^(0+128),f
  9343     070C  3000               	movlw	0
  9344     070D  3DB9               	addwfc	(_buffer_count+1)^(0+128),f
  9345     070E  0008               	return
  9346     070F                     __end_of_Read_UART:
  9347                           
  9348                           	psect	text59
  9349     01E9                     __ptext59:	
  9350 ;; *************** function _New_request *****************
  9351 ;; Defined at:
  9352 ;;		line 44 in file "main.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;  origin          2    6[COMMON] int 
  9355 ;;  dest            2    8[COMMON] int 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  i               2    6[BANK0 ] int 
  9358 ;;  i               2    4[BANK0 ] int 
  9359 ;;  i               2    2[BANK0 ] int 
  9360 ;;  i               2    0[BANK0 ] int 
  9361 ;;  index_          2    8[BANK0 ] int 
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      void 
  9364 ;; Registers used:
  9365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9366 ;; Tracked objects:
  9367 ;;		On entry : 1F/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9371 ;;      Params:         4       0       0       0       0       0
  9372 ;;      Locals:         0      10       0       0       0       0
  9373 ;;      Temps:          2       0       0       0       0       0
  9374 ;;      Totals:         6      10       0       0       0       0
  9375 ;;Total ram usage:       16 bytes
  9376 ;; Hardware stack levels used: 1
  9377 ;; Hardware stack levels required when called: 1
  9378 ;; This function calls:
  9379 ;;		___awmod
  9380 ;; This function is called by:
  9381 ;;		_Read_UART
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385     01E9                     _New_request:	
  9386                           ;psect for function _New_request
  9387                           
  9388                           
  9389                           ;main.c: 46:   if(origin == dest){return;}
  9390                           
  9391                           ;incstack = 0
  9392                           ; Regs used in _New_request: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9393     01E9  0879               	movf	New_request@dest+1,w
  9394     01EA  0677               	xorwf	New_request@origin+1,w
  9395     01EB  1D03               	skipz
  9396     01EC  29EF               	goto	u220_25
  9397     01ED  0878               	movf	New_request@dest,w
  9398     01EE  0676               	xorwf	New_request@origin,w
  9399     01EF                     u220_25:
  9400     01EF  1903               	btfsc	3,2
  9401     01F0  0008               	return
  9402                           
  9403                           ;main.c: 47:   int index_;;main.c: 48:   if(origin < dest){
  9404     01F1  0877               	movf	New_request@origin+1,w
  9405     01F2  3A80               	xorlw	128
  9406     01F3  00FA               	movwf	??_New_request
  9407     01F4  0879               	movf	New_request@dest+1,w
  9408     01F5  3A80               	xorlw	128
  9409     01F6  027A               	subwf	??_New_request,w
  9410     01F7  1D03               	skipz
  9411     01F8  29FB               	goto	u221_25
  9412     01F9  0878               	movf	New_request@dest,w
  9413     01FA  0276               	subwf	New_request@origin,w
  9414     01FB                     u221_25:
  9415     01FB  1803               	skipnc
  9416     01FC  2A82               	goto	i1l3708
  9417                           
  9418                           ;main.c: 49:       index_ = index + 1;
  9419     01FD  0020               	movlb	0	; select bank0
  9420     01FE  086F               	movf	_index,w
  9421     01FF  3E01               	addlw	1
  9422     0200  00A8               	movwf	New_request@index_
  9423     0201  3000               	movlw	0
  9424     0202  1803               	skipnc
  9425     0203  3001               	movlw	1
  9426     0204  00A9               	movwf	New_request@index_+1
  9427                           
  9428                           ;main.c: 50:       for(int i=0; i<6; i++){
  9429     0205  01A0               	clrf	New_request@i
  9430     0206  01A1               	clrf	New_request@i+1
  9431     0207                     i1l3684:
  9432                           
  9433                           ;main.c: 51:           index_ = index_ % 6;
  9434     0207  3006               	movlw	6
  9435     0208  00F0               	movwf	___awmod@divisor
  9436     0209  3000               	movlw	0
  9437     020A  00F1               	movwf	___awmod@divisor+1
  9438     020B  0020               	movlb	0	; select bank0
  9439     020C  0829               	movf	New_request@index_+1,w
  9440     020D  00F3               	movwf	___awmod@dividend+1
  9441     020E  0828               	movf	New_request@index_,w
  9442     020F  00F2               	movwf	___awmod@dividend
  9443     0210  3187  270F  3181   	fcall	___awmod
  9444     0213  0871               	movf	?___awmod+1,w
  9445     0214  00A9               	movwf	New_request@index_+1
  9446     0215  0870               	movf	?___awmod,w
  9447     0216  00A8               	movwf	New_request@index_
  9448                           
  9449                           ;main.c: 52:           if(FLOORS[index_] == origin){
  9450     0217  3022               	movlw	low _FLOORS
  9451     0218  0728               	addwf	New_request@index_,w
  9452     0219  0084               	movwf	4
  9453     021A  3008               	movlw	high _FLOORS
  9454     021B  3D29               	addwfc	New_request@index_+1,w
  9455     021C  3880               	iorlw	128
  9456     021D  0085               	movwf	5
  9457     021E  0800               	movf	0,w	;code access
  9458     021F  00FA               	movwf	??_New_request
  9459     0220  01FB               	clrf	??_New_request+1
  9460     0221  0877               	movf	New_request@origin+1,w
  9461     0222  067B               	xorwf	??_New_request+1,w
  9462     0223  1D03               	skipz
  9463     0224  2A27               	goto	u222_25
  9464     0225  0876               	movf	New_request@origin,w
  9465     0226  067A               	xorwf	??_New_request,w
  9466     0227                     u222_25:
  9467     0227  1D03               	skipz
  9468     0228  2A30               	goto	i1l3690
  9469                           
  9470                           ;main.c: 53:               route[index_]=1;
  9471     0229  0828               	movf	New_request@index_,w
  9472     022A  3EB0               	addlw	(low (_route| 0))& (0+255)
  9473     022B  0086               	movwf	6
  9474     022C  0187               	clrf	7
  9475     022D  3001               	movlw	1
  9476     022E  0081               	movwf	1
  9477                           
  9478                           ;main.c: 54:               break;
  9479     022F  2A43               	goto	i1l3692
  9480     0230                     i1l3690:
  9481                           
  9482                           ;main.c: 56:           index_++;
  9483     0230  3001               	movlw	1
  9484     0231  07A8               	addwf	New_request@index_,f
  9485     0232  3000               	movlw	0
  9486     0233  3DA9               	addwfc	New_request@index_+1,f
  9487                           
  9488                           ;main.c: 57:         }
  9489     0234  3001               	movlw	1
  9490     0235  07A0               	addwf	New_request@i,f
  9491     0236  3000               	movlw	0
  9492     0237  3DA1               	addwfc	New_request@i+1,f
  9493     0238  0821               	movf	New_request@i+1,w
  9494     0239  3A80               	xorlw	128
  9495     023A  00FA               	movwf	??_New_request
  9496     023B  3080               	movlw	128
  9497     023C  027A               	subwf	??_New_request,w
  9498     023D  1D03               	skipz
  9499     023E  2A41               	goto	u223_25
  9500     023F  3006               	movlw	6
  9501     0240  0220               	subwf	New_request@i,w
  9502     0241                     u223_25:
  9503     0241  1C03               	skipc
  9504     0242  2A07               	goto	i1l3684
  9505     0243                     i1l3692:
  9506                           
  9507                           ;main.c: 58:       for(int i=0; i<6; i++){
  9508     0243  0020               	movlb	0	; select bank0
  9509     0244  01A2               	clrf	New_request@i_1562
  9510     0245  01A3               	clrf	New_request@i_1562+1
  9511     0246                     i1l3698:
  9512                           
  9513                           ;main.c: 59:           index_++;
  9514     0246  3001               	movlw	1
  9515     0247  0020               	movlb	0	; select bank0
  9516     0248  07A8               	addwf	New_request@index_,f
  9517     0249  3000               	movlw	0
  9518     024A  3DA9               	addwfc	New_request@index_+1,f
  9519                           
  9520                           ;main.c: 60:           index_ = index_ % 6;
  9521     024B  3006               	movlw	6
  9522     024C  00F0               	movwf	___awmod@divisor
  9523     024D  3000               	movlw	0
  9524     024E  00F1               	movwf	___awmod@divisor+1
  9525     024F  0829               	movf	New_request@index_+1,w
  9526     0250  00F3               	movwf	___awmod@dividend+1
  9527     0251  0828               	movf	New_request@index_,w
  9528     0252  00F2               	movwf	___awmod@dividend
  9529     0253  3187  270F  3181   	fcall	___awmod
  9530     0256  0871               	movf	?___awmod+1,w
  9531     0257  00A9               	movwf	New_request@index_+1
  9532     0258  0870               	movf	?___awmod,w
  9533     0259  00A8               	movwf	New_request@index_
  9534                           
  9535                           ;main.c: 61:           if(FLOORS[index_]== dest)
  9536     025A  3022               	movlw	low _FLOORS
  9537     025B  0728               	addwf	New_request@index_,w
  9538     025C  0084               	movwf	4
  9539     025D  3008               	movlw	high _FLOORS
  9540     025E  3D29               	addwfc	New_request@index_+1,w
  9541     025F  3880               	iorlw	128
  9542     0260  0085               	movwf	5
  9543     0261  0800               	movf	0,w	;code access
  9544     0262  00FA               	movwf	??_New_request
  9545     0263  01FB               	clrf	??_New_request+1
  9546     0264  0879               	movf	New_request@dest+1,w
  9547     0265  067B               	xorwf	??_New_request+1,w
  9548     0266  1D03               	skipz
  9549     0267  2A6A               	goto	u224_25
  9550     0268  0878               	movf	New_request@dest,w
  9551     0269  067A               	xorwf	??_New_request,w
  9552     026A                     u224_25:
  9553     026A  1D03               	skipz
  9554     026B  2A73               	goto	i1l3706
  9555                           
  9556                           ;main.c: 62:             {;main.c: 63:               route[index_] = 1;
  9557     026C  0828               	movf	New_request@index_,w
  9558     026D  3EB0               	addlw	(low (_route| 0))& (0+255)
  9559     026E  0086               	movwf	6
  9560     026F  0187               	clrf	7
  9561     0270  3001               	movlw	1
  9562     0271  0081               	movwf	1
  9563                           
  9564                           ;main.c: 64:               break;
  9565     0272  2A82               	goto	i1l3708
  9566     0273                     i1l3706:
  9567                           
  9568                           ;main.c: 66:         }
  9569     0273  3001               	movlw	1
  9570     0274  07A2               	addwf	New_request@i_1562,f
  9571     0275  3000               	movlw	0
  9572     0276  3DA3               	addwfc	New_request@i_1562+1,f
  9573     0277  0823               	movf	New_request@i_1562+1,w
  9574     0278  3A80               	xorlw	128
  9575     0279  00FA               	movwf	??_New_request
  9576     027A  3080               	movlw	128
  9577     027B  027A               	subwf	??_New_request,w
  9578     027C  1D03               	skipz
  9579     027D  2A80               	goto	u225_25
  9580     027E  3006               	movlw	6
  9581     027F  0222               	subwf	New_request@i_1562,w
  9582     0280                     u225_25:
  9583     0280  1C03               	skipc
  9584     0281  2A46               	goto	i1l3698
  9585     0282                     i1l3708:
  9586                           
  9587                           ;main.c: 69:     if(origin >= dest){
  9588     0282  0877               	movf	New_request@origin+1,w
  9589     0283  3A80               	xorlw	128
  9590     0284  00FA               	movwf	??_New_request
  9591     0285  0879               	movf	New_request@dest+1,w
  9592     0286  3A80               	xorlw	128
  9593     0287  027A               	subwf	??_New_request,w
  9594     0288  1D03               	skipz
  9595     0289  2A8C               	goto	u226_25
  9596     028A  0878               	movf	New_request@dest,w
  9597     028B  0276               	subwf	New_request@origin,w
  9598     028C                     u226_25:
  9599     028C  1C03               	skipc
  9600     028D  0008               	return
  9601                           
  9602                           ;main.c: 70:       if(index > 3)index_ = index+1;
  9603     028E  3004               	movlw	4
  9604     028F  0020               	movlb	0	; select bank0
  9605     0290  026F               	subwf	_index,w
  9606     0291  1C03               	skipc
  9607     0292  2A9A               	goto	i1l3714
  9608     0293  086F               	movf	_index,w
  9609     0294  3E01               	addlw	1
  9610     0295  00A8               	movwf	New_request@index_
  9611     0296  3000               	movlw	0
  9612     0297  1803               	skipnc
  9613     0298  3001               	movlw	1
  9614     0299  2A9D               	goto	L3
  9615     029A                     i1l3714:
  9616     029A  3003               	movlw	3
  9617     029B  00A8               	movwf	New_request@index_
  9618     029C  3000               	movlw	0
  9619     029D                     L3:
  9620     029D  00A9               	movwf	New_request@index_+1
  9621                           
  9622                           ;main.c: 73:       for(int i=0; i<6; i++){
  9623     029E  01A4               	clrf	New_request@i_1563
  9624     029F  01A5               	clrf	New_request@i_1563+1
  9625     02A0                     i1l3722:
  9626                           
  9627                           ;main.c: 74:           index_ = index_ % 6;
  9628     02A0  3006               	movlw	6
  9629     02A1  00F0               	movwf	___awmod@divisor
  9630     02A2  3000               	movlw	0
  9631     02A3  00F1               	movwf	___awmod@divisor+1
  9632     02A4  0020               	movlb	0	; select bank0
  9633     02A5  0829               	movf	New_request@index_+1,w
  9634     02A6  00F3               	movwf	___awmod@dividend+1
  9635     02A7  0828               	movf	New_request@index_,w
  9636     02A8  00F2               	movwf	___awmod@dividend
  9637     02A9  3187  270F  3181   	fcall	___awmod
  9638     02AC  0871               	movf	?___awmod+1,w
  9639     02AD  00A9               	movwf	New_request@index_+1
  9640     02AE  0870               	movf	?___awmod,w
  9641     02AF  00A8               	movwf	New_request@index_
  9642                           
  9643                           ;main.c: 75:           if(FLOORS[index_] == origin){
  9644     02B0  3022               	movlw	low _FLOORS
  9645     02B1  0728               	addwf	New_request@index_,w
  9646     02B2  0084               	movwf	4
  9647     02B3  3008               	movlw	high _FLOORS
  9648     02B4  3D29               	addwfc	New_request@index_+1,w
  9649     02B5  3880               	iorlw	128
  9650     02B6  0085               	movwf	5
  9651     02B7  0800               	movf	0,w	;code access
  9652     02B8  00FA               	movwf	??_New_request
  9653     02B9  01FB               	clrf	??_New_request+1
  9654     02BA  0877               	movf	New_request@origin+1,w
  9655     02BB  067B               	xorwf	??_New_request+1,w
  9656     02BC  1D03               	skipz
  9657     02BD  2AC0               	goto	u228_25
  9658     02BE  0876               	movf	New_request@origin,w
  9659     02BF  067A               	xorwf	??_New_request,w
  9660     02C0                     u228_25:
  9661     02C0  1D03               	skipz
  9662     02C1  2AC9               	goto	i1l3728
  9663                           
  9664                           ;main.c: 76:               route[index_]=1;
  9665     02C2  0828               	movf	New_request@index_,w
  9666     02C3  3EB0               	addlw	(low (_route| 0))& (0+255)
  9667     02C4  0086               	movwf	6
  9668     02C5  0187               	clrf	7
  9669     02C6  3001               	movlw	1
  9670     02C7  0081               	movwf	1
  9671                           
  9672                           ;main.c: 77:               break;
  9673     02C8  2ADC               	goto	i1l3730
  9674     02C9                     i1l3728:
  9675                           
  9676                           ;main.c: 79:           index_++;
  9677     02C9  3001               	movlw	1
  9678     02CA  07A8               	addwf	New_request@index_,f
  9679     02CB  3000               	movlw	0
  9680     02CC  3DA9               	addwfc	New_request@index_+1,f
  9681                           
  9682                           ;main.c: 80:         }
  9683     02CD  3001               	movlw	1
  9684     02CE  07A4               	addwf	New_request@i_1563,f
  9685     02CF  3000               	movlw	0
  9686     02D0  3DA5               	addwfc	New_request@i_1563+1,f
  9687     02D1  0825               	movf	New_request@i_1563+1,w
  9688     02D2  3A80               	xorlw	128
  9689     02D3  00FA               	movwf	??_New_request
  9690     02D4  3080               	movlw	128
  9691     02D5  027A               	subwf	??_New_request,w
  9692     02D6  1D03               	skipz
  9693     02D7  2ADA               	goto	u229_25
  9694     02D8  3006               	movlw	6
  9695     02D9  0224               	subwf	New_request@i_1563,w
  9696     02DA                     u229_25:
  9697     02DA  1C03               	skipc
  9698     02DB  2AA0               	goto	i1l3722
  9699     02DC                     i1l3730:
  9700                           
  9701                           ;main.c: 81:       for(int i=0; i<6; i++){
  9702     02DC  0020               	movlb	0	; select bank0
  9703     02DD  01A6               	clrf	New_request@i_1564
  9704     02DE  01A7               	clrf	New_request@i_1564+1
  9705     02DF                     i1l3736:
  9706                           
  9707                           ;main.c: 82:           index_++;
  9708     02DF  3001               	movlw	1
  9709     02E0  0020               	movlb	0	; select bank0
  9710     02E1  07A8               	addwf	New_request@index_,f
  9711     02E2  3000               	movlw	0
  9712     02E3  3DA9               	addwfc	New_request@index_+1,f
  9713                           
  9714                           ;main.c: 83:           index_ = index_ % 6;
  9715     02E4  3006               	movlw	6
  9716     02E5  00F0               	movwf	___awmod@divisor
  9717     02E6  3000               	movlw	0
  9718     02E7  00F1               	movwf	___awmod@divisor+1
  9719     02E8  0829               	movf	New_request@index_+1,w
  9720     02E9  00F3               	movwf	___awmod@dividend+1
  9721     02EA  0828               	movf	New_request@index_,w
  9722     02EB  00F2               	movwf	___awmod@dividend
  9723     02EC  3187  270F  3181   	fcall	___awmod
  9724     02EF  0871               	movf	?___awmod+1,w
  9725     02F0  00A9               	movwf	New_request@index_+1
  9726     02F1  0870               	movf	?___awmod,w
  9727     02F2  00A8               	movwf	New_request@index_
  9728                           
  9729                           ;main.c: 84:           if(FLOORS[index_]== dest)
  9730     02F3  3022               	movlw	low _FLOORS
  9731     02F4  0728               	addwf	New_request@index_,w
  9732     02F5  0084               	movwf	4
  9733     02F6  3008               	movlw	high _FLOORS
  9734     02F7  3D29               	addwfc	New_request@index_+1,w
  9735     02F8  3880               	iorlw	128
  9736     02F9  0085               	movwf	5
  9737     02FA  0800               	movf	0,w	;code access
  9738     02FB  00FA               	movwf	??_New_request
  9739     02FC  01FB               	clrf	??_New_request+1
  9740     02FD  0879               	movf	New_request@dest+1,w
  9741     02FE  067B               	xorwf	??_New_request+1,w
  9742     02FF  1D03               	skipz
  9743     0300  2B03               	goto	u230_25
  9744     0301  0878               	movf	New_request@dest,w
  9745     0302  067A               	xorwf	??_New_request,w
  9746     0303                     u230_25:
  9747     0303  1D03               	skipz
  9748     0304  2B0C               	goto	i1l3744
  9749                           
  9750                           ;main.c: 85:             {;main.c: 86:               route[index_] = 1;
  9751     0305  0828               	movf	New_request@index_,w
  9752     0306  3EB0               	addlw	(low (_route| 0))& (0+255)
  9753     0307  0086               	movwf	6
  9754     0308  0187               	clrf	7
  9755     0309  3001               	movlw	1
  9756     030A  0081               	movwf	1
  9757                           
  9758                           ;main.c: 87:               break;
  9759     030B  0008               	return
  9760     030C                     i1l3744:
  9761                           
  9762                           ;main.c: 89:         }
  9763     030C  3001               	movlw	1
  9764     030D  07A6               	addwf	New_request@i_1564,f
  9765     030E  3000               	movlw	0
  9766     030F  3DA7               	addwfc	New_request@i_1564+1,f
  9767     0310  0827               	movf	New_request@i_1564+1,w
  9768     0311  3A80               	xorlw	128
  9769     0312  00FA               	movwf	??_New_request
  9770     0313  3080               	movlw	128
  9771     0314  027A               	subwf	??_New_request,w
  9772     0315  1D03               	skipz
  9773     0316  2B19               	goto	u231_25
  9774     0317  3006               	movlw	6
  9775     0318  0226               	subwf	New_request@i_1564,w
  9776     0319                     u231_25:
  9777     0319  1803               	btfsc	3,0
  9778     031A  0008               	return
  9779     031B  2ADF               	goto	i1l3736
  9780     031C                     __end_of_New_request:
  9781                           
  9782                           	psect	text60
  9783     0B93                     __ptext60:	
  9784 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9785 ;; Defined at:
  9786 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;		None
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;		None
  9791 ;; Return value:  Size  Location     Type
  9792 ;;                  1    wreg      void 
  9793 ;; Registers used:
  9794 ;;		None
  9795 ;; Tracked objects:
  9796 ;;		On entry : 1F/1
  9797 ;;		On exit  : 1F/3
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9800 ;;      Params:         0       0       0       0       0       0
  9801 ;;      Locals:         0       0       0       0       0       0
  9802 ;;      Temps:          0       0       0       0       0       0
  9803 ;;      Totals:         0       0       0       0       0       0
  9804 ;;Total ram usage:        0 bytes
  9805 ;; Hardware stack levels used: 1
  9806 ;; This function calls:
  9807 ;;		Nothing
  9808 ;; This function is called by:
  9809 ;;		_EUSART_Initialize
  9810 ;;		_EUSART_Receive_ISR
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814     0B93                     _EUSART_DefaultOverrunErrorHandler:	
  9815                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9816                           
  9817                           
  9818                           ;mcc_generated_files/eusart.c: 212:     RCSTAbits.CREN = 0;
  9819                           
  9820                           ;incstack = 0
  9821                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9822     0B93  0023               	movlb	3	; select bank3
  9823     0B94  121D               	bcf	29,4	;volatile
  9824                           
  9825                           ;mcc_generated_files/eusart.c: 213:     RCSTAbits.CREN = 1;
  9826     0B95  161D               	bsf	29,4	;volatile
  9827     0B96  0008               	return
  9828     0B97                     __end_of_EUSART_DefaultOverrunErrorHandler:
  9829                           
  9830                           	psect	text61
  9831     0B8E                     __ptext61:	
  9832 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9833 ;; Defined at:
  9834 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		None
  9843 ;; Tracked objects:
  9844 ;;		On entry : 1F/1
  9845 ;;		On exit  : 1F/1
  9846 ;;		Unchanged: 1F/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9848 ;;      Params:         0       0       0       0       0       0
  9849 ;;      Locals:         0       0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0
  9851 ;;      Totals:         0       0       0       0       0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used: 1
  9854 ;; This function calls:
  9855 ;;		Nothing
  9856 ;; This function is called by:
  9857 ;;		_EUSART_Initialize
  9858 ;;		_EUSART_Receive_ISR
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862     0B8E                     _EUSART_DefaultFramingErrorHandler:	
  9863                           ;psect for function _EUSART_DefaultFramingErrorHandler
  9864                           
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  9868     0B8E  0008               	return
  9869     0B8F                     __end_of_EUSART_DefaultFramingErrorHandler:
  9870                           
  9871                           	psect	text62
  9872     0B90                     __ptext62:	
  9873 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9874 ;; Defined at:
  9875 ;;		line 217 in file "mcc_generated_files/eusart.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;		None
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;		None
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  1    wreg      void 
  9882 ;; Registers used:
  9883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9884 ;; Tracked objects:
  9885 ;;		On entry : 1F/1
  9886 ;;		On exit  : 1F/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9889 ;;      Params:         0       0       0       0       0       0
  9890 ;;      Locals:         0       0       0       0       0       0
  9891 ;;      Temps:          0       0       0       0       0       0
  9892 ;;      Totals:         0       0       0       0       0       0
  9893 ;;Total ram usage:        0 bytes
  9894 ;; Hardware stack levels used: 1
  9895 ;; Hardware stack levels required when called: 1
  9896 ;; This function calls:
  9897 ;;		_EUSART_RxDataHandler
  9898 ;; This function is called by:
  9899 ;;		_EUSART_Initialize
  9900 ;;		_EUSART_Receive_ISR
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904     0B90                     _EUSART_DefaultErrorHandler:	
  9905                           ;psect for function _EUSART_DefaultErrorHandler
  9906                           
  9907                           
  9908                           ;mcc_generated_files/eusart.c: 218:     EUSART_RxDataHandler();
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9912     0B90  318D  2510         	fcall	_EUSART_RxDataHandler
  9913     0B92  0008               	return
  9914     0B93                     __end_of_EUSART_DefaultErrorHandler:
  9915                           
  9916                           	psect	text63
  9917     0D10                     __ptext63:	
  9918 ;; *************** function _EUSART_RxDataHandler *****************
  9919 ;; Defined at:
  9920 ;;		line 197 in file "mcc_generated_files/eusart.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;		None
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  1    wreg      void 
  9927 ;; Registers used:
  9928 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9929 ;; Tracked objects:
  9930 ;;		On entry : 1E/0
  9931 ;;		On exit  : 1F/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9934 ;;      Params:         0       0       0       0       0       0
  9935 ;;      Locals:         0       0       0       0       0       0
  9936 ;;      Temps:          0       0       0       0       0       0
  9937 ;;      Totals:         0       0       0       0       0       0
  9938 ;;Total ram usage:        0 bytes
  9939 ;; Hardware stack levels used: 1
  9940 ;; This function calls:
  9941 ;;		Nothing
  9942 ;; This function is called by:
  9943 ;;		_EUSART_Receive_ISR
  9944 ;;		_EUSART_DefaultErrorHandler
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948     0D10                     _EUSART_RxDataHandler:	
  9949                           ;psect for function _EUSART_RxDataHandler
  9950                           
  9951                           
  9952                           ;mcc_generated_files/eusart.c: 199:     eusartRxBuffer[eusartRxHead++] = RCREG;
  9953                           
  9954                           ;incstack = 0
  9955                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  9956     0D10  0020               	movlb	0	; select bank0
  9957     0D11  0868               	movf	_eusartRxHead,w
  9958     0D12  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9959     0D13  0086               	movwf	6
  9960     0D14  0187               	clrf	7
  9961     0D15  0023               	movlb	3	; select bank3
  9962     0D16  0819               	movf	25,w	;volatile
  9963     0D17  0081               	movwf	1
  9964     0D18  3001               	movlw	1
  9965     0D19  0020               	movlb	0	; select bank0
  9966     0D1A  07E8               	addwf	_eusartRxHead,f	;volatile
  9967                           
  9968                           ;mcc_generated_files/eusart.c: 200:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9969     0D1B  3008               	movlw	8
  9970     0D1C  0268               	subwf	_eusartRxHead,w
  9971     0D1D  1803               	btfsc	3,0
  9972                           
  9973                           ;mcc_generated_files/eusart.c: 201:     {;mcc_generated_files/eusart.c: 202:         eus
      +                          artRxHead = 0;
  9974     0D1E  01E8               	clrf	_eusartRxHead	;volatile
  9975                           
  9976                           ;mcc_generated_files/eusart.c: 204:     eusartRxCount++;
  9977     0D1F  3001               	movlw	1
  9978     0D20  07E6               	addwf	_eusartRxCount,f	;volatile
  9979     0D21  0008               	return
  9980     0D22                     __end_of_EUSART_RxDataHandler:
  9981                           
  9982                           	psect	text64
  9983     0DE3                     __ptext64:	
  9984 ;; *************** function _EUSART_Read *****************
  9985 ;; Defined at:
  9986 ;;		line 140 in file "mcc_generated_files/eusart.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  readValue       1    0[COMMON] unsigned char 
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      unsigned char 
  9993 ;; Registers used:
  9994 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/1
  9997 ;;		On exit  : 1F/1
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10000 ;;      Params:         0       0       0       0       0       0
 10001 ;;      Locals:         1       0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0       0
 10003 ;;      Totals:         1       0       0       0       0       0
 10004 ;;Total ram usage:        1 bytes
 10005 ;; Hardware stack levels used: 1
 10006 ;; This function calls:
 10007 ;;		Nothing
 10008 ;; This function is called by:
 10009 ;;		_Read_UART
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013     0DE3                     _EUSART_Read:	
 10014                           ;psect for function _EUSART_Read
 10015                           
 10016     0DE3                     i1l3598:	
 10017                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10021                           
 10022                           
 10023                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
 10024     0DE3  0020               	movlb	0	; select bank0
 10025     0DE4  0866               	movf	_eusartRxCount,w	;volatile
 10026     0DE5  1903               	btfsc	3,2
 10027     0DE6  2DE3               	goto	i1l3598
 10028                           
 10029                           ;mcc_generated_files/eusart.c: 148:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 10030     0DE7  0867               	movf	_eusartRxTail,w	;volatile
 10031     0DE8  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10032     0DE9  0086               	movwf	6
 10033     0DEA  0187               	clrf	7
 10034     0DEB  0801               	movf	1,w
 10035     0DEC  00E5               	movwf	_eusartRxLastError	;volatile
 10036                           
 10037                           ;mcc_generated_files/eusart.c: 150:     readValue = eusartRxBuffer[eusartRxTail++];
 10038     0DED  0867               	movf	_eusartRxTail,w
 10039     0DEE  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10040     0DEF  0086               	movwf	6
 10041     0DF0  0187               	clrf	7
 10042     0DF1  0801               	movf	1,w
 10043     0DF2  00F0               	movwf	EUSART_Read@readValue
 10044     0DF3  3001               	movlw	1
 10045     0DF4  07E7               	addwf	_eusartRxTail,f	;volatile
 10046                           
 10047                           ;mcc_generated_files/eusart.c: 151:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10048     0DF5  3008               	movlw	8
 10049     0DF6  0267               	subwf	_eusartRxTail,w
 10050     0DF7  1803               	btfsc	3,0
 10051                           
 10052                           ;mcc_generated_files/eusart.c: 152:     {;mcc_generated_files/eusart.c: 153:         eus
      +                          artRxTail = 0;
 10053     0DF8  01E7               	clrf	_eusartRxTail	;volatile
 10054                           
 10055                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 0;
 10056     0DF9  0021               	movlb	1	; select bank1
 10057     0DFA  1291               	bcf	17,5	;volatile
 10058                           
 10059                           ;mcc_generated_files/eusart.c: 156:     eusartRxCount--;
 10060     0DFB  3001               	movlw	1
 10061     0DFC  0020               	movlb	0	; select bank0
 10062     0DFD  02E6               	subwf	_eusartRxCount,f	;volatile
 10063                           
 10064                           ;mcc_generated_files/eusart.c: 157:     PIE1bits.RCIE = 1;
 10065     0DFE  0021               	movlb	1	; select bank1
 10066     0DFF  1691               	bsf	17,5	;volatile
 10067                           
 10068                           ;mcc_generated_files/eusart.c: 159:     return readValue;
 10069     0E00  0870               	movf	EUSART_Read@readValue,w
 10070     0E01  0008               	return
 10071     0E02                     __end_of_EUSART_Read:
 10072                           
 10073                           	psect	text65
 10074     0C30                     __ptext65:	
 10075 ;; *************** function _PIN_MANAGER_IOC *****************
 10076 ;; Defined at:
 10077 ;;		line 119 in file "mcc_generated_files/pin_manager.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      void 
 10084 ;; Registers used:
 10085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 1F/7
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10091 ;;      Params:         0       0       0       0       0       0
 10092 ;;      Locals:         0       0       0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0
 10094 ;;      Totals:         0       0       0       0       0       0
 10095 ;;Total ram usage:        0 bytes
 10096 ;; Hardware stack levels used: 1
 10097 ;; Hardware stack levels required when called: 5
 10098 ;; This function calls:
 10099 ;;		_IOCBF0_ISR
 10100 ;;		_IOCBF3_ISR
 10101 ;; This function is called by:
 10102 ;;		_INTERRUPT_InterruptManager
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106     0C30                     _PIN_MANAGER_IOC:	
 10107                           ;psect for function _PIN_MANAGER_IOC
 10108                           
 10109                           
 10110                           ;mcc_generated_files/pin_manager.c: 122:     if(IOCBFbits.IOCBF0 == 1)
 10111                           
 10112                           ;incstack = 0
 10113                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10114     0C30  0027               	movlb	7	; select bank7
 10115     0C31  1C16               	btfss	22,0	;volatile
 10116     0C32  2C36               	goto	i1l3794
 10117                           
 10118                           ;mcc_generated_files/pin_manager.c: 123:     {;mcc_generated_files/pin_manager.c: 124:  
      +                                 IOCBF0_ISR();
 10119     0C33  318C  2482  318C   	fcall	_IOCBF0_ISR
 10120     0C36                     i1l3794:
 10121                           
 10122                           ;mcc_generated_files/pin_manager.c: 127:     if(IOCBFbits.IOCBF3 == 1)
 10123     0C36  1D96               	btfss	22,3	;volatile
 10124     0C37  0008               	return
 10125                           
 10126                           ;mcc_generated_files/pin_manager.c: 128:     {;mcc_generated_files/pin_manager.c: 129:  
      +                                 IOCBF3_ISR();
 10127     0C38  318C  248F         	fcall	_IOCBF3_ISR
 10128     0C3A  0008               	return
 10129     0C3B                     __end_of_PIN_MANAGER_IOC:
 10130                           
 10131                           	psect	text66
 10132     0C8F                     __ptext66:	
 10133 ;; *************** function _IOCBF3_ISR *****************
 10134 ;; Defined at:
 10135 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;                  1    wreg      void 
 10142 ;; Registers used:
 10143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10144 ;; Tracked objects:
 10145 ;;		On entry : 1F/7
 10146 ;;		On exit  : 1F/7
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10149 ;;      Params:         0       0       0       0       0       0
 10150 ;;      Locals:         0       0       0       0       0       0
 10151 ;;      Temps:          0       0       0       0       0       0
 10152 ;;      Totals:         0       0       0       0       0       0
 10153 ;;Total ram usage:        0 bytes
 10154 ;; Hardware stack levels used: 1
 10155 ;; Hardware stack levels required when called: 4
 10156 ;; This function calls:
 10157 ;;		NULL
 10158 ;;		_IOCBF3_DefaultInterruptHandler
 10159 ;;		_ISR_Floor2
 10160 ;; This function is called by:
 10161 ;;		_PIN_MANAGER_IOC
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165     0C8F                     _IOCBF3_ISR:	
 10166                           ;psect for function _IOCBF3_ISR
 10167                           
 10168                           
 10169                           ;mcc_generated_files/pin_manager.c: 171:     if(IOCBF3_InterruptHandler)
 10170                           
 10171                           ;incstack = 0
 10172                           ; Regs used in _IOCBF3_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10173     0C8F  0021               	movlb	1	; select bank1
 10174     0C90  0863               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10175     0C91  0464               	iorwf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10176     0C92  1903               	btfsc	3,2
 10177     0C93  2C99               	goto	i1l3544
 10178                           
 10179                           ;mcc_generated_files/pin_manager.c: 172:     {;mcc_generated_files/pin_manager.c: 173:  
      +                                 IOCBF3_InterruptHandler();
 10180     0C94  0864               	movf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10181     0C95  008A               	movwf	10
 10182     0C96  0863               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10183     0C97  000A               	callw
 10184     0C98  318C               	pagesel	$
 10185     0C99                     i1l3544:
 10186                           
 10187                           ;mcc_generated_files/pin_manager.c: 175:     IOCBFbits.IOCBF3 = 0;
 10188     0C99  0027               	movlb	7	; select bank7
 10189     0C9A  1196               	bcf	22,3	;volatile
 10190     0C9B  0008               	return
 10191     0C9C                     __end_of_IOCBF3_ISR:
 10192                           
 10193                           	psect	text67
 10194     0B8D                     __ptext67:	
 10195 ;; *************** function _IOCBF3_DefaultInterruptHandler *****************
 10196 ;; Defined at:
 10197 ;;		line 188 in file "mcc_generated_files/pin_manager.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;		None
 10202 ;; Return value:  Size  Location     Type
 10203 ;;                  1    wreg      void 
 10204 ;; Registers used:
 10205 ;;		None
 10206 ;; Tracked objects:
 10207 ;;		On entry : 1F/1
 10208 ;;		On exit  : 1F/1
 10209 ;;		Unchanged: 1F/0
 10210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10211 ;;      Params:         0       0       0       0       0       0
 10212 ;;      Locals:         0       0       0       0       0       0
 10213 ;;      Temps:          0       0       0       0       0       0
 10214 ;;      Totals:         0       0       0       0       0       0
 10215 ;;Total ram usage:        0 bytes
 10216 ;; Hardware stack levels used: 1
 10217 ;; This function calls:
 10218 ;;		Nothing
 10219 ;; This function is called by:
 10220 ;;		_PIN_MANAGER_Initialize
 10221 ;;		_IOCBF3_ISR
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225     0B8D                     _IOCBF3_DefaultInterruptHandler:	
 10226                           ;psect for function _IOCBF3_DefaultInterruptHandler
 10227                           
 10228                           
 10229                           ;incstack = 0
 10230                           ; Regs used in _IOCBF3_DefaultInterruptHandler: []
 10231     0B8D  0008               	return
 10232     0B8E                     __end_of_IOCBF3_DefaultInterruptHandler:
 10233                           
 10234                           	psect	text68
 10235     0682                     __ptext68:	
 10236 ;; *************** function _ISR_Floor2 *****************
 10237 ;; Defined at:
 10238 ;;		line 360 in file "main.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;		None
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  1    wreg      void 
 10245 ;; Registers used:
 10246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10247 ;; Tracked objects:
 10248 ;;		On entry : 1F/1
 10249 ;;		On exit  : 1F/7
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10252 ;;      Params:         0       0       0       0       0       0
 10253 ;;      Locals:         0       0       0       0       0       0
 10254 ;;      Temps:          2       0       0       0       0       0
 10255 ;;      Totals:         2       0       0       0       0       0
 10256 ;;Total ram usage:        2 bytes
 10257 ;; Hardware stack levels used: 1
 10258 ;; Hardware stack levels required when called: 3
 10259 ;; This function calls:
 10260 ;;		_Next_floor
 10261 ;;		i1_Matrix_update_floor
 10262 ;; This function is called by:
 10263 ;;		_main
 10264 ;;		_IOCBF3_ISR
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268     0682                     _ISR_Floor2:	
 10269                           ;psect for function _ISR_Floor2
 10270                           
 10271                           
 10272                           ;main.c: 361:     IOCBNbits.IOCBN3 = 0;
 10273                           
 10274                           ;incstack = 0
 10275                           ; Regs used in _ISR_Floor2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10276     0682  0027               	movlb	7	; select bank7
 10277     0683  1195               	bcf	21,3	;volatile
 10278                           
 10279                           ;main.c: 362:     IOCBFbits.IOCBF3 = 0;
 10280     0684  1196               	bcf	22,3	;volatile
 10281                           
 10282                           ;main.c: 363:     current_floor = 1;
 10283     0685  3001               	movlw	1
 10284     0686  0020               	movlb	0	; select bank0
 10285     0687  00EE               	movwf	_current_floor
 10286                           
 10287                           ;main.c: 364:     Matrix_update_floor(1);
 10288     0688  3001               	movlw	1
 10289     0689  318E  26A9  3186   	fcall	i1_Matrix_update_floor
 10290                           
 10291                           ;main.c: 365:     Next_floor();
 10292     068C  318F  278A  3186   	fcall	_Next_floor
 10293                           
 10294                           ;main.c: 366:     index++;
 10295     068F  3001               	movlw	1
 10296     0690  07EF               	addwf	_index,f
 10297                           
 10298                           ;main.c: 367:     if(next_floor == current_floor){
 10299     0691  086D               	movf	_next_floor,w
 10300     0692  00FC               	movwf	??_ISR_Floor2
 10301     0693  01FD               	clrf	??_ISR_Floor2+1
 10302     0694  1BFC               	btfsc	??_ISR_Floor2,7
 10303     0695  03FD               	decf	??_ISR_Floor2+1,f
 10304     0696  086E               	movf	_current_floor,w
 10305     0697  067C               	xorwf	??_ISR_Floor2,w
 10306     0698  047D               	iorwf	??_ISR_Floor2+1,w
 10307     0699  1D03               	skipz
 10308     069A  2EC7               	goto	i1l878
 10309                           
 10310                           ;main.c: 368:         stop_2s = 1;
 10311     069B  3001               	movlw	1
 10312     069C  00E9               	movwf	_stop_2s
 10313                           
 10314                           ;main.c: 369:         Next_floor();
 10315     069D  318F  278A  3186   	fcall	_Next_floor
 10316                           
 10317                           ;main.c: 371:         if(next_floor > current_floor){
 10318     06A0  086D               	movf	_next_floor,w
 10319     06A1  00FC               	movwf	??_ISR_Floor2
 10320     06A2  01FD               	clrf	??_ISR_Floor2+1
 10321     06A3  1BFC               	btfsc	??_ISR_Floor2,7
 10322     06A4  03FD               	decf	??_ISR_Floor2+1,f
 10323     06A5  087D               	movf	??_ISR_Floor2+1,w
 10324     06A6  3A80               	xorlw	128
 10325     06A7  3C80               	sublw	128
 10326     06A8  1D03               	skipz
 10327     06A9  2EAC               	goto	u204_25
 10328     06AA  087C               	movf	??_ISR_Floor2,w
 10329     06AB  026E               	subwf	_current_floor,w
 10330     06AC                     u204_25:
 10331     06AC  1803               	skipnc
 10332     06AD  2EBB               	goto	i1l3384
 10333                           
 10334                           ;main.c: 372:             index = current_floor;
 10335     06AE  0020               	movlb	0	; select bank0
 10336     06AF  086E               	movf	_current_floor,w
 10337     06B0  00EF               	movwf	_index
 10338                           
 10339                           ;main.c: 373:             route[index] = 0;
 10340     06B1  086F               	movf	_index,w
 10341     06B2  3EB0               	addlw	(low (_route| 0))& (0+255)
 10342     06B3  0086               	movwf	6
 10343     06B4  0187               	clrf	7
 10344     06B5  0181               	clrf	1
 10345                           
 10346                           ;main.c: 374:             LATAbits.LATA7 = 1;
 10347     06B6  0022               	movlb	2	; select bank2
 10348     06B7  178C               	bsf	12,7	;volatile
 10349                           
 10350                           ;main.c: 375:             IOCBNbits.IOCBN3 = 1;
 10351     06B8  0027               	movlb	7	; select bank7
 10352     06B9  1595               	bsf	21,3	;volatile
 10353     06BA  0008               	return
 10354     06BB                     i1l3384:
 10355                           
 10356                           ;main.c: 379:             index = 6 - current_floor;
 10357     06BB  0020               	movlb	0	; select bank0
 10358     06BC  086E               	movf	_current_floor,w
 10359     06BD  3C06               	sublw	6
 10360     06BE  00EF               	movwf	_index
 10361                           
 10362                           ;main.c: 380:             route[1] = 0;
 10363     06BF  0021               	movlb	1	; select bank1
 10364     06C0  01B1               	clrf	(_route^(0+128)+1)
 10365                           
 10366                           ;main.c: 381:             route[6 - 1] = 0;
 10367     06C1  01B5               	clrf	(_route^(0+128)+5)
 10368                           
 10369                           ;main.c: 382:             LATAbits.LATA7 = 0;
 10370     06C2  0022               	movlb	2	; select bank2
 10371     06C3  138C               	bcf	12,7	;volatile
 10372                           
 10373                           ;main.c: 383:             IOCBNbits.IOCBN3 = 1;
 10374     06C4  0027               	movlb	7	; select bank7
 10375     06C5  1595               	bsf	21,3	;volatile
 10376     06C6  0008               	return
 10377     06C7                     i1l878:	
 10378                           ;main.c: 386:     }
 10379                           
 10380                           
 10381                           ;main.c: 388:     IOCBNbits.IOCBN3 = 1;
 10382     06C7  0027               	movlb	7	; select bank7
 10383     06C8  1595               	bsf	21,3	;volatile
 10384                           
 10385                           ;main.c: 389:     return;
 10386     06C9  0008               	return
 10387     06CA                     __end_of_ISR_Floor2:
 10388                           
 10389                           	psect	text69
 10390     0C82                     __ptext69:	
 10391 ;; *************** function _IOCBF0_ISR *****************
 10392 ;; Defined at:
 10393 ;;		line 136 in file "mcc_generated_files/pin_manager.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;		None
 10396 ;; Auto vars:     Size  Location     Type
 10397 ;;		None
 10398 ;; Return value:  Size  Location     Type
 10399 ;;                  1    wreg      void 
 10400 ;; Registers used:
 10401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : 1F/7
 10404 ;;		On exit  : 1F/7
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10407 ;;      Params:         0       0       0       0       0       0
 10408 ;;      Locals:         0       0       0       0       0       0
 10409 ;;      Temps:          0       0       0       0       0       0
 10410 ;;      Totals:         0       0       0       0       0       0
 10411 ;;Total ram usage:        0 bytes
 10412 ;; Hardware stack levels used: 1
 10413 ;; Hardware stack levels required when called: 4
 10414 ;; This function calls:
 10415 ;;		NULL
 10416 ;;		_IOCBF0_DefaultInterruptHandler
 10417 ;;		_ISR_Floor1
 10418 ;; This function is called by:
 10419 ;;		_PIN_MANAGER_IOC
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423     0C82                     _IOCBF0_ISR:	
 10424                           ;psect for function _IOCBF0_ISR
 10425                           
 10426                           
 10427                           ;mcc_generated_files/pin_manager.c: 141:     if(IOCBF0_InterruptHandler)
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _IOCBF0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10431     0C82  0021               	movlb	1	; select bank1
 10432     0C83  0865               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10433     0C84  0466               	iorwf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10434     0C85  1903               	btfsc	3,2
 10435     0C86  2C8C               	goto	i1l3538
 10436                           
 10437                           ;mcc_generated_files/pin_manager.c: 142:     {;mcc_generated_files/pin_manager.c: 143:  
      +                                 IOCBF0_InterruptHandler();
 10438     0C87  0866               	movf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10439     0C88  008A               	movwf	10
 10440     0C89  0865               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10441     0C8A  000A               	callw
 10442     0C8B  318C               	pagesel	$
 10443     0C8C                     i1l3538:
 10444                           
 10445                           ;mcc_generated_files/pin_manager.c: 145:     IOCBFbits.IOCBF0 = 0;
 10446     0C8C  0027               	movlb	7	; select bank7
 10447     0C8D  1016               	bcf	22,0	;volatile
 10448     0C8E  0008               	return
 10449     0C8F                     __end_of_IOCBF0_ISR:
 10450                           
 10451                           	psect	text70
 10452     0B8C                     __ptext70:	
 10453 ;; *************** function _IOCBF0_DefaultInterruptHandler *****************
 10454 ;; Defined at:
 10455 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  1    wreg      void 
 10462 ;; Registers used:
 10463 ;;		None
 10464 ;; Tracked objects:
 10465 ;;		On entry : 1F/1
 10466 ;;		On exit  : 1F/1
 10467 ;;		Unchanged: 1F/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10469 ;;      Params:         0       0       0       0       0       0
 10470 ;;      Locals:         0       0       0       0       0       0
 10471 ;;      Temps:          0       0       0       0       0       0
 10472 ;;      Totals:         0       0       0       0       0       0
 10473 ;;Total ram usage:        0 bytes
 10474 ;; Hardware stack levels used: 1
 10475 ;; This function calls:
 10476 ;;		Nothing
 10477 ;; This function is called by:
 10478 ;;		_PIN_MANAGER_Initialize
 10479 ;;		_IOCBF0_ISR
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483     0B8C                     _IOCBF0_DefaultInterruptHandler:	
 10484                           ;psect for function _IOCBF0_DefaultInterruptHandler
 10485                           
 10486                           
 10487                           ;incstack = 0
 10488                           ; Regs used in _IOCBF0_DefaultInterruptHandler: []
 10489     0B8C  0008               	return
 10490     0B8D                     __end_of_IOCBF0_DefaultInterruptHandler:
 10491                           
 10492                           	psect	text71
 10493     0E43                     __ptext71:	
 10494 ;; *************** function _ISR_Floor1 *****************
 10495 ;; Defined at:
 10496 ;;		line 391 in file "main.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 1F/1
 10507 ;;		On exit  : 1F/7
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10510 ;;      Params:         0       0       0       0       0       0
 10511 ;;      Locals:         0       0       0       0       0       0
 10512 ;;      Temps:          2       0       0       0       0       0
 10513 ;;      Totals:         2       0       0       0       0       0
 10514 ;;Total ram usage:        2 bytes
 10515 ;; Hardware stack levels used: 1
 10516 ;; Hardware stack levels required when called: 3
 10517 ;; This function calls:
 10518 ;;		_Next_floor
 10519 ;;		i1_Matrix_update_floor
 10520 ;; This function is called by:
 10521 ;;		_main
 10522 ;;		_IOCBF0_ISR
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526     0E43                     _ISR_Floor1:	
 10527                           ;psect for function _ISR_Floor1
 10528                           
 10529                           
 10530                           ;main.c: 392:     IOCBNbits.IOCBN0 = 0;
 10531                           
 10532                           ;incstack = 0
 10533                           ; Regs used in _ISR_Floor1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10534     0E43  0027               	movlb	7	; select bank7
 10535     0E44  1015               	bcf	21,0	;volatile
 10536                           
 10537                           ;main.c: 393:     IOCBFbits.IOCBF0 = 0;
 10538     0E45  1016               	bcf	22,0	;volatile
 10539                           
 10540                           ;main.c: 395:     current_floor = 0;
 10541     0E46  0020               	movlb	0	; select bank0
 10542     0E47  01EE               	clrf	_current_floor
 10543                           
 10544                           ;main.c: 396:     Matrix_update_floor(0);
 10545     0E48  3000               	movlw	0
 10546     0E49  318E  26A9  318E   	fcall	i1_Matrix_update_floor
 10547                           
 10548                           ;main.c: 397:     Next_floor();
 10549     0E4C  318F  278A  318E   	fcall	_Next_floor
 10550                           
 10551                           ;main.c: 398:     index = 0;
 10552     0E4F  01EF               	clrf	_index
 10553                           
 10554                           ;main.c: 399:     route[0] = 0;
 10555     0E50  0021               	movlb	1	; select bank1
 10556     0E51  01B0               	clrf	_route^(0+128)
 10557                           
 10558                           ;main.c: 400:     LATAbits.LATA7 = 1;
 10559     0E52  0022               	movlb	2	; select bank2
 10560     0E53  178C               	bsf	12,7	;volatile
 10561                           
 10562                           ;main.c: 401:     if(next_floor == current_floor) stop_2s = 1;
 10563     0E54  0020               	movlb	0	; select bank0
 10564     0E55  086D               	movf	_next_floor,w
 10565     0E56  00FC               	movwf	??_ISR_Floor1
 10566     0E57  01FD               	clrf	??_ISR_Floor1+1
 10567     0E58  1BFC               	btfsc	??_ISR_Floor1,7
 10568     0E59  03FD               	decf	??_ISR_Floor1+1,f
 10569     0E5A  086E               	movf	_current_floor,w
 10570     0E5B  067C               	xorwf	??_ISR_Floor1,w
 10571     0E5C  047D               	iorwf	??_ISR_Floor1+1,w
 10572     0E5D  1D03               	skipz
 10573     0E5E  2E61               	goto	i1l884
 10574     0E5F  3001               	movlw	1
 10575     0E60  00E9               	movwf	_stop_2s
 10576     0E61                     i1l884:
 10577                           
 10578                           ;main.c: 403:     IOCBNbits.IOCBN0 = 1;
 10579     0E61  0027               	movlb	7	; select bank7
 10580     0E62  1415               	bsf	21,0	;volatile
 10581                           
 10582                           ;main.c: 404:     return;
 10583     0E63  0008               	return
 10584     0E64                     __end_of_ISR_Floor1:
 10585                           
 10586                           	psect	text72
 10587     0C75                     __ptext72:	
 10588 ;; *************** function _ECCP2_CaptureISR *****************
 10589 ;; Defined at:
 10590 ;;		line 79 in file "mcc_generated_files/eccp2.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;  module          2    2[COMMON] struct CCPR2Reg_tag
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0, pclath, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 1F/0
 10601 ;;		On exit  : 1F/5
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10604 ;;      Params:         0       0       0       0       0       0
 10605 ;;      Locals:         2       0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0
 10607 ;;      Totals:         2       0       0       0       0       0
 10608 ;;Total ram usage:        2 bytes
 10609 ;; Hardware stack levels used: 1
 10610 ;; Hardware stack levels required when called: 1
 10611 ;; This function calls:
 10612 ;;		_ECCP2_CallBack
 10613 ;; This function is called by:
 10614 ;;		_INTERRUPT_InterruptManager
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618     0C75                     _ECCP2_CaptureISR:	
 10619                           ;psect for function _ECCP2_CaptureISR
 10620                           
 10621                           
 10622                           ;mcc_generated_files/eccp2.c: 81:     CCP2_PERIOD_REG_T module;;mcc_generated_files/eccp
      +                          2.c: 84:     PIR2bits.CCP2IF = 0;
 10623                           
 10624                           ;incstack = 0
 10625                           ; Regs used in _ECCP2_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 10626     0C75  1012               	bcf	18,0	;volatile
 10627                           
 10628                           ;mcc_generated_files/eccp2.c: 87:     module.ccpr2l = CCPR2L;
 10629     0C76  0025               	movlb	5	; select bank5
 10630     0C77  0818               	movf	24,w	;volatile
 10631     0C78  00F2               	movwf	ECCP2_CaptureISR@module
 10632                           
 10633                           ;mcc_generated_files/eccp2.c: 88:     module.ccpr2h = CCPR2H;
 10634     0C79  0819               	movf	25,w	;volatile
 10635     0C7A  00F3               	movwf	ECCP2_CaptureISR@module+1
 10636                           
 10637                           ;mcc_generated_files/eccp2.c: 91:     ECCP2_CallBack(module.ccpr2_16Bit);
 10638     0C7B  0873               	movf	ECCP2_CaptureISR@module+1,w
 10639     0C7C  00F1               	movwf	ECCP2_CallBack@capturedValue+1
 10640     0C7D  0872               	movf	ECCP2_CaptureISR@module,w
 10641     0C7E  00F0               	movwf	ECCP2_CallBack@capturedValue
 10642     0C7F  318B  238B         	fcall	_ECCP2_CallBack
 10643     0C81  0008               	return
 10644     0C82                     __end_of_ECCP2_CaptureISR:
 10645                           
 10646                           	psect	text73
 10647     0B8B                     __ptext73:	
 10648 ;; *************** function _ECCP2_CallBack *****************
 10649 ;; Defined at:
 10650 ;;		line 94 in file "mcc_generated_files/eccp2.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;  capturedValu    2    0[COMMON] unsigned short 
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;		None
 10655 ;; Return value:  Size  Location     Type
 10656 ;;                  1    wreg      void 
 10657 ;; Registers used:
 10658 ;;		None
 10659 ;; Tracked objects:
 10660 ;;		On entry : 1F/5
 10661 ;;		On exit  : 1F/5
 10662 ;;		Unchanged: 1E/0
 10663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10664 ;;      Params:         2       0       0       0       0       0
 10665 ;;      Locals:         0       0       0       0       0       0
 10666 ;;      Temps:          0       0       0       0       0       0
 10667 ;;      Totals:         2       0       0       0       0       0
 10668 ;;Total ram usage:        2 bytes
 10669 ;; Hardware stack levels used: 1
 10670 ;; This function calls:
 10671 ;;		Nothing
 10672 ;; This function is called by:
 10673 ;;		_ECCP2_CaptureISR
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677     0B8B                     _ECCP2_CallBack:	
 10678                           ;psect for function _ECCP2_CallBack
 10679                           
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _ECCP2_CallBack: []
 10683     0B8B  0008               	return
 10684     0B8C                     __end_of_ECCP2_CallBack:
 10685                           
 10686                           	psect	text74
 10687     0C00                     __ptext74:	
 10688 ;; *************** function _CMP2_ISR *****************
 10689 ;; Defined at:
 10690 ;;		line 86 in file "mcc_generated_files/cmp2.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      void 
 10697 ;; Registers used:
 10698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 1F/0
 10701 ;;		On exit  : 1F/1
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10704 ;;      Params:         0       0       0       0       0       0
 10705 ;;      Locals:         0       0       0       0       0       0
 10706 ;;      Temps:          0       0       0       0       0       0
 10707 ;;      Totals:         0       0       0       0       0       0
 10708 ;;Total ram usage:        0 bytes
 10709 ;; Hardware stack levels used: 1
 10710 ;; Hardware stack levels required when called: 4
 10711 ;; This function calls:
 10712 ;;		_ISR_Floor4
 10713 ;; This function is called by:
 10714 ;;		_INTERRUPT_InterruptManager
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718     0C00                     _CMP2_ISR:	
 10719                           ;psect for function _CMP2_ISR
 10720                           
 10721                           
 10722                           ;mcc_generated_files/cmp2.c: 88:     PIE2bits.C2IE = 0;
 10723                           
 10724                           ;incstack = 0
 10725                           ; Regs used in _CMP2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10726     0C00  0021               	movlb	1	; select bank1
 10727     0C01  1312               	bcf	18,6	;volatile
 10728                           
 10729                           ;mcc_generated_files/cmp2.c: 89:     PIR2bits.C2IF = 0;
 10730     0C02  0020               	movlb	0	; select bank0
 10731     0C03  1312               	bcf	18,6	;volatile
 10732                           
 10733                           ;mcc_generated_files/cmp2.c: 90:     ISR_Floor4();
 10734     0C04  318D  25C4         	fcall	_ISR_Floor4
 10735                           
 10736                           ;mcc_generated_files/cmp2.c: 91:     PIE2bits.C2IE = 1;
 10737     0C06  0021               	movlb	1	; select bank1
 10738     0C07  1712               	bsf	18,6	;volatile
 10739     0C08  0008               	return
 10740     0C09                     __end_of_CMP2_ISR:
 10741                           
 10742                           	psect	text75
 10743     0DC4                     __ptext75:	
 10744 ;; *************** function _ISR_Floor4 *****************
 10745 ;; Defined at:
 10746 ;;		line 319 in file "main.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;		None
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      void 
 10753 ;; Registers used:
 10754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10755 ;; Tracked objects:
 10756 ;;		On entry : 1F/0
 10757 ;;		On exit  : 1F/2
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10760 ;;      Params:         0       0       0       0       0       0
 10761 ;;      Locals:         0       0       0       0       0       0
 10762 ;;      Temps:          2       0       0       0       0       0
 10763 ;;      Totals:         2       0       0       0       0       0
 10764 ;;Total ram usage:        2 bytes
 10765 ;; Hardware stack levels used: 1
 10766 ;; Hardware stack levels required when called: 3
 10767 ;; This function calls:
 10768 ;;		_Next_floor
 10769 ;;		i1_Matrix_update_floor
 10770 ;; This function is called by:
 10771 ;;		_CMP2_ISR
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775     0DC4                     _ISR_Floor4:	
 10776                           ;psect for function _ISR_Floor4
 10777                           
 10778                           
 10779                           ;main.c: 320:     current_floor = 3;
 10780                           
 10781                           ;incstack = 0
 10782                           ; Regs used in _ISR_Floor4: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10783     0DC4  3003               	movlw	3
 10784     0DC5  00EE               	movwf	_current_floor
 10785                           
 10786                           ;main.c: 321:     Matrix_update_floor(3);
 10787     0DC6  3003               	movlw	3
 10788     0DC7  318E  26A9  318D   	fcall	i1_Matrix_update_floor
 10789                           
 10790                           ;main.c: 322:     Next_floor();
 10791     0DCA  318F  278A  318D   	fcall	_Next_floor
 10792                           
 10793                           ;main.c: 323:     index= 3;
 10794     0DCD  3003               	movlw	3
 10795     0DCE  00EF               	movwf	_index
 10796                           
 10797                           ;main.c: 324:     if(next_floor == current_floor) stop_2s = 1;
 10798     0DCF  086D               	movf	_next_floor,w
 10799     0DD0  00FC               	movwf	??_ISR_Floor4
 10800     0DD1  01FD               	clrf	??_ISR_Floor4+1
 10801     0DD2  1BFC               	btfsc	??_ISR_Floor4,7
 10802     0DD3  03FD               	decf	??_ISR_Floor4+1,f
 10803     0DD4  086E               	movf	_current_floor,w
 10804     0DD5  067C               	xorwf	??_ISR_Floor4,w
 10805     0DD6  047D               	iorwf	??_ISR_Floor4+1,w
 10806     0DD7  1D03               	skipz
 10807     0DD8  2DDB               	goto	i1l3590
 10808     0DD9  3001               	movlw	1
 10809     0DDA  00E9               	movwf	_stop_2s
 10810     0DDB                     i1l3590:
 10811                           
 10812                           ;main.c: 325:     route[index] = 0;
 10813     0DDB  086F               	movf	_index,w
 10814     0DDC  3EB0               	addlw	(low (_route| 0))& (0+255)
 10815     0DDD  0086               	movwf	6
 10816     0DDE  0187               	clrf	7
 10817     0DDF  0181               	clrf	1
 10818                           
 10819                           ;main.c: 326:     LATAbits.LATA7 = 0;
 10820     0DE0  0022               	movlb	2	; select bank2
 10821     0DE1  138C               	bcf	12,7	;volatile
 10822     0DE2  0008               	return
 10823     0DE3                     __end_of_ISR_Floor4:
 10824                           
 10825                           	psect	text76
 10826     0BF7                     __ptext76:	
 10827 ;; *************** function _CMP1_ISR *****************
 10828 ;; Defined at:
 10829 ;;		line 88 in file "mcc_generated_files/cmp1.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;		None
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;		None
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  1    wreg      void 
 10836 ;; Registers used:
 10837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10838 ;; Tracked objects:
 10839 ;;		On entry : 1F/0
 10840 ;;		On exit  : 1F/1
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10843 ;;      Params:         0       0       0       0       0       0
 10844 ;;      Locals:         0       0       0       0       0       0
 10845 ;;      Temps:          0       0       0       0       0       0
 10846 ;;      Totals:         0       0       0       0       0       0
 10847 ;;Total ram usage:        0 bytes
 10848 ;; Hardware stack levels used: 1
 10849 ;; Hardware stack levels required when called: 4
 10850 ;; This function calls:
 10851 ;;		_ISR_Floor3
 10852 ;; This function is called by:
 10853 ;;		_INTERRUPT_InterruptManager
 10854 ;; This function uses a non-reentrant model
 10855 ;;
 10856                           
 10857     0BF7                     _CMP1_ISR:	
 10858                           ;psect for function _CMP1_ISR
 10859                           
 10860                           
 10861                           ;mcc_generated_files/cmp1.c: 90:     PIE2bits.C1IE = 0;
 10862                           
 10863                           ;incstack = 0
 10864                           ; Regs used in _CMP1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10865     0BF7  0021               	movlb	1	; select bank1
 10866     0BF8  1292               	bcf	18,5	;volatile
 10867                           
 10868                           ;mcc_generated_files/cmp1.c: 91:     PIR2bits.C1IF = 0;
 10869     0BF9  0020               	movlb	0	; select bank0
 10870     0BFA  1292               	bcf	18,5	;volatile
 10871                           
 10872                           ;mcc_generated_files/cmp1.c: 92:     ISR_Floor3();
 10873     0BFB  3187  2790         	fcall	_ISR_Floor3
 10874                           
 10875                           ;mcc_generated_files/cmp1.c: 93:     PIE2bits.C1IE = 1;
 10876     0BFD  0021               	movlb	1	; select bank1
 10877     0BFE  1692               	bsf	18,5	;volatile
 10878     0BFF  0008               	return
 10879     0C00                     __end_of_CMP1_ISR:
 10880                           
 10881                           	psect	text77
 10882     0790                     __ptext77:	
 10883 ;; *************** function _ISR_Floor3 *****************
 10884 ;; Defined at:
 10885 ;;		line 330 in file "main.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 1F/0
 10896 ;;		On exit  : 1D/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10899 ;;      Params:         0       0       0       0       0       0
 10900 ;;      Locals:         0       0       0       0       0       0
 10901 ;;      Temps:          2       0       0       0       0       0
 10902 ;;      Totals:         2       0       0       0       0       0
 10903 ;;Total ram usage:        2 bytes
 10904 ;; Hardware stack levels used: 1
 10905 ;; Hardware stack levels required when called: 3
 10906 ;; This function calls:
 10907 ;;		_Next_floor
 10908 ;;		i1_Matrix_update_floor
 10909 ;; This function is called by:
 10910 ;;		_CMP1_ISR
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914     0790                     _ISR_Floor3:	
 10915                           ;psect for function _ISR_Floor3
 10916                           
 10917                           
 10918                           ;main.c: 331:     current_floor = 2;
 10919                           
 10920                           ;incstack = 0
 10921                           ; Regs used in _ISR_Floor3: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10922     0790  3002               	movlw	2
 10923     0791  00EE               	movwf	_current_floor
 10924                           
 10925                           ;main.c: 332:     Matrix_update_floor(2);
 10926     0792  3002               	movlw	2
 10927     0793  318E  26A9  3187   	fcall	i1_Matrix_update_floor
 10928                           
 10929                           ;main.c: 333:     Next_floor();
 10930     0796  318F  278A  3187   	fcall	_Next_floor
 10931                           
 10932                           ;main.c: 334:     index++;
 10933     0799  3001               	movlw	1
 10934     079A  07EF               	addwf	_index,f
 10935                           
 10936                           ;main.c: 335:     if(next_floor == current_floor){
 10937     079B  086D               	movf	_next_floor,w
 10938     079C  00FC               	movwf	??_ISR_Floor3
 10939     079D  01FD               	clrf	??_ISR_Floor3+1
 10940     079E  1BFC               	btfsc	??_ISR_Floor3,7
 10941     079F  03FD               	decf	??_ISR_Floor3+1,f
 10942     07A0  086E               	movf	_current_floor,w
 10943     07A1  067C               	xorwf	??_ISR_Floor3,w
 10944     07A2  047D               	iorwf	??_ISR_Floor3+1,w
 10945     07A3  1D03               	skipz
 10946     07A4  0008               	return
 10947                           
 10948                           ;main.c: 336:         stop_2s = 1;
 10949     07A5  3001               	movlw	1
 10950     07A6  00E9               	movwf	_stop_2s
 10951                           
 10952                           ;main.c: 337:         Next_floor();
 10953     07A7  318F  278A  3187   	fcall	_Next_floor
 10954                           
 10955                           ;main.c: 342:         if(next_floor > current_floor){
 10956     07AA  086D               	movf	_next_floor,w
 10957     07AB  00FC               	movwf	??_ISR_Floor3
 10958     07AC  01FD               	clrf	??_ISR_Floor3+1
 10959     07AD  1BFC               	btfsc	??_ISR_Floor3,7
 10960     07AE  03FD               	decf	??_ISR_Floor3+1,f
 10961     07AF  087D               	movf	??_ISR_Floor3+1,w
 10962     07B0  3A80               	xorlw	128
 10963     07B1  3C80               	sublw	128
 10964     07B2  1D03               	skipz
 10965     07B3  2FB6               	goto	u209_25
 10966     07B4  087C               	movf	??_ISR_Floor3,w
 10967     07B5  026E               	subwf	_current_floor,w
 10968     07B6                     u209_25:
 10969     07B6  1803               	skipnc
 10970     07B7  2FC3               	goto	i1l3570
 10971                           
 10972                           ;main.c: 343:             index = current_floor;
 10973     07B8  0020               	movlb	0	; select bank0
 10974     07B9  086E               	movf	_current_floor,w
 10975     07BA  00EF               	movwf	_index
 10976                           
 10977                           ;main.c: 344:             route[index] = 0;
 10978     07BB  086F               	movf	_index,w
 10979     07BC  3EB0               	addlw	(low (_route| 0))& (0+255)
 10980     07BD  0086               	movwf	6
 10981     07BE  0187               	clrf	7
 10982     07BF  0181               	clrf	1
 10983                           
 10984                           ;main.c: 345:             LATAbits.LATA7 = 1;
 10985     07C0  0022               	movlb	2	; select bank2
 10986     07C1  178C               	bsf	12,7	;volatile
 10987     07C2  0008               	return
 10988     07C3                     i1l3570:
 10989                           
 10990                           ;main.c: 349:             index = 6 - current_floor;
 10991     07C3  0020               	movlb	0	; select bank0
 10992     07C4  086E               	movf	_current_floor,w
 10993     07C5  3C06               	sublw	6
 10994     07C6  00EF               	movwf	_index
 10995                           
 10996                           ;main.c: 350:             route[6 - 2] = 0;
 10997     07C7  0021               	movlb	1	; select bank1
 10998     07C8  01B4               	clrf	(_route^(0+128)+4)
 10999                           
 11000                           ;main.c: 351:             route[2] = 0;
 11001     07C9  01B2               	clrf	(_route^(0+128)+2)
 11002                           
 11003                           ;main.c: 352:             LATAbits.LATA7 = 0;
 11004     07CA  0022               	movlb	2	; select bank2
 11005     07CB  138C               	bcf	12,7	;volatile
 11006     07CC  0008               	return
 11007     07CD                     __end_of_ISR_Floor3:
 11008                           
 11009                           	psect	text78
 11010     0EA9                     __ptext78:	
 11011 ;; *************** function i1_Matrix_update_floor *****************
 11012 ;; Defined at:
 11013 ;;		line 272 in file "main.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;  display_floo    1    wreg     unsigned char 
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  display_floo    1   10[COMMON] unsigned char 
 11018 ;;  data            2    8[COMMON] unsigned char [2]
 11019 ;;  i               1   11[COMMON] unsigned char 
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  1    wreg      void 
 11022 ;; Registers used:
 11023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11024 ;; Tracked objects:
 11025 ;;		On entry : 1F/0
 11026 ;;		On exit  : 1F/2
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11029 ;;      Params:         0       0       0       0       0       0
 11030 ;;      Locals:         4       0       0       0       0       0
 11031 ;;      Temps:          1       0       0       0       0       0
 11032 ;;      Totals:         5       0       0       0       0       0
 11033 ;;Total ram usage:        5 bytes
 11034 ;; Hardware stack levels used: 1
 11035 ;; Hardware stack levels required when called: 2
 11036 ;; This function calls:
 11037 ;;		i1_Tx_spi
 11038 ;; This function is called by:
 11039 ;;		_ISR_Floor4
 11040 ;;		_ISR_Floor3
 11041 ;;		_ISR_Floor2
 11042 ;;		_ISR_Floor1
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046     0EA9                     i1_Matrix_update_floor:	
 11047                           ;psect for function i1_Matrix_update_floor
 11048                           
 11049                           
 11050                           ;incstack = 0
 11051                           ; Regs used in i1_Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11052                           ;i1Matrix_update_floor@display_floor stored from wreg
 11053     0EA9  00FA               	movwf	i1Matrix_update_floor@display_floor
 11054                           
 11055                           ;main.c: 273:     uint8_t data[2];;main.c: 274:     display_floor = display_floor*4;
 11056     0EAA  087A               	movf	i1Matrix_update_floor@display_floor,w
 11057     0EAB  00F7               	movwf	??i1_Matrix_update_floor
 11058     0EAC  3002               	movlw	2
 11059     0EAD                     u191_25:
 11060     0EAD  35F7               	lslf	??i1_Matrix_update_floor,f
 11061     0EAE  0B89               	decfsz	9,f
 11062     0EAF  2EAD               	goto	u191_25
 11063     0EB0  0877               	movf	??i1_Matrix_update_floor,w
 11064     0EB1  00FA               	movwf	i1Matrix_update_floor@display_floor
 11065                           
 11066                           ;main.c: 276:    for(uint8_t i=5;i<=8;i++){
 11067     0EB2  3005               	movlw	5
 11068     0EB3  00FB               	movwf	i1Matrix_update_floor@i
 11069     0EB4                     i1l3188:
 11070                           
 11071                           ;main.c: 277:         data[0] = i;
 11072     0EB4  087B               	movf	i1Matrix_update_floor@i,w
 11073     0EB5  00F8               	movwf	i1Matrix_update_floor@data
 11074                           
 11075                           ;main.c: 278:         data[1] = MATRIX_FLOOR[display_floor];
 11076     0EB6  087A               	movf	i1Matrix_update_floor@display_floor,w
 11077     0EB7  3EFD               	addlw	low (_MATRIX_FLOOR| (0+32768))
 11078     0EB8  0084               	movwf	4
 11079     0EB9  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
 11080     0EBA  1803               	skipnc
 11081     0EBB  3E01               	addlw	1
 11082     0EBC  0085               	movwf	5
 11083     0EBD  0800               	movf	0,w	;code access
 11084     0EBE  00F9               	movwf	i1Matrix_update_floor@data+1
 11085                           
 11086                           ;main.c: 279:         Tx_spi(data, 2);
 11087     0EBF  3078               	movlw	(low (i1Matrix_update_floor@data| 0))& (0+255)
 11088     0EC0  00F4               	movwf	i1Tx_spi@data
 11089     0EC1  3002               	movlw	2
 11090     0EC2  00F5               	movwf	i1Tx_spi@dataSize
 11091     0EC3  3000               	movlw	0
 11092     0EC4  00F6               	movwf	i1Tx_spi@dataSize+1
 11093     0EC5  318C  24D2  318E   	fcall	i1_Tx_spi
 11094                           
 11095                           ;main.c: 280:         display_floor++;
 11096     0EC8  3001               	movlw	1
 11097     0EC9  07FA               	addwf	i1Matrix_update_floor@display_floor,f
 11098                           
 11099                           ;main.c: 281:     }
 11100     0ECA  3001               	movlw	1
 11101     0ECB  07FB               	addwf	i1Matrix_update_floor@i,f
 11102     0ECC  3009               	movlw	9
 11103     0ECD  027B               	subwf	i1Matrix_update_floor@i,w
 11104     0ECE  1803               	btfsc	3,0
 11105     0ECF  0008               	return
 11106     0ED0  2EB4               	goto	i1l3188
 11107     0ED1                     __end_ofi1_Matrix_update_floor:
 11108                           
 11109                           	psect	text79
 11110     0CD2                     __ptext79:	
 11111 ;; *************** function i1_Tx_spi *****************
 11112 ;; Defined at:
 11113 ;;		line 248 in file "main.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;  data            1    4[COMMON] PTR unsigned char 
 11116 ;;		 -> i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
 11117 ;;  dataSize        2    5[COMMON] unsigned int 
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11124 ;; Tracked objects:
 11125 ;;		On entry : 1D/0
 11126 ;;		On exit  : 1F/2
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11129 ;;      Params:         3       0       0       0       0       0
 11130 ;;      Locals:         0       0       0       0       0       0
 11131 ;;      Temps:          0       0       0       0       0       0
 11132 ;;      Totals:         3       0       0       0       0       0
 11133 ;;Total ram usage:        3 bytes
 11134 ;; Hardware stack levels used: 1
 11135 ;; Hardware stack levels required when called: 1
 11136 ;; This function calls:
 11137 ;;		i1_SPI1_ExchangeBlock
 11138 ;; This function is called by:
 11139 ;;		i1_Matrix_update_floor
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143     0CD2                     i1_Tx_spi:	
 11144                           ;psect for function i1_Tx_spi
 11145                           
 11146                           
 11147                           ;main.c: 249:     LATBbits.LATB1 = 0;
 11148                           
 11149                           ;incstack = 0
 11150                           ; Regs used in i1_Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11151     0CD2  0022               	movlb	2	; select bank2
 11152     0CD3  108D               	bcf	13,1	;volatile
 11153                           
 11154                           ;main.c: 250:     __nop();
 11155     0CD4  0000               	nop
 11156                           
 11157                           ;main.c: 251:     __nop();
 11158     0CD5  0000               	nop
 11159                           
 11160                           ;main.c: 252:     SPI1_ExchangeBlock(data,dataSize);
 11161     0CD6  0874               	movf	i1Tx_spi@data,w
 11162     0CD7  00F0               	movwf	i1SPI1_ExchangeBlock@block
 11163     0CD8  0876               	movf	i1Tx_spi@dataSize+1,w
 11164     0CD9  00F2               	movwf	i1SPI1_ExchangeBlock@blockSize+1
 11165     0CDA  0875               	movf	i1Tx_spi@dataSize,w
 11166     0CDB  00F1               	movwf	i1SPI1_ExchangeBlock@blockSize
 11167     0CDC  318E  2622         	fcall	i1_SPI1_ExchangeBlock
 11168                           
 11169                           ;main.c: 253:     LATBbits.LATB1 = 1;
 11170     0CDE  0022               	movlb	2	; select bank2
 11171     0CDF  148D               	bsf	13,1	;volatile
 11172     0CE0  0008               	return
 11173     0CE1                     __end_ofi1_Tx_spi:
 11174                           
 11175                           	psect	text80
 11176     0E22                     __ptext80:	
 11177 ;; *************** function i1_SPI1_ExchangeBlock *****************
 11178 ;; Defined at:
 11179 ;;		line 100 in file "mcc_generated_files/spi1.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  block           1    0[COMMON] PTR void 
 11182 ;;		 -> i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
 11183 ;;  blockSize       2    1[COMMON] unsigned int 
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;  data            1    3[COMMON] PTR unsigned char 
 11186 ;;		 -> i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  1    wreg      void 
 11189 ;; Registers used:
 11190 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11196 ;;      Params:         3       0       0       0       0       0
 11197 ;;      Locals:         1       0       0       0       0       0
 11198 ;;      Temps:          0       0       0       0       0       0
 11199 ;;      Totals:         4       0       0       0       0       0
 11200 ;;Total ram usage:        4 bytes
 11201 ;; Hardware stack levels used: 1
 11202 ;; This function calls:
 11203 ;;		Nothing
 11204 ;; This function is called by:
 11205 ;;		i1_Tx_spi
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209     0E22                     i1_SPI1_ExchangeBlock:	
 11210                           ;psect for function i1_SPI1_ExchangeBlock
 11211                           
 11212                           
 11213                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
 11214                           
 11215                           ;incstack = 0
 11216                           ; Regs used in i1_SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
 11217     0E22  0870               	movf	i1SPI1_ExchangeBlock@block,w
 11218     0E23  00F3               	movwf	i1SPI1_ExchangeBlock@data
 11219     0E24                     i1l3088:	
 11220                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11221                           
 11222                           
 11223                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11224     0E24  3001               	movlw	1
 11225     0E25  02F1               	subwf	i1SPI1_ExchangeBlock@blockSize,f
 11226     0E26  3000               	movlw	0
 11227     0E27  3BF2               	subwfb	i1SPI1_ExchangeBlock@blockSize+1,f
 11228     0E28  0A71               	incf	i1SPI1_ExchangeBlock@blockSize,w
 11229     0E29  1903               	btfsc	3,2
 11230     0E2A  0A72               	incf	i1SPI1_ExchangeBlock@blockSize+1,w
 11231     0E2B  1903               	btfsc	3,2
 11232     0E2C  0008               	return
 11233                           
 11234                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
 11235     0E2D  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11236     0E2E  0086               	movwf	6
 11237     0E2F  0187               	clrf	7
 11238     0E30  0801               	movf	1,w
 11239     0E31  0024               	movlb	4	; select bank4
 11240     0E32  0091               	movwf	17	;volatile
 11241     0E33                     i1l452:	
 11242                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
 11243                           
 11244     0E33  0020               	movlb	0	; select bank0
 11245     0E34  1991               	btfsc	17,3	;volatile
 11246     0E35  2E39               	goto	i1l454
 11247     0E36  0022               	movlb	2	; select bank2
 11248     0E37  108D               	bcf	13,1	;volatile
 11249     0E38  2E33               	goto	i1l452
 11250     0E39                     i1l454:
 11251                           
 11252                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
 11253     0E39  1191               	bcf	17,3	;volatile
 11254                           
 11255                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
 11256     0E3A  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11257     0E3B  0086               	movwf	6
 11258     0E3C  0187               	clrf	7
 11259     0E3D  0024               	movlb	4	; select bank4
 11260     0E3E  0811               	movf	17,w	;volatile
 11261     0E3F  0081               	movwf	1
 11262     0E40  3001               	movlw	1
 11263     0E41  07F3               	addwf	i1SPI1_ExchangeBlock@data,f
 11264     0E42  2E24               	goto	i1l3088
 11265     0E43                     __end_ofi1_SPI1_ExchangeBlock:
 11266                           
 11267                           	psect	text81
 11268     0F8A                     __ptext81:	
 11269 ;; *************** function _Next_floor *****************
 11270 ;; Defined at:
 11271 ;;		line 212 in file "main.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;  index_          2    7[COMMON] int 
 11276 ;;  i               2    9[COMMON] int 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  2  828[None  ] int 
 11279 ;; Registers used:
 11280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 1D/2
 11283 ;;		On exit  : 1F/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11286 ;;      Params:         0       0       0       0       0       0
 11287 ;;      Locals:         4       0       0       0       0       0
 11288 ;;      Temps:          1       0       0       0       0       0
 11289 ;;      Totals:         5       0       0       0       0       0
 11290 ;;Total ram usage:        5 bytes
 11291 ;; Hardware stack levels used: 1
 11292 ;; Hardware stack levels required when called: 1
 11293 ;; This function calls:
 11294 ;;		___awmod
 11295 ;; This function is called by:
 11296 ;;		_ISR_Floor4
 11297 ;;		_ISR_Floor3
 11298 ;;		_ISR_Floor2
 11299 ;;		_ISR_Floor1
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303     0F8A                     _Next_floor:	
 11304                           ;psect for function _Next_floor
 11305                           
 11306                           
 11307                           ;main.c: 213:     for(int i=1; i<6;i++){
 11308                           
 11309                           ;incstack = 0
 11310                           ; Regs used in _Next_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11311     0F8A  3001               	movlw	1
 11312     0F8B  00F9               	movwf	Next_floor@i
 11313     0F8C  3000               	movlw	0
 11314     0F8D  00FA               	movwf	Next_floor@i+1
 11315     0F8E                     i1l3150:
 11316                           
 11317                           ;main.c: 214:         int index_ = (index+i)%6;
 11318     0F8E  3006               	movlw	6
 11319     0F8F  00F0               	movwf	___awmod@divisor
 11320     0F90  3000               	movlw	0
 11321     0F91  00F1               	movwf	___awmod@divisor+1
 11322     0F92  0020               	movlb	0	; select bank0
 11323     0F93  086F               	movf	_index,w
 11324     0F94  0779               	addwf	Next_floor@i,w
 11325     0F95  00F2               	movwf	___awmod@dividend
 11326     0F96  087A               	movf	Next_floor@i+1,w
 11327     0F97  1803               	skipnc
 11328     0F98  0A7A               	incf	Next_floor@i+1,w
 11329     0F99  00F3               	movwf	___awmod@dividend+1
 11330     0F9A  3187  270F  318F   	fcall	___awmod
 11331     0F9D  0871               	movf	?___awmod+1,w
 11332     0F9E  00F8               	movwf	Next_floor@index_+1
 11333     0F9F  0870               	movf	?___awmod,w
 11334     0FA0  00F7               	movwf	Next_floor@index_
 11335                           
 11336                           ;main.c: 215:         if(route[index_]==1){
 11337     0FA1  0877               	movf	Next_floor@index_,w
 11338     0FA2  3EB0               	addlw	(low (_route| 0))& (0+255)
 11339     0FA3  0086               	movwf	6
 11340     0FA4  0187               	clrf	7
 11341     0FA5  0301               	decf	1,w
 11342     0FA6  1D03               	btfss	3,2
 11343     0FA7  2FB2               	goto	i1l3158
 11344                           
 11345                           ;main.c: 216:         next_floor = FLOORS[index_];
 11346     0FA8  3022               	movlw	low _FLOORS
 11347     0FA9  0777               	addwf	Next_floor@index_,w
 11348     0FAA  0084               	movwf	4
 11349     0FAB  3008               	movlw	high _FLOORS
 11350     0FAC  3D78               	addwfc	Next_floor@index_+1,w
 11351     0FAD  3880               	iorlw	128
 11352     0FAE  0085               	movwf	5
 11353     0FAF  0800               	movf	0,w	;code access
 11354     0FB0  00ED               	movwf	_next_floor
 11355     0FB1  0008               	return
 11356     0FB2                     i1l3158:
 11357                           
 11358                           ;main.c: 219:     }
 11359     0FB2  3001               	movlw	1
 11360     0FB3  07F9               	addwf	Next_floor@i,f
 11361     0FB4  3000               	movlw	0
 11362     0FB5  3DFA               	addwfc	Next_floor@i+1,f
 11363     0FB6  087A               	movf	Next_floor@i+1,w
 11364     0FB7  3A80               	xorlw	128
 11365     0FB8  00F6               	movwf	??_Next_floor
 11366     0FB9  3080               	movlw	128
 11367     0FBA  0276               	subwf	??_Next_floor,w
 11368     0FBB  1D03               	skipz
 11369     0FBC  2FBF               	goto	u188_25
 11370     0FBD  3006               	movlw	6
 11371     0FBE  0279               	subwf	Next_floor@i,w
 11372     0FBF                     u188_25:
 11373     0FBF  1C03               	skipc
 11374     0FC0  2F8E               	goto	i1l3150
 11375                           
 11376                           ;main.c: 220:     next_floor = -1;
 11377     0FC1  30FF               	movlw	-1
 11378     0FC2  0020               	movlb	0	; select bank0
 11379     0FC3  00ED               	movwf	_next_floor
 11380                           
 11381                           ;main.c: 221:     return next_floor;;	Return value of _Next_floor is never used
 11382     0FC4  0008               	return
 11383     0FC5                     __end_of_Next_floor:
 11384                           
 11385                           	psect	text82
 11386     070F                     __ptext82:	
 11387 ;; *************** function ___awmod *****************
 11388 ;; Defined at:
 11389 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
 11390 ;; Parameters:    Size  Location     Type
 11391 ;;  divisor         2    0[COMMON] int 
 11392 ;;  dividend        2    2[COMMON] int 
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;  sign            1    5[COMMON] unsigned char 
 11395 ;;  counter         1    4[COMMON] unsigned char 
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  2    0[COMMON] int 
 11398 ;; Registers used:
 11399 ;;		wreg, status,2, status,0
 11400 ;; Tracked objects:
 11401 ;;		On entry : 1F/0
 11402 ;;		On exit  : 1F/0
 11403 ;;		Unchanged: 1F/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11405 ;;      Params:         4       0       0       0       0       0
 11406 ;;      Locals:         2       0       0       0       0       0
 11407 ;;      Temps:          0       0       0       0       0       0
 11408 ;;      Totals:         6       0       0       0       0       0
 11409 ;;Total ram usage:        6 bytes
 11410 ;; Hardware stack levels used: 1
 11411 ;; This function calls:
 11412 ;;		Nothing
 11413 ;; This function is called by:
 11414 ;;		_New_request
 11415 ;;		_Next_floor
 11416 ;;		_dtoa
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420     070F                     ___awmod:	
 11421                           ;psect for function ___awmod
 11422                           
 11423                           
 11424                           ;incstack = 0
 11425                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11426     070F  01F5               	clrf	___awmod@sign
 11427     0710  1FF3               	btfss	___awmod@dividend+1,7
 11428     0711  2F19               	goto	i1l2912
 11429     0712  09F2               	comf	___awmod@dividend,f
 11430     0713  09F3               	comf	___awmod@dividend+1,f
 11431     0714  0AF2               	incf	___awmod@dividend,f
 11432     0715  1903               	skipnz
 11433     0716  0AF3               	incf	___awmod@dividend+1,f
 11434     0717  3001               	movlw	1
 11435     0718  00F5               	movwf	___awmod@sign
 11436     0719                     i1l2912:
 11437     0719  1FF1               	btfss	___awmod@divisor+1,7
 11438     071A  2F20               	goto	i1l2916
 11439     071B  09F0               	comf	___awmod@divisor,f
 11440     071C  09F1               	comf	___awmod@divisor+1,f
 11441     071D  0AF0               	incf	___awmod@divisor,f
 11442     071E  1903               	skipnz
 11443     071F  0AF1               	incf	___awmod@divisor+1,f
 11444     0720                     i1l2916:
 11445     0720  0870               	movf	___awmod@divisor,w
 11446     0721  0471               	iorwf	___awmod@divisor+1,w
 11447     0722  1903               	btfsc	3,2
 11448     0723  2F45               	goto	i1l2934
 11449     0724  3001               	movlw	1
 11450     0725  00F4               	movwf	___awmod@counter
 11451     0726                     i1l2924:
 11452     0726  1BF1               	btfsc	___awmod@divisor+1,7
 11453     0727  2F30               	goto	i1l2926
 11454     0728  3001               	movlw	1
 11455     0729                     u152_25:
 11456     0729  35F0               	lslf	___awmod@divisor,f
 11457     072A  0DF1               	rlf	___awmod@divisor+1,f
 11458     072B  0B89               	decfsz	9,f
 11459     072C  2F29               	goto	u152_25
 11460     072D  3001               	movlw	1
 11461     072E  07F4               	addwf	___awmod@counter,f
 11462     072F  2F26               	goto	i1l2924
 11463     0730                     i1l2926:
 11464     0730  0871               	movf	___awmod@divisor+1,w
 11465     0731  0273               	subwf	___awmod@dividend+1,w
 11466     0732  1D03               	skipz
 11467     0733  2F36               	goto	u154_25
 11468     0734  0870               	movf	___awmod@divisor,w
 11469     0735  0272               	subwf	___awmod@dividend,w
 11470     0736                     u154_25:
 11471     0736  1C03               	skipc
 11472     0737  2F3C               	goto	i1l2930
 11473     0738  0870               	movf	___awmod@divisor,w
 11474     0739  02F2               	subwf	___awmod@dividend,f
 11475     073A  0871               	movf	___awmod@divisor+1,w
 11476     073B  3BF3               	subwfb	___awmod@dividend+1,f
 11477     073C                     i1l2930:
 11478     073C  3001               	movlw	1
 11479     073D                     u155_25:
 11480     073D  36F1               	lsrf	___awmod@divisor+1,f
 11481     073E  0CF0               	rrf	___awmod@divisor,f
 11482     073F  0B89               	decfsz	9,f
 11483     0740  2F3D               	goto	u155_25
 11484     0741  3001               	movlw	1
 11485     0742  02F4               	subwf	___awmod@counter,f
 11486     0743  1D03               	btfss	3,2
 11487     0744  2F30               	goto	i1l2926
 11488     0745                     i1l2934:
 11489     0745  0875               	movf	___awmod@sign,w
 11490     0746  1903               	btfsc	3,2
 11491     0747  2F4D               	goto	i1l2938
 11492     0748  09F2               	comf	___awmod@dividend,f
 11493     0749  09F3               	comf	___awmod@dividend+1,f
 11494     074A  0AF2               	incf	___awmod@dividend,f
 11495     074B  1903               	skipnz
 11496     074C  0AF3               	incf	___awmod@dividend+1,f
 11497     074D                     i1l2938:
 11498     074D  0873               	movf	___awmod@dividend+1,w
 11499     074E  00F1               	movwf	?___awmod+1
 11500     074F  0872               	movf	___awmod@dividend,w
 11501     0750  00F0               	movwf	?___awmod
 11502     0751  0008               	return
 11503     0752                     __end_of___awmod:
 11504     0001                     ___latbits      equ	1
 11505     007E                     btemp           set	126	;btemp
 11506     007E                     int$flags       set	126
 11507     007E                     wtemp0          set	126
 11508                           
 11509                           	psect	config
 11510                           
 11511                           ;Config register CONFIG1 @ 0x8007
 11512                           ;	Oscillator Selection
 11513                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 11514                           ;	Watchdog Timer Enable
 11515                           ;	WDTE = OFF, WDT disabled
 11516                           ;	Power-up Timer Enable
 11517                           ;	PWRTE = OFF, PWRT disabled
 11518                           ;	MCLR Pin Function Select
 11519                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 11520                           ;	Flash Program Memory Code Protection
 11521                           ;	CP = OFF, Program memory code protection is disabled
 11522                           ;	Data Memory Code Protection
 11523                           ;	CPD = OFF, Data memory code protection is disabled
 11524                           ;	Brown-out Reset Enable
 11525                           ;	BOREN = ON, Brown-out Reset enabled
 11526                           ;	Clock Out Enable
 11527                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 11528                           ;	Internal/External Switchover
 11529                           ;	IESO = ON, Internal/External Switchover mode is enabled
 11530                           ;	Fail-Safe Clock Monitor Enable
 11531                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 11532     8007                     	org	32775
 11533     8007  3FE4               	dw	16356
 11534                           
 11535                           ;Config register CONFIG2 @ 0x8008
 11536                           ;	Flash Memory Self-Write Protection
 11537                           ;	WRT = OFF, Write protection off
 11538                           ;	PLL Enable
 11539                           ;	PLLEN = OFF, 4x PLL disabled
 11540                           ;	Stack Overflow/Underflow Reset Enable
 11541                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 11542                           ;	Brown-out Reset Voltage Selection
 11543                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 11544                           ;	In-Circuit Debugger Mode
 11545                           ;	DEBUG = 0x1, unprogrammed default
 11546                           ;	Low-Voltage Programming Enable
 11547                           ;	LVP = ON, Low-voltage programming enabled
 11548     8008                     	org	32776
 11549     8008  3EFF               	dw	16127

Data Sizes:
    Strings     5
    Constant    47
    Data        8
    BSS         111
    Persistent  46
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      80
    BANK1            80     24      79
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            32      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 4
		 -> position_string(BANK1[4]), velocidade_string(BANK1[4]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 4
		 -> position_string(BANK1[4]), velocidade_string(BANK1[4]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    Initialize_list@list	PTR struct . size(2) Largest target is 22
		 -> route_list(BANK2[22]), 

    IOCBF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), NULL(), 

    IOCBF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), 

    IOCBF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), NULL(), 

    IOCBF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2130$buffer	PTR unsigned char  size(2) Largest target is 4
		 -> position_string(BANK1[4]), velocidade_string(BANK1[4]), 

    S2130$source	PTR const unsigned char  size(2) Largest target is 0

    SPI1_ExchangeBlock@block	PTR void  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    SPI1_ExchangeBlock@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[5]), 
		 -> STR_5(CODE[5]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 4
		 -> position_string(BANK1[4]), velocidade_string(BANK1[4]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), 

    Tx_spi@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[5]), 
		 -> STR_5(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[5]), 
		 -> STR_5(CODE[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[5]), 
		 -> STR_5(CODE[5]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _read_prec_or_width->___wmul
    ___wmul->_TMR0_ReadTimer
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    ___awdiv->___wmul
    _Read_UART->_New_request
    _New_request->___awmod
    _IOCBF3_ISR->_ISR_Floor2
    _ISR_Floor2->i1_Matrix_update_floor
    _IOCBF0_ISR->_ISR_Floor1
    _ISR_Floor1->i1_Matrix_update_floor
    _ECCP2_CaptureISR->_ECCP2_CallBack
    _CMP2_ISR->_ISR_Floor4
    _ISR_Floor4->i1_Matrix_update_floor
    _CMP1_ISR->_ISR_Floor3
    _ISR_Floor3->i1_Matrix_update_floor
    i1_Matrix_update_floor->i1_Tx_spi
    i1_Tx_spi->i1_SPI1_ExchangeBlock
    _Next_floor->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR1_CallBack->_Write_UART
    _Write_UART->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _Read_UART->_New_request

Critical Paths under _main in BANK1

    _main->_Start
    _Matrix_update_floor->_Tx_spi
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF3_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _Ini_matrix->_Tx_spi
    _Motor_Turn_On->_Matrix_update_dir
    _Motor_Turn_Off->_Matrix_update_dir
    _Matrix_update_dir->_Tx_spi
    _Tx_spi->_SPI1_ExchangeBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    5357
                                             21 BANK1      3     3      0
       _EUSART_SetRxInterruptHandler
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
                               _Idle
                         _Ini_matrix
                    _Initialize_list
                     _Motor_Turn_Off
                      _Motor_Turn_On
                        _Route_empty
                          _SPI1_Open
                  _SYSTEM_Initialize
                              _Start
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _Start                                                2     2      0    1718
                                             19 BANK1      2     2      0
                _Matrix_update_floor
                     _Motor_Turn_Off
                      _Motor_Turn_On
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_WriteTimer                                      1     1      0      29
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Matrix_update_floor                                  5     5      0     329
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     165
                    _CMP1_Initialize
                    _CMP2_Initialize
                   _ECCP2_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR6_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      24
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2      24
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      48
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF3_SetInterruptHandler                           2     0      2      24
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCBF0_SetInterruptHandler                           2     0      2      24
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      93
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      24
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      23
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      23
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      23
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ECCP2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI1_Open                                            4     4      0     116
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Route_empty                                          3     3      0      68
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_list                                      2     0      2      23
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Ini_matrix                                           5     5      0     428
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _Idle                                                 0     0      0    1360
                     _Motor_Turn_Off
                      _Motor_Turn_On
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_On                                        0     0      0     680
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_Off                                       0     0      0     680
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (3) _Matrix_update_dir                                   12    12      0     680
                                              7 BANK1     12    12      0
                             _Tx_spi
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     108
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Tx_spi                                               3     0      3     146
                                              4 BANK1      3     0      3
                 _SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (5) _SPI1_ExchangeBlock                                   4     1      3      92
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0    7749
                                NULL *
                           _CMP1_ISR
                           _CMP2_ISR
                   _ECCP2_CaptureISR
                 _EUSART_Receive_ISR *
                    _PIN_MANAGER_IOC
                          _Read_UART *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0    3684
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (8) _TMR1_WriteTimer                                      2     0      2      91
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0    3593
                                NULL *
       _TMR1_DefaultInterruptHandler *
                         _Write_UART *
 ---------------------------------------------------------------------------------
 (9) _Write_UART                                           2     2      0    3593
                                             64 BANK0      2     2      0
                       _EUSART_Write
                     _TMR0_ReadTimer
                            ___awdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (10) _sprintf                                            19    14      5    3129
                                             47 BANK0     17    12      5
                           _vfprintf
 ---------------------------------------------------------------------------------
 (11) _vfprintf                                            8     3      5    2918
                                             39 BANK0      8     3      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (12) _vfpfcnvrt                                          16    12      4    2784
                                             24 BANK0     15    11      4
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (13) _read_prec_or_width                                  8     6      2     284
                                              7 COMMON     5     3      2
                                              0 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (14) ___wmul                                              6     2      4     102
                                              1 COMMON     6     2      4
                     _TMR0_ReadTimer (ARG)
 ---------------------------------------------------------------------------------
 (13) _dtoa                                               13     9      4    1843
                                             11 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (14) _pad                                                 8     3      5     747
                                              3 BANK0      8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (15) _fputs                                               8     5      3     333
                                              9 COMMON     5     2      3
                                              0 BANK0      3     3      0
                              _fputc
 ---------------------------------------------------------------------------------
 (13) _fputc                                               9     5      4     232
                                              0 COMMON     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (14) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (14) _abs                                                 4     2      2      67
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (14) ___awdiv                                             8     4      4     310
                                              7 COMMON     4     0      4
                                              0 BANK0      4     4      0
                     _TMR0_ReadTimer (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) _TMR0_ReadTimer                                      1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Write                                        1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Read_UART                                            5     5      0    1061
                                             12 COMMON     1     1      0
                                             10 BANK0      4     4      0
                        _EUSART_Read
                 _EUSART_Receive_ISR
                        _New_request
 ---------------------------------------------------------------------------------
 (8) _New_request                                         16    12      4     989
                                              6 COMMON     6     2      4
                                              0 BANK0     10    10      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_RxDataHandler                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Read                                          1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0    1478
                         _IOCBF0_ISR
                         _IOCBF3_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCBF3_ISR                                           0     0      0     739
                                NULL *
     _IOCBF3_DefaultInterruptHandler *
                         _ISR_Floor2 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor2                                           2     2      0     739
                                             12 COMMON     2     2      0
                         _Next_floor
              i1_Matrix_update_floor
 ---------------------------------------------------------------------------------
 (9) _IOCBF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCBF0_ISR                                           0     0      0     739
                                NULL *
     _IOCBF0_DefaultInterruptHandler *
                         _ISR_Floor1 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor1                                           2     2      0     739
                                             12 COMMON     2     2      0
                         _Next_floor
              i1_Matrix_update_floor
 ---------------------------------------------------------------------------------
 (9) _IOCBF0_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ECCP2_CaptureISR                                     2     2      0      48
                                              2 COMMON     2     2      0
                     _ECCP2_CallBack
 ---------------------------------------------------------------------------------
 (8) _ECCP2_CallBack                                       2     0      2       1
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _CMP2_ISR                                             0     0      0     739
                         _ISR_Floor4
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor4                                           2     2      0     739
                                             12 COMMON     2     2      0
                         _Next_floor
              i1_Matrix_update_floor
 ---------------------------------------------------------------------------------
 (7) _CMP1_ISR                                             0     0      0     739
                         _ISR_Floor3
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor3                                           2     2      0     739
                                             12 COMMON     2     2      0
                         _Next_floor
              i1_Matrix_update_floor
 ---------------------------------------------------------------------------------
 (10) i1_Matrix_update_floor                               5     5      0     318
                                              7 COMMON     5     5      0
                           i1_Tx_spi
 ---------------------------------------------------------------------------------
 (11) i1_Tx_spi                                            3     0      3     138
                                              4 COMMON     3     0      3
               i1_SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (12) i1_SPI1_ExchangeBlock                                4     1      3      92
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (10) _Next_floor                                          5     5      0     421
                                              6 COMMON     5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     308
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _IOCBF0_SetInterruptHandler
   _IOCBF3_SetInterruptHandler
   _Idle
     _Motor_Turn_Off
       _Matrix_update_dir
         _Tx_spi
           _SPI1_ExchangeBlock
         ___bmul
     _Motor_Turn_On
       _Matrix_update_dir
   _Ini_matrix
     _Tx_spi
   _Initialize_list
   _Motor_Turn_Off
   _Motor_Turn_On
   _Route_empty
   _SPI1_Open
   _SYSTEM_Initialize
     _CMP1_Initialize
     _CMP2_Initialize
     _ECCP2_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF0_SetInterruptHandler
       _IOCBF3_SetInterruptHandler
     _PWM3_Initialize
     _SPI1_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR6_Initialize
     _WDT_Initialize
   _Start
     _Matrix_update_floor
       _Tx_spi
     _Motor_Turn_Off
     _Motor_Turn_On
     _TMR0_WriteTimer
   _TMR1_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _CMP1_ISR *
     _ISR_Floor3
       _Next_floor
         ___awmod
       i1_Matrix_update_floor
         i1_Tx_spi
           i1_SPI1_ExchangeBlock
   _CMP2_ISR *
     _ISR_Floor4
       _Next_floor
       i1_Matrix_update_floor
   _ECCP2_CaptureISR *
     _ECCP2_CallBack
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _PIN_MANAGER_IOC *
     _IOCBF0_ISR
       NULL(Fake) *
       _IOCBF0_DefaultInterruptHandler *
       _ISR_Floor1 *
         _Next_floor
         i1_Matrix_update_floor
     _IOCBF3_ISR
       NULL(Fake) *
       _IOCBF3_DefaultInterruptHandler *
       _ISR_Floor2 *
         _Next_floor
         i1_Matrix_update_floor
   _Read_UART *
     _EUSART_Read
     _EUSART_Receive_ISR
     _New_request
       ___awmod
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Write_UART *
         _EUSART_Write
         _TMR0_ReadTimer
         ___awdiv
           _TMR0_ReadTimer (ARG)
           ___wmul (ARG)
             _TMR0_ReadTimer (ARG)
         ___wmul
         _sprintf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___awdiv
                 ___awmod
                 _abs
                   ___awmod (ARG)
                 _pad
                   _fputc
                     _putch
                   _fputs
                     _fputc
               _fputc
               _read_prec_or_width
                 ___wmul
     _TMR1_WriteTimer

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            32      0       0      0.0%
BIGRAM             352      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     66      80    100.0%
BANK1               80     24      79     98.8%
BANK2               80      0      64     80.0%
BANK3               80      0       0      0.0%
BANK4               32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     237      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Jun 18 01:14:53 2025

                ?_EUSART_SetRxInterruptHandler 00C1                       __end_of_ECCP2_Initialize 0C26  
             ??_IOCBF3_DefaultInterruptHandler 0070                ?_IOCBF3_DefaultInterruptHandler 0070  
                           _SPI1_ExchangeBlock 0E86                                 ___bmul@product 00C2  
                            ??_CMP1_Initialize 00C1                                   ___awdiv@sign 0021  
                       __end_of_FVR_Initialize 0B9B                            ___wmul@multiplicand 0073  
                              _timer0ReloadVal 00C0                                            l452 0E97  
                                          l454 0E9D                                            l838 0CCD  
                                          _PR2 001B                                            _PR6 041D  
                          ?_SPI1_ExchangeBlock 00C1                                _timer1ReloadVal 00BC  
                                          _abs 0CB6                         ??_EUSART_RxDataHandler 0070  
                                          _pad 0FC5                 ?_EUSART_SetFramingErrorHandler 00C1  
                                 ___awmod@sign 0075                                _TMR2_Initialize 0BE7  
                                          wreg 0009                        SPI1_ExchangeBlock@block 00C1  
                                 ?_EUSART_Read 0070                                           ?_abs 0076  
                                         l4002 0521                                           l4004 0524  
                                         l3230 0475                                           l3242 049E  
                                         l3234 0486                                           l3172 0D07  
                                         l3168 0D03                                           l3098 0E88  
                                         l3258 04C3                                           ?_pad 0023  
                                         l3754 0F07                                           l3918 0755  
                                         l3870 0DA9                                           l3936 077D  
                                         l3876 0DB3                                           l3996 0515  
                                         STR_1 0828                                           STR_2 0828  
                                         STR_3 0828                                           STR_4 0828  
                                         STR_5 0828                                           _LATA 010C  
                                         _LATB 010D                                           u2405 0DC0  
                                         u2325 0F00                                           u2607 0E6F  
                            ??_CMP2_Initialize 00C1                                           u1944 0482  
                                         u1945 0481                                           u1955 0493  
                                         u2597 0531                                           _TMR0 0015  
                                         _TMR2 001A                                           _TMR6 041C  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _Idle 0CC4                                           abs@a 0076  
                                         _dbuf 012A                                           _main 04E1  
                                         _dtoa 03D1                                           _prec 00B6  
                                         pad@i 0029                                           pad@p 0026  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                           ??_SPI1_ExchangeBlock 00C4  
                    i1SPI1_ExchangeBlock@block 0070                                           start 003F  
                             __end_of_CMP1_ISR 0C00                               __end_of_CMP2_ISR 0C09  
                   ??_TMR1_SetInterruptHandler 00C3                              ___bmul@multiplier 00C3  
                                _MATRIX_CONFIG 080D                                   i1Tx_spi@data 0074  
                 Matrix_update_dir@display_dir 00CE                                          ??_abs 0078  
                                  Ini_matrix@i 00C8                                    Ini_matrix@k 00CB  
                                        ??_pad 0028                                    ?_ISR_Floor1 0070  
                                  ?_ISR_Floor2 0070                                    ?_ISR_Floor3 0070  
                                  ?_ISR_Floor4 0070                        __end_of_TMR0_Initialize 0C51  
                              ?_FVR_Initialize 0070                                  ?_EUSART_Write 0070  
                                        ?_Idle 0070                  __end_of_OSCILLATOR_Initialize 0BCD  
                                        ?_main 0070                                          ?_dtoa 002B  
                              __end_of___awdiv 0682                                __end_of___awmod 0752  
             SPI1_Open@spi1UniqueConfiguration 00C4                                ___awdiv@divisor 0077  
                                        _T1CON 0018                                          _T2CON 001C  
                                        _T6CON 041E                                          i1l263 003D  
                                        i1l452 0E33                                          i1l454 0E39  
                                        i1l561 0BE0                                _TMR0_WriteTimer 0BCD  
                                        i1l884 0E61                                          i1l878 06C7  
                              ___awdiv@counter 0020                                          _RCREG 0199  
                                        _RCSTA 019D                                   vfpfcnvrt@fmt 003A  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _TRISA 008C                                          _TRISB 008D  
                                 main@is_empty 00D8                                          _TXREG 019A  
                                        _TXSTA 019E                         ECCP2_CaptureISR@module 0072  
                             __end_of_TMR1_ISR 0DA6                                          _Start 0E64  
                             i1Tx_spi@dataSize 0075                        __end_of_PIN_MANAGER_IOC 0C3B  
                                        _flags 0064                                 _WDT_Initialize 0B9B  
                                        _index 006F                            read_prec_or_width@c 0020  
                          read_prec_or_width@n 0021                                          _fputc 05E7  
                                        _fputs 0E02                                          pad@fp 0023  
                                        _width 0062                                          _putch 0B8F  
                                        _route 00B0                                          dtoa@d 002D  
                                        dtoa@i 0036                                          dtoa@p 0032  
                                        dtoa@s 0035                                          dtoa@w 0033  
                             __end_ofi1_Tx_spi 0CE1                        __end_of_PWM3_Initialize 0CB6  
                      __end_of_TMR1_Initialize 0D3B                                          pclath 000A  
                                        status 0003                                          wtemp0 007E  
                              __end_of_sprintf 0D8B                                   Route_empty@i 00C2  
                              _TMR1_WriteTimer 0CE1                                  ??_New_request 007A  
                                   _Ini_matrix 0752                                   __end_of_Idle 0CD2  
                              __initialization 0041                                   __end_of_main 053B  
                                 __end_of_dtoa 0467                    ECCP2_CallBack@capturedValue 0070  
                               ??_EUSART_Write 0070                        __end_of_TMR2_Initialize 0BEF  
                  ?_INTERRUPT_InterruptManager 0070                                         ??_Idle 00D4  
               ??_EUSART_SetRxInterruptHandler 00C3                                         ??_main 00D6  
                                       ??_dtoa 002F                          __end_of_Motor_Turn_On 0CA9  
                      _IOCBF0_InterruptHandler 00E5                     __end_of_read_prec_or_width 05E7  
                       __end_of_WDT_Initialize 0B9F                                _TMR6_Initialize 0C26  
                                       ?_Start 0070                        ??i1_Matrix_update_floor 0077  
    __end_of_EUSART_DefaultFramingErrorHandler 0B8F            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0B8E  
                   _EUSART_OverrunErrorHandler 00DD                                         ?_fputc 0070  
                                       ?_fputs 0079                                         _CCPR2H 0299  
                                       _CCPR3H 0312                                         _CCPR2L 0298  
                                       _CCPR3L 0311                               ___awdiv@dividend 0079  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                                     _Next_floor 0F8A  
                                       _FLOORS 0822                        TMR1_WriteTimer@timerVal 0070  
                                       i1l3002 044A                                         i1l3020 05B7  
                                       i1l1069 0D5D                                         i1l3008 0459  
                                       i1l3024 05D0                                         i1l3104 0D3F  
                                       i1l3026 05E2                                         i1l3106 0D52  
                                       i1l3150 0F8E                                         i1l3070 03AD  
                                       i1l3062 0389                                         i1l3046 034B  
                                       i1l1552 0FD4                                         i1l1560 03EF  
                                       i1l3056 0372                                         i1l3048 035F  
                                       i1l3304 0117                                         i1l3074 03B7  
                                       i1l1555 0FF4                                         i1l3158 0FB2  
                                       i1l1590 0349                                         i1l3088 0E24  
                                       i1l3352 01E4                                         i1l3338 01B2  
                                       i1l3188 0EB4                                         i1l2900 067D  
                                       i1l1588 033F                                         i1l2912 0719  
                                       i1l3384 06BB                                         i1l3544 0C99  
                                       i1l3632 0F78                                         i1l2832 0617  
                                       i1l2930 073C                                         i1l3570 07C3  
                                       i1l3538 0C8C                                         i1l3730 02DC  
                                       i1l3722 02A0                                         i1l3714 029A  
                                       i1l3706 0273                                         i1l3626 0F69  
                                       i1l2826 05EF                                         i1l2924 0726  
                                       i1l2916 0720                                         i1l3708 0282  
                                       i1l3636 0F87                                         i1l2828 05F3  
                                       i1l2844 0E04                                         i1l2926 0730  
                                       i1l2934 0745                                         i1l3590 0DDB  
                                       i1l3646 0CEB                                         i1l3744 030C  
                                       i1l3736 02DF                                         i1l3728 02C9  
                                       i1l2848 0D57                                         i1l2938 074D  
                                       i1l3690 0230                                         i1l2874 0648  
                                       i1l2954 0FD6                                         i1l2946 0FD0  
                                       i1l3692 0243                                         i1l3684 0207  
                                       i1l3860 070A                                         i1l2892 066C  
                                       i1l2884 0650                                         i1l2868 063F  
                                       u204_25 06AC                                         u220_25 01EF  
                                       i1l3598 0DE3                                         i1l2886 065A  
                                       i1l2982 040C                                         i1l3950 000C  
                                       i1l2896 0675                                         i1l2992 043E  
                                       i1l3794 0C36                                         i1l3698 0246  
                                       i1l2994 03F6                                         i1l2978 03E9  
                                       i1l3970 002C                                         i1l3964 0023  
                                       u221_25 01FB                                         u133_25 0615  
                                       i1l3958 0017                                         i1l3976 0035  
                                       u230_25 0303                                         u222_25 0227  
                                       u142_25 0653                                         u231_25 0319  
                                       u223_25 0241                                         u152_25 0729  
                                       u224_25 026A                                         u144_25 065B  
                                       u160_25 0FE0                                         u136_25 0D5E  
                                       u209_25 07B6                                         u225_25 0280  
                                       u145_25 0665                                         u137_25 0D63  
                                       u154_25 0736                                         u226_25 028C  
                                       u146_25 066D                                         u170_25 0407  
                                       u163_20 03D7                                         _FVRCON 0117  
                                       u155_25 073D                                         u164_20 03D8  
                                       u228_25 02C0                                         u229_25 02DA  
                                       u191_25 0EAD                                         u167_25 0448  
                                       u188_25 0FBF                                         _OSCCON 0099  
                                vfpfcnvrt@done 0044                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                            ?_ECCP2_CaptureISR 0070                              __end_of_SPI1_Open 0591  
                           ??_ECCP2_CaptureISR 0072                                   Read_UART@ori 002A  
         __end_of_TMR1_DefaultInterruptHandler 0004                   _TMR1_DefaultInterruptHandler 0003  
                                 _CCPTMRS0bits 029E                                   vfprintf@cfmt 004D  
                                       ___bmul 0D00                                         _Tx_spi 0CF0  
                                       ___wmul 0D55                                      ??___awdiv 007B  
                                    ??___awmod 0074                        __end_of_TMR0_WriteTimer 0BD3  
                                       _buffer 0120                            __end_of_New_request 031C  
                             ?_TMR0_Initialize 0070                           read_prec_or_width@ap 0078  
                             ___awdiv@quotient 0022                                ___awmod@divisor 0070  
                              ___awmod@counter 0074                                         pad@buf 0025  
                                       dtoa@fp 002B                                         fputc@c 0070  
                                       fputs@c 0020                                         fputs@i 0021  
                                       fputs@s 0079                                ?_WDT_Initialize 0070  
                     i1SPI1_ExchangeBlock@data 0073                                         putch@c 0070  
                                    ?_CMP1_ISR 0070                                      ?_CMP2_ISR 0070  
                             __end_of_vfprintf 0D55       TMR1_SetInterruptHandler@InterruptHandler 00C1  
   IOCBF3_SetInterruptHandler@InterruptHandler 00C1     IOCBF0_SetInterruptHandler@InterruptHandler 00C1  
                             ?_PIN_MANAGER_IOC 0070                                      ??_sprintf 007E  
                      __end_of_TMR1_WriteTimer 0CF0                                   ??_IOCBF0_ISR 007E  
                                 ??_IOCBF3_ISR 007E                          __end_of_TMR1_CallBack 0C1C  
                             ?_TMR1_Initialize 0070                               ?_PWM3_Initialize 0070  
                            _SYSTEM_Initialize 0ED1                        __end_of__initialization 0064  
                              _CMP1_Initialize 0C51                             ?_SYSTEM_Initialize 0070  
                                  ?_Ini_matrix 0070                                 _Motor_Turn_Off 0C3B  
                          ___bmul@multiplicand 00C1                                 __pcstackCOMMON 0070  
                                __end_of_Start 0E86                                     _Write_UART 0068  
                                 __pidataBANK1 0BEF                            ??_SYSTEM_Initialize 00C3  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                            ?_ECCP2_Initialize 0070                                  __end_of_fputc 0635  
                                __end_of_fputs 0E22                              ??_SPI1_Initialize 00C1  
       __end_of_IOCBF0_DefaultInterruptHandler 0B8D                 _IOCBF0_DefaultInterruptHandler 0B8C  
                                __end_of_putch 0B90                                    Next_floor@i 0079  
                             ?_TMR2_Initialize 0070                        __end_of_TMR6_Initialize 0C30  
                           ??_ECCP2_Initialize 00C1                                      ?i1_Tx_spi 0074  
                           __end_of_IOCBF0_ISR 0C8F                             __end_of_IOCBF3_ISR 0C9C  
                            __end_of_Read_UART 070F                                _CMP2_Initialize 0C5D  
                           _spi1_configuration 082D                                 _OPTION_REGbits 0095  
                                ??_Route_empty 00C1                           _eusartRxStatusBuffer 00A0  
                            _velocidade_string 00E7                           __end_of_MATRIX_FLOOR 080D  
                                   Tx_spi@data 00C5                                        ??_Start 00D4  
              ??_EUSART_SetOverrunErrorHandler 00C3         __end_of_IOCBF3_DefaultInterruptHandler 0B8E  
               _IOCBF3_DefaultInterruptHandler 0B8D                                     ??_CMP1_ISR 007E  
                                   ??_CMP2_ISR 007E                                        ??_fputc 0074  
                    __end_of_SYSTEM_Initialize 0EFB                                        ??_fputs 007C  
                                      ??_putch 0070             i1Matrix_update_floor@display_floor 007A  
             Matrix_update_floor@display_floor 00CB                                    ?_Next_floor 0070  
                                   __pbssBANK0 0062                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                  _current_floor 006E  
                         __end_of_EUSART_Write 0BE7                         __end_of_Motor_Turn_Off 0C46  
                          _Matrix_update_floor 0EFB                             __end_of_MATRIX_DIR 0822  
                                  _New_request 01E9                              _Matrix_update_dir 0467  
                             ??_FVR_Initialize 00C1                                     __pmaintext 04E1  
                                      ?___bmul 00C1                                        ?_Tx_spi 00C5  
                           ?_Matrix_update_dir 0070                                        ?___wmul 0071  
                                   ??_TMR1_ISR 007E                                     __pintentry 0004  
                             ?_TMR0_WriteTimer 0070                                   ??_ISR_Floor1 007C  
                                 ??_ISR_Floor2 007C                                   ??_ISR_Floor3 007C  
                                 ??_ISR_Floor4 007C                                        _CM1CON0 0111  
                                      _CM1CON1 0112                                        _CM2CON0 0113  
                                      _CM2CON1 0114                                        _CCP2CON 029A  
                                      _CCP3CON 0313                                        _BAUDCON 019F  
                                      _APFCON0 011D                                        _APFCON1 011E  
                 ??_EUSART_DefaultErrorHandler 0070                                     ??i1_Tx_spi 0077  
                          ??_Matrix_update_dir 00C8                           ?_Matrix_update_floor 0070  
                                _eusartRxCount 0066                                        _OSCTUNE 0098  
                                      _SSP1ADD 0212                                        _SSP1BUF 0211  
                      __end_of_CMP1_Initialize 0C5D                       ??_EUSART_SetErrorHandler 00C3  
                             ?_TMR1_WriteTimer 0070                            __end_of_Route_empty 0DC4  
                           __end_of_ISR_Floor1 0E64                             __end_of_ISR_Floor2 06CA  
                           __end_of_ISR_Floor3 07CD                             __end_of_ISR_Floor4 0DE3  
                              ?_Motor_Turn_Off 0070                      __end_of_Matrix_update_dir 04E1  
                                Read_UART@dest 002C                                    ?_Write_UART 0070  
                      __end_of_CMP2_Initialize 0C69                                        ___awdiv 0635  
                                      ___awmod 070F                                 _ECCP2_CallBack 0B8B  
                                    ?_vfprintf 0047                               ?_TMR6_Initialize 0070  
                        ??_Matrix_update_floor 00C8                                        __ptext1 0E64  
                                      __ptext2 0BCD                                        __ptext3 0EFB  
                                      __ptext4 0ED1                                        __ptext5 0B9B  
                                      __ptext6 0C26                                        __ptext7 0BE7  
                                      __ptext8 0D22                                        __ptext9 0BC2  
               ??_TMR1_DefaultInterruptHandler 0070                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 0BC7                          read_prec_or_width@fmt 0077  
                             Ini_matrix@i_1605 00CC                               ___awmod@dividend 0072  
                     ??_PIN_MANAGER_Initialize 00C3                      ?_TMR1_SetInterruptHandler 00C1  
                                    _IOCBFbits 0396                                      _IOCBNbits 0395  
                            ??_Initialize_list 00C3                                      _IOCBPbits 0394  
                                      _stop_2s 0069                                        _sprintf 0D70  
                                      clrloop0 0BD4                           end_of_initialization 0064  
                __end_ofi1_Matrix_update_floor 0ED1                              New_request@i_1562 0022  
                            New_request@i_1563 0024                              New_request@i_1564 0026  
                                   _next_floor 006D          __end_of_EUSART_SetOverrunErrorHandler 0BB3  
                _EUSART_SetOverrunErrorHandler 0BAE                                        fputc@fp 0072  
                                      init_ram 0BD9                                   New_request@i 0020  
                                      fputs@fp 007A                                        initloop 0BDA  
                           _read_prec_or_width 0591                              _EUSART_Initialize 07CD  
                            New_request@index_ 0028                                   _buffer_count 00B8  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 03D1  
                       __end_of_ECCP2_CallBack 0B8C                          TMR0_ReadTimer@readVal 0070  
                            New_request@origin 0076                                      _RCSTAbits 019D  
                          ?_read_prec_or_width 0077                               vfpfcnvrt@convarg 0040  
                                   ??_vfprintf 004C                                      _SPI1_Open 053B  
                               _TMR0_ReadTimer 0B9F                            ??_EUSART_Initialize 00C3  
                             ??_WDT_Initialize 00C1                                     _velocidade 00BE  
                                  _Route_empty 0DA6                                      _TRISBbits 008D  
                         ??_read_prec_or_width 0079                   ??_IOCBF0_SetInterruptHandler 00C3  
                 ??_IOCBF3_SetInterruptHandler 00C3                               ?_CMP1_Initialize 0070  
                       SPI1_ExchangeBlock@data 00C4                      __end_of_EUSART_Initialize 07FD  
                               __end_of_FLOORS 0828                                     _route_list 014A  
                              _SPI1_Initialize 0C69                                    _CCP3CONbits 0313  
                                 ??_Ini_matrix 00C8                                   _MATRIX_FLOOR 07FD  
                              ?_ECCP2_CallBack 0070                         __end_of_TMR0_ReadTimer 0BA4  
                             ?_CMP2_Initialize 0070                                 __end_of___bmul 0D10  
                                   ?_SPI1_Open 0070                                 __end_of_Tx_spi 0D00  
           __end_of_EUSART_DefaultErrorHandler 0B93                     _EUSART_DefaultErrorHandler 0B90  
                                  vfpfcnvrt@ap 003B                                    vfpfcnvrt@cp 0045  
                                  vfpfcnvrt@fp 0038                                 __end_of___wmul 0D70  
                                 _EUSART_Write 0BDF                         ?_OSCILLATOR_Initialize 0070  
                          start_initialization 0041                                      _Read_UART 06CA  
                                  __end_of_abs 0CC4                             __end_of_Ini_matrix 0790  
                 __end_ofi1_SPI1_ExchangeBlock 0E43                                    __end_of_pad 1000  
                                ??_EUSART_Read 0070   EUSART_SetRxInterruptHandler@interruptHandler 00C1  
                                 ??_Next_floor 0076                                   ?_New_request 0076  
                        __end_of_MATRIX_CONFIG 0819                 ?_EUSART_SetOverrunErrorHandler 00C1  
                                  vfprintf@fmt 0049                     _EUSART_FramingErrorHandler 00DF  
                                     ??___bmul 00C2                                       ??_Tx_spi 00C8  
                              ?_TMR0_ReadTimer 0070                                       ??___wmul 0075  
                       _EUSART_SetErrorHandler 0BA4                                 Ini_matrix@data 00C9  
                                  __pdataBANK1 00E7                                New_request@dest 0078  
                           __end_of_Next_floor 0FC5                          TMR1_ISR@CountCallBack 00BA  
                                    ___latbits 0001                                  _Motor_Turn_On 0C9C  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00C1  
                                   ?_Read_UART 0070                        __end_of_SPI1_Initialize 0C75  
                             ??_Motor_Turn_Off 00D4                     __end_of_EUSART_Receive_ISR 0F8A  
             _EUSART_RxDefaultInterruptHandler 00E1                            __end_of_EUSART_Read 0E02  
                                    __pnvBANK1 00D9                        _IOCBF3_InterruptHandler 00E3  
                 __end_of_EUSART_RxDataHandler 0D22                         _PIN_MANAGER_Initialize 0F25  
                                    _dtoa$2209 0030                           EUSART_Read@readValue 0070  
                                 ??_Write_UART 0060               __end_of_TMR1_SetInterruptHandler 0BC7  
                                     ?___awdiv 0077                                       ?___awmod 0070  
                                  ??_SPI1_Open 00C1                                   _eusartRxHead 0068  
                              _Initialize_list 0C09                                   _eusartRxTail 0067  
                 ??_INTERRUPT_InterruptManager 007E                               _ECCP2_CaptureISR 0C75  
                               ?_Motor_Turn_On 0070             __end_of_IOCBF0_SetInterruptHandler 0BBD  
                   _IOCBF0_SetInterruptHandler 0BB8                          Matrix_update_dir@data 00CF  
                        Matrix_update_dir@mask 00CD             __end_of_IOCBF3_SetInterruptHandler 0BC2  
                   _IOCBF3_SetInterruptHandler 0BBD                                       _CMP1_ISR 0BF7  
                                     _CMP2_ISR 0C00                                       ?_sprintf 004F  
                           __end_of_Write_UART 01E9                                 _eusartRxBuffer 00A8  
                   __end_of_SPI1_ExchangeBlock 0EA9                                  _TMR1_CallBack 0C12  
                            ??_TMR0_Initialize 00C1                                 ___wmul@product 0075  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 00C1  
                                     _LATBbits 010D                                      clear_ram0 0BD3  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0065                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00C3                                       _PIR2bits 0012  
                                     _PIR3bits 0013                    __end_of_Matrix_update_floor 0F25  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
                         i1_SPI1_ExchangeBlock 0E22      __end_of_EUSART_DefaultOverrunErrorHandler 0B97  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0B93                                       _TMR1_ISR 0D8B  
                                     _SSP1STAT 0214                              ??_PIN_MANAGER_IOC 007E  
                                    _vfpfcnvrt 031C                                      _position0 006B  
                                    _positionf 006A                              ??_TMR1_Initialize 00C3  
                            ??_PWM3_Initialize 00C1                                       i1_Tx_spi 0CD2  
                            ___wmul@multiplier 0071                                   ?_Route_empty 0070  
                                  ??_Read_UART 007C                               _ECCP2_Initialize 0C1C  
                                  _EUSART_Read 0DE3                               ?_SPI1_Initialize 0070  
                               ?_TMR1_CallBack 0070                        Matrix_update_dir@i_1616 00D1  
                            ??_TMR2_Initialize 00C1                          i1_Matrix_update_floor 0EA9  
                       i1Matrix_update_floor@i 007B                               ??_ECCP2_CallBack 0072  
                      __end_of_Initialize_list 0C12                                     vfprintf@ap 004B  
                                   vfprintf@fp 0047                          ?i1_SPI1_ExchangeBlock 0070  
                      Matrix_update_dir@route_ 00C9                        ??_OSCILLATOR_Initialize 00C1  
                               Tx_spi@dataSize 00C6                            _EUSART_ErrorHandler 00DB  
                  ?_EUSART_DefaultErrorHandler 0070                                     ?_vfpfcnvrt 0038  
                     _TMR1_SetInterruptHandler 0BC2                                ??_Motor_Turn_On 00D4  
                        _TMR1_InterruptHandler 00D9                                     sprintf@fmt 0050  
                         _EUSART_RxDataHandler 0D10                                       __ptext10 0C46  
                                     __ptext11 0C69                                       __ptext20 0BAE  
                                     __ptext12 0CA9                                       __ptext21 0BA9  
                                     __ptext13 0F25                                       __ptext30 0CC4  
                                     __ptext22 0BA4                                       __ptext14 0BBD  
                                     __ptext31 0C9C                                       __ptext23 0C1C  
                                     __ptext15 0BB8                                       __ptext40 0C12  
                                     __ptext32 0C3B                                       __ptext24 0C5D  
                                     __ptext16 0BC7                                       __ptext41 0003  
                                     __ptext33 0467                                       __ptext25 0C51  
                                     __ptext17 0B97                                       __ptext50 0E02  
                                     __ptext42 0068                                       __ptext34 0D00  
                                     __ptext26 053B                                       __ptext18 07CD  
                                     __ptext51 05E7                                       __ptext43 0D70  
                                     __ptext35 0CF0                                       __ptext27 0DA6  
                                     __ptext19 0BB3                                       __ptext60 0B93  
                                     __ptext52 0B8F                                       __ptext44 0D3B  
                                     __ptext36 0E86                                       __ptext28 0C09  
                                     __ptext61 0B8E                                       __ptext53 0CB6  
                                     __ptext45 031C                                       __ptext29 0752  
                                     __ptext70 0B8C                                       __ptext62 0B90  
                                     __ptext54 0635                                       __ptext46 0591  
                                     __ptext38 0D8B                                       __ptext71 0E43  
                                     __ptext63 0D10                                       __ptext55 0B9F  
                                     __ptext47 0D55                                       __ptext39 0CE1  
                                     __ptext80 0E22                                       __ptext72 0C75  
                                     __ptext64 0DE3                                       __ptext56 0BDF  
                                     __ptext48 03D1                                       __ptext81 0F8A  
                                     __ptext73 0B8B                                       __ptext65 0C30  
                                     __ptext57 0F54                                       __ptext49 0FC5  
                                     __ptext82 070F                                       __ptext74 0C00  
                                     __ptext66 0C8F                                       __ptext58 06CA  
                                     __ptext75 0DC4                                       __ptext67 0B8D  
                                     __ptext59 01E9                                       __ptext76 0BF7  
                                     __ptext68 0682                                       __ptext77 0790  
                                     __ptext69 0C82                                       __ptext78 0EA9  
                                     __ptext79 0CD2                                   _SSP1CON1bits 0215  
                                   _IOCBF0_ISR 0C82                                     _IOCBF3_ISR 0C8F  
                      TMR0_WriteTimer@timerVal 00C1                              ??_TMR0_WriteTimer 00C1  
                             ??_TMR0_ReadTimer 0070                           Matrix_update_floor@i 00CC  
                      ?_EUSART_SetErrorHandler 00C1                  i1SPI1_ExchangeBlock@blockSize 0071  
                      Matrix_update_floor@data 00C9  EUSART_SetOverrunErrorHandler@interruptHandler 00C1  
                                     int$flags 007E                                       _position 006C  
                                     _vfprintf 0D3B             __end_of_INTERRUPT_InterruptManager 003F  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0BAE  
                _EUSART_SetFramingErrorHandler 0BA9                              ??_TMR1_WriteTimer 0072  
                                   _MATRIX_DIR 0819                    SPI1_ExchangeBlock@blockSize 00C2  
                    i1Matrix_update_floor@data 0078                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                                ??_TMR1_CallBack 007E  
                                     intlevel1 0000                                      sprintf@ap 0054  
                       ?i1_Matrix_update_floor 0070                        ?_PIN_MANAGER_Initialize 0070  
                     __end_of_ECCP2_CaptureISR 0C82                              ??_TMR6_Initialize 00C1  
               __end_of_EUSART_SetErrorHandler 0BA9           __end_of_EUSART_SetRxInterruptHandler 0BB8  
                 _EUSART_SetRxInterruptHandler 0BB3                               ?_Initialize_list 00C1  
                       ??i1_SPI1_ExchangeBlock 0073                             _EUSART_Receive_ISR 0F54  
EUSART_SetFramingErrorHandler@interruptHandler 00C1                                _position_string 00EB  
                                   _ISR_Floor1 0E43                                     _ISR_Floor2 0682  
                                   _ISR_Floor3 0790                                     _ISR_Floor4 0DC4  
                                  ??_vfpfcnvrt 003C                                  __pstringtext1 07FD  
                                __pstringtext2 080D                                  __pstringtext3 0819  
                                __pstringtext4 0822                                  __pstringtext5 082D  
                                __pstringtext6 0828                                  __pstringtext7 0000  
                               _FVR_Initialize 0B97                                     _OPTION_REG 0095  
                                     sprintf@f 0055                                       sprintf@s 004F  
                          ?_EUSART_Receive_ISR 0070                                _TMR0_Initialize 0C46  
                           Matrix_update_dir@i 00D2                               Next_floor@index_ 0077  
                  ?_IOCBF0_SetInterruptHandler 00C1                    ?_IOCBF3_SetInterruptHandler 00C1  
                                  ?_IOCBF0_ISR 0070                            Initialize_list@list 00C1  
                           EUSART_Write@txData 0070                                    ?_IOCBF3_ISR 0070  
               __end_of_PIN_MANAGER_Initialize 0F54               ??_IOCBF0_DefaultInterruptHandler 0070  
              ?_IOCBF0_DefaultInterruptHandler 0070                                _PIN_MANAGER_IOC 0C30  
                         ??_EUSART_Receive_ISR 0070                                _TMR1_Initialize 0D22  
                              _PWM3_Initialize 0CA9                     __end_of_spi1_configuration 0831  
