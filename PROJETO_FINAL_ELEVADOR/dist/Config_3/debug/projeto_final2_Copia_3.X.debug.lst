

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Jul 14 20:19:29 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK2,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	inittext,global,class=CODE,space=0,delta=2
    18                           	psect	clrtext,global,class=CODE,space=0,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=1
    55                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2,group=1
    61                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,space=0,delta=2
    64                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2,group=1
    71                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2,group=1
    72                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2,group=1
    73                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2,group=1
    74                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2,group=1
    75                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2,group=1
    76                           	psect	text53,local,class=CODE,space=0,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,space=0,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,space=0,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,space=0,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,space=0,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,space=0,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,space=0,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,space=0,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,space=0,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,space=0,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,space=0,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,space=0,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,space=0,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,space=0,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,space=0,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,space=0,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,space=0,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,space=0,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,space=0,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,space=0,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,space=0,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,space=0,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,space=0,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,space=0,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,space=0,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,space=0,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,space=0,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,space=0,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,space=0,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,space=0,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,space=0,merge=1,delta=2
   107                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   108                           	dabs	1,0x7E,2
   109     0000                     
   110                           ; Generated 27/03/2025 GMT
   111                           ; 
   112                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution. Publication is not required when
   126                           ;        this file is used in an embedded application.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC16F1827 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144     0008                     bsr             equ	8
   145     0005                     fsr0h           equ	5
   146     0004                     fsr0l           equ	4
   147     0007                     fsr1h           equ	7
   148     0006                     fsr1l           equ	6
   149     0000                     indf            equ	0
   150     0000                     indf0           equ	0
   151     0001                     indf1           equ	1
   152     000B                     intcon          equ	11
   153     0002                     pc              equ	2
   154     0002                     pcl             equ	2
   155     000A                     pclath          equ	10
   156     0003                     status          equ	3
   157     0009                     wreg            equ	9
   158     0000                     INDF0           equ	0	;# 
   159     0001                     INDF1           equ	1	;# 
   160     0002                     PCL             equ	2	;# 
   161     0003                     STATUS          equ	3	;# 
   162     0004                     FSR0L           equ	4	;# 
   163     0005                     FSR0H           equ	5	;# 
   164     0006                     FSR1L           equ	6	;# 
   165     0007                     FSR1H           equ	7	;# 
   166     0008                     BSR             equ	8	;# 
   167     0009                     WREG            equ	9	;# 
   168     000A                     PCLATH          equ	10	;# 
   169     000B                     INTCON          equ	11	;# 
   170     000C                     PORTA           equ	12	;# 
   171     000D                     PORTB           equ	13	;# 
   172     0011                     PIR1            equ	17	;# 
   173     0012                     PIR2            equ	18	;# 
   174     0013                     PIR3            equ	19	;# 
   175     0014                     PIR4            equ	20	;# 
   176     0015                     TMR0            equ	21	;# 
   177     0016                     TMR1            equ	22	;# 
   178     0016                     TMR1L           equ	22	;# 
   179     0017                     TMR1H           equ	23	;# 
   180     0018                     T1CON           equ	24	;# 
   181     0019                     T1GCON          equ	25	;# 
   182     001A                     TMR2            equ	26	;# 
   183     001B                     PR2             equ	27	;# 
   184     001C                     T2CON           equ	28	;# 
   185     001E                     CPSCON0         equ	30	;# 
   186     001F                     CPSCON1         equ	31	;# 
   187     008C                     TRISA           equ	140	;# 
   188     008D                     TRISB           equ	141	;# 
   189     0091                     PIE1            equ	145	;# 
   190     0092                     PIE2            equ	146	;# 
   191     0093                     PIE3            equ	147	;# 
   192     0094                     PIE4            equ	148	;# 
   193     0095                     OPTION_REG      equ	149	;# 
   194     0096                     PCON            equ	150	;# 
   195     0097                     WDTCON          equ	151	;# 
   196     0098                     OSCTUNE         equ	152	;# 
   197     0099                     OSCCON          equ	153	;# 
   198     009A                     OSCSTAT         equ	154	;# 
   199     009B                     ADRES           equ	155	;# 
   200     009B                     ADRESL          equ	155	;# 
   201     009C                     ADRESH          equ	156	;# 
   202     009D                     ADCON0          equ	157	;# 
   203     009E                     ADCON1          equ	158	;# 
   204     010C                     LATA            equ	268	;# 
   205     010D                     LATB            equ	269	;# 
   206     0111                     CM1CON0         equ	273	;# 
   207     0112                     CM1CON1         equ	274	;# 
   208     0113                     CM2CON0         equ	275	;# 
   209     0114                     CM2CON1         equ	276	;# 
   210     0115                     CMOUT           equ	277	;# 
   211     0116                     BORCON          equ	278	;# 
   212     0117                     FVRCON          equ	279	;# 
   213     0118                     DACCON0         equ	280	;# 
   214     0119                     DACCON1         equ	281	;# 
   215     011A                     SRCON0          equ	282	;# 
   216     011B                     SRCON1          equ	283	;# 
   217     011D                     APFCON0         equ	285	;# 
   218     011E                     APFCON1         equ	286	;# 
   219     018C                     ANSELA          equ	396	;# 
   220     018D                     ANSELB          equ	397	;# 
   221     0191                     EEADR           equ	401	;# 
   222     0191                     EEADRL          equ	401	;# 
   223     0192                     EEADRH          equ	402	;# 
   224     0193                     EEDAT           equ	403	;# 
   225     0193                     EEDATL          equ	403	;# 
   226     0193                     EEDATA          equ	403	;# 
   227     0194                     EEDATH          equ	404	;# 
   228     0195                     EECON1          equ	405	;# 
   229     0196                     EECON2          equ	406	;# 
   230     0199                     RCREG           equ	409	;# 
   231     019A                     TXREG           equ	410	;# 
   232     019B                     SP1BRG          equ	411	;# 
   233     019B                     SP1BRGL         equ	411	;# 
   234     019B                     SPBRG           equ	411	;# 
   235     019B                     SPBRGL          equ	411	;# 
   236     019C                     SP1BRGH         equ	412	;# 
   237     019C                     SPBRGH          equ	412	;# 
   238     019D                     RCSTA           equ	413	;# 
   239     019E                     TXSTA           equ	414	;# 
   240     019F                     BAUDCON         equ	415	;# 
   241     020C                     WPUA            equ	524	;# 
   242     020D                     WPUB            equ	525	;# 
   243     0211                     SSP1BUF         equ	529	;# 
   244     0211                     SSPBUF          equ	529	;# 
   245     0212                     SSP1ADD         equ	530	;# 
   246     0212                     SSPADD          equ	530	;# 
   247     0213                     SSP1MSK         equ	531	;# 
   248     0213                     SSPMSK          equ	531	;# 
   249     0214                     SSP1STAT        equ	532	;# 
   250     0214                     SSPSTAT         equ	532	;# 
   251     0215                     SSP1CON1        equ	533	;# 
   252     0215                     SSPCON1         equ	533	;# 
   253     0215                     SSPCON          equ	533	;# 
   254     0216                     SSP1CON2        equ	534	;# 
   255     0216                     SSPCON2         equ	534	;# 
   256     0217                     SSP1CON3        equ	535	;# 
   257     0217                     SSPCON3         equ	535	;# 
   258     0219                     SSP2BUF         equ	537	;# 
   259     021A                     SSP2ADD         equ	538	;# 
   260     021B                     SSP2MSK         equ	539	;# 
   261     021C                     SSP2STAT        equ	540	;# 
   262     021D                     SSP2CON1        equ	541	;# 
   263     021E                     SSP2CON2        equ	542	;# 
   264     021F                     SSP2CON3        equ	543	;# 
   265     0291                     CCPR1           equ	657	;# 
   266     0291                     CCPR1L          equ	657	;# 
   267     0292                     CCPR1H          equ	658	;# 
   268     0293                     CCP1CON         equ	659	;# 
   269     0294                     PWM1CON         equ	660	;# 
   270     0295                     CCP1AS          equ	661	;# 
   271     0295                     ECCP1AS         equ	661	;# 
   272     0296                     PSTR1CON        equ	662	;# 
   273     0298                     CCPR2           equ	664	;# 
   274     0298                     CCPR2L          equ	664	;# 
   275     0299                     CCPR2H          equ	665	;# 
   276     029A                     CCP2CON         equ	666	;# 
   277     029B                     PWM2CON         equ	667	;# 
   278     029C                     CCP2AS          equ	668	;# 
   279     029C                     ECCP2AS         equ	668	;# 
   280     029D                     PSTR2CON        equ	669	;# 
   281     029E                     CCPTMRS         equ	670	;# 
   282     029E                     CCPTMRS0        equ	670	;# 
   283     0311                     CCPR3           equ	785	;# 
   284     0311                     CCPR3L          equ	785	;# 
   285     0312                     CCPR3H          equ	786	;# 
   286     0313                     CCP3CON         equ	787	;# 
   287     0318                     CCPR4           equ	792	;# 
   288     0318                     CCPR4L          equ	792	;# 
   289     0319                     CCPR4H          equ	793	;# 
   290     031A                     CCP4CON         equ	794	;# 
   291     0394                     IOCBP           equ	916	;# 
   292     0395                     IOCBN           equ	917	;# 
   293     0396                     IOCBF           equ	918	;# 
   294     039A                     CLKRCON         equ	922	;# 
   295     039C                     MDCON           equ	924	;# 
   296     039D                     MDSRC           equ	925	;# 
   297     039E                     MDCARL          equ	926	;# 
   298     039F                     MDCARH          equ	927	;# 
   299     0415                     TMR4            equ	1045	;# 
   300     0416                     PR4             equ	1046	;# 
   301     0417                     T4CON           equ	1047	;# 
   302     041C                     TMR6            equ	1052	;# 
   303     041D                     PR6             equ	1053	;# 
   304     041E                     T6CON           equ	1054	;# 
   305     0FE4                     STATUS_SHAD     equ	4068	;# 
   306     0FE5                     WREG_SHAD       equ	4069	;# 
   307     0FE6                     BSR_SHAD        equ	4070	;# 
   308     0FE7                     PCLATH_SHAD     equ	4071	;# 
   309     0FE8                     FSR0L_SHAD      equ	4072	;# 
   310     0FE9                     FSR0H_SHAD      equ	4073	;# 
   311     0FEA                     FSR1L_SHAD      equ	4074	;# 
   312     0FEB                     FSR1H_SHAD      equ	4075	;# 
   313     0FED                     STKPTR          equ	4077	;# 
   314     0FEE                     TOSL            equ	4078	;# 
   315     0FEF                     TOSH            equ	4079	;# 
   316     0000                     INDF0           equ	0	;# 
   317     0001                     INDF1           equ	1	;# 
   318     0002                     PCL             equ	2	;# 
   319     0003                     STATUS          equ	3	;# 
   320     0004                     FSR0L           equ	4	;# 
   321     0005                     FSR0H           equ	5	;# 
   322     0006                     FSR1L           equ	6	;# 
   323     0007                     FSR1H           equ	7	;# 
   324     0008                     BSR             equ	8	;# 
   325     0009                     WREG            equ	9	;# 
   326     000A                     PCLATH          equ	10	;# 
   327     000B                     INTCON          equ	11	;# 
   328     000C                     PORTA           equ	12	;# 
   329     000D                     PORTB           equ	13	;# 
   330     0011                     PIR1            equ	17	;# 
   331     0012                     PIR2            equ	18	;# 
   332     0013                     PIR3            equ	19	;# 
   333     0014                     PIR4            equ	20	;# 
   334     0015                     TMR0            equ	21	;# 
   335     0016                     TMR1            equ	22	;# 
   336     0016                     TMR1L           equ	22	;# 
   337     0017                     TMR1H           equ	23	;# 
   338     0018                     T1CON           equ	24	;# 
   339     0019                     T1GCON          equ	25	;# 
   340     001A                     TMR2            equ	26	;# 
   341     001B                     PR2             equ	27	;# 
   342     001C                     T2CON           equ	28	;# 
   343     001E                     CPSCON0         equ	30	;# 
   344     001F                     CPSCON1         equ	31	;# 
   345     008C                     TRISA           equ	140	;# 
   346     008D                     TRISB           equ	141	;# 
   347     0091                     PIE1            equ	145	;# 
   348     0092                     PIE2            equ	146	;# 
   349     0093                     PIE3            equ	147	;# 
   350     0094                     PIE4            equ	148	;# 
   351     0095                     OPTION_REG      equ	149	;# 
   352     0096                     PCON            equ	150	;# 
   353     0097                     WDTCON          equ	151	;# 
   354     0098                     OSCTUNE         equ	152	;# 
   355     0099                     OSCCON          equ	153	;# 
   356     009A                     OSCSTAT         equ	154	;# 
   357     009B                     ADRES           equ	155	;# 
   358     009B                     ADRESL          equ	155	;# 
   359     009C                     ADRESH          equ	156	;# 
   360     009D                     ADCON0          equ	157	;# 
   361     009E                     ADCON1          equ	158	;# 
   362     010C                     LATA            equ	268	;# 
   363     010D                     LATB            equ	269	;# 
   364     0111                     CM1CON0         equ	273	;# 
   365     0112                     CM1CON1         equ	274	;# 
   366     0113                     CM2CON0         equ	275	;# 
   367     0114                     CM2CON1         equ	276	;# 
   368     0115                     CMOUT           equ	277	;# 
   369     0116                     BORCON          equ	278	;# 
   370     0117                     FVRCON          equ	279	;# 
   371     0118                     DACCON0         equ	280	;# 
   372     0119                     DACCON1         equ	281	;# 
   373     011A                     SRCON0          equ	282	;# 
   374     011B                     SRCON1          equ	283	;# 
   375     011D                     APFCON0         equ	285	;# 
   376     011E                     APFCON1         equ	286	;# 
   377     018C                     ANSELA          equ	396	;# 
   378     018D                     ANSELB          equ	397	;# 
   379     0191                     EEADR           equ	401	;# 
   380     0191                     EEADRL          equ	401	;# 
   381     0192                     EEADRH          equ	402	;# 
   382     0193                     EEDAT           equ	403	;# 
   383     0193                     EEDATL          equ	403	;# 
   384     0193                     EEDATA          equ	403	;# 
   385     0194                     EEDATH          equ	404	;# 
   386     0195                     EECON1          equ	405	;# 
   387     0196                     EECON2          equ	406	;# 
   388     0199                     RCREG           equ	409	;# 
   389     019A                     TXREG           equ	410	;# 
   390     019B                     SP1BRG          equ	411	;# 
   391     019B                     SP1BRGL         equ	411	;# 
   392     019B                     SPBRG           equ	411	;# 
   393     019B                     SPBRGL          equ	411	;# 
   394     019C                     SP1BRGH         equ	412	;# 
   395     019C                     SPBRGH          equ	412	;# 
   396     019D                     RCSTA           equ	413	;# 
   397     019E                     TXSTA           equ	414	;# 
   398     019F                     BAUDCON         equ	415	;# 
   399     020C                     WPUA            equ	524	;# 
   400     020D                     WPUB            equ	525	;# 
   401     0211                     SSP1BUF         equ	529	;# 
   402     0211                     SSPBUF          equ	529	;# 
   403     0212                     SSP1ADD         equ	530	;# 
   404     0212                     SSPADD          equ	530	;# 
   405     0213                     SSP1MSK         equ	531	;# 
   406     0213                     SSPMSK          equ	531	;# 
   407     0214                     SSP1STAT        equ	532	;# 
   408     0214                     SSPSTAT         equ	532	;# 
   409     0215                     SSP1CON1        equ	533	;# 
   410     0215                     SSPCON1         equ	533	;# 
   411     0215                     SSPCON          equ	533	;# 
   412     0216                     SSP1CON2        equ	534	;# 
   413     0216                     SSPCON2         equ	534	;# 
   414     0217                     SSP1CON3        equ	535	;# 
   415     0217                     SSPCON3         equ	535	;# 
   416     0219                     SSP2BUF         equ	537	;# 
   417     021A                     SSP2ADD         equ	538	;# 
   418     021B                     SSP2MSK         equ	539	;# 
   419     021C                     SSP2STAT        equ	540	;# 
   420     021D                     SSP2CON1        equ	541	;# 
   421     021E                     SSP2CON2        equ	542	;# 
   422     021F                     SSP2CON3        equ	543	;# 
   423     0291                     CCPR1           equ	657	;# 
   424     0291                     CCPR1L          equ	657	;# 
   425     0292                     CCPR1H          equ	658	;# 
   426     0293                     CCP1CON         equ	659	;# 
   427     0294                     PWM1CON         equ	660	;# 
   428     0295                     CCP1AS          equ	661	;# 
   429     0295                     ECCP1AS         equ	661	;# 
   430     0296                     PSTR1CON        equ	662	;# 
   431     0298                     CCPR2           equ	664	;# 
   432     0298                     CCPR2L          equ	664	;# 
   433     0299                     CCPR2H          equ	665	;# 
   434     029A                     CCP2CON         equ	666	;# 
   435     029B                     PWM2CON         equ	667	;# 
   436     029C                     CCP2AS          equ	668	;# 
   437     029C                     ECCP2AS         equ	668	;# 
   438     029D                     PSTR2CON        equ	669	;# 
   439     029E                     CCPTMRS         equ	670	;# 
   440     029E                     CCPTMRS0        equ	670	;# 
   441     0311                     CCPR3           equ	785	;# 
   442     0311                     CCPR3L          equ	785	;# 
   443     0312                     CCPR3H          equ	786	;# 
   444     0313                     CCP3CON         equ	787	;# 
   445     0318                     CCPR4           equ	792	;# 
   446     0318                     CCPR4L          equ	792	;# 
   447     0319                     CCPR4H          equ	793	;# 
   448     031A                     CCP4CON         equ	794	;# 
   449     0394                     IOCBP           equ	916	;# 
   450     0395                     IOCBN           equ	917	;# 
   451     0396                     IOCBF           equ	918	;# 
   452     039A                     CLKRCON         equ	922	;# 
   453     039C                     MDCON           equ	924	;# 
   454     039D                     MDSRC           equ	925	;# 
   455     039E                     MDCARL          equ	926	;# 
   456     039F                     MDCARH          equ	927	;# 
   457     0415                     TMR4            equ	1045	;# 
   458     0416                     PR4             equ	1046	;# 
   459     0417                     T4CON           equ	1047	;# 
   460     041C                     TMR6            equ	1052	;# 
   461     041D                     PR6             equ	1053	;# 
   462     041E                     T6CON           equ	1054	;# 
   463     0FE4                     STATUS_SHAD     equ	4068	;# 
   464     0FE5                     WREG_SHAD       equ	4069	;# 
   465     0FE6                     BSR_SHAD        equ	4070	;# 
   466     0FE7                     PCLATH_SHAD     equ	4071	;# 
   467     0FE8                     FSR0L_SHAD      equ	4072	;# 
   468     0FE9                     FSR0H_SHAD      equ	4073	;# 
   469     0FEA                     FSR1L_SHAD      equ	4074	;# 
   470     0FEB                     FSR1H_SHAD      equ	4075	;# 
   471     0FED                     STKPTR          equ	4077	;# 
   472     0FEE                     TOSL            equ	4078	;# 
   473     0FEF                     TOSH            equ	4079	;# 
   474     0000                     INDF0           equ	0	;# 
   475     0001                     INDF1           equ	1	;# 
   476     0002                     PCL             equ	2	;# 
   477     0003                     STATUS          equ	3	;# 
   478     0004                     FSR0L           equ	4	;# 
   479     0005                     FSR0H           equ	5	;# 
   480     0006                     FSR1L           equ	6	;# 
   481     0007                     FSR1H           equ	7	;# 
   482     0008                     BSR             equ	8	;# 
   483     0009                     WREG            equ	9	;# 
   484     000A                     PCLATH          equ	10	;# 
   485     000B                     INTCON          equ	11	;# 
   486     000C                     PORTA           equ	12	;# 
   487     000D                     PORTB           equ	13	;# 
   488     0011                     PIR1            equ	17	;# 
   489     0012                     PIR2            equ	18	;# 
   490     0013                     PIR3            equ	19	;# 
   491     0014                     PIR4            equ	20	;# 
   492     0015                     TMR0            equ	21	;# 
   493     0016                     TMR1            equ	22	;# 
   494     0016                     TMR1L           equ	22	;# 
   495     0017                     TMR1H           equ	23	;# 
   496     0018                     T1CON           equ	24	;# 
   497     0019                     T1GCON          equ	25	;# 
   498     001A                     TMR2            equ	26	;# 
   499     001B                     PR2             equ	27	;# 
   500     001C                     T2CON           equ	28	;# 
   501     001E                     CPSCON0         equ	30	;# 
   502     001F                     CPSCON1         equ	31	;# 
   503     008C                     TRISA           equ	140	;# 
   504     008D                     TRISB           equ	141	;# 
   505     0091                     PIE1            equ	145	;# 
   506     0092                     PIE2            equ	146	;# 
   507     0093                     PIE3            equ	147	;# 
   508     0094                     PIE4            equ	148	;# 
   509     0095                     OPTION_REG      equ	149	;# 
   510     0096                     PCON            equ	150	;# 
   511     0097                     WDTCON          equ	151	;# 
   512     0098                     OSCTUNE         equ	152	;# 
   513     0099                     OSCCON          equ	153	;# 
   514     009A                     OSCSTAT         equ	154	;# 
   515     009B                     ADRES           equ	155	;# 
   516     009B                     ADRESL          equ	155	;# 
   517     009C                     ADRESH          equ	156	;# 
   518     009D                     ADCON0          equ	157	;# 
   519     009E                     ADCON1          equ	158	;# 
   520     010C                     LATA            equ	268	;# 
   521     010D                     LATB            equ	269	;# 
   522     0111                     CM1CON0         equ	273	;# 
   523     0112                     CM1CON1         equ	274	;# 
   524     0113                     CM2CON0         equ	275	;# 
   525     0114                     CM2CON1         equ	276	;# 
   526     0115                     CMOUT           equ	277	;# 
   527     0116                     BORCON          equ	278	;# 
   528     0117                     FVRCON          equ	279	;# 
   529     0118                     DACCON0         equ	280	;# 
   530     0119                     DACCON1         equ	281	;# 
   531     011A                     SRCON0          equ	282	;# 
   532     011B                     SRCON1          equ	283	;# 
   533     011D                     APFCON0         equ	285	;# 
   534     011E                     APFCON1         equ	286	;# 
   535     018C                     ANSELA          equ	396	;# 
   536     018D                     ANSELB          equ	397	;# 
   537     0191                     EEADR           equ	401	;# 
   538     0191                     EEADRL          equ	401	;# 
   539     0192                     EEADRH          equ	402	;# 
   540     0193                     EEDAT           equ	403	;# 
   541     0193                     EEDATL          equ	403	;# 
   542     0193                     EEDATA          equ	403	;# 
   543     0194                     EEDATH          equ	404	;# 
   544     0195                     EECON1          equ	405	;# 
   545     0196                     EECON2          equ	406	;# 
   546     0199                     RCREG           equ	409	;# 
   547     019A                     TXREG           equ	410	;# 
   548     019B                     SP1BRG          equ	411	;# 
   549     019B                     SP1BRGL         equ	411	;# 
   550     019B                     SPBRG           equ	411	;# 
   551     019B                     SPBRGL          equ	411	;# 
   552     019C                     SP1BRGH         equ	412	;# 
   553     019C                     SPBRGH          equ	412	;# 
   554     019D                     RCSTA           equ	413	;# 
   555     019E                     TXSTA           equ	414	;# 
   556     019F                     BAUDCON         equ	415	;# 
   557     020C                     WPUA            equ	524	;# 
   558     020D                     WPUB            equ	525	;# 
   559     0211                     SSP1BUF         equ	529	;# 
   560     0211                     SSPBUF          equ	529	;# 
   561     0212                     SSP1ADD         equ	530	;# 
   562     0212                     SSPADD          equ	530	;# 
   563     0213                     SSP1MSK         equ	531	;# 
   564     0213                     SSPMSK          equ	531	;# 
   565     0214                     SSP1STAT        equ	532	;# 
   566     0214                     SSPSTAT         equ	532	;# 
   567     0215                     SSP1CON1        equ	533	;# 
   568     0215                     SSPCON1         equ	533	;# 
   569     0215                     SSPCON          equ	533	;# 
   570     0216                     SSP1CON2        equ	534	;# 
   571     0216                     SSPCON2         equ	534	;# 
   572     0217                     SSP1CON3        equ	535	;# 
   573     0217                     SSPCON3         equ	535	;# 
   574     0219                     SSP2BUF         equ	537	;# 
   575     021A                     SSP2ADD         equ	538	;# 
   576     021B                     SSP2MSK         equ	539	;# 
   577     021C                     SSP2STAT        equ	540	;# 
   578     021D                     SSP2CON1        equ	541	;# 
   579     021E                     SSP2CON2        equ	542	;# 
   580     021F                     SSP2CON3        equ	543	;# 
   581     0291                     CCPR1           equ	657	;# 
   582     0291                     CCPR1L          equ	657	;# 
   583     0292                     CCPR1H          equ	658	;# 
   584     0293                     CCP1CON         equ	659	;# 
   585     0294                     PWM1CON         equ	660	;# 
   586     0295                     CCP1AS          equ	661	;# 
   587     0295                     ECCP1AS         equ	661	;# 
   588     0296                     PSTR1CON        equ	662	;# 
   589     0298                     CCPR2           equ	664	;# 
   590     0298                     CCPR2L          equ	664	;# 
   591     0299                     CCPR2H          equ	665	;# 
   592     029A                     CCP2CON         equ	666	;# 
   593     029B                     PWM2CON         equ	667	;# 
   594     029C                     CCP2AS          equ	668	;# 
   595     029C                     ECCP2AS         equ	668	;# 
   596     029D                     PSTR2CON        equ	669	;# 
   597     029E                     CCPTMRS         equ	670	;# 
   598     029E                     CCPTMRS0        equ	670	;# 
   599     0311                     CCPR3           equ	785	;# 
   600     0311                     CCPR3L          equ	785	;# 
   601     0312                     CCPR3H          equ	786	;# 
   602     0313                     CCP3CON         equ	787	;# 
   603     0318                     CCPR4           equ	792	;# 
   604     0318                     CCPR4L          equ	792	;# 
   605     0319                     CCPR4H          equ	793	;# 
   606     031A                     CCP4CON         equ	794	;# 
   607     0394                     IOCBP           equ	916	;# 
   608     0395                     IOCBN           equ	917	;# 
   609     0396                     IOCBF           equ	918	;# 
   610     039A                     CLKRCON         equ	922	;# 
   611     039C                     MDCON           equ	924	;# 
   612     039D                     MDSRC           equ	925	;# 
   613     039E                     MDCARL          equ	926	;# 
   614     039F                     MDCARH          equ	927	;# 
   615     0415                     TMR4            equ	1045	;# 
   616     0416                     PR4             equ	1046	;# 
   617     0417                     T4CON           equ	1047	;# 
   618     041C                     TMR6            equ	1052	;# 
   619     041D                     PR6             equ	1053	;# 
   620     041E                     T6CON           equ	1054	;# 
   621     0FE4                     STATUS_SHAD     equ	4068	;# 
   622     0FE5                     WREG_SHAD       equ	4069	;# 
   623     0FE6                     BSR_SHAD        equ	4070	;# 
   624     0FE7                     PCLATH_SHAD     equ	4071	;# 
   625     0FE8                     FSR0L_SHAD      equ	4072	;# 
   626     0FE9                     FSR0H_SHAD      equ	4073	;# 
   627     0FEA                     FSR1L_SHAD      equ	4074	;# 
   628     0FEB                     FSR1H_SHAD      equ	4075	;# 
   629     0FED                     STKPTR          equ	4077	;# 
   630     0FEE                     TOSL            equ	4078	;# 
   631     0FEF                     TOSH            equ	4079	;# 
   632     0000                     INDF0           equ	0	;# 
   633     0001                     INDF1           equ	1	;# 
   634     0002                     PCL             equ	2	;# 
   635     0003                     STATUS          equ	3	;# 
   636     0004                     FSR0L           equ	4	;# 
   637     0005                     FSR0H           equ	5	;# 
   638     0006                     FSR1L           equ	6	;# 
   639     0007                     FSR1H           equ	7	;# 
   640     0008                     BSR             equ	8	;# 
   641     0009                     WREG            equ	9	;# 
   642     000A                     PCLATH          equ	10	;# 
   643     000B                     INTCON          equ	11	;# 
   644     000C                     PORTA           equ	12	;# 
   645     000D                     PORTB           equ	13	;# 
   646     0011                     PIR1            equ	17	;# 
   647     0012                     PIR2            equ	18	;# 
   648     0013                     PIR3            equ	19	;# 
   649     0014                     PIR4            equ	20	;# 
   650     0015                     TMR0            equ	21	;# 
   651     0016                     TMR1            equ	22	;# 
   652     0016                     TMR1L           equ	22	;# 
   653     0017                     TMR1H           equ	23	;# 
   654     0018                     T1CON           equ	24	;# 
   655     0019                     T1GCON          equ	25	;# 
   656     001A                     TMR2            equ	26	;# 
   657     001B                     PR2             equ	27	;# 
   658     001C                     T2CON           equ	28	;# 
   659     001E                     CPSCON0         equ	30	;# 
   660     001F                     CPSCON1         equ	31	;# 
   661     008C                     TRISA           equ	140	;# 
   662     008D                     TRISB           equ	141	;# 
   663     0091                     PIE1            equ	145	;# 
   664     0092                     PIE2            equ	146	;# 
   665     0093                     PIE3            equ	147	;# 
   666     0094                     PIE4            equ	148	;# 
   667     0095                     OPTION_REG      equ	149	;# 
   668     0096                     PCON            equ	150	;# 
   669     0097                     WDTCON          equ	151	;# 
   670     0098                     OSCTUNE         equ	152	;# 
   671     0099                     OSCCON          equ	153	;# 
   672     009A                     OSCSTAT         equ	154	;# 
   673     009B                     ADRES           equ	155	;# 
   674     009B                     ADRESL          equ	155	;# 
   675     009C                     ADRESH          equ	156	;# 
   676     009D                     ADCON0          equ	157	;# 
   677     009E                     ADCON1          equ	158	;# 
   678     010C                     LATA            equ	268	;# 
   679     010D                     LATB            equ	269	;# 
   680     0111                     CM1CON0         equ	273	;# 
   681     0112                     CM1CON1         equ	274	;# 
   682     0113                     CM2CON0         equ	275	;# 
   683     0114                     CM2CON1         equ	276	;# 
   684     0115                     CMOUT           equ	277	;# 
   685     0116                     BORCON          equ	278	;# 
   686     0117                     FVRCON          equ	279	;# 
   687     0118                     DACCON0         equ	280	;# 
   688     0119                     DACCON1         equ	281	;# 
   689     011A                     SRCON0          equ	282	;# 
   690     011B                     SRCON1          equ	283	;# 
   691     011D                     APFCON0         equ	285	;# 
   692     011E                     APFCON1         equ	286	;# 
   693     018C                     ANSELA          equ	396	;# 
   694     018D                     ANSELB          equ	397	;# 
   695     0191                     EEADR           equ	401	;# 
   696     0191                     EEADRL          equ	401	;# 
   697     0192                     EEADRH          equ	402	;# 
   698     0193                     EEDAT           equ	403	;# 
   699     0193                     EEDATL          equ	403	;# 
   700     0193                     EEDATA          equ	403	;# 
   701     0194                     EEDATH          equ	404	;# 
   702     0195                     EECON1          equ	405	;# 
   703     0196                     EECON2          equ	406	;# 
   704     0199                     RCREG           equ	409	;# 
   705     019A                     TXREG           equ	410	;# 
   706     019B                     SP1BRG          equ	411	;# 
   707     019B                     SP1BRGL         equ	411	;# 
   708     019B                     SPBRG           equ	411	;# 
   709     019B                     SPBRGL          equ	411	;# 
   710     019C                     SP1BRGH         equ	412	;# 
   711     019C                     SPBRGH          equ	412	;# 
   712     019D                     RCSTA           equ	413	;# 
   713     019E                     TXSTA           equ	414	;# 
   714     019F                     BAUDCON         equ	415	;# 
   715     020C                     WPUA            equ	524	;# 
   716     020D                     WPUB            equ	525	;# 
   717     0211                     SSP1BUF         equ	529	;# 
   718     0211                     SSPBUF          equ	529	;# 
   719     0212                     SSP1ADD         equ	530	;# 
   720     0212                     SSPADD          equ	530	;# 
   721     0213                     SSP1MSK         equ	531	;# 
   722     0213                     SSPMSK          equ	531	;# 
   723     0214                     SSP1STAT        equ	532	;# 
   724     0214                     SSPSTAT         equ	532	;# 
   725     0215                     SSP1CON1        equ	533	;# 
   726     0215                     SSPCON1         equ	533	;# 
   727     0215                     SSPCON          equ	533	;# 
   728     0216                     SSP1CON2        equ	534	;# 
   729     0216                     SSPCON2         equ	534	;# 
   730     0217                     SSP1CON3        equ	535	;# 
   731     0217                     SSPCON3         equ	535	;# 
   732     0219                     SSP2BUF         equ	537	;# 
   733     021A                     SSP2ADD         equ	538	;# 
   734     021B                     SSP2MSK         equ	539	;# 
   735     021C                     SSP2STAT        equ	540	;# 
   736     021D                     SSP2CON1        equ	541	;# 
   737     021E                     SSP2CON2        equ	542	;# 
   738     021F                     SSP2CON3        equ	543	;# 
   739     0291                     CCPR1           equ	657	;# 
   740     0291                     CCPR1L          equ	657	;# 
   741     0292                     CCPR1H          equ	658	;# 
   742     0293                     CCP1CON         equ	659	;# 
   743     0294                     PWM1CON         equ	660	;# 
   744     0295                     CCP1AS          equ	661	;# 
   745     0295                     ECCP1AS         equ	661	;# 
   746     0296                     PSTR1CON        equ	662	;# 
   747     0298                     CCPR2           equ	664	;# 
   748     0298                     CCPR2L          equ	664	;# 
   749     0299                     CCPR2H          equ	665	;# 
   750     029A                     CCP2CON         equ	666	;# 
   751     029B                     PWM2CON         equ	667	;# 
   752     029C                     CCP2AS          equ	668	;# 
   753     029C                     ECCP2AS         equ	668	;# 
   754     029D                     PSTR2CON        equ	669	;# 
   755     029E                     CCPTMRS         equ	670	;# 
   756     029E                     CCPTMRS0        equ	670	;# 
   757     0311                     CCPR3           equ	785	;# 
   758     0311                     CCPR3L          equ	785	;# 
   759     0312                     CCPR3H          equ	786	;# 
   760     0313                     CCP3CON         equ	787	;# 
   761     0318                     CCPR4           equ	792	;# 
   762     0318                     CCPR4L          equ	792	;# 
   763     0319                     CCPR4H          equ	793	;# 
   764     031A                     CCP4CON         equ	794	;# 
   765     0394                     IOCBP           equ	916	;# 
   766     0395                     IOCBN           equ	917	;# 
   767     0396                     IOCBF           equ	918	;# 
   768     039A                     CLKRCON         equ	922	;# 
   769     039C                     MDCON           equ	924	;# 
   770     039D                     MDSRC           equ	925	;# 
   771     039E                     MDCARL          equ	926	;# 
   772     039F                     MDCARH          equ	927	;# 
   773     0415                     TMR4            equ	1045	;# 
   774     0416                     PR4             equ	1046	;# 
   775     0417                     T4CON           equ	1047	;# 
   776     041C                     TMR6            equ	1052	;# 
   777     041D                     PR6             equ	1053	;# 
   778     041E                     T6CON           equ	1054	;# 
   779     0FE4                     STATUS_SHAD     equ	4068	;# 
   780     0FE5                     WREG_SHAD       equ	4069	;# 
   781     0FE6                     BSR_SHAD        equ	4070	;# 
   782     0FE7                     PCLATH_SHAD     equ	4071	;# 
   783     0FE8                     FSR0L_SHAD      equ	4072	;# 
   784     0FE9                     FSR0H_SHAD      equ	4073	;# 
   785     0FEA                     FSR1L_SHAD      equ	4074	;# 
   786     0FEB                     FSR1H_SHAD      equ	4075	;# 
   787     0FED                     STKPTR          equ	4077	;# 
   788     0FEE                     TOSL            equ	4078	;# 
   789     0FEF                     TOSH            equ	4079	;# 
   790     0000                     INDF0           equ	0	;# 
   791     0001                     INDF1           equ	1	;# 
   792     0002                     PCL             equ	2	;# 
   793     0003                     STATUS          equ	3	;# 
   794     0004                     FSR0L           equ	4	;# 
   795     0005                     FSR0H           equ	5	;# 
   796     0006                     FSR1L           equ	6	;# 
   797     0007                     FSR1H           equ	7	;# 
   798     0008                     BSR             equ	8	;# 
   799     0009                     WREG            equ	9	;# 
   800     000A                     PCLATH          equ	10	;# 
   801     000B                     INTCON          equ	11	;# 
   802     000C                     PORTA           equ	12	;# 
   803     000D                     PORTB           equ	13	;# 
   804     0011                     PIR1            equ	17	;# 
   805     0012                     PIR2            equ	18	;# 
   806     0013                     PIR3            equ	19	;# 
   807     0014                     PIR4            equ	20	;# 
   808     0015                     TMR0            equ	21	;# 
   809     0016                     TMR1            equ	22	;# 
   810     0016                     TMR1L           equ	22	;# 
   811     0017                     TMR1H           equ	23	;# 
   812     0018                     T1CON           equ	24	;# 
   813     0019                     T1GCON          equ	25	;# 
   814     001A                     TMR2            equ	26	;# 
   815     001B                     PR2             equ	27	;# 
   816     001C                     T2CON           equ	28	;# 
   817     001E                     CPSCON0         equ	30	;# 
   818     001F                     CPSCON1         equ	31	;# 
   819     008C                     TRISA           equ	140	;# 
   820     008D                     TRISB           equ	141	;# 
   821     0091                     PIE1            equ	145	;# 
   822     0092                     PIE2            equ	146	;# 
   823     0093                     PIE3            equ	147	;# 
   824     0094                     PIE4            equ	148	;# 
   825     0095                     OPTION_REG      equ	149	;# 
   826     0096                     PCON            equ	150	;# 
   827     0097                     WDTCON          equ	151	;# 
   828     0098                     OSCTUNE         equ	152	;# 
   829     0099                     OSCCON          equ	153	;# 
   830     009A                     OSCSTAT         equ	154	;# 
   831     009B                     ADRES           equ	155	;# 
   832     009B                     ADRESL          equ	155	;# 
   833     009C                     ADRESH          equ	156	;# 
   834     009D                     ADCON0          equ	157	;# 
   835     009E                     ADCON1          equ	158	;# 
   836     010C                     LATA            equ	268	;# 
   837     010D                     LATB            equ	269	;# 
   838     0111                     CM1CON0         equ	273	;# 
   839     0112                     CM1CON1         equ	274	;# 
   840     0113                     CM2CON0         equ	275	;# 
   841     0114                     CM2CON1         equ	276	;# 
   842     0115                     CMOUT           equ	277	;# 
   843     0116                     BORCON          equ	278	;# 
   844     0117                     FVRCON          equ	279	;# 
   845     0118                     DACCON0         equ	280	;# 
   846     0119                     DACCON1         equ	281	;# 
   847     011A                     SRCON0          equ	282	;# 
   848     011B                     SRCON1          equ	283	;# 
   849     011D                     APFCON0         equ	285	;# 
   850     011E                     APFCON1         equ	286	;# 
   851     018C                     ANSELA          equ	396	;# 
   852     018D                     ANSELB          equ	397	;# 
   853     0191                     EEADR           equ	401	;# 
   854     0191                     EEADRL          equ	401	;# 
   855     0192                     EEADRH          equ	402	;# 
   856     0193                     EEDAT           equ	403	;# 
   857     0193                     EEDATL          equ	403	;# 
   858     0193                     EEDATA          equ	403	;# 
   859     0194                     EEDATH          equ	404	;# 
   860     0195                     EECON1          equ	405	;# 
   861     0196                     EECON2          equ	406	;# 
   862     0199                     RCREG           equ	409	;# 
   863     019A                     TXREG           equ	410	;# 
   864     019B                     SP1BRG          equ	411	;# 
   865     019B                     SP1BRGL         equ	411	;# 
   866     019B                     SPBRG           equ	411	;# 
   867     019B                     SPBRGL          equ	411	;# 
   868     019C                     SP1BRGH         equ	412	;# 
   869     019C                     SPBRGH          equ	412	;# 
   870     019D                     RCSTA           equ	413	;# 
   871     019E                     TXSTA           equ	414	;# 
   872     019F                     BAUDCON         equ	415	;# 
   873     020C                     WPUA            equ	524	;# 
   874     020D                     WPUB            equ	525	;# 
   875     0211                     SSP1BUF         equ	529	;# 
   876     0211                     SSPBUF          equ	529	;# 
   877     0212                     SSP1ADD         equ	530	;# 
   878     0212                     SSPADD          equ	530	;# 
   879     0213                     SSP1MSK         equ	531	;# 
   880     0213                     SSPMSK          equ	531	;# 
   881     0214                     SSP1STAT        equ	532	;# 
   882     0214                     SSPSTAT         equ	532	;# 
   883     0215                     SSP1CON1        equ	533	;# 
   884     0215                     SSPCON1         equ	533	;# 
   885     0215                     SSPCON          equ	533	;# 
   886     0216                     SSP1CON2        equ	534	;# 
   887     0216                     SSPCON2         equ	534	;# 
   888     0217                     SSP1CON3        equ	535	;# 
   889     0217                     SSPCON3         equ	535	;# 
   890     0219                     SSP2BUF         equ	537	;# 
   891     021A                     SSP2ADD         equ	538	;# 
   892     021B                     SSP2MSK         equ	539	;# 
   893     021C                     SSP2STAT        equ	540	;# 
   894     021D                     SSP2CON1        equ	541	;# 
   895     021E                     SSP2CON2        equ	542	;# 
   896     021F                     SSP2CON3        equ	543	;# 
   897     0291                     CCPR1           equ	657	;# 
   898     0291                     CCPR1L          equ	657	;# 
   899     0292                     CCPR1H          equ	658	;# 
   900     0293                     CCP1CON         equ	659	;# 
   901     0294                     PWM1CON         equ	660	;# 
   902     0295                     CCP1AS          equ	661	;# 
   903     0295                     ECCP1AS         equ	661	;# 
   904     0296                     PSTR1CON        equ	662	;# 
   905     0298                     CCPR2           equ	664	;# 
   906     0298                     CCPR2L          equ	664	;# 
   907     0299                     CCPR2H          equ	665	;# 
   908     029A                     CCP2CON         equ	666	;# 
   909     029B                     PWM2CON         equ	667	;# 
   910     029C                     CCP2AS          equ	668	;# 
   911     029C                     ECCP2AS         equ	668	;# 
   912     029D                     PSTR2CON        equ	669	;# 
   913     029E                     CCPTMRS         equ	670	;# 
   914     029E                     CCPTMRS0        equ	670	;# 
   915     0311                     CCPR3           equ	785	;# 
   916     0311                     CCPR3L          equ	785	;# 
   917     0312                     CCPR3H          equ	786	;# 
   918     0313                     CCP3CON         equ	787	;# 
   919     0318                     CCPR4           equ	792	;# 
   920     0318                     CCPR4L          equ	792	;# 
   921     0319                     CCPR4H          equ	793	;# 
   922     031A                     CCP4CON         equ	794	;# 
   923     0394                     IOCBP           equ	916	;# 
   924     0395                     IOCBN           equ	917	;# 
   925     0396                     IOCBF           equ	918	;# 
   926     039A                     CLKRCON         equ	922	;# 
   927     039C                     MDCON           equ	924	;# 
   928     039D                     MDSRC           equ	925	;# 
   929     039E                     MDCARL          equ	926	;# 
   930     039F                     MDCARH          equ	927	;# 
   931     0415                     TMR4            equ	1045	;# 
   932     0416                     PR4             equ	1046	;# 
   933     0417                     T4CON           equ	1047	;# 
   934     041C                     TMR6            equ	1052	;# 
   935     041D                     PR6             equ	1053	;# 
   936     041E                     T6CON           equ	1054	;# 
   937     0FE4                     STATUS_SHAD     equ	4068	;# 
   938     0FE5                     WREG_SHAD       equ	4069	;# 
   939     0FE6                     BSR_SHAD        equ	4070	;# 
   940     0FE7                     PCLATH_SHAD     equ	4071	;# 
   941     0FE8                     FSR0L_SHAD      equ	4072	;# 
   942     0FE9                     FSR0H_SHAD      equ	4073	;# 
   943     0FEA                     FSR1L_SHAD      equ	4074	;# 
   944     0FEB                     FSR1H_SHAD      equ	4075	;# 
   945     0FED                     STKPTR          equ	4077	;# 
   946     0FEE                     TOSL            equ	4078	;# 
   947     0FEF                     TOSH            equ	4079	;# 
   948     0000                     INDF0           equ	0	;# 
   949     0001                     INDF1           equ	1	;# 
   950     0002                     PCL             equ	2	;# 
   951     0003                     STATUS          equ	3	;# 
   952     0004                     FSR0L           equ	4	;# 
   953     0005                     FSR0H           equ	5	;# 
   954     0006                     FSR1L           equ	6	;# 
   955     0007                     FSR1H           equ	7	;# 
   956     0008                     BSR             equ	8	;# 
   957     0009                     WREG            equ	9	;# 
   958     000A                     PCLATH          equ	10	;# 
   959     000B                     INTCON          equ	11	;# 
   960     000C                     PORTA           equ	12	;# 
   961     000D                     PORTB           equ	13	;# 
   962     0011                     PIR1            equ	17	;# 
   963     0012                     PIR2            equ	18	;# 
   964     0013                     PIR3            equ	19	;# 
   965     0014                     PIR4            equ	20	;# 
   966     0015                     TMR0            equ	21	;# 
   967     0016                     TMR1            equ	22	;# 
   968     0016                     TMR1L           equ	22	;# 
   969     0017                     TMR1H           equ	23	;# 
   970     0018                     T1CON           equ	24	;# 
   971     0019                     T1GCON          equ	25	;# 
   972     001A                     TMR2            equ	26	;# 
   973     001B                     PR2             equ	27	;# 
   974     001C                     T2CON           equ	28	;# 
   975     001E                     CPSCON0         equ	30	;# 
   976     001F                     CPSCON1         equ	31	;# 
   977     008C                     TRISA           equ	140	;# 
   978     008D                     TRISB           equ	141	;# 
   979     0091                     PIE1            equ	145	;# 
   980     0092                     PIE2            equ	146	;# 
   981     0093                     PIE3            equ	147	;# 
   982     0094                     PIE4            equ	148	;# 
   983     0095                     OPTION_REG      equ	149	;# 
   984     0096                     PCON            equ	150	;# 
   985     0097                     WDTCON          equ	151	;# 
   986     0098                     OSCTUNE         equ	152	;# 
   987     0099                     OSCCON          equ	153	;# 
   988     009A                     OSCSTAT         equ	154	;# 
   989     009B                     ADRES           equ	155	;# 
   990     009B                     ADRESL          equ	155	;# 
   991     009C                     ADRESH          equ	156	;# 
   992     009D                     ADCON0          equ	157	;# 
   993     009E                     ADCON1          equ	158	;# 
   994     010C                     LATA            equ	268	;# 
   995     010D                     LATB            equ	269	;# 
   996     0111                     CM1CON0         equ	273	;# 
   997     0112                     CM1CON1         equ	274	;# 
   998     0113                     CM2CON0         equ	275	;# 
   999     0114                     CM2CON1         equ	276	;# 
  1000     0115                     CMOUT           equ	277	;# 
  1001     0116                     BORCON          equ	278	;# 
  1002     0117                     FVRCON          equ	279	;# 
  1003     0118                     DACCON0         equ	280	;# 
  1004     0119                     DACCON1         equ	281	;# 
  1005     011A                     SRCON0          equ	282	;# 
  1006     011B                     SRCON1          equ	283	;# 
  1007     011D                     APFCON0         equ	285	;# 
  1008     011E                     APFCON1         equ	286	;# 
  1009     018C                     ANSELA          equ	396	;# 
  1010     018D                     ANSELB          equ	397	;# 
  1011     0191                     EEADR           equ	401	;# 
  1012     0191                     EEADRL          equ	401	;# 
  1013     0192                     EEADRH          equ	402	;# 
  1014     0193                     EEDAT           equ	403	;# 
  1015     0193                     EEDATL          equ	403	;# 
  1016     0193                     EEDATA          equ	403	;# 
  1017     0194                     EEDATH          equ	404	;# 
  1018     0195                     EECON1          equ	405	;# 
  1019     0196                     EECON2          equ	406	;# 
  1020     0199                     RCREG           equ	409	;# 
  1021     019A                     TXREG           equ	410	;# 
  1022     019B                     SP1BRG          equ	411	;# 
  1023     019B                     SP1BRGL         equ	411	;# 
  1024     019B                     SPBRG           equ	411	;# 
  1025     019B                     SPBRGL          equ	411	;# 
  1026     019C                     SP1BRGH         equ	412	;# 
  1027     019C                     SPBRGH          equ	412	;# 
  1028     019D                     RCSTA           equ	413	;# 
  1029     019E                     TXSTA           equ	414	;# 
  1030     019F                     BAUDCON         equ	415	;# 
  1031     020C                     WPUA            equ	524	;# 
  1032     020D                     WPUB            equ	525	;# 
  1033     0211                     SSP1BUF         equ	529	;# 
  1034     0211                     SSPBUF          equ	529	;# 
  1035     0212                     SSP1ADD         equ	530	;# 
  1036     0212                     SSPADD          equ	530	;# 
  1037     0213                     SSP1MSK         equ	531	;# 
  1038     0213                     SSPMSK          equ	531	;# 
  1039     0214                     SSP1STAT        equ	532	;# 
  1040     0214                     SSPSTAT         equ	532	;# 
  1041     0215                     SSP1CON1        equ	533	;# 
  1042     0215                     SSPCON1         equ	533	;# 
  1043     0215                     SSPCON          equ	533	;# 
  1044     0216                     SSP1CON2        equ	534	;# 
  1045     0216                     SSPCON2         equ	534	;# 
  1046     0217                     SSP1CON3        equ	535	;# 
  1047     0217                     SSPCON3         equ	535	;# 
  1048     0219                     SSP2BUF         equ	537	;# 
  1049     021A                     SSP2ADD         equ	538	;# 
  1050     021B                     SSP2MSK         equ	539	;# 
  1051     021C                     SSP2STAT        equ	540	;# 
  1052     021D                     SSP2CON1        equ	541	;# 
  1053     021E                     SSP2CON2        equ	542	;# 
  1054     021F                     SSP2CON3        equ	543	;# 
  1055     0291                     CCPR1           equ	657	;# 
  1056     0291                     CCPR1L          equ	657	;# 
  1057     0292                     CCPR1H          equ	658	;# 
  1058     0293                     CCP1CON         equ	659	;# 
  1059     0294                     PWM1CON         equ	660	;# 
  1060     0295                     CCP1AS          equ	661	;# 
  1061     0295                     ECCP1AS         equ	661	;# 
  1062     0296                     PSTR1CON        equ	662	;# 
  1063     0298                     CCPR2           equ	664	;# 
  1064     0298                     CCPR2L          equ	664	;# 
  1065     0299                     CCPR2H          equ	665	;# 
  1066     029A                     CCP2CON         equ	666	;# 
  1067     029B                     PWM2CON         equ	667	;# 
  1068     029C                     CCP2AS          equ	668	;# 
  1069     029C                     ECCP2AS         equ	668	;# 
  1070     029D                     PSTR2CON        equ	669	;# 
  1071     029E                     CCPTMRS         equ	670	;# 
  1072     029E                     CCPTMRS0        equ	670	;# 
  1073     0311                     CCPR3           equ	785	;# 
  1074     0311                     CCPR3L          equ	785	;# 
  1075     0312                     CCPR3H          equ	786	;# 
  1076     0313                     CCP3CON         equ	787	;# 
  1077     0318                     CCPR4           equ	792	;# 
  1078     0318                     CCPR4L          equ	792	;# 
  1079     0319                     CCPR4H          equ	793	;# 
  1080     031A                     CCP4CON         equ	794	;# 
  1081     0394                     IOCBP           equ	916	;# 
  1082     0395                     IOCBN           equ	917	;# 
  1083     0396                     IOCBF           equ	918	;# 
  1084     039A                     CLKRCON         equ	922	;# 
  1085     039C                     MDCON           equ	924	;# 
  1086     039D                     MDSRC           equ	925	;# 
  1087     039E                     MDCARL          equ	926	;# 
  1088     039F                     MDCARH          equ	927	;# 
  1089     0415                     TMR4            equ	1045	;# 
  1090     0416                     PR4             equ	1046	;# 
  1091     0417                     T4CON           equ	1047	;# 
  1092     041C                     TMR6            equ	1052	;# 
  1093     041D                     PR6             equ	1053	;# 
  1094     041E                     T6CON           equ	1054	;# 
  1095     0FE4                     STATUS_SHAD     equ	4068	;# 
  1096     0FE5                     WREG_SHAD       equ	4069	;# 
  1097     0FE6                     BSR_SHAD        equ	4070	;# 
  1098     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1099     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1100     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1101     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1102     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1103     0FED                     STKPTR          equ	4077	;# 
  1104     0FEE                     TOSL            equ	4078	;# 
  1105     0FEF                     TOSH            equ	4079	;# 
  1106     0000                     INDF0           equ	0	;# 
  1107     0001                     INDF1           equ	1	;# 
  1108     0002                     PCL             equ	2	;# 
  1109     0003                     STATUS          equ	3	;# 
  1110     0004                     FSR0L           equ	4	;# 
  1111     0005                     FSR0H           equ	5	;# 
  1112     0006                     FSR1L           equ	6	;# 
  1113     0007                     FSR1H           equ	7	;# 
  1114     0008                     BSR             equ	8	;# 
  1115     0009                     WREG            equ	9	;# 
  1116     000A                     PCLATH          equ	10	;# 
  1117     000B                     INTCON          equ	11	;# 
  1118     000C                     PORTA           equ	12	;# 
  1119     000D                     PORTB           equ	13	;# 
  1120     0011                     PIR1            equ	17	;# 
  1121     0012                     PIR2            equ	18	;# 
  1122     0013                     PIR3            equ	19	;# 
  1123     0014                     PIR4            equ	20	;# 
  1124     0015                     TMR0            equ	21	;# 
  1125     0016                     TMR1            equ	22	;# 
  1126     0016                     TMR1L           equ	22	;# 
  1127     0017                     TMR1H           equ	23	;# 
  1128     0018                     T1CON           equ	24	;# 
  1129     0019                     T1GCON          equ	25	;# 
  1130     001A                     TMR2            equ	26	;# 
  1131     001B                     PR2             equ	27	;# 
  1132     001C                     T2CON           equ	28	;# 
  1133     001E                     CPSCON0         equ	30	;# 
  1134     001F                     CPSCON1         equ	31	;# 
  1135     008C                     TRISA           equ	140	;# 
  1136     008D                     TRISB           equ	141	;# 
  1137     0091                     PIE1            equ	145	;# 
  1138     0092                     PIE2            equ	146	;# 
  1139     0093                     PIE3            equ	147	;# 
  1140     0094                     PIE4            equ	148	;# 
  1141     0095                     OPTION_REG      equ	149	;# 
  1142     0096                     PCON            equ	150	;# 
  1143     0097                     WDTCON          equ	151	;# 
  1144     0098                     OSCTUNE         equ	152	;# 
  1145     0099                     OSCCON          equ	153	;# 
  1146     009A                     OSCSTAT         equ	154	;# 
  1147     009B                     ADRES           equ	155	;# 
  1148     009B                     ADRESL          equ	155	;# 
  1149     009C                     ADRESH          equ	156	;# 
  1150     009D                     ADCON0          equ	157	;# 
  1151     009E                     ADCON1          equ	158	;# 
  1152     010C                     LATA            equ	268	;# 
  1153     010D                     LATB            equ	269	;# 
  1154     0111                     CM1CON0         equ	273	;# 
  1155     0112                     CM1CON1         equ	274	;# 
  1156     0113                     CM2CON0         equ	275	;# 
  1157     0114                     CM2CON1         equ	276	;# 
  1158     0115                     CMOUT           equ	277	;# 
  1159     0116                     BORCON          equ	278	;# 
  1160     0117                     FVRCON          equ	279	;# 
  1161     0118                     DACCON0         equ	280	;# 
  1162     0119                     DACCON1         equ	281	;# 
  1163     011A                     SRCON0          equ	282	;# 
  1164     011B                     SRCON1          equ	283	;# 
  1165     011D                     APFCON0         equ	285	;# 
  1166     011E                     APFCON1         equ	286	;# 
  1167     018C                     ANSELA          equ	396	;# 
  1168     018D                     ANSELB          equ	397	;# 
  1169     0191                     EEADR           equ	401	;# 
  1170     0191                     EEADRL          equ	401	;# 
  1171     0192                     EEADRH          equ	402	;# 
  1172     0193                     EEDAT           equ	403	;# 
  1173     0193                     EEDATL          equ	403	;# 
  1174     0193                     EEDATA          equ	403	;# 
  1175     0194                     EEDATH          equ	404	;# 
  1176     0195                     EECON1          equ	405	;# 
  1177     0196                     EECON2          equ	406	;# 
  1178     0199                     RCREG           equ	409	;# 
  1179     019A                     TXREG           equ	410	;# 
  1180     019B                     SP1BRG          equ	411	;# 
  1181     019B                     SP1BRGL         equ	411	;# 
  1182     019B                     SPBRG           equ	411	;# 
  1183     019B                     SPBRGL          equ	411	;# 
  1184     019C                     SP1BRGH         equ	412	;# 
  1185     019C                     SPBRGH          equ	412	;# 
  1186     019D                     RCSTA           equ	413	;# 
  1187     019E                     TXSTA           equ	414	;# 
  1188     019F                     BAUDCON         equ	415	;# 
  1189     020C                     WPUA            equ	524	;# 
  1190     020D                     WPUB            equ	525	;# 
  1191     0211                     SSP1BUF         equ	529	;# 
  1192     0211                     SSPBUF          equ	529	;# 
  1193     0212                     SSP1ADD         equ	530	;# 
  1194     0212                     SSPADD          equ	530	;# 
  1195     0213                     SSP1MSK         equ	531	;# 
  1196     0213                     SSPMSK          equ	531	;# 
  1197     0214                     SSP1STAT        equ	532	;# 
  1198     0214                     SSPSTAT         equ	532	;# 
  1199     0215                     SSP1CON1        equ	533	;# 
  1200     0215                     SSPCON1         equ	533	;# 
  1201     0215                     SSPCON          equ	533	;# 
  1202     0216                     SSP1CON2        equ	534	;# 
  1203     0216                     SSPCON2         equ	534	;# 
  1204     0217                     SSP1CON3        equ	535	;# 
  1205     0217                     SSPCON3         equ	535	;# 
  1206     0219                     SSP2BUF         equ	537	;# 
  1207     021A                     SSP2ADD         equ	538	;# 
  1208     021B                     SSP2MSK         equ	539	;# 
  1209     021C                     SSP2STAT        equ	540	;# 
  1210     021D                     SSP2CON1        equ	541	;# 
  1211     021E                     SSP2CON2        equ	542	;# 
  1212     021F                     SSP2CON3        equ	543	;# 
  1213     0291                     CCPR1           equ	657	;# 
  1214     0291                     CCPR1L          equ	657	;# 
  1215     0292                     CCPR1H          equ	658	;# 
  1216     0293                     CCP1CON         equ	659	;# 
  1217     0294                     PWM1CON         equ	660	;# 
  1218     0295                     CCP1AS          equ	661	;# 
  1219     0295                     ECCP1AS         equ	661	;# 
  1220     0296                     PSTR1CON        equ	662	;# 
  1221     0298                     CCPR2           equ	664	;# 
  1222     0298                     CCPR2L          equ	664	;# 
  1223     0299                     CCPR2H          equ	665	;# 
  1224     029A                     CCP2CON         equ	666	;# 
  1225     029B                     PWM2CON         equ	667	;# 
  1226     029C                     CCP2AS          equ	668	;# 
  1227     029C                     ECCP2AS         equ	668	;# 
  1228     029D                     PSTR2CON        equ	669	;# 
  1229     029E                     CCPTMRS         equ	670	;# 
  1230     029E                     CCPTMRS0        equ	670	;# 
  1231     0311                     CCPR3           equ	785	;# 
  1232     0311                     CCPR3L          equ	785	;# 
  1233     0312                     CCPR3H          equ	786	;# 
  1234     0313                     CCP3CON         equ	787	;# 
  1235     0318                     CCPR4           equ	792	;# 
  1236     0318                     CCPR4L          equ	792	;# 
  1237     0319                     CCPR4H          equ	793	;# 
  1238     031A                     CCP4CON         equ	794	;# 
  1239     0394                     IOCBP           equ	916	;# 
  1240     0395                     IOCBN           equ	917	;# 
  1241     0396                     IOCBF           equ	918	;# 
  1242     039A                     CLKRCON         equ	922	;# 
  1243     039C                     MDCON           equ	924	;# 
  1244     039D                     MDSRC           equ	925	;# 
  1245     039E                     MDCARL          equ	926	;# 
  1246     039F                     MDCARH          equ	927	;# 
  1247     0415                     TMR4            equ	1045	;# 
  1248     0416                     PR4             equ	1046	;# 
  1249     0417                     T4CON           equ	1047	;# 
  1250     041C                     TMR6            equ	1052	;# 
  1251     041D                     PR6             equ	1053	;# 
  1252     041E                     T6CON           equ	1054	;# 
  1253     0FE4                     STATUS_SHAD     equ	4068	;# 
  1254     0FE5                     WREG_SHAD       equ	4069	;# 
  1255     0FE6                     BSR_SHAD        equ	4070	;# 
  1256     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1257     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1258     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1259     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1260     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1261     0FED                     STKPTR          equ	4077	;# 
  1262     0FEE                     TOSL            equ	4078	;# 
  1263     0FEF                     TOSH            equ	4079	;# 
  1264     0000                     INDF0           equ	0	;# 
  1265     0001                     INDF1           equ	1	;# 
  1266     0002                     PCL             equ	2	;# 
  1267     0003                     STATUS          equ	3	;# 
  1268     0004                     FSR0L           equ	4	;# 
  1269     0005                     FSR0H           equ	5	;# 
  1270     0006                     FSR1L           equ	6	;# 
  1271     0007                     FSR1H           equ	7	;# 
  1272     0008                     BSR             equ	8	;# 
  1273     0009                     WREG            equ	9	;# 
  1274     000A                     PCLATH          equ	10	;# 
  1275     000B                     INTCON          equ	11	;# 
  1276     000C                     PORTA           equ	12	;# 
  1277     000D                     PORTB           equ	13	;# 
  1278     0011                     PIR1            equ	17	;# 
  1279     0012                     PIR2            equ	18	;# 
  1280     0013                     PIR3            equ	19	;# 
  1281     0014                     PIR4            equ	20	;# 
  1282     0015                     TMR0            equ	21	;# 
  1283     0016                     TMR1            equ	22	;# 
  1284     0016                     TMR1L           equ	22	;# 
  1285     0017                     TMR1H           equ	23	;# 
  1286     0018                     T1CON           equ	24	;# 
  1287     0019                     T1GCON          equ	25	;# 
  1288     001A                     TMR2            equ	26	;# 
  1289     001B                     PR2             equ	27	;# 
  1290     001C                     T2CON           equ	28	;# 
  1291     001E                     CPSCON0         equ	30	;# 
  1292     001F                     CPSCON1         equ	31	;# 
  1293     008C                     TRISA           equ	140	;# 
  1294     008D                     TRISB           equ	141	;# 
  1295     0091                     PIE1            equ	145	;# 
  1296     0092                     PIE2            equ	146	;# 
  1297     0093                     PIE3            equ	147	;# 
  1298     0094                     PIE4            equ	148	;# 
  1299     0095                     OPTION_REG      equ	149	;# 
  1300     0096                     PCON            equ	150	;# 
  1301     0097                     WDTCON          equ	151	;# 
  1302     0098                     OSCTUNE         equ	152	;# 
  1303     0099                     OSCCON          equ	153	;# 
  1304     009A                     OSCSTAT         equ	154	;# 
  1305     009B                     ADRES           equ	155	;# 
  1306     009B                     ADRESL          equ	155	;# 
  1307     009C                     ADRESH          equ	156	;# 
  1308     009D                     ADCON0          equ	157	;# 
  1309     009E                     ADCON1          equ	158	;# 
  1310     010C                     LATA            equ	268	;# 
  1311     010D                     LATB            equ	269	;# 
  1312     0111                     CM1CON0         equ	273	;# 
  1313     0112                     CM1CON1         equ	274	;# 
  1314     0113                     CM2CON0         equ	275	;# 
  1315     0114                     CM2CON1         equ	276	;# 
  1316     0115                     CMOUT           equ	277	;# 
  1317     0116                     BORCON          equ	278	;# 
  1318     0117                     FVRCON          equ	279	;# 
  1319     0118                     DACCON0         equ	280	;# 
  1320     0119                     DACCON1         equ	281	;# 
  1321     011A                     SRCON0          equ	282	;# 
  1322     011B                     SRCON1          equ	283	;# 
  1323     011D                     APFCON0         equ	285	;# 
  1324     011E                     APFCON1         equ	286	;# 
  1325     018C                     ANSELA          equ	396	;# 
  1326     018D                     ANSELB          equ	397	;# 
  1327     0191                     EEADR           equ	401	;# 
  1328     0191                     EEADRL          equ	401	;# 
  1329     0192                     EEADRH          equ	402	;# 
  1330     0193                     EEDAT           equ	403	;# 
  1331     0193                     EEDATL          equ	403	;# 
  1332     0193                     EEDATA          equ	403	;# 
  1333     0194                     EEDATH          equ	404	;# 
  1334     0195                     EECON1          equ	405	;# 
  1335     0196                     EECON2          equ	406	;# 
  1336     0199                     RCREG           equ	409	;# 
  1337     019A                     TXREG           equ	410	;# 
  1338     019B                     SP1BRG          equ	411	;# 
  1339     019B                     SP1BRGL         equ	411	;# 
  1340     019B                     SPBRG           equ	411	;# 
  1341     019B                     SPBRGL          equ	411	;# 
  1342     019C                     SP1BRGH         equ	412	;# 
  1343     019C                     SPBRGH          equ	412	;# 
  1344     019D                     RCSTA           equ	413	;# 
  1345     019E                     TXSTA           equ	414	;# 
  1346     019F                     BAUDCON         equ	415	;# 
  1347     020C                     WPUA            equ	524	;# 
  1348     020D                     WPUB            equ	525	;# 
  1349     0211                     SSP1BUF         equ	529	;# 
  1350     0211                     SSPBUF          equ	529	;# 
  1351     0212                     SSP1ADD         equ	530	;# 
  1352     0212                     SSPADD          equ	530	;# 
  1353     0213                     SSP1MSK         equ	531	;# 
  1354     0213                     SSPMSK          equ	531	;# 
  1355     0214                     SSP1STAT        equ	532	;# 
  1356     0214                     SSPSTAT         equ	532	;# 
  1357     0215                     SSP1CON1        equ	533	;# 
  1358     0215                     SSPCON1         equ	533	;# 
  1359     0215                     SSPCON          equ	533	;# 
  1360     0216                     SSP1CON2        equ	534	;# 
  1361     0216                     SSPCON2         equ	534	;# 
  1362     0217                     SSP1CON3        equ	535	;# 
  1363     0217                     SSPCON3         equ	535	;# 
  1364     0219                     SSP2BUF         equ	537	;# 
  1365     021A                     SSP2ADD         equ	538	;# 
  1366     021B                     SSP2MSK         equ	539	;# 
  1367     021C                     SSP2STAT        equ	540	;# 
  1368     021D                     SSP2CON1        equ	541	;# 
  1369     021E                     SSP2CON2        equ	542	;# 
  1370     021F                     SSP2CON3        equ	543	;# 
  1371     0291                     CCPR1           equ	657	;# 
  1372     0291                     CCPR1L          equ	657	;# 
  1373     0292                     CCPR1H          equ	658	;# 
  1374     0293                     CCP1CON         equ	659	;# 
  1375     0294                     PWM1CON         equ	660	;# 
  1376     0295                     CCP1AS          equ	661	;# 
  1377     0295                     ECCP1AS         equ	661	;# 
  1378     0296                     PSTR1CON        equ	662	;# 
  1379     0298                     CCPR2           equ	664	;# 
  1380     0298                     CCPR2L          equ	664	;# 
  1381     0299                     CCPR2H          equ	665	;# 
  1382     029A                     CCP2CON         equ	666	;# 
  1383     029B                     PWM2CON         equ	667	;# 
  1384     029C                     CCP2AS          equ	668	;# 
  1385     029C                     ECCP2AS         equ	668	;# 
  1386     029D                     PSTR2CON        equ	669	;# 
  1387     029E                     CCPTMRS         equ	670	;# 
  1388     029E                     CCPTMRS0        equ	670	;# 
  1389     0311                     CCPR3           equ	785	;# 
  1390     0311                     CCPR3L          equ	785	;# 
  1391     0312                     CCPR3H          equ	786	;# 
  1392     0313                     CCP3CON         equ	787	;# 
  1393     0318                     CCPR4           equ	792	;# 
  1394     0318                     CCPR4L          equ	792	;# 
  1395     0319                     CCPR4H          equ	793	;# 
  1396     031A                     CCP4CON         equ	794	;# 
  1397     0394                     IOCBP           equ	916	;# 
  1398     0395                     IOCBN           equ	917	;# 
  1399     0396                     IOCBF           equ	918	;# 
  1400     039A                     CLKRCON         equ	922	;# 
  1401     039C                     MDCON           equ	924	;# 
  1402     039D                     MDSRC           equ	925	;# 
  1403     039E                     MDCARL          equ	926	;# 
  1404     039F                     MDCARH          equ	927	;# 
  1405     0415                     TMR4            equ	1045	;# 
  1406     0416                     PR4             equ	1046	;# 
  1407     0417                     T4CON           equ	1047	;# 
  1408     041C                     TMR6            equ	1052	;# 
  1409     041D                     PR6             equ	1053	;# 
  1410     041E                     T6CON           equ	1054	;# 
  1411     0FE4                     STATUS_SHAD     equ	4068	;# 
  1412     0FE5                     WREG_SHAD       equ	4069	;# 
  1413     0FE6                     BSR_SHAD        equ	4070	;# 
  1414     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1415     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1416     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1417     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1418     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1419     0FED                     STKPTR          equ	4077	;# 
  1420     0FEE                     TOSL            equ	4078	;# 
  1421     0FEF                     TOSH            equ	4079	;# 
  1422     0000                     INDF0           equ	0	;# 
  1423     0001                     INDF1           equ	1	;# 
  1424     0002                     PCL             equ	2	;# 
  1425     0003                     STATUS          equ	3	;# 
  1426     0004                     FSR0L           equ	4	;# 
  1427     0005                     FSR0H           equ	5	;# 
  1428     0006                     FSR1L           equ	6	;# 
  1429     0007                     FSR1H           equ	7	;# 
  1430     0008                     BSR             equ	8	;# 
  1431     0009                     WREG            equ	9	;# 
  1432     000A                     PCLATH          equ	10	;# 
  1433     000B                     INTCON          equ	11	;# 
  1434     000C                     PORTA           equ	12	;# 
  1435     000D                     PORTB           equ	13	;# 
  1436     0011                     PIR1            equ	17	;# 
  1437     0012                     PIR2            equ	18	;# 
  1438     0013                     PIR3            equ	19	;# 
  1439     0014                     PIR4            equ	20	;# 
  1440     0015                     TMR0            equ	21	;# 
  1441     0016                     TMR1            equ	22	;# 
  1442     0016                     TMR1L           equ	22	;# 
  1443     0017                     TMR1H           equ	23	;# 
  1444     0018                     T1CON           equ	24	;# 
  1445     0019                     T1GCON          equ	25	;# 
  1446     001A                     TMR2            equ	26	;# 
  1447     001B                     PR2             equ	27	;# 
  1448     001C                     T2CON           equ	28	;# 
  1449     001E                     CPSCON0         equ	30	;# 
  1450     001F                     CPSCON1         equ	31	;# 
  1451     008C                     TRISA           equ	140	;# 
  1452     008D                     TRISB           equ	141	;# 
  1453     0091                     PIE1            equ	145	;# 
  1454     0092                     PIE2            equ	146	;# 
  1455     0093                     PIE3            equ	147	;# 
  1456     0094                     PIE4            equ	148	;# 
  1457     0095                     OPTION_REG      equ	149	;# 
  1458     0096                     PCON            equ	150	;# 
  1459     0097                     WDTCON          equ	151	;# 
  1460     0098                     OSCTUNE         equ	152	;# 
  1461     0099                     OSCCON          equ	153	;# 
  1462     009A                     OSCSTAT         equ	154	;# 
  1463     009B                     ADRES           equ	155	;# 
  1464     009B                     ADRESL          equ	155	;# 
  1465     009C                     ADRESH          equ	156	;# 
  1466     009D                     ADCON0          equ	157	;# 
  1467     009E                     ADCON1          equ	158	;# 
  1468     010C                     LATA            equ	268	;# 
  1469     010D                     LATB            equ	269	;# 
  1470     0111                     CM1CON0         equ	273	;# 
  1471     0112                     CM1CON1         equ	274	;# 
  1472     0113                     CM2CON0         equ	275	;# 
  1473     0114                     CM2CON1         equ	276	;# 
  1474     0115                     CMOUT           equ	277	;# 
  1475     0116                     BORCON          equ	278	;# 
  1476     0117                     FVRCON          equ	279	;# 
  1477     0118                     DACCON0         equ	280	;# 
  1478     0119                     DACCON1         equ	281	;# 
  1479     011A                     SRCON0          equ	282	;# 
  1480     011B                     SRCON1          equ	283	;# 
  1481     011D                     APFCON0         equ	285	;# 
  1482     011E                     APFCON1         equ	286	;# 
  1483     018C                     ANSELA          equ	396	;# 
  1484     018D                     ANSELB          equ	397	;# 
  1485     0191                     EEADR           equ	401	;# 
  1486     0191                     EEADRL          equ	401	;# 
  1487     0192                     EEADRH          equ	402	;# 
  1488     0193                     EEDAT           equ	403	;# 
  1489     0193                     EEDATL          equ	403	;# 
  1490     0193                     EEDATA          equ	403	;# 
  1491     0194                     EEDATH          equ	404	;# 
  1492     0195                     EECON1          equ	405	;# 
  1493     0196                     EECON2          equ	406	;# 
  1494     0199                     RCREG           equ	409	;# 
  1495     019A                     TXREG           equ	410	;# 
  1496     019B                     SP1BRG          equ	411	;# 
  1497     019B                     SP1BRGL         equ	411	;# 
  1498     019B                     SPBRG           equ	411	;# 
  1499     019B                     SPBRGL          equ	411	;# 
  1500     019C                     SP1BRGH         equ	412	;# 
  1501     019C                     SPBRGH          equ	412	;# 
  1502     019D                     RCSTA           equ	413	;# 
  1503     019E                     TXSTA           equ	414	;# 
  1504     019F                     BAUDCON         equ	415	;# 
  1505     020C                     WPUA            equ	524	;# 
  1506     020D                     WPUB            equ	525	;# 
  1507     0211                     SSP1BUF         equ	529	;# 
  1508     0211                     SSPBUF          equ	529	;# 
  1509     0212                     SSP1ADD         equ	530	;# 
  1510     0212                     SSPADD          equ	530	;# 
  1511     0213                     SSP1MSK         equ	531	;# 
  1512     0213                     SSPMSK          equ	531	;# 
  1513     0214                     SSP1STAT        equ	532	;# 
  1514     0214                     SSPSTAT         equ	532	;# 
  1515     0215                     SSP1CON1        equ	533	;# 
  1516     0215                     SSPCON1         equ	533	;# 
  1517     0215                     SSPCON          equ	533	;# 
  1518     0216                     SSP1CON2        equ	534	;# 
  1519     0216                     SSPCON2         equ	534	;# 
  1520     0217                     SSP1CON3        equ	535	;# 
  1521     0217                     SSPCON3         equ	535	;# 
  1522     0219                     SSP2BUF         equ	537	;# 
  1523     021A                     SSP2ADD         equ	538	;# 
  1524     021B                     SSP2MSK         equ	539	;# 
  1525     021C                     SSP2STAT        equ	540	;# 
  1526     021D                     SSP2CON1        equ	541	;# 
  1527     021E                     SSP2CON2        equ	542	;# 
  1528     021F                     SSP2CON3        equ	543	;# 
  1529     0291                     CCPR1           equ	657	;# 
  1530     0291                     CCPR1L          equ	657	;# 
  1531     0292                     CCPR1H          equ	658	;# 
  1532     0293                     CCP1CON         equ	659	;# 
  1533     0294                     PWM1CON         equ	660	;# 
  1534     0295                     CCP1AS          equ	661	;# 
  1535     0295                     ECCP1AS         equ	661	;# 
  1536     0296                     PSTR1CON        equ	662	;# 
  1537     0298                     CCPR2           equ	664	;# 
  1538     0298                     CCPR2L          equ	664	;# 
  1539     0299                     CCPR2H          equ	665	;# 
  1540     029A                     CCP2CON         equ	666	;# 
  1541     029B                     PWM2CON         equ	667	;# 
  1542     029C                     CCP2AS          equ	668	;# 
  1543     029C                     ECCP2AS         equ	668	;# 
  1544     029D                     PSTR2CON        equ	669	;# 
  1545     029E                     CCPTMRS         equ	670	;# 
  1546     029E                     CCPTMRS0        equ	670	;# 
  1547     0311                     CCPR3           equ	785	;# 
  1548     0311                     CCPR3L          equ	785	;# 
  1549     0312                     CCPR3H          equ	786	;# 
  1550     0313                     CCP3CON         equ	787	;# 
  1551     0318                     CCPR4           equ	792	;# 
  1552     0318                     CCPR4L          equ	792	;# 
  1553     0319                     CCPR4H          equ	793	;# 
  1554     031A                     CCP4CON         equ	794	;# 
  1555     0394                     IOCBP           equ	916	;# 
  1556     0395                     IOCBN           equ	917	;# 
  1557     0396                     IOCBF           equ	918	;# 
  1558     039A                     CLKRCON         equ	922	;# 
  1559     039C                     MDCON           equ	924	;# 
  1560     039D                     MDSRC           equ	925	;# 
  1561     039E                     MDCARL          equ	926	;# 
  1562     039F                     MDCARH          equ	927	;# 
  1563     0415                     TMR4            equ	1045	;# 
  1564     0416                     PR4             equ	1046	;# 
  1565     0417                     T4CON           equ	1047	;# 
  1566     041C                     TMR6            equ	1052	;# 
  1567     041D                     PR6             equ	1053	;# 
  1568     041E                     T6CON           equ	1054	;# 
  1569     0FE4                     STATUS_SHAD     equ	4068	;# 
  1570     0FE5                     WREG_SHAD       equ	4069	;# 
  1571     0FE6                     BSR_SHAD        equ	4070	;# 
  1572     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1573     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1574     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1575     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1576     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1577     0FED                     STKPTR          equ	4077	;# 
  1578     0FEE                     TOSL            equ	4078	;# 
  1579     0FEF                     TOSH            equ	4079	;# 
  1580     0000                     INDF0           equ	0	;# 
  1581     0001                     INDF1           equ	1	;# 
  1582     0002                     PCL             equ	2	;# 
  1583     0003                     STATUS          equ	3	;# 
  1584     0004                     FSR0L           equ	4	;# 
  1585     0005                     FSR0H           equ	5	;# 
  1586     0006                     FSR1L           equ	6	;# 
  1587     0007                     FSR1H           equ	7	;# 
  1588     0008                     BSR             equ	8	;# 
  1589     0009                     WREG            equ	9	;# 
  1590     000A                     PCLATH          equ	10	;# 
  1591     000B                     INTCON          equ	11	;# 
  1592     000C                     PORTA           equ	12	;# 
  1593     000D                     PORTB           equ	13	;# 
  1594     0011                     PIR1            equ	17	;# 
  1595     0012                     PIR2            equ	18	;# 
  1596     0013                     PIR3            equ	19	;# 
  1597     0014                     PIR4            equ	20	;# 
  1598     0015                     TMR0            equ	21	;# 
  1599     0016                     TMR1            equ	22	;# 
  1600     0016                     TMR1L           equ	22	;# 
  1601     0017                     TMR1H           equ	23	;# 
  1602     0018                     T1CON           equ	24	;# 
  1603     0019                     T1GCON          equ	25	;# 
  1604     001A                     TMR2            equ	26	;# 
  1605     001B                     PR2             equ	27	;# 
  1606     001C                     T2CON           equ	28	;# 
  1607     001E                     CPSCON0         equ	30	;# 
  1608     001F                     CPSCON1         equ	31	;# 
  1609     008C                     TRISA           equ	140	;# 
  1610     008D                     TRISB           equ	141	;# 
  1611     0091                     PIE1            equ	145	;# 
  1612     0092                     PIE2            equ	146	;# 
  1613     0093                     PIE3            equ	147	;# 
  1614     0094                     PIE4            equ	148	;# 
  1615     0095                     OPTION_REG      equ	149	;# 
  1616     0096                     PCON            equ	150	;# 
  1617     0097                     WDTCON          equ	151	;# 
  1618     0098                     OSCTUNE         equ	152	;# 
  1619     0099                     OSCCON          equ	153	;# 
  1620     009A                     OSCSTAT         equ	154	;# 
  1621     009B                     ADRES           equ	155	;# 
  1622     009B                     ADRESL          equ	155	;# 
  1623     009C                     ADRESH          equ	156	;# 
  1624     009D                     ADCON0          equ	157	;# 
  1625     009E                     ADCON1          equ	158	;# 
  1626     010C                     LATA            equ	268	;# 
  1627     010D                     LATB            equ	269	;# 
  1628     0111                     CM1CON0         equ	273	;# 
  1629     0112                     CM1CON1         equ	274	;# 
  1630     0113                     CM2CON0         equ	275	;# 
  1631     0114                     CM2CON1         equ	276	;# 
  1632     0115                     CMOUT           equ	277	;# 
  1633     0116                     BORCON          equ	278	;# 
  1634     0117                     FVRCON          equ	279	;# 
  1635     0118                     DACCON0         equ	280	;# 
  1636     0119                     DACCON1         equ	281	;# 
  1637     011A                     SRCON0          equ	282	;# 
  1638     011B                     SRCON1          equ	283	;# 
  1639     011D                     APFCON0         equ	285	;# 
  1640     011E                     APFCON1         equ	286	;# 
  1641     018C                     ANSELA          equ	396	;# 
  1642     018D                     ANSELB          equ	397	;# 
  1643     0191                     EEADR           equ	401	;# 
  1644     0191                     EEADRL          equ	401	;# 
  1645     0192                     EEADRH          equ	402	;# 
  1646     0193                     EEDAT           equ	403	;# 
  1647     0193                     EEDATL          equ	403	;# 
  1648     0193                     EEDATA          equ	403	;# 
  1649     0194                     EEDATH          equ	404	;# 
  1650     0195                     EECON1          equ	405	;# 
  1651     0196                     EECON2          equ	406	;# 
  1652     0199                     RCREG           equ	409	;# 
  1653     019A                     TXREG           equ	410	;# 
  1654     019B                     SP1BRG          equ	411	;# 
  1655     019B                     SP1BRGL         equ	411	;# 
  1656     019B                     SPBRG           equ	411	;# 
  1657     019B                     SPBRGL          equ	411	;# 
  1658     019C                     SP1BRGH         equ	412	;# 
  1659     019C                     SPBRGH          equ	412	;# 
  1660     019D                     RCSTA           equ	413	;# 
  1661     019E                     TXSTA           equ	414	;# 
  1662     019F                     BAUDCON         equ	415	;# 
  1663     020C                     WPUA            equ	524	;# 
  1664     020D                     WPUB            equ	525	;# 
  1665     0211                     SSP1BUF         equ	529	;# 
  1666     0211                     SSPBUF          equ	529	;# 
  1667     0212                     SSP1ADD         equ	530	;# 
  1668     0212                     SSPADD          equ	530	;# 
  1669     0213                     SSP1MSK         equ	531	;# 
  1670     0213                     SSPMSK          equ	531	;# 
  1671     0214                     SSP1STAT        equ	532	;# 
  1672     0214                     SSPSTAT         equ	532	;# 
  1673     0215                     SSP1CON1        equ	533	;# 
  1674     0215                     SSPCON1         equ	533	;# 
  1675     0215                     SSPCON          equ	533	;# 
  1676     0216                     SSP1CON2        equ	534	;# 
  1677     0216                     SSPCON2         equ	534	;# 
  1678     0217                     SSP1CON3        equ	535	;# 
  1679     0217                     SSPCON3         equ	535	;# 
  1680     0219                     SSP2BUF         equ	537	;# 
  1681     021A                     SSP2ADD         equ	538	;# 
  1682     021B                     SSP2MSK         equ	539	;# 
  1683     021C                     SSP2STAT        equ	540	;# 
  1684     021D                     SSP2CON1        equ	541	;# 
  1685     021E                     SSP2CON2        equ	542	;# 
  1686     021F                     SSP2CON3        equ	543	;# 
  1687     0291                     CCPR1           equ	657	;# 
  1688     0291                     CCPR1L          equ	657	;# 
  1689     0292                     CCPR1H          equ	658	;# 
  1690     0293                     CCP1CON         equ	659	;# 
  1691     0294                     PWM1CON         equ	660	;# 
  1692     0295                     CCP1AS          equ	661	;# 
  1693     0295                     ECCP1AS         equ	661	;# 
  1694     0296                     PSTR1CON        equ	662	;# 
  1695     0298                     CCPR2           equ	664	;# 
  1696     0298                     CCPR2L          equ	664	;# 
  1697     0299                     CCPR2H          equ	665	;# 
  1698     029A                     CCP2CON         equ	666	;# 
  1699     029B                     PWM2CON         equ	667	;# 
  1700     029C                     CCP2AS          equ	668	;# 
  1701     029C                     ECCP2AS         equ	668	;# 
  1702     029D                     PSTR2CON        equ	669	;# 
  1703     029E                     CCPTMRS         equ	670	;# 
  1704     029E                     CCPTMRS0        equ	670	;# 
  1705     0311                     CCPR3           equ	785	;# 
  1706     0311                     CCPR3L          equ	785	;# 
  1707     0312                     CCPR3H          equ	786	;# 
  1708     0313                     CCP3CON         equ	787	;# 
  1709     0318                     CCPR4           equ	792	;# 
  1710     0318                     CCPR4L          equ	792	;# 
  1711     0319                     CCPR4H          equ	793	;# 
  1712     031A                     CCP4CON         equ	794	;# 
  1713     0394                     IOCBP           equ	916	;# 
  1714     0395                     IOCBN           equ	917	;# 
  1715     0396                     IOCBF           equ	918	;# 
  1716     039A                     CLKRCON         equ	922	;# 
  1717     039C                     MDCON           equ	924	;# 
  1718     039D                     MDSRC           equ	925	;# 
  1719     039E                     MDCARL          equ	926	;# 
  1720     039F                     MDCARH          equ	927	;# 
  1721     0415                     TMR4            equ	1045	;# 
  1722     0416                     PR4             equ	1046	;# 
  1723     0417                     T4CON           equ	1047	;# 
  1724     041C                     TMR6            equ	1052	;# 
  1725     041D                     PR6             equ	1053	;# 
  1726     041E                     T6CON           equ	1054	;# 
  1727     0FE4                     STATUS_SHAD     equ	4068	;# 
  1728     0FE5                     WREG_SHAD       equ	4069	;# 
  1729     0FE6                     BSR_SHAD        equ	4070	;# 
  1730     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1731     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1732     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1733     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1734     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1735     0FED                     STKPTR          equ	4077	;# 
  1736     0FEE                     TOSL            equ	4078	;# 
  1737     0FEF                     TOSH            equ	4079	;# 
  1738     0000                     INDF0           equ	0	;# 
  1739     0001                     INDF1           equ	1	;# 
  1740     0002                     PCL             equ	2	;# 
  1741     0003                     STATUS          equ	3	;# 
  1742     0004                     FSR0L           equ	4	;# 
  1743     0005                     FSR0H           equ	5	;# 
  1744     0006                     FSR1L           equ	6	;# 
  1745     0007                     FSR1H           equ	7	;# 
  1746     0008                     BSR             equ	8	;# 
  1747     0009                     WREG            equ	9	;# 
  1748     000A                     PCLATH          equ	10	;# 
  1749     000B                     INTCON          equ	11	;# 
  1750     000C                     PORTA           equ	12	;# 
  1751     000D                     PORTB           equ	13	;# 
  1752     0011                     PIR1            equ	17	;# 
  1753     0012                     PIR2            equ	18	;# 
  1754     0013                     PIR3            equ	19	;# 
  1755     0014                     PIR4            equ	20	;# 
  1756     0015                     TMR0            equ	21	;# 
  1757     0016                     TMR1            equ	22	;# 
  1758     0016                     TMR1L           equ	22	;# 
  1759     0017                     TMR1H           equ	23	;# 
  1760     0018                     T1CON           equ	24	;# 
  1761     0019                     T1GCON          equ	25	;# 
  1762     001A                     TMR2            equ	26	;# 
  1763     001B                     PR2             equ	27	;# 
  1764     001C                     T2CON           equ	28	;# 
  1765     001E                     CPSCON0         equ	30	;# 
  1766     001F                     CPSCON1         equ	31	;# 
  1767     008C                     TRISA           equ	140	;# 
  1768     008D                     TRISB           equ	141	;# 
  1769     0091                     PIE1            equ	145	;# 
  1770     0092                     PIE2            equ	146	;# 
  1771     0093                     PIE3            equ	147	;# 
  1772     0094                     PIE4            equ	148	;# 
  1773     0095                     OPTION_REG      equ	149	;# 
  1774     0096                     PCON            equ	150	;# 
  1775     0097                     WDTCON          equ	151	;# 
  1776     0098                     OSCTUNE         equ	152	;# 
  1777     0099                     OSCCON          equ	153	;# 
  1778     009A                     OSCSTAT         equ	154	;# 
  1779     009B                     ADRES           equ	155	;# 
  1780     009B                     ADRESL          equ	155	;# 
  1781     009C                     ADRESH          equ	156	;# 
  1782     009D                     ADCON0          equ	157	;# 
  1783     009E                     ADCON1          equ	158	;# 
  1784     010C                     LATA            equ	268	;# 
  1785     010D                     LATB            equ	269	;# 
  1786     0111                     CM1CON0         equ	273	;# 
  1787     0112                     CM1CON1         equ	274	;# 
  1788     0113                     CM2CON0         equ	275	;# 
  1789     0114                     CM2CON1         equ	276	;# 
  1790     0115                     CMOUT           equ	277	;# 
  1791     0116                     BORCON          equ	278	;# 
  1792     0117                     FVRCON          equ	279	;# 
  1793     0118                     DACCON0         equ	280	;# 
  1794     0119                     DACCON1         equ	281	;# 
  1795     011A                     SRCON0          equ	282	;# 
  1796     011B                     SRCON1          equ	283	;# 
  1797     011D                     APFCON0         equ	285	;# 
  1798     011E                     APFCON1         equ	286	;# 
  1799     018C                     ANSELA          equ	396	;# 
  1800     018D                     ANSELB          equ	397	;# 
  1801     0191                     EEADR           equ	401	;# 
  1802     0191                     EEADRL          equ	401	;# 
  1803     0192                     EEADRH          equ	402	;# 
  1804     0193                     EEDAT           equ	403	;# 
  1805     0193                     EEDATL          equ	403	;# 
  1806     0193                     EEDATA          equ	403	;# 
  1807     0194                     EEDATH          equ	404	;# 
  1808     0195                     EECON1          equ	405	;# 
  1809     0196                     EECON2          equ	406	;# 
  1810     0199                     RCREG           equ	409	;# 
  1811     019A                     TXREG           equ	410	;# 
  1812     019B                     SP1BRG          equ	411	;# 
  1813     019B                     SP1BRGL         equ	411	;# 
  1814     019B                     SPBRG           equ	411	;# 
  1815     019B                     SPBRGL          equ	411	;# 
  1816     019C                     SP1BRGH         equ	412	;# 
  1817     019C                     SPBRGH          equ	412	;# 
  1818     019D                     RCSTA           equ	413	;# 
  1819     019E                     TXSTA           equ	414	;# 
  1820     019F                     BAUDCON         equ	415	;# 
  1821     020C                     WPUA            equ	524	;# 
  1822     020D                     WPUB            equ	525	;# 
  1823     0211                     SSP1BUF         equ	529	;# 
  1824     0211                     SSPBUF          equ	529	;# 
  1825     0212                     SSP1ADD         equ	530	;# 
  1826     0212                     SSPADD          equ	530	;# 
  1827     0213                     SSP1MSK         equ	531	;# 
  1828     0213                     SSPMSK          equ	531	;# 
  1829     0214                     SSP1STAT        equ	532	;# 
  1830     0214                     SSPSTAT         equ	532	;# 
  1831     0215                     SSP1CON1        equ	533	;# 
  1832     0215                     SSPCON1         equ	533	;# 
  1833     0215                     SSPCON          equ	533	;# 
  1834     0216                     SSP1CON2        equ	534	;# 
  1835     0216                     SSPCON2         equ	534	;# 
  1836     0217                     SSP1CON3        equ	535	;# 
  1837     0217                     SSPCON3         equ	535	;# 
  1838     0219                     SSP2BUF         equ	537	;# 
  1839     021A                     SSP2ADD         equ	538	;# 
  1840     021B                     SSP2MSK         equ	539	;# 
  1841     021C                     SSP2STAT        equ	540	;# 
  1842     021D                     SSP2CON1        equ	541	;# 
  1843     021E                     SSP2CON2        equ	542	;# 
  1844     021F                     SSP2CON3        equ	543	;# 
  1845     0291                     CCPR1           equ	657	;# 
  1846     0291                     CCPR1L          equ	657	;# 
  1847     0292                     CCPR1H          equ	658	;# 
  1848     0293                     CCP1CON         equ	659	;# 
  1849     0294                     PWM1CON         equ	660	;# 
  1850     0295                     CCP1AS          equ	661	;# 
  1851     0295                     ECCP1AS         equ	661	;# 
  1852     0296                     PSTR1CON        equ	662	;# 
  1853     0298                     CCPR2           equ	664	;# 
  1854     0298                     CCPR2L          equ	664	;# 
  1855     0299                     CCPR2H          equ	665	;# 
  1856     029A                     CCP2CON         equ	666	;# 
  1857     029B                     PWM2CON         equ	667	;# 
  1858     029C                     CCP2AS          equ	668	;# 
  1859     029C                     ECCP2AS         equ	668	;# 
  1860     029D                     PSTR2CON        equ	669	;# 
  1861     029E                     CCPTMRS         equ	670	;# 
  1862     029E                     CCPTMRS0        equ	670	;# 
  1863     0311                     CCPR3           equ	785	;# 
  1864     0311                     CCPR3L          equ	785	;# 
  1865     0312                     CCPR3H          equ	786	;# 
  1866     0313                     CCP3CON         equ	787	;# 
  1867     0318                     CCPR4           equ	792	;# 
  1868     0318                     CCPR4L          equ	792	;# 
  1869     0319                     CCPR4H          equ	793	;# 
  1870     031A                     CCP4CON         equ	794	;# 
  1871     0394                     IOCBP           equ	916	;# 
  1872     0395                     IOCBN           equ	917	;# 
  1873     0396                     IOCBF           equ	918	;# 
  1874     039A                     CLKRCON         equ	922	;# 
  1875     039C                     MDCON           equ	924	;# 
  1876     039D                     MDSRC           equ	925	;# 
  1877     039E                     MDCARL          equ	926	;# 
  1878     039F                     MDCARH          equ	927	;# 
  1879     0415                     TMR4            equ	1045	;# 
  1880     0416                     PR4             equ	1046	;# 
  1881     0417                     T4CON           equ	1047	;# 
  1882     041C                     TMR6            equ	1052	;# 
  1883     041D                     PR6             equ	1053	;# 
  1884     041E                     T6CON           equ	1054	;# 
  1885     0FE4                     STATUS_SHAD     equ	4068	;# 
  1886     0FE5                     WREG_SHAD       equ	4069	;# 
  1887     0FE6                     BSR_SHAD        equ	4070	;# 
  1888     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1889     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1890     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1891     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1892     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1893     0FED                     STKPTR          equ	4077	;# 
  1894     0FEE                     TOSL            equ	4078	;# 
  1895     0FEF                     TOSH            equ	4079	;# 
  1896     0000                     INDF0           equ	0	;# 
  1897     0001                     INDF1           equ	1	;# 
  1898     0002                     PCL             equ	2	;# 
  1899     0003                     STATUS          equ	3	;# 
  1900     0004                     FSR0L           equ	4	;# 
  1901     0005                     FSR0H           equ	5	;# 
  1902     0006                     FSR1L           equ	6	;# 
  1903     0007                     FSR1H           equ	7	;# 
  1904     0008                     BSR             equ	8	;# 
  1905     0009                     WREG            equ	9	;# 
  1906     000A                     PCLATH          equ	10	;# 
  1907     000B                     INTCON          equ	11	;# 
  1908     000C                     PORTA           equ	12	;# 
  1909     000D                     PORTB           equ	13	;# 
  1910     0011                     PIR1            equ	17	;# 
  1911     0012                     PIR2            equ	18	;# 
  1912     0013                     PIR3            equ	19	;# 
  1913     0014                     PIR4            equ	20	;# 
  1914     0015                     TMR0            equ	21	;# 
  1915     0016                     TMR1            equ	22	;# 
  1916     0016                     TMR1L           equ	22	;# 
  1917     0017                     TMR1H           equ	23	;# 
  1918     0018                     T1CON           equ	24	;# 
  1919     0019                     T1GCON          equ	25	;# 
  1920     001A                     TMR2            equ	26	;# 
  1921     001B                     PR2             equ	27	;# 
  1922     001C                     T2CON           equ	28	;# 
  1923     001E                     CPSCON0         equ	30	;# 
  1924     001F                     CPSCON1         equ	31	;# 
  1925     008C                     TRISA           equ	140	;# 
  1926     008D                     TRISB           equ	141	;# 
  1927     0091                     PIE1            equ	145	;# 
  1928     0092                     PIE2            equ	146	;# 
  1929     0093                     PIE3            equ	147	;# 
  1930     0094                     PIE4            equ	148	;# 
  1931     0095                     OPTION_REG      equ	149	;# 
  1932     0096                     PCON            equ	150	;# 
  1933     0097                     WDTCON          equ	151	;# 
  1934     0098                     OSCTUNE         equ	152	;# 
  1935     0099                     OSCCON          equ	153	;# 
  1936     009A                     OSCSTAT         equ	154	;# 
  1937     009B                     ADRES           equ	155	;# 
  1938     009B                     ADRESL          equ	155	;# 
  1939     009C                     ADRESH          equ	156	;# 
  1940     009D                     ADCON0          equ	157	;# 
  1941     009E                     ADCON1          equ	158	;# 
  1942     010C                     LATA            equ	268	;# 
  1943     010D                     LATB            equ	269	;# 
  1944     0111                     CM1CON0         equ	273	;# 
  1945     0112                     CM1CON1         equ	274	;# 
  1946     0113                     CM2CON0         equ	275	;# 
  1947     0114                     CM2CON1         equ	276	;# 
  1948     0115                     CMOUT           equ	277	;# 
  1949     0116                     BORCON          equ	278	;# 
  1950     0117                     FVRCON          equ	279	;# 
  1951     0118                     DACCON0         equ	280	;# 
  1952     0119                     DACCON1         equ	281	;# 
  1953     011A                     SRCON0          equ	282	;# 
  1954     011B                     SRCON1          equ	283	;# 
  1955     011D                     APFCON0         equ	285	;# 
  1956     011E                     APFCON1         equ	286	;# 
  1957     018C                     ANSELA          equ	396	;# 
  1958     018D                     ANSELB          equ	397	;# 
  1959     0191                     EEADR           equ	401	;# 
  1960     0191                     EEADRL          equ	401	;# 
  1961     0192                     EEADRH          equ	402	;# 
  1962     0193                     EEDAT           equ	403	;# 
  1963     0193                     EEDATL          equ	403	;# 
  1964     0193                     EEDATA          equ	403	;# 
  1965     0194                     EEDATH          equ	404	;# 
  1966     0195                     EECON1          equ	405	;# 
  1967     0196                     EECON2          equ	406	;# 
  1968     0199                     RCREG           equ	409	;# 
  1969     019A                     TXREG           equ	410	;# 
  1970     019B                     SP1BRG          equ	411	;# 
  1971     019B                     SP1BRGL         equ	411	;# 
  1972     019B                     SPBRG           equ	411	;# 
  1973     019B                     SPBRGL          equ	411	;# 
  1974     019C                     SP1BRGH         equ	412	;# 
  1975     019C                     SPBRGH          equ	412	;# 
  1976     019D                     RCSTA           equ	413	;# 
  1977     019E                     TXSTA           equ	414	;# 
  1978     019F                     BAUDCON         equ	415	;# 
  1979     020C                     WPUA            equ	524	;# 
  1980     020D                     WPUB            equ	525	;# 
  1981     0211                     SSP1BUF         equ	529	;# 
  1982     0211                     SSPBUF          equ	529	;# 
  1983     0212                     SSP1ADD         equ	530	;# 
  1984     0212                     SSPADD          equ	530	;# 
  1985     0213                     SSP1MSK         equ	531	;# 
  1986     0213                     SSPMSK          equ	531	;# 
  1987     0214                     SSP1STAT        equ	532	;# 
  1988     0214                     SSPSTAT         equ	532	;# 
  1989     0215                     SSP1CON1        equ	533	;# 
  1990     0215                     SSPCON1         equ	533	;# 
  1991     0215                     SSPCON          equ	533	;# 
  1992     0216                     SSP1CON2        equ	534	;# 
  1993     0216                     SSPCON2         equ	534	;# 
  1994     0217                     SSP1CON3        equ	535	;# 
  1995     0217                     SSPCON3         equ	535	;# 
  1996     0219                     SSP2BUF         equ	537	;# 
  1997     021A                     SSP2ADD         equ	538	;# 
  1998     021B                     SSP2MSK         equ	539	;# 
  1999     021C                     SSP2STAT        equ	540	;# 
  2000     021D                     SSP2CON1        equ	541	;# 
  2001     021E                     SSP2CON2        equ	542	;# 
  2002     021F                     SSP2CON3        equ	543	;# 
  2003     0291                     CCPR1           equ	657	;# 
  2004     0291                     CCPR1L          equ	657	;# 
  2005     0292                     CCPR1H          equ	658	;# 
  2006     0293                     CCP1CON         equ	659	;# 
  2007     0294                     PWM1CON         equ	660	;# 
  2008     0295                     CCP1AS          equ	661	;# 
  2009     0295                     ECCP1AS         equ	661	;# 
  2010     0296                     PSTR1CON        equ	662	;# 
  2011     0298                     CCPR2           equ	664	;# 
  2012     0298                     CCPR2L          equ	664	;# 
  2013     0299                     CCPR2H          equ	665	;# 
  2014     029A                     CCP2CON         equ	666	;# 
  2015     029B                     PWM2CON         equ	667	;# 
  2016     029C                     CCP2AS          equ	668	;# 
  2017     029C                     ECCP2AS         equ	668	;# 
  2018     029D                     PSTR2CON        equ	669	;# 
  2019     029E                     CCPTMRS         equ	670	;# 
  2020     029E                     CCPTMRS0        equ	670	;# 
  2021     0311                     CCPR3           equ	785	;# 
  2022     0311                     CCPR3L          equ	785	;# 
  2023     0312                     CCPR3H          equ	786	;# 
  2024     0313                     CCP3CON         equ	787	;# 
  2025     0318                     CCPR4           equ	792	;# 
  2026     0318                     CCPR4L          equ	792	;# 
  2027     0319                     CCPR4H          equ	793	;# 
  2028     031A                     CCP4CON         equ	794	;# 
  2029     0394                     IOCBP           equ	916	;# 
  2030     0395                     IOCBN           equ	917	;# 
  2031     0396                     IOCBF           equ	918	;# 
  2032     039A                     CLKRCON         equ	922	;# 
  2033     039C                     MDCON           equ	924	;# 
  2034     039D                     MDSRC           equ	925	;# 
  2035     039E                     MDCARL          equ	926	;# 
  2036     039F                     MDCARH          equ	927	;# 
  2037     0415                     TMR4            equ	1045	;# 
  2038     0416                     PR4             equ	1046	;# 
  2039     0417                     T4CON           equ	1047	;# 
  2040     041C                     TMR6            equ	1052	;# 
  2041     041D                     PR6             equ	1053	;# 
  2042     041E                     T6CON           equ	1054	;# 
  2043     0FE4                     STATUS_SHAD     equ	4068	;# 
  2044     0FE5                     WREG_SHAD       equ	4069	;# 
  2045     0FE6                     BSR_SHAD        equ	4070	;# 
  2046     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2047     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2048     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2049     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2050     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2051     0FED                     STKPTR          equ	4077	;# 
  2052     0FEE                     TOSL            equ	4078	;# 
  2053     0FEF                     TOSH            equ	4079	;# 
  2054     0000                     INDF0           equ	0	;# 
  2055     0001                     INDF1           equ	1	;# 
  2056     0002                     PCL             equ	2	;# 
  2057     0003                     STATUS          equ	3	;# 
  2058     0004                     FSR0L           equ	4	;# 
  2059     0005                     FSR0H           equ	5	;# 
  2060     0006                     FSR1L           equ	6	;# 
  2061     0007                     FSR1H           equ	7	;# 
  2062     0008                     BSR             equ	8	;# 
  2063     0009                     WREG            equ	9	;# 
  2064     000A                     PCLATH          equ	10	;# 
  2065     000B                     INTCON          equ	11	;# 
  2066     000C                     PORTA           equ	12	;# 
  2067     000D                     PORTB           equ	13	;# 
  2068     0011                     PIR1            equ	17	;# 
  2069     0012                     PIR2            equ	18	;# 
  2070     0013                     PIR3            equ	19	;# 
  2071     0014                     PIR4            equ	20	;# 
  2072     0015                     TMR0            equ	21	;# 
  2073     0016                     TMR1            equ	22	;# 
  2074     0016                     TMR1L           equ	22	;# 
  2075     0017                     TMR1H           equ	23	;# 
  2076     0018                     T1CON           equ	24	;# 
  2077     0019                     T1GCON          equ	25	;# 
  2078     001A                     TMR2            equ	26	;# 
  2079     001B                     PR2             equ	27	;# 
  2080     001C                     T2CON           equ	28	;# 
  2081     001E                     CPSCON0         equ	30	;# 
  2082     001F                     CPSCON1         equ	31	;# 
  2083     008C                     TRISA           equ	140	;# 
  2084     008D                     TRISB           equ	141	;# 
  2085     0091                     PIE1            equ	145	;# 
  2086     0092                     PIE2            equ	146	;# 
  2087     0093                     PIE3            equ	147	;# 
  2088     0094                     PIE4            equ	148	;# 
  2089     0095                     OPTION_REG      equ	149	;# 
  2090     0096                     PCON            equ	150	;# 
  2091     0097                     WDTCON          equ	151	;# 
  2092     0098                     OSCTUNE         equ	152	;# 
  2093     0099                     OSCCON          equ	153	;# 
  2094     009A                     OSCSTAT         equ	154	;# 
  2095     009B                     ADRES           equ	155	;# 
  2096     009B                     ADRESL          equ	155	;# 
  2097     009C                     ADRESH          equ	156	;# 
  2098     009D                     ADCON0          equ	157	;# 
  2099     009E                     ADCON1          equ	158	;# 
  2100     010C                     LATA            equ	268	;# 
  2101     010D                     LATB            equ	269	;# 
  2102     0111                     CM1CON0         equ	273	;# 
  2103     0112                     CM1CON1         equ	274	;# 
  2104     0113                     CM2CON0         equ	275	;# 
  2105     0114                     CM2CON1         equ	276	;# 
  2106     0115                     CMOUT           equ	277	;# 
  2107     0116                     BORCON          equ	278	;# 
  2108     0117                     FVRCON          equ	279	;# 
  2109     0118                     DACCON0         equ	280	;# 
  2110     0119                     DACCON1         equ	281	;# 
  2111     011A                     SRCON0          equ	282	;# 
  2112     011B                     SRCON1          equ	283	;# 
  2113     011D                     APFCON0         equ	285	;# 
  2114     011E                     APFCON1         equ	286	;# 
  2115     018C                     ANSELA          equ	396	;# 
  2116     018D                     ANSELB          equ	397	;# 
  2117     0191                     EEADR           equ	401	;# 
  2118     0191                     EEADRL          equ	401	;# 
  2119     0192                     EEADRH          equ	402	;# 
  2120     0193                     EEDAT           equ	403	;# 
  2121     0193                     EEDATL          equ	403	;# 
  2122     0193                     EEDATA          equ	403	;# 
  2123     0194                     EEDATH          equ	404	;# 
  2124     0195                     EECON1          equ	405	;# 
  2125     0196                     EECON2          equ	406	;# 
  2126     0199                     RCREG           equ	409	;# 
  2127     019A                     TXREG           equ	410	;# 
  2128     019B                     SP1BRG          equ	411	;# 
  2129     019B                     SP1BRGL         equ	411	;# 
  2130     019B                     SPBRG           equ	411	;# 
  2131     019B                     SPBRGL          equ	411	;# 
  2132     019C                     SP1BRGH         equ	412	;# 
  2133     019C                     SPBRGH          equ	412	;# 
  2134     019D                     RCSTA           equ	413	;# 
  2135     019E                     TXSTA           equ	414	;# 
  2136     019F                     BAUDCON         equ	415	;# 
  2137     020C                     WPUA            equ	524	;# 
  2138     020D                     WPUB            equ	525	;# 
  2139     0211                     SSP1BUF         equ	529	;# 
  2140     0211                     SSPBUF          equ	529	;# 
  2141     0212                     SSP1ADD         equ	530	;# 
  2142     0212                     SSPADD          equ	530	;# 
  2143     0213                     SSP1MSK         equ	531	;# 
  2144     0213                     SSPMSK          equ	531	;# 
  2145     0214                     SSP1STAT        equ	532	;# 
  2146     0214                     SSPSTAT         equ	532	;# 
  2147     0215                     SSP1CON1        equ	533	;# 
  2148     0215                     SSPCON1         equ	533	;# 
  2149     0215                     SSPCON          equ	533	;# 
  2150     0216                     SSP1CON2        equ	534	;# 
  2151     0216                     SSPCON2         equ	534	;# 
  2152     0217                     SSP1CON3        equ	535	;# 
  2153     0217                     SSPCON3         equ	535	;# 
  2154     0219                     SSP2BUF         equ	537	;# 
  2155     021A                     SSP2ADD         equ	538	;# 
  2156     021B                     SSP2MSK         equ	539	;# 
  2157     021C                     SSP2STAT        equ	540	;# 
  2158     021D                     SSP2CON1        equ	541	;# 
  2159     021E                     SSP2CON2        equ	542	;# 
  2160     021F                     SSP2CON3        equ	543	;# 
  2161     0291                     CCPR1           equ	657	;# 
  2162     0291                     CCPR1L          equ	657	;# 
  2163     0292                     CCPR1H          equ	658	;# 
  2164     0293                     CCP1CON         equ	659	;# 
  2165     0294                     PWM1CON         equ	660	;# 
  2166     0295                     CCP1AS          equ	661	;# 
  2167     0295                     ECCP1AS         equ	661	;# 
  2168     0296                     PSTR1CON        equ	662	;# 
  2169     0298                     CCPR2           equ	664	;# 
  2170     0298                     CCPR2L          equ	664	;# 
  2171     0299                     CCPR2H          equ	665	;# 
  2172     029A                     CCP2CON         equ	666	;# 
  2173     029B                     PWM2CON         equ	667	;# 
  2174     029C                     CCP2AS          equ	668	;# 
  2175     029C                     ECCP2AS         equ	668	;# 
  2176     029D                     PSTR2CON        equ	669	;# 
  2177     029E                     CCPTMRS         equ	670	;# 
  2178     029E                     CCPTMRS0        equ	670	;# 
  2179     0311                     CCPR3           equ	785	;# 
  2180     0311                     CCPR3L          equ	785	;# 
  2181     0312                     CCPR3H          equ	786	;# 
  2182     0313                     CCP3CON         equ	787	;# 
  2183     0318                     CCPR4           equ	792	;# 
  2184     0318                     CCPR4L          equ	792	;# 
  2185     0319                     CCPR4H          equ	793	;# 
  2186     031A                     CCP4CON         equ	794	;# 
  2187     0394                     IOCBP           equ	916	;# 
  2188     0395                     IOCBN           equ	917	;# 
  2189     0396                     IOCBF           equ	918	;# 
  2190     039A                     CLKRCON         equ	922	;# 
  2191     039C                     MDCON           equ	924	;# 
  2192     039D                     MDSRC           equ	925	;# 
  2193     039E                     MDCARL          equ	926	;# 
  2194     039F                     MDCARH          equ	927	;# 
  2195     0415                     TMR4            equ	1045	;# 
  2196     0416                     PR4             equ	1046	;# 
  2197     0417                     T4CON           equ	1047	;# 
  2198     041C                     TMR6            equ	1052	;# 
  2199     041D                     PR6             equ	1053	;# 
  2200     041E                     T6CON           equ	1054	;# 
  2201     0FE4                     STATUS_SHAD     equ	4068	;# 
  2202     0FE5                     WREG_SHAD       equ	4069	;# 
  2203     0FE6                     BSR_SHAD        equ	4070	;# 
  2204     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2205     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2206     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2207     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2208     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2209     0FED                     STKPTR          equ	4077	;# 
  2210     0FEE                     TOSL            equ	4078	;# 
  2211     0FEF                     TOSH            equ	4079	;# 
  2212     0000                     INDF0           equ	0	;# 
  2213     0001                     INDF1           equ	1	;# 
  2214     0002                     PCL             equ	2	;# 
  2215     0003                     STATUS          equ	3	;# 
  2216     0004                     FSR0L           equ	4	;# 
  2217     0005                     FSR0H           equ	5	;# 
  2218     0006                     FSR1L           equ	6	;# 
  2219     0007                     FSR1H           equ	7	;# 
  2220     0008                     BSR             equ	8	;# 
  2221     0009                     WREG            equ	9	;# 
  2222     000A                     PCLATH          equ	10	;# 
  2223     000B                     INTCON          equ	11	;# 
  2224     000C                     PORTA           equ	12	;# 
  2225     000D                     PORTB           equ	13	;# 
  2226     0011                     PIR1            equ	17	;# 
  2227     0012                     PIR2            equ	18	;# 
  2228     0013                     PIR3            equ	19	;# 
  2229     0014                     PIR4            equ	20	;# 
  2230     0015                     TMR0            equ	21	;# 
  2231     0016                     TMR1            equ	22	;# 
  2232     0016                     TMR1L           equ	22	;# 
  2233     0017                     TMR1H           equ	23	;# 
  2234     0018                     T1CON           equ	24	;# 
  2235     0019                     T1GCON          equ	25	;# 
  2236     001A                     TMR2            equ	26	;# 
  2237     001B                     PR2             equ	27	;# 
  2238     001C                     T2CON           equ	28	;# 
  2239     001E                     CPSCON0         equ	30	;# 
  2240     001F                     CPSCON1         equ	31	;# 
  2241     008C                     TRISA           equ	140	;# 
  2242     008D                     TRISB           equ	141	;# 
  2243     0091                     PIE1            equ	145	;# 
  2244     0092                     PIE2            equ	146	;# 
  2245     0093                     PIE3            equ	147	;# 
  2246     0094                     PIE4            equ	148	;# 
  2247     0095                     OPTION_REG      equ	149	;# 
  2248     0096                     PCON            equ	150	;# 
  2249     0097                     WDTCON          equ	151	;# 
  2250     0098                     OSCTUNE         equ	152	;# 
  2251     0099                     OSCCON          equ	153	;# 
  2252     009A                     OSCSTAT         equ	154	;# 
  2253     009B                     ADRES           equ	155	;# 
  2254     009B                     ADRESL          equ	155	;# 
  2255     009C                     ADRESH          equ	156	;# 
  2256     009D                     ADCON0          equ	157	;# 
  2257     009E                     ADCON1          equ	158	;# 
  2258     010C                     LATA            equ	268	;# 
  2259     010D                     LATB            equ	269	;# 
  2260     0111                     CM1CON0         equ	273	;# 
  2261     0112                     CM1CON1         equ	274	;# 
  2262     0113                     CM2CON0         equ	275	;# 
  2263     0114                     CM2CON1         equ	276	;# 
  2264     0115                     CMOUT           equ	277	;# 
  2265     0116                     BORCON          equ	278	;# 
  2266     0117                     FVRCON          equ	279	;# 
  2267     0118                     DACCON0         equ	280	;# 
  2268     0119                     DACCON1         equ	281	;# 
  2269     011A                     SRCON0          equ	282	;# 
  2270     011B                     SRCON1          equ	283	;# 
  2271     011D                     APFCON0         equ	285	;# 
  2272     011E                     APFCON1         equ	286	;# 
  2273     018C                     ANSELA          equ	396	;# 
  2274     018D                     ANSELB          equ	397	;# 
  2275     0191                     EEADR           equ	401	;# 
  2276     0191                     EEADRL          equ	401	;# 
  2277     0192                     EEADRH          equ	402	;# 
  2278     0193                     EEDAT           equ	403	;# 
  2279     0193                     EEDATL          equ	403	;# 
  2280     0193                     EEDATA          equ	403	;# 
  2281     0194                     EEDATH          equ	404	;# 
  2282     0195                     EECON1          equ	405	;# 
  2283     0196                     EECON2          equ	406	;# 
  2284     0199                     RCREG           equ	409	;# 
  2285     019A                     TXREG           equ	410	;# 
  2286     019B                     SP1BRG          equ	411	;# 
  2287     019B                     SP1BRGL         equ	411	;# 
  2288     019B                     SPBRG           equ	411	;# 
  2289     019B                     SPBRGL          equ	411	;# 
  2290     019C                     SP1BRGH         equ	412	;# 
  2291     019C                     SPBRGH          equ	412	;# 
  2292     019D                     RCSTA           equ	413	;# 
  2293     019E                     TXSTA           equ	414	;# 
  2294     019F                     BAUDCON         equ	415	;# 
  2295     020C                     WPUA            equ	524	;# 
  2296     020D                     WPUB            equ	525	;# 
  2297     0211                     SSP1BUF         equ	529	;# 
  2298     0211                     SSPBUF          equ	529	;# 
  2299     0212                     SSP1ADD         equ	530	;# 
  2300     0212                     SSPADD          equ	530	;# 
  2301     0213                     SSP1MSK         equ	531	;# 
  2302     0213                     SSPMSK          equ	531	;# 
  2303     0214                     SSP1STAT        equ	532	;# 
  2304     0214                     SSPSTAT         equ	532	;# 
  2305     0215                     SSP1CON1        equ	533	;# 
  2306     0215                     SSPCON1         equ	533	;# 
  2307     0215                     SSPCON          equ	533	;# 
  2308     0216                     SSP1CON2        equ	534	;# 
  2309     0216                     SSPCON2         equ	534	;# 
  2310     0217                     SSP1CON3        equ	535	;# 
  2311     0217                     SSPCON3         equ	535	;# 
  2312     0219                     SSP2BUF         equ	537	;# 
  2313     021A                     SSP2ADD         equ	538	;# 
  2314     021B                     SSP2MSK         equ	539	;# 
  2315     021C                     SSP2STAT        equ	540	;# 
  2316     021D                     SSP2CON1        equ	541	;# 
  2317     021E                     SSP2CON2        equ	542	;# 
  2318     021F                     SSP2CON3        equ	543	;# 
  2319     0291                     CCPR1           equ	657	;# 
  2320     0291                     CCPR1L          equ	657	;# 
  2321     0292                     CCPR1H          equ	658	;# 
  2322     0293                     CCP1CON         equ	659	;# 
  2323     0294                     PWM1CON         equ	660	;# 
  2324     0295                     CCP1AS          equ	661	;# 
  2325     0295                     ECCP1AS         equ	661	;# 
  2326     0296                     PSTR1CON        equ	662	;# 
  2327     0298                     CCPR2           equ	664	;# 
  2328     0298                     CCPR2L          equ	664	;# 
  2329     0299                     CCPR2H          equ	665	;# 
  2330     029A                     CCP2CON         equ	666	;# 
  2331     029B                     PWM2CON         equ	667	;# 
  2332     029C                     CCP2AS          equ	668	;# 
  2333     029C                     ECCP2AS         equ	668	;# 
  2334     029D                     PSTR2CON        equ	669	;# 
  2335     029E                     CCPTMRS         equ	670	;# 
  2336     029E                     CCPTMRS0        equ	670	;# 
  2337     0311                     CCPR3           equ	785	;# 
  2338     0311                     CCPR3L          equ	785	;# 
  2339     0312                     CCPR3H          equ	786	;# 
  2340     0313                     CCP3CON         equ	787	;# 
  2341     0318                     CCPR4           equ	792	;# 
  2342     0318                     CCPR4L          equ	792	;# 
  2343     0319                     CCPR4H          equ	793	;# 
  2344     031A                     CCP4CON         equ	794	;# 
  2345     0394                     IOCBP           equ	916	;# 
  2346     0395                     IOCBN           equ	917	;# 
  2347     0396                     IOCBF           equ	918	;# 
  2348     039A                     CLKRCON         equ	922	;# 
  2349     039C                     MDCON           equ	924	;# 
  2350     039D                     MDSRC           equ	925	;# 
  2351     039E                     MDCARL          equ	926	;# 
  2352     039F                     MDCARH          equ	927	;# 
  2353     0415                     TMR4            equ	1045	;# 
  2354     0416                     PR4             equ	1046	;# 
  2355     0417                     T4CON           equ	1047	;# 
  2356     041C                     TMR6            equ	1052	;# 
  2357     041D                     PR6             equ	1053	;# 
  2358     041E                     T6CON           equ	1054	;# 
  2359     0FE4                     STATUS_SHAD     equ	4068	;# 
  2360     0FE5                     WREG_SHAD       equ	4069	;# 
  2361     0FE6                     BSR_SHAD        equ	4070	;# 
  2362     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2363     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2364     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2365     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2366     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2367     0FED                     STKPTR          equ	4077	;# 
  2368     0FEE                     TOSL            equ	4078	;# 
  2369     0FEF                     TOSH            equ	4079	;# 
  2370     0000                     INDF0           equ	0	;# 
  2371     0001                     INDF1           equ	1	;# 
  2372     0002                     PCL             equ	2	;# 
  2373     0003                     STATUS          equ	3	;# 
  2374     0004                     FSR0L           equ	4	;# 
  2375     0005                     FSR0H           equ	5	;# 
  2376     0006                     FSR1L           equ	6	;# 
  2377     0007                     FSR1H           equ	7	;# 
  2378     0008                     BSR             equ	8	;# 
  2379     0009                     WREG            equ	9	;# 
  2380     000A                     PCLATH          equ	10	;# 
  2381     000B                     INTCON          equ	11	;# 
  2382     000C                     PORTA           equ	12	;# 
  2383     000D                     PORTB           equ	13	;# 
  2384     0011                     PIR1            equ	17	;# 
  2385     0012                     PIR2            equ	18	;# 
  2386     0013                     PIR3            equ	19	;# 
  2387     0014                     PIR4            equ	20	;# 
  2388     0015                     TMR0            equ	21	;# 
  2389     0016                     TMR1            equ	22	;# 
  2390     0016                     TMR1L           equ	22	;# 
  2391     0017                     TMR1H           equ	23	;# 
  2392     0018                     T1CON           equ	24	;# 
  2393     0019                     T1GCON          equ	25	;# 
  2394     001A                     TMR2            equ	26	;# 
  2395     001B                     PR2             equ	27	;# 
  2396     001C                     T2CON           equ	28	;# 
  2397     001E                     CPSCON0         equ	30	;# 
  2398     001F                     CPSCON1         equ	31	;# 
  2399     008C                     TRISA           equ	140	;# 
  2400     008D                     TRISB           equ	141	;# 
  2401     0091                     PIE1            equ	145	;# 
  2402     0092                     PIE2            equ	146	;# 
  2403     0093                     PIE3            equ	147	;# 
  2404     0094                     PIE4            equ	148	;# 
  2405     0095                     OPTION_REG      equ	149	;# 
  2406     0096                     PCON            equ	150	;# 
  2407     0097                     WDTCON          equ	151	;# 
  2408     0098                     OSCTUNE         equ	152	;# 
  2409     0099                     OSCCON          equ	153	;# 
  2410     009A                     OSCSTAT         equ	154	;# 
  2411     009B                     ADRES           equ	155	;# 
  2412     009B                     ADRESL          equ	155	;# 
  2413     009C                     ADRESH          equ	156	;# 
  2414     009D                     ADCON0          equ	157	;# 
  2415     009E                     ADCON1          equ	158	;# 
  2416     010C                     LATA            equ	268	;# 
  2417     010D                     LATB            equ	269	;# 
  2418     0111                     CM1CON0         equ	273	;# 
  2419     0112                     CM1CON1         equ	274	;# 
  2420     0113                     CM2CON0         equ	275	;# 
  2421     0114                     CM2CON1         equ	276	;# 
  2422     0115                     CMOUT           equ	277	;# 
  2423     0116                     BORCON          equ	278	;# 
  2424     0117                     FVRCON          equ	279	;# 
  2425     0118                     DACCON0         equ	280	;# 
  2426     0119                     DACCON1         equ	281	;# 
  2427     011A                     SRCON0          equ	282	;# 
  2428     011B                     SRCON1          equ	283	;# 
  2429     011D                     APFCON0         equ	285	;# 
  2430     011E                     APFCON1         equ	286	;# 
  2431     018C                     ANSELA          equ	396	;# 
  2432     018D                     ANSELB          equ	397	;# 
  2433     0191                     EEADR           equ	401	;# 
  2434     0191                     EEADRL          equ	401	;# 
  2435     0192                     EEADRH          equ	402	;# 
  2436     0193                     EEDAT           equ	403	;# 
  2437     0193                     EEDATL          equ	403	;# 
  2438     0193                     EEDATA          equ	403	;# 
  2439     0194                     EEDATH          equ	404	;# 
  2440     0195                     EECON1          equ	405	;# 
  2441     0196                     EECON2          equ	406	;# 
  2442     0199                     RCREG           equ	409	;# 
  2443     019A                     TXREG           equ	410	;# 
  2444     019B                     SP1BRG          equ	411	;# 
  2445     019B                     SP1BRGL         equ	411	;# 
  2446     019B                     SPBRG           equ	411	;# 
  2447     019B                     SPBRGL          equ	411	;# 
  2448     019C                     SP1BRGH         equ	412	;# 
  2449     019C                     SPBRGH          equ	412	;# 
  2450     019D                     RCSTA           equ	413	;# 
  2451     019E                     TXSTA           equ	414	;# 
  2452     019F                     BAUDCON         equ	415	;# 
  2453     020C                     WPUA            equ	524	;# 
  2454     020D                     WPUB            equ	525	;# 
  2455     0211                     SSP1BUF         equ	529	;# 
  2456     0211                     SSPBUF          equ	529	;# 
  2457     0212                     SSP1ADD         equ	530	;# 
  2458     0212                     SSPADD          equ	530	;# 
  2459     0213                     SSP1MSK         equ	531	;# 
  2460     0213                     SSPMSK          equ	531	;# 
  2461     0214                     SSP1STAT        equ	532	;# 
  2462     0214                     SSPSTAT         equ	532	;# 
  2463     0215                     SSP1CON1        equ	533	;# 
  2464     0215                     SSPCON1         equ	533	;# 
  2465     0215                     SSPCON          equ	533	;# 
  2466     0216                     SSP1CON2        equ	534	;# 
  2467     0216                     SSPCON2         equ	534	;# 
  2468     0217                     SSP1CON3        equ	535	;# 
  2469     0217                     SSPCON3         equ	535	;# 
  2470     0219                     SSP2BUF         equ	537	;# 
  2471     021A                     SSP2ADD         equ	538	;# 
  2472     021B                     SSP2MSK         equ	539	;# 
  2473     021C                     SSP2STAT        equ	540	;# 
  2474     021D                     SSP2CON1        equ	541	;# 
  2475     021E                     SSP2CON2        equ	542	;# 
  2476     021F                     SSP2CON3        equ	543	;# 
  2477     0291                     CCPR1           equ	657	;# 
  2478     0291                     CCPR1L          equ	657	;# 
  2479     0292                     CCPR1H          equ	658	;# 
  2480     0293                     CCP1CON         equ	659	;# 
  2481     0294                     PWM1CON         equ	660	;# 
  2482     0295                     CCP1AS          equ	661	;# 
  2483     0295                     ECCP1AS         equ	661	;# 
  2484     0296                     PSTR1CON        equ	662	;# 
  2485     0298                     CCPR2           equ	664	;# 
  2486     0298                     CCPR2L          equ	664	;# 
  2487     0299                     CCPR2H          equ	665	;# 
  2488     029A                     CCP2CON         equ	666	;# 
  2489     029B                     PWM2CON         equ	667	;# 
  2490     029C                     CCP2AS          equ	668	;# 
  2491     029C                     ECCP2AS         equ	668	;# 
  2492     029D                     PSTR2CON        equ	669	;# 
  2493     029E                     CCPTMRS         equ	670	;# 
  2494     029E                     CCPTMRS0        equ	670	;# 
  2495     0311                     CCPR3           equ	785	;# 
  2496     0311                     CCPR3L          equ	785	;# 
  2497     0312                     CCPR3H          equ	786	;# 
  2498     0313                     CCP3CON         equ	787	;# 
  2499     0318                     CCPR4           equ	792	;# 
  2500     0318                     CCPR4L          equ	792	;# 
  2501     0319                     CCPR4H          equ	793	;# 
  2502     031A                     CCP4CON         equ	794	;# 
  2503     0394                     IOCBP           equ	916	;# 
  2504     0395                     IOCBN           equ	917	;# 
  2505     0396                     IOCBF           equ	918	;# 
  2506     039A                     CLKRCON         equ	922	;# 
  2507     039C                     MDCON           equ	924	;# 
  2508     039D                     MDSRC           equ	925	;# 
  2509     039E                     MDCARL          equ	926	;# 
  2510     039F                     MDCARH          equ	927	;# 
  2511     0415                     TMR4            equ	1045	;# 
  2512     0416                     PR4             equ	1046	;# 
  2513     0417                     T4CON           equ	1047	;# 
  2514     041C                     TMR6            equ	1052	;# 
  2515     041D                     PR6             equ	1053	;# 
  2516     041E                     T6CON           equ	1054	;# 
  2517     0FE4                     STATUS_SHAD     equ	4068	;# 
  2518     0FE5                     WREG_SHAD       equ	4069	;# 
  2519     0FE6                     BSR_SHAD        equ	4070	;# 
  2520     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2521     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2522     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2523     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2524     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2525     0FED                     STKPTR          equ	4077	;# 
  2526     0FEE                     TOSL            equ	4078	;# 
  2527     0FEF                     TOSH            equ	4079	;# 
  2528     0000                     INDF0           equ	0	;# 
  2529     0001                     INDF1           equ	1	;# 
  2530     0002                     PCL             equ	2	;# 
  2531     0003                     STATUS          equ	3	;# 
  2532     0004                     FSR0L           equ	4	;# 
  2533     0005                     FSR0H           equ	5	;# 
  2534     0006                     FSR1L           equ	6	;# 
  2535     0007                     FSR1H           equ	7	;# 
  2536     0008                     BSR             equ	8	;# 
  2537     0009                     WREG            equ	9	;# 
  2538     000A                     PCLATH          equ	10	;# 
  2539     000B                     INTCON          equ	11	;# 
  2540     000C                     PORTA           equ	12	;# 
  2541     000D                     PORTB           equ	13	;# 
  2542     0011                     PIR1            equ	17	;# 
  2543     0012                     PIR2            equ	18	;# 
  2544     0013                     PIR3            equ	19	;# 
  2545     0014                     PIR4            equ	20	;# 
  2546     0015                     TMR0            equ	21	;# 
  2547     0016                     TMR1            equ	22	;# 
  2548     0016                     TMR1L           equ	22	;# 
  2549     0017                     TMR1H           equ	23	;# 
  2550     0018                     T1CON           equ	24	;# 
  2551     0019                     T1GCON          equ	25	;# 
  2552     001A                     TMR2            equ	26	;# 
  2553     001B                     PR2             equ	27	;# 
  2554     001C                     T2CON           equ	28	;# 
  2555     001E                     CPSCON0         equ	30	;# 
  2556     001F                     CPSCON1         equ	31	;# 
  2557     008C                     TRISA           equ	140	;# 
  2558     008D                     TRISB           equ	141	;# 
  2559     0091                     PIE1            equ	145	;# 
  2560     0092                     PIE2            equ	146	;# 
  2561     0093                     PIE3            equ	147	;# 
  2562     0094                     PIE4            equ	148	;# 
  2563     0095                     OPTION_REG      equ	149	;# 
  2564     0096                     PCON            equ	150	;# 
  2565     0097                     WDTCON          equ	151	;# 
  2566     0098                     OSCTUNE         equ	152	;# 
  2567     0099                     OSCCON          equ	153	;# 
  2568     009A                     OSCSTAT         equ	154	;# 
  2569     009B                     ADRES           equ	155	;# 
  2570     009B                     ADRESL          equ	155	;# 
  2571     009C                     ADRESH          equ	156	;# 
  2572     009D                     ADCON0          equ	157	;# 
  2573     009E                     ADCON1          equ	158	;# 
  2574     010C                     LATA            equ	268	;# 
  2575     010D                     LATB            equ	269	;# 
  2576     0111                     CM1CON0         equ	273	;# 
  2577     0112                     CM1CON1         equ	274	;# 
  2578     0113                     CM2CON0         equ	275	;# 
  2579     0114                     CM2CON1         equ	276	;# 
  2580     0115                     CMOUT           equ	277	;# 
  2581     0116                     BORCON          equ	278	;# 
  2582     0117                     FVRCON          equ	279	;# 
  2583     0118                     DACCON0         equ	280	;# 
  2584     0119                     DACCON1         equ	281	;# 
  2585     011A                     SRCON0          equ	282	;# 
  2586     011B                     SRCON1          equ	283	;# 
  2587     011D                     APFCON0         equ	285	;# 
  2588     011E                     APFCON1         equ	286	;# 
  2589     018C                     ANSELA          equ	396	;# 
  2590     018D                     ANSELB          equ	397	;# 
  2591     0191                     EEADR           equ	401	;# 
  2592     0191                     EEADRL          equ	401	;# 
  2593     0192                     EEADRH          equ	402	;# 
  2594     0193                     EEDAT           equ	403	;# 
  2595     0193                     EEDATL          equ	403	;# 
  2596     0193                     EEDATA          equ	403	;# 
  2597     0194                     EEDATH          equ	404	;# 
  2598     0195                     EECON1          equ	405	;# 
  2599     0196                     EECON2          equ	406	;# 
  2600     0199                     RCREG           equ	409	;# 
  2601     019A                     TXREG           equ	410	;# 
  2602     019B                     SP1BRG          equ	411	;# 
  2603     019B                     SP1BRGL         equ	411	;# 
  2604     019B                     SPBRG           equ	411	;# 
  2605     019B                     SPBRGL          equ	411	;# 
  2606     019C                     SP1BRGH         equ	412	;# 
  2607     019C                     SPBRGH          equ	412	;# 
  2608     019D                     RCSTA           equ	413	;# 
  2609     019E                     TXSTA           equ	414	;# 
  2610     019F                     BAUDCON         equ	415	;# 
  2611     020C                     WPUA            equ	524	;# 
  2612     020D                     WPUB            equ	525	;# 
  2613     0211                     SSP1BUF         equ	529	;# 
  2614     0211                     SSPBUF          equ	529	;# 
  2615     0212                     SSP1ADD         equ	530	;# 
  2616     0212                     SSPADD          equ	530	;# 
  2617     0213                     SSP1MSK         equ	531	;# 
  2618     0213                     SSPMSK          equ	531	;# 
  2619     0214                     SSP1STAT        equ	532	;# 
  2620     0214                     SSPSTAT         equ	532	;# 
  2621     0215                     SSP1CON1        equ	533	;# 
  2622     0215                     SSPCON1         equ	533	;# 
  2623     0215                     SSPCON          equ	533	;# 
  2624     0216                     SSP1CON2        equ	534	;# 
  2625     0216                     SSPCON2         equ	534	;# 
  2626     0217                     SSP1CON3        equ	535	;# 
  2627     0217                     SSPCON3         equ	535	;# 
  2628     0219                     SSP2BUF         equ	537	;# 
  2629     021A                     SSP2ADD         equ	538	;# 
  2630     021B                     SSP2MSK         equ	539	;# 
  2631     021C                     SSP2STAT        equ	540	;# 
  2632     021D                     SSP2CON1        equ	541	;# 
  2633     021E                     SSP2CON2        equ	542	;# 
  2634     021F                     SSP2CON3        equ	543	;# 
  2635     0291                     CCPR1           equ	657	;# 
  2636     0291                     CCPR1L          equ	657	;# 
  2637     0292                     CCPR1H          equ	658	;# 
  2638     0293                     CCP1CON         equ	659	;# 
  2639     0294                     PWM1CON         equ	660	;# 
  2640     0295                     CCP1AS          equ	661	;# 
  2641     0295                     ECCP1AS         equ	661	;# 
  2642     0296                     PSTR1CON        equ	662	;# 
  2643     0298                     CCPR2           equ	664	;# 
  2644     0298                     CCPR2L          equ	664	;# 
  2645     0299                     CCPR2H          equ	665	;# 
  2646     029A                     CCP2CON         equ	666	;# 
  2647     029B                     PWM2CON         equ	667	;# 
  2648     029C                     CCP2AS          equ	668	;# 
  2649     029C                     ECCP2AS         equ	668	;# 
  2650     029D                     PSTR2CON        equ	669	;# 
  2651     029E                     CCPTMRS         equ	670	;# 
  2652     029E                     CCPTMRS0        equ	670	;# 
  2653     0311                     CCPR3           equ	785	;# 
  2654     0311                     CCPR3L          equ	785	;# 
  2655     0312                     CCPR3H          equ	786	;# 
  2656     0313                     CCP3CON         equ	787	;# 
  2657     0318                     CCPR4           equ	792	;# 
  2658     0318                     CCPR4L          equ	792	;# 
  2659     0319                     CCPR4H          equ	793	;# 
  2660     031A                     CCP4CON         equ	794	;# 
  2661     0394                     IOCBP           equ	916	;# 
  2662     0395                     IOCBN           equ	917	;# 
  2663     0396                     IOCBF           equ	918	;# 
  2664     039A                     CLKRCON         equ	922	;# 
  2665     039C                     MDCON           equ	924	;# 
  2666     039D                     MDSRC           equ	925	;# 
  2667     039E                     MDCARL          equ	926	;# 
  2668     039F                     MDCARH          equ	927	;# 
  2669     0415                     TMR4            equ	1045	;# 
  2670     0416                     PR4             equ	1046	;# 
  2671     0417                     T4CON           equ	1047	;# 
  2672     041C                     TMR6            equ	1052	;# 
  2673     041D                     PR6             equ	1053	;# 
  2674     041E                     T6CON           equ	1054	;# 
  2675     0FE4                     STATUS_SHAD     equ	4068	;# 
  2676     0FE5                     WREG_SHAD       equ	4069	;# 
  2677     0FE6                     BSR_SHAD        equ	4070	;# 
  2678     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2679     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2680     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2681     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2682     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2683     0FED                     STKPTR          equ	4077	;# 
  2684     0FEE                     TOSL            equ	4078	;# 
  2685     0FEF                     TOSH            equ	4079	;# 
  2686                           
  2687                           	psect	idataBANK1
  2688     0CB3                     __pidataBANK1:
  2689                           
  2690                           ;initializer for _velocidade_string
  2691     0CB3  3430               	retlw	48
  2692     0CB4  3430               	retlw	48
  2693     0CB5  3430               	retlw	48
  2694     0CB6  3400               	retlw	0
  2695                           
  2696                           ;initializer for _position_string
  2697     0CB7  3430               	retlw	48
  2698     0CB8  3430               	retlw	48
  2699     0CB9  3430               	retlw	48
  2700     0CBA  3400               	retlw	0
  2701                           
  2702                           	psect	idataBANK2
  2703     0E10                     __pidataBANK2:
  2704                           
  2705                           ;initializer for _uart_write_buffer
  2706     0E10  3424               	retlw	36
  2707     0E11  3431               	retlw	49
  2708     0E12  342C               	retlw	44
  2709     0E13  3431               	retlw	49
  2710     0E14  342C               	retlw	44
  2711     0E15  3430               	retlw	48
  2712     0E16  342C               	retlw	44
  2713     0E17  3430               	retlw	48
  2714     0E18  3430               	retlw	48
  2715     0E19  3430               	retlw	48
  2716     0E1A  342C               	retlw	44
  2717     0E1B  3479               	retlw	121
  2718     0E1C  3430               	retlw	48
  2719     0E1D  342E               	retlw	46
  2720     0E1E  3430               	retlw	48
  2721     0E1F  342C               	retlw	44
  2722     0E20  3454               	retlw	84
  2723     0E21  3454               	retlw	84
  2724     0E22  342E               	retlw	46
  2725     0E23  3454               	retlw	84
  2726     0E24  340D               	retlw	13
  2727                           
  2728                           	psect	stringtext1
  2729     07FD                     __pstringtext1:
  2730     07FD                     _MATRIX_FLOOR:
  2731     07FD  3400               	retlw	0
  2732     07FE  3401               	retlw	1
  2733     07FF  34FF               	retlw	255
  2734     0800  3441               	retlw	65
  2735     0801  3471               	retlw	113
  2736     0802  3489               	retlw	137
  2737     0803  3485               	retlw	133
  2738     0804  3443               	retlw	67
  2739     0805  347E               	retlw	126
  2740     0806  3489               	retlw	137
  2741     0807  3489               	retlw	137
  2742     0808  3442               	retlw	66
  2743     0809  3408               	retlw	8
  2744     080A  34FF               	retlw	255
  2745     080B  3448               	retlw	72
  2746     080C  3438               	retlw	56
  2747     080D                     __end_of_MATRIX_FLOOR:
  2748                           
  2749                           	psect	stringtext2
  2750     080D                     __pstringtext2:
  2751     080D                     _MATRIX_CONFIG:
  2752     080D  3409               	retlw	9
  2753     080E  3400               	retlw	0
  2754     080F  340A               	retlw	10
  2755     0810  3400               	retlw	0
  2756     0811  340B               	retlw	11
  2757     0812  3407               	retlw	7
  2758     0813  340C               	retlw	12
  2759     0814  3401               	retlw	1
  2760     0815  340F               	retlw	15
  2761     0816  3401               	retlw	1
  2762     0817  340F               	retlw	15
  2763     0818  3400               	retlw	0
  2764     0819                     __end_of_MATRIX_CONFIG:
  2765                           
  2766                           	psect	stringtext3
  2767     0819                     __pstringtext3:
  2768     0819                     _MATRIX_DIR:
  2769     0819  3440               	retlw	64
  2770     081A  3420               	retlw	32
  2771     081B  3440               	retlw	64
  2772     081C  3440               	retlw	64
  2773     081D  3480               	retlw	128
  2774     081E  3440               	retlw	64
  2775     081F  3440               	retlw	64
  2776     0820  3440               	retlw	64
  2777     0821  3440               	retlw	64
  2778     0822                     __end_of_MATRIX_DIR:
  2779                           
  2780                           	psect	stringtext4
  2781     0822                     __pstringtext4:
  2782     0822                     _FLOORS:
  2783     0822  3400               	retlw	0
  2784     0823  3401               	retlw	1
  2785     0824  3402               	retlw	2
  2786     0825  3403               	retlw	3
  2787     0826  3402               	retlw	2
  2788     0827  3401               	retlw	1
  2789     0828                     __end_of_FLOORS:
  2790                           
  2791                           	psect	stringtext5
  2792     0828                     __pstringtext5:
  2793     0828                     _spi1_configuration:
  2794     0828  3403               	retlw	3
  2795     0829  3440               	retlw	64
  2796     082A  3413               	retlw	19
  2797     082B  3400               	retlw	0
  2798     082C                     __end_of_spi1_configuration:
  2799                           
  2800                           	psect	nvBANK1
  2801     00D7                     __pnvBANK1:
  2802     00D7                     _ADC_InterruptHandler:
  2803     00D7                     	ds	2
  2804     00D9                     _TMR1_InterruptHandler:
  2805     00D9                     	ds	2
  2806     00DB                     _EUSART_ErrorHandler:
  2807     00DB                     	ds	2
  2808     00DD                     _EUSART_OverrunErrorHandler:
  2809     00DD                     	ds	2
  2810     00DF                     _EUSART_FramingErrorHandler:
  2811     00DF                     	ds	2
  2812     00E1                     _EUSART_RxDefaultInterruptHandler:
  2813     00E1                     	ds	2
  2814     00E3                     _IOCBF3_InterruptHandler:
  2815     00E3                     	ds	2
  2816     00E5                     _IOCBF0_InterruptHandler:
  2817     00E5                     	ds	2
  2818     0015                     _TMR0           set	21
  2819     0018                     _T1CONbits      set	24
  2820     0018                     _T1CON          set	24
  2821     0016                     _TMR1L          set	22
  2822     0017                     _TMR1H          set	23
  2823     0019                     _T1GCON         set	25
  2824     001C                     _T2CON          set	28
  2825     001A                     _TMR2           set	26
  2826     001B                     _PR2            set	27
  2827     0012                     _PIR2bits       set	18
  2828     0011                     _PIR1bits       set	17
  2829     000B                     _INTCONbits     set	11
  2830     0013                     _PIR3bits       set	19
  2831     009D                     _ADCON0bits     set	157
  2832     009D                     _ADCON0         set	157
  2833     009C                     _ADRESH         set	156
  2834     009B                     _ADRESL         set	155
  2835     009E                     _ADCON1         set	158
  2836     0095                     _OPTION_REG     set	149
  2837     008D                     _TRISBbits      set	141
  2838     0092                     _PIE2bits       set	146
  2839     0091                     _PIE1bits       set	145
  2840     0095                     _OPTION_REGbits set	149
  2841     008D                     _TRISB          set	141
  2842     008C                     _TRISA          set	140
  2843     0097                     _WDTCON         set	151
  2844     0098                     _OSCTUNE        set	152
  2845     0099                     _OSCCON         set	153
  2846     010D                     _LATBbits       set	269
  2847     0114                     _CM2CON1        set	276
  2848     0113                     _CM2CON0        set	275
  2849     0117                     _FVRCON         set	279
  2850     0112                     _CM1CON1        set	274
  2851     0111                     _CM1CON0        set	273
  2852     011E                     _APFCON1        set	286
  2853     011D                     _APFCON0        set	285
  2854     010D                     _LATB           set	269
  2855     010C                     _LATA           set	268
  2856     0116                     _BORCON         set	278
  2857     010C                     _LATAbits       set	268
  2858     0199                     _RCREG          set	409
  2859     019D                     _RCSTAbits      set	413
  2860     019A                     _TXREG          set	410
  2861     019E                     _TXSTAbits      set	414
  2862     019C                     _SPBRGH         set	412
  2863     019B                     _SPBRGL         set	411
  2864     019E                     _TXSTA          set	414
  2865     019D                     _RCSTA          set	413
  2866     019F                     _BAUDCON        set	415
  2867     018C                     _ANSELA         set	396
  2868     018D                     _ANSELB         set	397
  2869     0211                     _SSP1BUF        set	529
  2870     0216                     _SSP1CON2       set	534
  2871     0215                     _SSP1CON1bits   set	533
  2872     0212                     _SSP1ADD        set	530
  2873     0215                     _SSP1CON1       set	533
  2874     0214                     _SSP1STAT       set	532
  2875     020C                     _WPUA           set	524
  2876     020D                     _WPUB           set	525
  2877     029E                     _CCPTMRS0bits   set	670
  2878     0313                     _CCP3CONbits    set	787
  2879     0312                     _CCPR3H         set	786
  2880     0311                     _CCPR3L         set	785
  2881     0313                     _CCP3CON        set	787
  2882     0394                     _IOCBPbits      set	916
  2883     0395                     _IOCBNbits      set	917
  2884     0396                     _IOCBFbits      set	918
  2885     041E                     _T6CON          set	1054
  2886     041C                     _TMR6           set	1052
  2887     041D                     _PR6            set	1053
  2888                           
  2889                           	psect	cinit
  2890     0041                     start_initialization:	
  2891                           ; #config settings
  2892                           
  2893     0041                     __initialization:
  2894                           
  2895                           ; Initialize objects allocated to BANK1
  2896     0041  30B3               	movlw	low __pidataBANK1
  2897     0042  0084               	movwf	4
  2898     0043  308C               	movlw	(high __pidataBANK1)| (0+128)
  2899     0044  0085               	movwf	5
  2900     0045  30E7               	movlw	low __pdataBANK1
  2901     0046  0086               	movwf	6
  2902     0047  3000               	movlw	high __pdataBANK1
  2903     0048  0087               	movwf	7
  2904     0049  3008               	movlw	8
  2905     004A  318C  248F  3180   	fcall	init_ram
  2906                           
  2907                           ; Initialize objects allocated to BANK2
  2908     004D  3010               	movlw	low __pidataBANK2
  2909     004E  0084               	movwf	4
  2910     004F  308E               	movlw	(high __pidataBANK2)| (0+128)
  2911     0050  0085               	movwf	5
  2912     0051  3020               	movlw	low __pdataBANK2
  2913     0052  0086               	movwf	6
  2914     0053  3001               	movlw	high __pdataBANK2
  2915     0054  0087               	movwf	7
  2916     0055  3015               	movlw	21
  2917     0056  318C  248F  3180   	fcall	init_ram
  2918                           
  2919                           ; Clear objects allocated to BANK0
  2920     0059  3020               	movlw	low __pbssBANK0
  2921     005A  0084               	movwf	4
  2922     005B  3000               	movlw	high __pbssBANK0
  2923     005C  0085               	movwf	5
  2924     005D  301F               	movlw	31
  2925     005E  318C  2489  3180   	fcall	clear_ram0
  2926                           
  2927                           ; Clear objects allocated to BANK1
  2928     0061  30A0               	movlw	low __pbssBANK1
  2929     0062  0084               	movwf	4
  2930     0063  3000               	movlw	high __pbssBANK1
  2931     0064  0085               	movwf	5
  2932     0065  3020               	movlw	32
  2933     0066  318C  2489         	fcall	clear_ram0
  2934     0068                     end_of_initialization:	
  2935                           ;End of C runtime variable initialization code
  2936                           
  2937     0068                     __end_of__initialization:
  2938     0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2939     0069  0020               	movlb	0
  2940     006A  3183  2B5F         	ljmp	_main	;jump to C main() function
  2941                           
  2942                           	psect	bssBANK0
  2943     0020                     __pbssBANK0:
  2944     0020                     _var:
  2945     0020                     	ds	7
  2946     0027                     _route:
  2947     0027                     	ds	6
  2948     002D                     TMR1_ISR@CountCallBack:
  2949     002D                     	ds	2
  2950     002F                     _timer1ReloadVal:
  2951     002F                     	ds	2
  2952     0031                     _position0:
  2953     0031                     	ds	2
  2954     0033                     _uart_read_buffer_count:
  2955     0033                     	ds	2
  2956     0035                     _timer0ReloadVal:
  2957     0035                     	ds	1
  2958     0036                     _eusartRxLastError:
  2959     0036                     	ds	1
  2960     0037                     _eusartRxCount:
  2961     0037                     	ds	1
  2962     0038                     _eusartRxTail:
  2963     0038                     	ds	1
  2964     0039                     _eusartRxHead:
  2965     0039                     	ds	1
  2966     003A                     _idle:
  2967     003A                     	ds	1
  2968     003B                     _stop_2s:
  2969     003B                     	ds	1
  2970     003C                     _next_floor:
  2971     003C                     	ds	1
  2972     003D                     _current_floor:
  2973     003D                     	ds	1
  2974     003E                     _index:
  2975     003E                     	ds	1
  2976                           
  2977                           	psect	bssBANK1
  2978     00A0                     __pbssBANK1:
  2979     00A0                     _uart_read_buffer:
  2980     00A0                     	ds	10
  2981     00AA                     _eusartRxStatusBuffer:
  2982     00AA                     	ds	8
  2983     00B2                     _eusartRxBuffer:
  2984     00B2                     	ds	8
  2985     00BA                     _velocidade:
  2986     00BA                     	ds	2
  2987     00BC                     _positionf:
  2988     00BC                     	ds	2
  2989     00BE                     _position:
  2990     00BE                     	ds	2
  2991                           
  2992                           	psect	dataBANK1
  2993     00E7                     __pdataBANK1:
  2994     00E7                     _velocidade_string:
  2995     00E7                     	ds	4
  2996     00EB                     _position_string:
  2997     00EB                     	ds	4
  2998                           
  2999                           	psect	dataBANK2
  3000     0120                     __pdataBANK2:
  3001     0120                     _uart_write_buffer:
  3002     0120                     	ds	21
  3003                           
  3004                           	psect	inittext
  3005     0C8F                     init_ram:
  3006     0C8F  00FE               	movwf	126
  3007     0C90                     initloop:
  3008     0C90  0012               	moviw fsr0++
  3009     0C91  001E               	movwi fsr1++
  3010     0C92  0BFE               	decfsz	126,f
  3011     0C93  2C90               	goto	initloop
  3012     0C94  3400               	retlw	0
  3013                           
  3014                           	psect	clrtext
  3015     0C89                     clear_ram0:	
  3016                           ;	Called with FSR0 containing the base address, and
  3017                           ;	WREG with the size to clear
  3018                           
  3019     0C89  0064               	clrwdt	;clear the watchdog before getting into this loop
  3020     0C8A                     clrloop0:
  3021     0C8A  0180               	clrf	0	;clear RAM location pointed to by FSR
  3022     0C8B  3101               	addfsr 0,1
  3023     0C8C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3024     0C8D  2C8A               	goto	clrloop0	;have we reached the end yet?
  3025     0C8E  3400               	retlw	0	;all done for this memory range, return
  3026                           
  3027                           	psect	cstackBANK2
  3028     0135                     __pcstackBANK2:
  3029     0135                     main@next_index:
  3030                           
  3031                           ; 2 bytes @ 0x0
  3032     0135                     	ds	2
  3033     0137                     main@is_empty:
  3034                           
  3035                           ; 1 bytes @ 0x2
  3036     0137                     	ds	1
  3037                           
  3038                           	psect	cstackBANK1
  3039     00C0                     __pcstackBANK1:
  3040     00C0                     ?_IOCBF0_SetInterruptHandler:
  3041     00C0                     ?_IOCBF3_SetInterruptHandler:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044     00C0                     ?_EUSART_SetRxInterruptHandler:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047     00C0                     ?_EUSART_SetFramingErrorHandler:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050     00C0                     ?_EUSART_SetOverrunErrorHandler:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053     00C0                     ?_EUSART_SetErrorHandler:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056     00C0                     ?_TMR1_SetInterruptHandler:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059     00C0                     ?_ADC_SetInterruptHandler:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062     00C0                     ?_SPI1_ExchangeBlock:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065     00C0                     ?___bmul:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068     00C0                     ?___awmod:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071     00C0                     SPI1_ExchangeBlock@block:	
  3072                           ; 2 bytes @ 0x0
  3073                           
  3074     00C0                     ___bmul@multiplicand:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077     00C0                     IOCBF0_SetInterruptHandler@InterruptHandler:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080     00C0                     IOCBF3_SetInterruptHandler@InterruptHandler:	
  3081                           ; 2 bytes @ 0x0
  3082                           
  3083     00C0                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3084                           ; 2 bytes @ 0x0
  3085                           
  3086     00C0                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3087                           ; 2 bytes @ 0x0
  3088                           
  3089     00C0                     EUSART_SetErrorHandler@interruptHandler:	
  3090                           ; 2 bytes @ 0x0
  3091                           
  3092     00C0                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3093                           ; 2 bytes @ 0x0
  3094                           
  3095     00C0                     TMR1_SetInterruptHandler@InterruptHandler:	
  3096                           ; 2 bytes @ 0x0
  3097                           
  3098     00C0                     ADC_SetInterruptHandler@InterruptHandler:	
  3099                           ; 2 bytes @ 0x0
  3100                           
  3101     00C0                     ___awmod@divisor:	
  3102                           ; 2 bytes @ 0x0
  3103                           
  3104     00C0                     ??_SPI1_Initialize:	
  3105                           ; 2 bytes @ 0x0
  3106                           
  3107     00C0                     ??_OSCILLATOR_Initialize:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110     00C0                     ??_WDT_Initialize:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113     00C0                     ??_CMP2_Initialize:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116     00C0                     ??_FVR_Initialize:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119     00C0                     ??_TMR2_Initialize:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122     00C0                     ??_TMR0_Initialize:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125     00C0                     ??_TMR6_Initialize:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128     00C0                     ??_CMP1_Initialize:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131     00C0                     ??_PWM3_Initialize:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134     00C0                     ??_SPI1_Open:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137     00C0                     ??_TMR0_Reload:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140     00C0                     ??_Route_empty:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143                           
  3144                           ; 1 bytes @ 0x0
  3145     00C0                     	ds	1
  3146     00C1                     ___bmul@product:
  3147     00C1                     SPI1_ExchangeBlock@blockSize:	
  3148                           ; 1 bytes @ 0x1
  3149                           
  3150     00C1                     Route_empty@i:	
  3151                           ; 2 bytes @ 0x1
  3152                           
  3153     00C1                     ??___bmul:	
  3154                           ; 2 bytes @ 0x1
  3155                           
  3156                           
  3157                           ; 1 bytes @ 0x1
  3158     00C1                     	ds	1
  3159     00C2                     ___bmul@multiplier:
  3160     00C2                     ___awmod@dividend:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163     00C2                     ??_PIN_MANAGER_Initialize:	
  3164                           ; 2 bytes @ 0x2
  3165                           
  3166     00C2                     ??_ADC_Initialize:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169     00C2                     ??_TMR1_Initialize:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172     00C2                     ??_EUSART_Initialize:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175     00C2                     ??_IOCBF0_SetInterruptHandler:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178     00C2                     ??_IOCBF3_SetInterruptHandler:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181     00C2                     ??_EUSART_SetRxInterruptHandler:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184     00C2                     ??_EUSART_SetFramingErrorHandler:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187     00C2                     ??_EUSART_SetOverrunErrorHandler:	
  3188                           ; 1 bytes @ 0x2
  3189                           
  3190     00C2                     ??_EUSART_SetErrorHandler:	
  3191                           ; 1 bytes @ 0x2
  3192                           
  3193     00C2                     ??_TMR1_SetInterruptHandler:	
  3194                           ; 1 bytes @ 0x2
  3195                           
  3196     00C2                     ??_ADC_SetInterruptHandler:	
  3197                           ; 1 bytes @ 0x2
  3198                           
  3199     00C2                     ??_SYSTEM_Initialize:	
  3200                           ; 1 bytes @ 0x2
  3201                           
  3202                           
  3203                           ; 1 bytes @ 0x2
  3204     00C2                     	ds	1
  3205     00C3                     SPI1_Open@spi1UniqueConfiguration:
  3206     00C3                     SPI1_ExchangeBlock@data:	
  3207                           ; 1 bytes @ 0x3
  3208                           
  3209     00C3                     ??_SPI1_ExchangeBlock:	
  3210                           ; 1 bytes @ 0x3
  3211                           
  3212                           
  3213                           ; 1 bytes @ 0x3
  3214     00C3                     	ds	1
  3215     00C4                     ?_Tx_spi:
  3216     00C4                     Tx_spi@data:	
  3217                           ; 1 bytes @ 0x4
  3218                           
  3219     00C4                     ___awmod@counter:	
  3220                           ; 1 bytes @ 0x4
  3221                           
  3222     00C4                     ??___awmod:	
  3223                           ; 1 bytes @ 0x4
  3224                           
  3225                           
  3226                           ; 1 bytes @ 0x4
  3227     00C4                     	ds	1
  3228     00C5                     ___awmod@sign:
  3229     00C5                     Tx_spi@dataSize:	
  3230                           ; 1 bytes @ 0x5
  3231                           
  3232                           
  3233                           ; 2 bytes @ 0x5
  3234     00C5                     	ds	1
  3235     00C6                     ??_Next_index:
  3236     00C6                     ??_Next_floor:	
  3237                           ; 1 bytes @ 0x6
  3238                           
  3239                           
  3240                           ; 1 bytes @ 0x6
  3241     00C6                     	ds	1
  3242     00C7                     Ini_matrix@i:
  3243     00C7                     Next_index@index_:	
  3244                           ; 1 bytes @ 0x7
  3245                           
  3246     00C7                     Next_floor@index_:	
  3247                           ; 2 bytes @ 0x7
  3248                           
  3249     00C7                     ??_Matrix_update_dir:	
  3250                           ; 2 bytes @ 0x7
  3251                           
  3252     00C7                     ??_Matrix_update_floor:	
  3253                           ; 1 bytes @ 0x7
  3254                           
  3255     00C7                     ??_Tx_spi:	
  3256                           ; 1 bytes @ 0x7
  3257                           
  3258     00C7                     ??_Ini_matrix:	
  3259                           ; 1 bytes @ 0x7
  3260                           
  3261                           
  3262                           ; 1 bytes @ 0x7
  3263     00C7                     	ds	1
  3264     00C8                     Ini_matrix@data:
  3265     00C8                     Matrix_update_floor@data:	
  3266                           ; 2 bytes @ 0x8
  3267                           
  3268     00C8                     Matrix_update_dir@route_:	
  3269                           ; 2 bytes @ 0x8
  3270                           
  3271                           
  3272                           ; 4 bytes @ 0x8
  3273     00C8                     	ds	1
  3274     00C9                     Next_index@i:
  3275     00C9                     Next_floor@i:	
  3276                           ; 2 bytes @ 0x9
  3277                           
  3278                           
  3279                           ; 2 bytes @ 0x9
  3280     00C9                     	ds	1
  3281     00CA                     Ini_matrix@k:
  3282     00CA                     Matrix_update_floor@display_floor:	
  3283                           ; 1 bytes @ 0xA
  3284                           
  3285                           
  3286                           ; 1 bytes @ 0xA
  3287     00CA                     	ds	1
  3288     00CB                     Ini_matrix@i_1791:
  3289     00CB                     Matrix_update_floor@i:	
  3290                           ; 1 bytes @ 0xB
  3291                           
  3292                           
  3293                           ; 1 bytes @ 0xB
  3294     00CB                     	ds	1
  3295     00CC                     Matrix_update_dir@mask:
  3296                           
  3297                           ; 1 bytes @ 0xC
  3298     00CC                     	ds	1
  3299     00CD                     Matrix_update_dir@display_dir:
  3300                           
  3301                           ; 1 bytes @ 0xD
  3302     00CD                     	ds	1
  3303     00CE                     Matrix_update_dir@data:
  3304                           
  3305                           ; 2 bytes @ 0xE
  3306     00CE                     	ds	2
  3307     00D0                     Matrix_update_dir@i_1802:
  3308                           
  3309                           ; 1 bytes @ 0x10
  3310     00D0                     	ds	1
  3311     00D1                     Matrix_update_dir@i:
  3312                           
  3313                           ; 2 bytes @ 0x11
  3314     00D1                     	ds	2
  3315     00D3                     ??_Motor_Turn_Off:
  3316     00D3                     ??_Motor_Turn_On:	
  3317                           ; 1 bytes @ 0x13
  3318                           
  3319     00D3                     ??_Start:	
  3320                           ; 1 bytes @ 0x13
  3321                           
  3322     00D3                     ??_Idle:	
  3323                           ; 1 bytes @ 0x13
  3324                           
  3325                           
  3326                           ; 1 bytes @ 0x13
  3327     00D3                     	ds	2
  3328     00D5                     ??_main:
  3329                           
  3330                           ; 1 bytes @ 0x15
  3331     00D5                     	ds	2
  3332                           
  3333                           	psect	cstackCOMMON
  3334     0070                     __pcstackCOMMON:
  3335     0070                     ?_SPI1_Initialize:
  3336     0070                     ?_PIN_MANAGER_Initialize:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339     0070                     ?_OSCILLATOR_Initialize:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342     0070                     ?_WDT_Initialize:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345     0070                     ?_CMP2_Initialize:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348     0070                     ?_FVR_Initialize:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351     0070                     ?_TMR2_Initialize:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354     0070                     ?_TMR0_Initialize:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357     0070                     ?_TMR6_Initialize:	
  3358                           ; 1 bytes @ 0x0
  3359                           
  3360     0070                     ?_CMP1_Initialize:	
  3361                           ; 1 bytes @ 0x0
  3362                           
  3363     0070                     ?_ADC_Initialize:	
  3364                           ; 1 bytes @ 0x0
  3365                           
  3366     0070                     ?_PWM3_Initialize:	
  3367                           ; 1 bytes @ 0x0
  3368                           
  3369     0070                     ?_TMR1_Initialize:	
  3370                           ; 1 bytes @ 0x0
  3371                           
  3372     0070                     ?_EUSART_Initialize:	
  3373                           ; 1 bytes @ 0x0
  3374                           
  3375     0070                     ?_IOCBF0_DefaultInterruptHandler:	
  3376                           ; 1 bytes @ 0x0
  3377                           
  3378     0070                     ?_IOCBF3_DefaultInterruptHandler:	
  3379                           ; 1 bytes @ 0x0
  3380                           
  3381     0070                     ?_IOCBF0_ISR:	
  3382                           ; 1 bytes @ 0x0
  3383                           
  3384     0070                     ?_IOCBF3_ISR:	
  3385                           ; 1 bytes @ 0x0
  3386                           
  3387     0070                     ?_ADC_ISR:	
  3388                           ; 1 bytes @ 0x0
  3389                           
  3390     0070                     ?_CMP1_ISR:	
  3391                           ; 1 bytes @ 0x0
  3392                           
  3393     0070                     ?_CMP2_ISR:	
  3394                           ; 1 bytes @ 0x0
  3395                           
  3396     0070                     ?_TMR1_ISR:	
  3397                           ; 1 bytes @ 0x0
  3398                           
  3399     0070                     ?_ISR_Floor3:	
  3400                           ; 1 bytes @ 0x0
  3401                           
  3402     0070                     ?_ISR_Floor4:	
  3403                           ; 1 bytes @ 0x0
  3404                           
  3405     0070                     ?_EUSART_Receive_ISR:	
  3406                           ; 1 bytes @ 0x0
  3407                           
  3408     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3409                           ; 1 bytes @ 0x0
  3410                           
  3411     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3412                           ; 1 bytes @ 0x0
  3413                           
  3414     0070                     ?_EUSART_DefaultErrorHandler:	
  3415                           ; 1 bytes @ 0x0
  3416                           
  3417     0070                     ?_EUSART_RxDataHandler:	
  3418                           ; 1 bytes @ 0x0
  3419                           
  3420     0070                     ?_TMR1_DefaultInterruptHandler:	
  3421                           ; 1 bytes @ 0x0
  3422                           
  3423     0070                     ?_TMR1_CallBack:	
  3424                           ; 1 bytes @ 0x0
  3425                           
  3426     0070                     ?_ADC_DefaultInterruptHandler:	
  3427                           ; 1 bytes @ 0x0
  3428                           
  3429     0070                     ?_Matrix_update_dir:	
  3430                           ; 1 bytes @ 0x0
  3431                           
  3432     0070                     ?_Matrix_update_floor:	
  3433                           ; 1 bytes @ 0x0
  3434                           
  3435     0070                     ?_SYSTEM_Initialize:	
  3436                           ; 1 bytes @ 0x0
  3437                           
  3438     0070                     ?_PIN_MANAGER_IOC:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441     0070                     ?_INTERRUPT_InterruptManager:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444     0070                     ?_SPI1_Open:	
  3445                           ; 1 bytes @ 0x0
  3446                           
  3447     0070                     ?_EUSART_is_tx_ready:	
  3448                           ; 1 bytes @ 0x0
  3449                           
  3450     0070                     ?_EUSART_Read:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453     0070                     ?_EUSART_Write:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456     0070                     ?_TMR1_WriteTimer:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459     0070                     ?_TMR0_ReadTimer:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462     0070                     ?_TMR0_Reload:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465     0070                     ?_Motor_Turn_Off:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468     0070                     ?_Motor_Turn_On:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471     0070                     ?_Read_UART:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474     0070                     ?_Update_tx_buffer:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477     0070                     ?_Write_UART:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480     0070                     ?_Route_empty:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483     0070                     ?_Next_index:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486     0070                     ?_Next_floor:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489     0070                     ?_Start:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492     0070                     ?_Idle:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495     0070                     ?_Ini_matrix:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498     0070                     ?_ISR_Floor2:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501     0070                     ?_ISR_Floor1:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504     0070                     ?_main:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507     0070                     ?___lbdiv:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510     0070                     ?i1_SPI1_ExchangeBlock:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513     0070                     ?i1_TMR0_Reload:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516     0070                     ?i1_Matrix_update_floor:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519     0070                     ?i1_Matrix_update_dir:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522     0070                     ?i1___bmul:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525     0070                     ?i1___awmod:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528     0070                     EUSART_Read@readValue:	
  3529                           ; 2 bytes @ 0x0
  3530                           
  3531     0070                     EUSART_Write@txData:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534     0070                     TMR0_ReadTimer@readVal:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537     0070                     ___lbdiv@divisor:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540     0070                     i1SPI1_ExchangeBlock@block:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543     0070                     i1___bmul@multiplicand:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546     0070                     TMR1_WriteTimer@timerVal:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549     0070                     i1___awmod@divisor:	
  3550                           ; 2 bytes @ 0x0
  3551                           
  3552     0070                     ??_IOCBF0_DefaultInterruptHandler:	
  3553                           ; 2 bytes @ 0x0
  3554                           
  3555     0070                     ??_IOCBF3_DefaultInterruptHandler:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558     0070                     ??_ADC_ISR:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561     0070                     ??_EUSART_Receive_ISR:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570     0070                     ??_EUSART_DefaultErrorHandler:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573     0070                     ??_EUSART_RxDataHandler:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576     0070                     ??_TMR1_DefaultInterruptHandler:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579     0070                     ??_ADC_DefaultInterruptHandler:	
  3580                           ; 1 bytes @ 0x0
  3581                           
  3582     0070                     ??_EUSART_is_tx_ready:	
  3583                           ; 1 bytes @ 0x0
  3584                           
  3585     0070                     ??_EUSART_Read:	
  3586                           ; 1 bytes @ 0x0
  3587                           
  3588     0070                     ??_EUSART_Write:	
  3589                           ; 1 bytes @ 0x0
  3590                           
  3591     0070                     ??_TMR0_ReadTimer:	
  3592                           ; 1 bytes @ 0x0
  3593                           
  3594     0070                     ??i1_TMR0_Reload:	
  3595                           ; 1 bytes @ 0x0
  3596                           
  3597                           
  3598                           ; 1 bytes @ 0x0
  3599     0070                     	ds	1
  3600     0071                     ?___wmul:
  3601     0071                     ___lbdiv@dividend:	
  3602                           ; 2 bytes @ 0x1
  3603                           
  3604     0071                     i1___bmul@product:	
  3605                           ; 1 bytes @ 0x1
  3606                           
  3607     0071                     ___wmul@multiplier:	
  3608                           ; 1 bytes @ 0x1
  3609                           
  3610     0071                     i1SPI1_ExchangeBlock@blockSize:	
  3611                           ; 2 bytes @ 0x1
  3612                           
  3613     0071                     ??___lbdiv:	
  3614                           ; 2 bytes @ 0x1
  3615                           
  3616     0071                     ??i1___bmul:	
  3617                           ; 1 bytes @ 0x1
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x1
  3621     0071                     	ds	1
  3622     0072                     ___lbdiv@counter:
  3623     0072                     i1___bmul@multiplier:	
  3624                           ; 1 bytes @ 0x2
  3625                           
  3626     0072                     i1___awmod@dividend:	
  3627                           ; 1 bytes @ 0x2
  3628                           
  3629     0072                     ??_TMR1_WriteTimer:	
  3630                           ; 2 bytes @ 0x2
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0x2
  3634     0072                     	ds	1
  3635     0073                     ___lbdiv@quotient:
  3636     0073                     i1SPI1_ExchangeBlock@data:	
  3637                           ; 1 bytes @ 0x3
  3638                           
  3639     0073                     ___wmul@multiplicand:	
  3640                           ; 1 bytes @ 0x3
  3641                           
  3642     0073                     ??i1_SPI1_ExchangeBlock:	
  3643                           ; 2 bytes @ 0x3
  3644                           
  3645                           
  3646                           ; 1 bytes @ 0x3
  3647     0073                     	ds	1
  3648     0074                     ?___lbmod:
  3649     0074                     ?i1_Tx_spi:	
  3650                           ; 1 bytes @ 0x4
  3651                           
  3652     0074                     ___lbmod@divisor:	
  3653                           ; 1 bytes @ 0x4
  3654                           
  3655     0074                     i1Tx_spi@data:	
  3656                           ; 1 bytes @ 0x4
  3657                           
  3658     0074                     i1___awmod@counter:	
  3659                           ; 1 bytes @ 0x4
  3660                           
  3661     0074                     ??i1___awmod:	
  3662                           ; 1 bytes @ 0x4
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x4
  3666     0074                     	ds	1
  3667     0075                     i1___awmod@sign:
  3668     0075                     ___wmul@product:	
  3669                           ; 1 bytes @ 0x5
  3670                           
  3671     0075                     i1Tx_spi@dataSize:	
  3672                           ; 2 bytes @ 0x5
  3673                           
  3674     0075                     ??___wmul:	
  3675                           ; 2 bytes @ 0x5
  3676                           
  3677     0075                     ??___lbmod:	
  3678                           ; 1 bytes @ 0x5
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0x5
  3682     0075                     	ds	1
  3683     0076                     ___lbmod@dividend:
  3684                           
  3685                           ; 1 bytes @ 0x6
  3686     0076                     	ds	1
  3687     0077                     ?___awdiv:
  3688     0077                     ?___lwdiv:	
  3689                           ; 2 bytes @ 0x7
  3690                           
  3691     0077                     ___lbmod@counter:	
  3692                           ; 2 bytes @ 0x7
  3693                           
  3694     0077                     ___awdiv@divisor:	
  3695                           ; 1 bytes @ 0x7
  3696                           
  3697     0077                     ___lwdiv@divisor:	
  3698                           ; 2 bytes @ 0x7
  3699                           
  3700     0077                     ??i1_Tx_spi:	
  3701                           ; 2 bytes @ 0x7
  3702                           
  3703     0077                     ??i1_Matrix_update_floor:	
  3704                           ; 1 bytes @ 0x7
  3705                           
  3706     0077                     ??i1_Matrix_update_dir:	
  3707                           ; 1 bytes @ 0x7
  3708                           
  3709                           
  3710                           ; 1 bytes @ 0x7
  3711     0077                     	ds	1
  3712     0078                     ?_New_request:
  3713     0078                     ___lbmod@rem:	
  3714                           ; 1 bytes @ 0x8
  3715                           
  3716     0078                     New_request@origin:	
  3717                           ; 1 bytes @ 0x8
  3718                           
  3719     0078                     i1Matrix_update_floor@data:	
  3720                           ; 2 bytes @ 0x8
  3721                           
  3722                           
  3723                           ; 2 bytes @ 0x8
  3724     0078                     	ds	1
  3725     0079                     ___awdiv@dividend:
  3726     0079                     ___lwdiv@dividend:	
  3727                           ; 2 bytes @ 0x9
  3728                           
  3729                           
  3730                           ; 2 bytes @ 0x9
  3731     0079                     	ds	1
  3732     007A                     i1Matrix_update_floor@display_floor:
  3733     007A                     New_request@dest:	
  3734                           ; 1 bytes @ 0xA
  3735                           
  3736                           
  3737                           ; 2 bytes @ 0xA
  3738     007A                     	ds	1
  3739     007B                     i1Matrix_update_floor@i:
  3740     007B                     ___lwdiv@quotient:	
  3741                           ; 1 bytes @ 0xB
  3742                           
  3743     007B                     ??___awdiv:	
  3744                           ; 2 bytes @ 0xB
  3745                           
  3746     007B                     ??___lwdiv:	
  3747                           ; 1 bytes @ 0xB
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0xB
  3751     007B                     	ds	1
  3752     007C                     ??_IOCBF0_ISR:
  3753     007C                     ??_IOCBF3_ISR:	
  3754                           ; 1 bytes @ 0xC
  3755                           
  3756     007C                     ??_CMP1_ISR:	
  3757                           ; 1 bytes @ 0xC
  3758                           
  3759     007C                     ??_CMP2_ISR:	
  3760                           ; 1 bytes @ 0xC
  3761                           
  3762     007C                     ??_ISR_Floor3:	
  3763                           ; 1 bytes @ 0xC
  3764                           
  3765     007C                     ??_ISR_Floor4:	
  3766                           ; 1 bytes @ 0xC
  3767                           
  3768     007C                     ??_PIN_MANAGER_IOC:	
  3769                           ; 1 bytes @ 0xC
  3770                           
  3771     007C                     ??_Read_UART:	
  3772                           ; 1 bytes @ 0xC
  3773                           
  3774     007C                     ??_ISR_Floor2:	
  3775                           ; 1 bytes @ 0xC
  3776                           
  3777     007C                     ??_ISR_Floor1:	
  3778                           ; 1 bytes @ 0xC
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0xC
  3782     007C                     	ds	1
  3783     007D                     ___lwdiv@counter:
  3784                           
  3785                           ; 1 bytes @ 0xD
  3786     007D                     	ds	1
  3787     007E                     ??_TMR1_ISR:
  3788     007E                     ??_TMR1_CallBack:	
  3789                           ; 1 bytes @ 0xE
  3790                           
  3791     007E                     ??_INTERRUPT_InterruptManager:	
  3792                           ; 1 bytes @ 0xE
  3793                           
  3794     007E                     ??___lwmod:	
  3795                           ; 1 bytes @ 0xE
  3796                           
  3797                           
  3798                           	psect	cstackBANK0
  3799     003F                     __pcstackBANK0:	
  3800                           ; 1 bytes @ 0xE
  3801                           
  3802     003F                     ?___lwmod:
  3803     003F                     ___awdiv@counter:	
  3804                           ; 2 bytes @ 0x0
  3805                           
  3806     003F                     ___lwmod@divisor:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809     003F                     i1Matrix_update_dir@route_:	
  3810                           ; 2 bytes @ 0x0
  3811                           
  3812                           
  3813                           ; 4 bytes @ 0x0
  3814     003F                     	ds	1
  3815     0040                     ___awdiv@sign:
  3816                           
  3817                           ; 1 bytes @ 0x1
  3818     0040                     	ds	1
  3819     0041                     ___awdiv@quotient:
  3820     0041                     ___lwmod@dividend:	
  3821                           ; 2 bytes @ 0x2
  3822                           
  3823                           
  3824                           ; 2 bytes @ 0x2
  3825     0041                     	ds	2
  3826     0043                     ___lwmod@counter:
  3827     0043                     i1Matrix_update_dir@mask:	
  3828                           ; 1 bytes @ 0x4
  3829                           
  3830                           
  3831                           ; 1 bytes @ 0x4
  3832     0043                     	ds	1
  3833     0044                     i1Matrix_update_dir@data:
  3834     0044                     ??_Update_tx_buffer:	
  3835                           ; 2 bytes @ 0x5
  3836                           
  3837                           
  3838                           ; 1 bytes @ 0x5
  3839     0044                     	ds	2
  3840     0046                     i1Matrix_update_dir@display_dir:
  3841     0046                     ??_Write_UART:	
  3842                           ; 1 bytes @ 0x7
  3843                           
  3844                           
  3845                           ; 1 bytes @ 0x7
  3846     0046                     	ds	1
  3847     0047                     i1Matrix_update_dir@i_1802:
  3848     0047                     Write_UART@i:	
  3849                           ; 1 bytes @ 0x8
  3850                           
  3851                           
  3852                           ; 2 bytes @ 0x8
  3853     0047                     	ds	1
  3854     0048                     i1Matrix_update_dir@i:
  3855                           
  3856                           ; 2 bytes @ 0x9
  3857     0048                     	ds	2
  3858     004A                     ??_New_request:
  3859                           
  3860                           ; 1 bytes @ 0xB
  3861     004A                     	ds	3
  3862     004D                     New_request@index_ori:
  3863                           
  3864                           ; 2 bytes @ 0xE
  3865     004D                     	ds	2
  3866     004F                     New_request@i:
  3867                           
  3868                           ; 2 bytes @ 0x10
  3869     004F                     	ds	2
  3870     0051                     New_request@i_1746:
  3871                           
  3872                           ; 2 bytes @ 0x12
  3873     0051                     	ds	2
  3874     0053                     New_request@i_1747:
  3875                           
  3876                           ; 2 bytes @ 0x14
  3877     0053                     	ds	2
  3878     0055                     New_request@i_1748:
  3879                           
  3880                           ; 2 bytes @ 0x16
  3881     0055                     	ds	2
  3882     0057                     New_request@index_:
  3883                           
  3884                           ; 2 bytes @ 0x18
  3885     0057                     	ds	2
  3886     0059                     Read_UART@ori:
  3887                           
  3888                           ; 2 bytes @ 0x1A
  3889     0059                     	ds	2
  3890     005B                     Read_UART@dest:
  3891                           
  3892                           ; 2 bytes @ 0x1C
  3893     005B                     	ds	2
  3894                           
  3895                           	psect	maintext
  3896     035F                     __pmaintext:	
  3897 ;;
  3898 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3899 ;;
  3900 ;; *************** function _main *****************
  3901 ;; Defined at:
  3902 ;;		line 310 in file "main.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  is_empty        1    2[BANK2 ] _Bool 
  3907 ;;  next_index      2    0[BANK2 ] int 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : B1F/0
  3914 ;;		On exit  : 18/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3917 ;;      Params:         0       0       0       0       0       0
  3918 ;;      Locals:         0       0       0       3       0       0
  3919 ;;      Temps:          0       0       2       0       0       0
  3920 ;;      Totals:         0       0       2       3       0       0
  3921 ;;Total ram usage:        5 bytes
  3922 ;; Hardware stack levels required when called: 12
  3923 ;; This function calls:
  3924 ;;		_EUSART_SetRxInterruptHandler
  3925 ;;		_IOCBF0_SetInterruptHandler
  3926 ;;		_IOCBF3_SetInterruptHandler
  3927 ;;		_Idle
  3928 ;;		_Ini_matrix
  3929 ;;		_Motor_Turn_Off
  3930 ;;		_Motor_Turn_On
  3931 ;;		_Next_floor
  3932 ;;		_Next_index
  3933 ;;		_Route_empty
  3934 ;;		_SPI1_Open
  3935 ;;		_SYSTEM_Initialize
  3936 ;;		_Start
  3937 ;;		_TMR1_SetInterruptHandler
  3938 ;; This function is called by:
  3939 ;;		Startup code after reset
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943     035F                     _main:	
  3944                           ;psect for function _main
  3945                           
  3946                           
  3947                           ;main.c: 312:     SYSTEM_Initialize();
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3951     035F  318F  277D  3183   	fcall	_SYSTEM_Initialize
  3952                           
  3953                           ;main.c: 314:     IOCBF0_SetInterruptHandler(ISR_Floor1);
  3954     0362  30BA               	movlw	low _ISR_Floor1
  3955     0363  00C0               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  3956     0364  300D               	movlw	high _ISR_Floor1
  3957     0365  00C1               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3958     0366  318C  2474  3183   	fcall	_IOCBF0_SetInterruptHandler
  3959                           
  3960                           ;main.c: 315:     IOCBF3_SetInterruptHandler(ISR_Floor2);
  3961     0369  3072               	movlw	low _ISR_Floor2
  3962     036A  00C0               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  3963     036B  300D               	movlw	high _ISR_Floor2
  3964     036C  00C1               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3965     036D  318C  2479  3183   	fcall	_IOCBF3_SetInterruptHandler
  3966                           
  3967                           ;main.c: 316:     EUSART_SetRxInterruptHandler(Read_UART);
  3968     0370  301D               	movlw	low _Read_UART
  3969     0371  00C0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  3970     0372  3006               	movlw	high _Read_UART
  3971     0373  00C1               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  3972     0374  318C  246F  3183   	fcall	_EUSART_SetRxInterruptHandler
  3973                           
  3974                           ;main.c: 317:     TMR1_SetInterruptHandler(Write_UART);
  3975     0377  30D9               	movlw	low _Write_UART
  3976     0378  00C0               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  3977     0379  3007               	movlw	high _Write_UART
  3978     037A  00C1               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3979     037B  318C  247E  3183   	fcall	_TMR1_SetInterruptHandler
  3980     037E  0022               	movlb	2	; select bank2
  3981     037F  148D               	bsf	13,1	;volatile
  3982                           
  3983                           ;main.c: 319:     SPI1_Open(SPI1_DEFAULT);
  3984     0380  3000               	movlw	0
  3985     0381  3184  24F4  3183   	fcall	_SPI1_Open
  3986                           
  3987                           ;main.c: 320:     Ini_matrix();
  3988     0384  3186  269E  3183   	fcall	_Ini_matrix
  3989                           
  3990                           ;main.c: 323:     Start();
  3991     0387  3187  2778  3183   	fcall	_Start
  3992                           
  3993                           ;main.c: 325:     (INTCONbits.GIE = 1);
  3994     038A  178B               	bsf	11,7	;volatile
  3995                           
  3996                           ;main.c: 326:     (INTCONbits.PEIE = 1);
  3997     038B  170B               	bsf	11,6	;volatile
  3998     038C  2BEE               	goto	l4831
  3999     038D                     l4835:
  4000                           
  4001                           ;main.c: 332:             if(idle){
  4002     038D  0020               	movlb	0	; select bank0
  4003     038E  083A               	movf	_idle,w
  4004     038F  1903               	btfsc	3,2
  4005     0390  2BA2               	goto	l4843
  4006                           
  4007                           ;main.c: 333:                 idle = 0;
  4008     0391  01BA               	clrf	_idle
  4009                           
  4010                           ;main.c: 334:                 Motor_Turn_Off ();
  4011     0392  318C  24F7  3183   	fcall	_Motor_Turn_Off
  4012                           
  4013                           ;main.c: 335:                 _delay((unsigned long)((500)*(8000000/4000.0)));
  4014     0395  3006               	movlw	6
  4015     0396  0021               	movlb	1	; select bank1
  4016     0397  00D6               	movwf	(??_main^(0+128)+1)
  4017     0398  3013               	movlw	19
  4018     0399  00D5               	movwf	??_main^(0+128)
  4019     039A  30AD               	movlw	173
  4020     039B                     u3717:
  4021     039B  0B89               	decfsz	9,f
  4022     039C  2B9B               	goto	u3717
  4023     039D  0BD5               	decfsz	??_main^(0+128),f
  4024     039E  2B9B               	goto	u3717
  4025     039F  0BD6               	decfsz	(??_main^(0+128)+1),f
  4026     03A0  2B9B               	goto	u3717
  4027     03A1  3200               	nop2
  4028     03A2                     l4843:
  4029                           
  4030                           ;main.c: 337:             var.D = Next_floor();
  4031     03A2  3186  265F  3183   	fcall	_Next_floor
  4032     03A5  0021               	movlb	1	; select bank1
  4033     03A6  00D5               	movwf	??_main^(0+128)
  4034     03A7  0ED5               	swapf	??_main^(0+128),f
  4035     03A8  0020               	movlb	0	; select bank0
  4036     03A9  0820               	movf	_var,w
  4037     03AA  0021               	movlb	1	; select bank1
  4038     03AB  0655               	xorwf	??_main^(0+128),w
  4039     03AC  390F               	andlw	-241
  4040     03AD  0655               	xorwf	??_main^(0+128),w
  4041     03AE  0020               	movlb	0	; select bank0
  4042     03AF  00A0               	movwf	_var
  4043                           
  4044                           ;main.c: 338:             next_index = Next_index();
  4045     03B0  3187  2712  3183   	fcall	_Next_index
  4046     03B3  00D5               	movwf	??_main^(0+128)
  4047     03B4  01D6               	clrf	(??_main^(0+128)+1)
  4048     03B5  0855               	movf	??_main^(0+128),w
  4049     03B6  0022               	movlb	2	; select bank2
  4050     03B7  00B5               	movwf	main@next_index^(0+256)
  4051     03B8  0021               	movlb	1	; select bank1
  4052     03B9  0856               	movf	(??_main+1)^(0+128),w
  4053     03BA  0022               	movlb	2	; select bank2
  4054     03BB  00B6               	movwf	(main@next_index+1)^(0+256)
  4055                           
  4056                           ;main.c: 339:             if(current_floor <= var.D) LATAbits.LATA7 = 1;
  4057     03BC  0020               	movlb	0	; select bank0
  4058     03BD  0E20               	swapf	_var,w
  4059     03BE  390F               	andlw	15
  4060     03BF  0021               	movlb	1	; select bank1
  4061     03C0  00D5               	movwf	??_main^(0+128)
  4062     03C1  0020               	movlb	0	; select bank0
  4063     03C2  083D               	movf	_current_floor,w
  4064     03C3  0021               	movlb	1	; select bank1
  4065     03C4  0255               	subwf	??_main^(0+128),w
  4066     03C5  1C03               	skipc
  4067     03C6  2BCA               	goto	l997
  4068     03C7  0022               	movlb	2	; select bank2
  4069     03C8  178C               	bsf	12,7	;volatile
  4070     03C9  2BCC               	goto	l4851
  4071     03CA                     l997:	
  4072                           ;main.c: 340:             else LATAbits.LATA7=0;
  4073                           
  4074     03CA  0022               	movlb	2	; select bank2
  4075     03CB  138C               	bcf	12,7	;volatile
  4076     03CC                     l4851:
  4077                           
  4078                           ;main.c: 342:             Motor_Turn_On();
  4079     03CC  318D  2558  3183   	fcall	_Motor_Turn_On
  4080     03CF                     l4853:	
  4081                           ;main.c: 344:             while(current_floor != var.D);
  4082                           
  4083     03CF  0020               	movlb	0	; select bank0
  4084     03D0  0E20               	swapf	_var,w
  4085     03D1  390F               	andlw	15
  4086     03D2  063D               	xorwf	_current_floor,w
  4087     03D3  1D03               	skipz
  4088     03D4  2BCF               	goto	l4853
  4089                           
  4090                           ;main.c: 345:             index = next_index;
  4091     03D5  0022               	movlb	2	; select bank2
  4092     03D6  0835               	movf	main@next_index^(0+256),w
  4093     03D7  0020               	movlb	0	; select bank0
  4094     03D8  00BE               	movwf	_index
  4095                           
  4096                           ;main.c: 346:             route[index] = 0;
  4097     03D9  083E               	movf	_index,w
  4098     03DA  3E27               	addlw	(low (_route| 0))& (0+255)
  4099     03DB  0086               	movwf	6
  4100     03DC  0187               	clrf	7
  4101     03DD  0181               	clrf	1
  4102                           
  4103                           ;main.c: 348:             Motor_Turn_Off();
  4104     03DE  318C  24F7  3183   	fcall	_Motor_Turn_Off
  4105                           
  4106                           ;main.c: 349:             _delay((unsigned long)((2000)*(8000000/4000.0)));
  4107     03E1  3015               	movlw	21
  4108     03E2  0021               	movlb	1	; select bank1
  4109     03E3  00D6               	movwf	(??_main^(0+128)+1)
  4110     03E4  304B               	movlw	75
  4111     03E5  00D5               	movwf	??_main^(0+128)
  4112     03E6  30BE               	movlw	190
  4113     03E7                     u3727:
  4114     03E7  0B89               	decfsz	9,f
  4115     03E8  2BE7               	goto	u3727
  4116     03E9  0BD5               	decfsz	??_main^(0+128),f
  4117     03EA  2BE7               	goto	u3727
  4118     03EB  0BD6               	decfsz	(??_main^(0+128)+1),f
  4119     03EC  2BE7               	goto	u3727
  4120     03ED  0000               	nop
  4121     03EE                     l4831:	
  4122                           ;main.c: 354:           }
  4123                           
  4124                           
  4125                           ;main.c: 329:     {;main.c: 330:         _Bool is_empty = Route_empty();
  4126     03EE  318E  268B  3183   	fcall	_Route_empty
  4127     03F1  0022               	movlb	2	; select bank2
  4128     03F2  00B7               	movwf	main@is_empty^(0+256)
  4129                           
  4130                           ;main.c: 331:         if(is_empty==0){
  4131     03F3  0837               	movf	main@is_empty^(0+256),w
  4132     03F4  1903               	btfsc	3,2
  4133     03F5  2B8D               	goto	l4835
  4134     03F6  318D  25FC  3183   	fcall	_Idle
  4135     03F9  2BEE               	goto	l4831
  4136     03FA                     __end_of_main:
  4137                           
  4138                           	psect	text1
  4139     0778                     __ptext1:	
  4140 ;; *************** function _Start *****************
  4141 ;; Defined at:
  4142 ;;		line 162 in file "main.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 1F/1
  4153 ;;		On exit  : 1F/1
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4156 ;;      Params:         0       0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0
  4158 ;;      Temps:          0       0       2       0       0       0
  4159 ;;      Totals:         0       0       2       0       0       0
  4160 ;;Total ram usage:        2 bytes
  4161 ;; Hardware stack levels used: 1
  4162 ;; Hardware stack levels required when called: 11
  4163 ;; This function calls:
  4164 ;;		_Matrix_update_floor
  4165 ;;		_Motor_Turn_Off
  4166 ;;		_Motor_Turn_On
  4167 ;;		_TMR0_Reload
  4168 ;; This function is called by:
  4169 ;;		_main
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173     0778                     _Start:	
  4174                           ;psect for function _Start
  4175                           
  4176                           
  4177                           ;main.c: 163:     (INTCONbits.GIE = 0);
  4178                           
  4179                           ;incstack = 0
  4180                           ; Regs used in _Start: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4181     0778  138B               	bcf	11,7	;volatile
  4182                           
  4183                           ;main.c: 164:     (INTCONbits.PEIE = 0);
  4184     0779  130B               	bcf	11,6	;volatile
  4185                           
  4186                           ;main.c: 165:     INTCONbits.IOCIE = 0;
  4187     077A  118B               	bcf	11,3	;volatile
  4188                           
  4189                           ;main.c: 166:     INTCONbits.PEIE = 0;
  4190     077B  130B               	bcf	11,6	;volatile
  4191                           
  4192                           ;main.c: 167:     PIE1bits.ADIE = 0;
  4193     077C  1311               	bcf	17,6	;volatile
  4194                           
  4195                           ;main.c: 168:     PIE1bits.RCIE = 0;
  4196     077D  1291               	bcf	17,5	;volatile
  4197                           
  4198                           ;main.c: 169:     PIE2bits.C2IE = 0;
  4199     077E  1312               	bcf	18,6	;volatile
  4200                           
  4201                           ;main.c: 170:     PIE1bits.TMR1IE = 0;
  4202     077F  1011               	bcf	17,0	;volatile
  4203                           
  4204                           ;main.c: 171:     LATAbits.LATA7 = 0;
  4205     0780  0022               	movlb	2	; select bank2
  4206     0781  138C               	bcf	12,7	;volatile
  4207                           
  4208                           ;main.c: 172:     Motor_Turn_On();
  4209     0782  318D  2558  3187   	fcall	_Motor_Turn_On
  4210                           
  4211                           ;main.c: 173:     _delay((unsigned long)((7000)*(8000000/4000.0)));
  4212     0785  3048               	movlw	72
  4213     0786  0021               	movlb	1	; select bank1
  4214     0787  00D4               	movwf	(??_Start^(0+128)+1)
  4215     0788  3006               	movlw	6
  4216     0789  00D3               	movwf	??_Start^(0+128)
  4217     078A  309F               	movlw	159
  4218     078B                     u3737:
  4219     078B  0B89               	decfsz	9,f
  4220     078C  2F8B               	goto	u3737
  4221     078D  0BD3               	decfsz	??_Start^(0+128),f
  4222     078E  2F8B               	goto	u3737
  4223     078F  0BD4               	decfsz	(??_Start^(0+128)+1),f
  4224     0790  2F8B               	goto	u3737
  4225     0791  3200               	nop2
  4226                           
  4227                           ;main.c: 174:     Motor_Turn_Off();
  4228     0792  318C  24F7  3187   	fcall	_Motor_Turn_Off
  4229                           
  4230                           ;main.c: 175:     Matrix_update_floor(0);
  4231     0795  3000               	movlw	0
  4232     0796  318F  27A7  3187   	fcall	_Matrix_update_floor
  4233                           
  4234                           ;main.c: 176:     index = 0;
  4235     0799  0020               	movlb	0	; select bank0
  4236     079A  01BE               	clrf	_index
  4237                           
  4238                           ;main.c: 177:     LATAbits.LATA7 = 1;
  4239     079B  0022               	movlb	2	; select bank2
  4240     079C  178C               	bsf	12,7	;volatile
  4241                           
  4242                           ;main.c: 178:     TMR0_Reload();
  4243     079D  318C  2452         	fcall	_TMR0_Reload
  4244                           
  4245                           ;main.c: 179:     position = 0;
  4246     079F  0021               	movlb	1	; select bank1
  4247     07A0  01BE               	clrf	_position^(0+128)
  4248     07A1  01BF               	clrf	(_position+1)^(0+128)
  4249                           
  4250                           ;main.c: 181:     INTCONbits.IOCIE = 1;
  4251     07A2  158B               	bsf	11,3	;volatile
  4252                           
  4253                           ;main.c: 182:     INTCONbits.PEIE = 1;
  4254     07A3  170B               	bsf	11,6	;volatile
  4255                           
  4256                           ;main.c: 183:     PIE1bits.ADIE = 1;
  4257     07A4  1711               	bsf	17,6	;volatile
  4258                           
  4259                           ;main.c: 184:     PIE1bits.RCIE = 1;
  4260     07A5  1691               	bsf	17,5	;volatile
  4261                           
  4262                           ;main.c: 185:     PIE2bits.C2IE = 1;
  4263     07A6  1712               	bsf	18,6	;volatile
  4264                           
  4265                           ;main.c: 186:     PIE1bits.TMR1IE = 1;
  4266     07A7  1411               	bsf	17,0	;volatile
  4267     07A8  0008               	return
  4268     07A9                     __end_of_Start:
  4269                           
  4270                           	psect	text2
  4271     0C52                     __ptext2:	
  4272 ;; *************** function _TMR0_Reload *****************
  4273 ;; Defined at:
  4274 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg
  4283 ;; Tracked objects:
  4284 ;;		On entry : 1F/2
  4285 ;;		On exit  : 1F/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4288 ;;      Params:         0       0       0       0       0       0
  4289 ;;      Locals:         0       0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0
  4291 ;;      Totals:         0       0       0       0       0       0
  4292 ;;Total ram usage:        0 bytes
  4293 ;; Hardware stack levels used: 1
  4294 ;; Hardware stack levels required when called: 7
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_Start
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302     0C52                     _TMR0_Reload:	
  4303                           ;psect for function _TMR0_Reload
  4304                           
  4305                           
  4306                           ;mcc_generated_files/tmr0.c: 98:     TMR0 = timer0ReloadVal;
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in _TMR0_Reload: [wreg]
  4310     0C52  0020               	movlb	0	; select bank0
  4311     0C53  0835               	movf	_timer0ReloadVal,w	;volatile
  4312     0C54  0095               	movwf	21	;volatile
  4313     0C55  0008               	return
  4314     0C56                     __end_of_TMR0_Reload:
  4315                           
  4316                           	psect	text3
  4317     0FA7                     __ptext3:	
  4318 ;; *************** function _Matrix_update_floor *****************
  4319 ;; Defined at:
  4320 ;;		line 228 in file "main.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  display_floo    1    wreg     unsigned char 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  display_floo    1   10[BANK1 ] unsigned char 
  4325 ;;  i               1   11[BANK1 ] unsigned char 
  4326 ;;  data            2    8[BANK1 ] unsigned char [2]
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4331 ;; Tracked objects:
  4332 ;;		On entry : 18/2
  4333 ;;		On exit  : 1F/1
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4336 ;;      Params:         0       0       0       0       0       0
  4337 ;;      Locals:         0       0       4       0       0       0
  4338 ;;      Temps:          0       0       1       0       0       0
  4339 ;;      Totals:         0       0       5       0       0       0
  4340 ;;Total ram usage:        5 bytes
  4341 ;; Hardware stack levels used: 1
  4342 ;; Hardware stack levels required when called: 9
  4343 ;; This function calls:
  4344 ;;		_Tx_spi
  4345 ;; This function is called by:
  4346 ;;		_Start
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350     0FA7                     _Matrix_update_floor:	
  4351                           ;psect for function _Matrix_update_floor
  4352                           
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4356                           ;Matrix_update_floor@display_floor stored from wreg
  4357     0FA7  0021               	movlb	1	; select bank1
  4358     0FA8  00CA               	movwf	Matrix_update_floor@display_floor^(0+128)
  4359                           
  4360                           ;main.c: 229:     uint8_t data[2];;main.c: 230:     display_floor = display_floor*4;
  4361     0FA9  084A               	movf	Matrix_update_floor@display_floor^(0+128),w
  4362     0FAA  00C7               	movwf	??_Matrix_update_floor^(0+128)
  4363     0FAB  3002               	movlw	2
  4364     0FAC                     u3305:
  4365     0FAC  35C7               	lslf	??_Matrix_update_floor^(0+128),f
  4366     0FAD  0B89               	decfsz	9,f
  4367     0FAE  2FAC               	goto	u3305
  4368     0FAF  0847               	movf	??_Matrix_update_floor^(0+128),w
  4369     0FB0  00CA               	movwf	Matrix_update_floor@display_floor^(0+128)
  4370                           
  4371                           ;main.c: 232:    for(uint8_t i=5;i<=8;i++){
  4372     0FB1  3005               	movlw	5
  4373     0FB2  00CB               	movwf	Matrix_update_floor@i^(0+128)
  4374     0FB3                     l4517:
  4375                           
  4376                           ;main.c: 233:         data[0] = i;
  4377     0FB3  084B               	movf	Matrix_update_floor@i^(0+128),w
  4378     0FB4  00C8               	movwf	Matrix_update_floor@data^(0+128)
  4379                           
  4380                           ;main.c: 234:         data[1] = MATRIX_FLOOR[display_floor];
  4381     0FB5  084A               	movf	Matrix_update_floor@display_floor^(0+128),w
  4382     0FB6  3EFD               	addlw	low (_MATRIX_FLOOR| (0+32768))
  4383     0FB7  0084               	movwf	4
  4384     0FB8  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
  4385     0FB9  1803               	skipnc
  4386     0FBA  3E01               	addlw	1
  4387     0FBB  0085               	movwf	5
  4388     0FBC  0800               	movf	0,w	;code access
  4389     0FBD  00C9               	movwf	(Matrix_update_floor@data^(0+128)+1)
  4390                           
  4391                           ;main.c: 235:         Tx_spi(data, 2);
  4392     0FBE  30C8               	movlw	(low (Matrix_update_floor@data| 0))& (0+255)
  4393     0FBF  00C4               	movwf	Tx_spi@data^(0+128)
  4394     0FC0  3002               	movlw	2
  4395     0FC1  00C5               	movwf	Tx_spi@dataSize^(0+128)
  4396     0FC2  3000               	movlw	0
  4397     0FC3  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  4398     0FC4  318D  25CA  318F   	fcall	_Tx_spi
  4399                           
  4400                           ;main.c: 236:         display_floor++;
  4401     0FC7  3001               	movlw	1
  4402     0FC8  0021               	movlb	1	; select bank1
  4403     0FC9  07CA               	addwf	Matrix_update_floor@display_floor^(0+128),f
  4404                           
  4405                           ;main.c: 237:     }
  4406     0FCA  3001               	movlw	1
  4407     0FCB  07CB               	addwf	Matrix_update_floor@i^(0+128),f
  4408     0FCC  3009               	movlw	9
  4409     0FCD  024B               	subwf	Matrix_update_floor@i^(0+128),w
  4410     0FCE  1803               	btfsc	3,0
  4411     0FCF  0008               	return
  4412     0FD0  2FB3               	goto	l4517
  4413     0FD1                     __end_of_Matrix_update_floor:
  4414                           
  4415                           	psect	text4
  4416     0F7D                     __ptext4:	
  4417 ;; *************** function _SYSTEM_Initialize *****************
  4418 ;; Defined at:
  4419 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0, pclath, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : B1F/0
  4430 ;;		On exit  : 1F/1
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4433 ;;      Params:         0       0       0       0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0
  4435 ;;      Temps:          0       0       0       0       0       0
  4436 ;;      Totals:         0       0       0       0       0       0
  4437 ;;Total ram usage:        0 bytes
  4438 ;; Hardware stack levels used: 1
  4439 ;; Hardware stack levels required when called: 9
  4440 ;; This function calls:
  4441 ;;		_ADC_Initialize
  4442 ;;		_CMP1_Initialize
  4443 ;;		_CMP2_Initialize
  4444 ;;		_EUSART_Initialize
  4445 ;;		_FVR_Initialize
  4446 ;;		_OSCILLATOR_Initialize
  4447 ;;		_PIN_MANAGER_Initialize
  4448 ;;		_PWM3_Initialize
  4449 ;;		_SPI1_Initialize
  4450 ;;		_TMR0_Initialize
  4451 ;;		_TMR1_Initialize
  4452 ;;		_TMR2_Initialize
  4453 ;;		_TMR6_Initialize
  4454 ;;		_WDT_Initialize
  4455 ;; This function is called by:
  4456 ;;		_main
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460     0F7D                     _SYSTEM_Initialize:	
  4461                           ;psect for function _SYSTEM_Initialize
  4462                           
  4463                           
  4464                           ;mcc_generated_files/mcc.c: 53:     SPI1_Initialize();
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4468     0F7D  318D  2525  318F   	fcall	_SPI1_Initialize
  4469                           
  4470                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  4471     0F80  318F  27D1  318F   	fcall	_PIN_MANAGER_Initialize
  4472                           
  4473                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4474     0F83  318C  2483  318F   	fcall	_OSCILLATOR_Initialize
  4475                           
  4476                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4477     0F86  318C  244E  318F   	fcall	_WDT_Initialize
  4478                           
  4479                           ;mcc_generated_files/mcc.c: 57:     CMP2_Initialize();
  4480     0F89  318D  2502  318F   	fcall	_CMP2_Initialize
  4481                           
  4482                           ;mcc_generated_files/mcc.c: 58:     FVR_Initialize();
  4483     0F8C  318C  244A  318F   	fcall	_FVR_Initialize
  4484                           
  4485                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
  4486     0F8F  318C  24AB  318F   	fcall	_TMR2_Initialize
  4487                           
  4488                           ;mcc_generated_files/mcc.c: 60:     TMR0_Initialize();
  4489     0F92  318C  24CD  318F   	fcall	_TMR0_Initialize
  4490                           
  4491                           ;mcc_generated_files/mcc.c: 61:     TMR6_Initialize();
  4492     0F95  318C  24D7  318F   	fcall	_TMR6_Initialize
  4493                           
  4494                           ;mcc_generated_files/mcc.c: 62:     CMP1_Initialize();
  4495     0F98  318D  2519  318F   	fcall	_CMP1_Initialize
  4496                           
  4497                           ;mcc_generated_files/mcc.c: 63:     ADC_Initialize();
  4498     0F9B  318D  258E  318F   	fcall	_ADC_Initialize
  4499                           
  4500                           ;mcc_generated_files/mcc.c: 64:     PWM3_Initialize();
  4501     0F9E  318D  2565  318F   	fcall	_PWM3_Initialize
  4502                           
  4503                           ;mcc_generated_files/mcc.c: 65:     TMR1_Initialize();
  4504     0FA1  318E  2625  318F   	fcall	_TMR1_Initialize
  4505                           
  4506                           ;mcc_generated_files/mcc.c: 66:     EUSART_Initialize();
  4507     0FA4  3187  27A9         	fcall	_EUSART_Initialize
  4508     0FA6  0008               	return
  4509     0FA7                     __end_of_SYSTEM_Initialize:
  4510                           
  4511                           	psect	text5
  4512     0C4E                     __ptext5:	
  4513 ;; *************** function _WDT_Initialize *****************
  4514 ;; Defined at:
  4515 ;;		line 79 in file "mcc_generated_files/mcc.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;		None
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;		None
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  1    wreg      void 
  4522 ;; Registers used:
  4523 ;;		None
  4524 ;; Tracked objects:
  4525 ;;		On entry : 1F/2
  4526 ;;		On exit  : 1F/1
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4529 ;;      Params:         0       0       0       0       0       0
  4530 ;;      Locals:         0       0       0       0       0       0
  4531 ;;      Temps:          0       0       0       0       0       0
  4532 ;;      Totals:         0       0       0       0       0       0
  4533 ;;Total ram usage:        0 bytes
  4534 ;; Hardware stack levels used: 1
  4535 ;; Hardware stack levels required when called: 7
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_SYSTEM_Initialize
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543     0C4E                     _WDT_Initialize:	
  4544                           ;psect for function _WDT_Initialize
  4545                           
  4546                           
  4547                           ;mcc_generated_files/mcc.c: 82:     WDTCON = 0x16;
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in _WDT_Initialize: []
  4551     0C4E  3016               	movlw	22
  4552     0C4F  0021               	movlb	1	; select bank1
  4553     0C50  0097               	movwf	23	;volatile
  4554     0C51  0008               	return
  4555     0C52                     __end_of_WDT_Initialize:
  4556                           
  4557                           	psect	text6
  4558     0CD7                     __ptext6:	
  4559 ;; *************** function _TMR6_Initialize *****************
  4560 ;; Defined at:
  4561 ;;		line 62 in file "mcc_generated_files/tmr6.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		status,2
  4570 ;; Tracked objects:
  4571 ;;		On entry : 1F/0
  4572 ;;		On exit  : 1F/8
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4575 ;;      Params:         0       0       0       0       0       0
  4576 ;;      Locals:         0       0       0       0       0       0
  4577 ;;      Temps:          0       0       0       0       0       0
  4578 ;;      Totals:         0       0       0       0       0       0
  4579 ;;Total ram usage:        0 bytes
  4580 ;; Hardware stack levels used: 1
  4581 ;; Hardware stack levels required when called: 7
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_SYSTEM_Initialize
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589     0CD7                     _TMR6_Initialize:	
  4590                           ;psect for function _TMR6_Initialize
  4591                           
  4592                           
  4593                           ;mcc_generated_files/tmr6.c: 67:     PR6 = 0xFF;
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _TMR6_Initialize: [status,2]
  4597     0CD7  30FF               	movlw	255
  4598     0CD8  0028               	movlb	8	; select bank8
  4599     0CD9  009D               	movwf	29	;volatile
  4600                           
  4601                           ;mcc_generated_files/tmr6.c: 70:     TMR6 = 0x00;
  4602     0CDA  019C               	clrf	28	;volatile
  4603                           
  4604                           ;mcc_generated_files/tmr6.c: 73:     PIR3bits.TMR6IF = 0;
  4605     0CDB  0020               	movlb	0	; select bank0
  4606     0CDC  1193               	bcf	19,3	;volatile
  4607                           
  4608                           ;mcc_generated_files/tmr6.c: 76:     T6CON = 0x06;
  4609     0CDD  3006               	movlw	6
  4610     0CDE  0028               	movlb	8	; select bank8
  4611     0CDF  009E               	movwf	30	;volatile
  4612     0CE0  0008               	return
  4613     0CE1                     __end_of_TMR6_Initialize:
  4614                           
  4615                           	psect	text7
  4616     0CAB                     __ptext7:	
  4617 ;; *************** function _TMR2_Initialize *****************
  4618 ;; Defined at:
  4619 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		status,2
  4628 ;; Tracked objects:
  4629 ;;		On entry : 1F/2
  4630 ;;		On exit  : 1F/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4633 ;;      Params:         0       0       0       0       0       0
  4634 ;;      Locals:         0       0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0
  4636 ;;      Totals:         0       0       0       0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used: 1
  4639 ;; Hardware stack levels required when called: 7
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_SYSTEM_Initialize
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647     0CAB                     _TMR2_Initialize:	
  4648                           ;psect for function _TMR2_Initialize
  4649                           
  4650                           
  4651                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0x01;
  4652                           
  4653                           ;incstack = 0
  4654                           ; Regs used in _TMR2_Initialize: [status,2]
  4655     0CAB  3001               	movlw	1
  4656     0CAC  0020               	movlb	0	; select bank0
  4657     0CAD  009B               	movwf	27	;volatile
  4658                           
  4659                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4660     0CAE  019A               	clrf	26	;volatile
  4661                           
  4662                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4663     0CAF  1091               	bcf	17,1	;volatile
  4664                           
  4665                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4666     0CB0  3004               	movlw	4
  4667     0CB1  009C               	movwf	28	;volatile
  4668     0CB2  0008               	return
  4669     0CB3                     __end_of_TMR2_Initialize:
  4670                           
  4671                           	psect	text8
  4672     0E25                     __ptext8:	
  4673 ;; *************** function _TMR1_Initialize *****************
  4674 ;; Defined at:
  4675 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0, pclath, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 1F/5
  4686 ;;		On exit  : 1F/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4689 ;;      Params:         0       0       0       0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0
  4692 ;;      Totals:         0       0       0       0       0       0
  4693 ;;Total ram usage:        0 bytes
  4694 ;; Hardware stack levels used: 1
  4695 ;; Hardware stack levels required when called: 8
  4696 ;; This function calls:
  4697 ;;		_TMR1_SetInterruptHandler
  4698 ;; This function is called by:
  4699 ;;		_SYSTEM_Initialize
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703     0E25                     _TMR1_Initialize:	
  4704                           ;psect for function _TMR1_Initialize
  4705                           
  4706                           
  4707                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4711     0E25  0020               	movlb	0	; select bank0
  4712     0E26  0199               	clrf	25	;volatile
  4713                           
  4714                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x15;
  4715     0E27  3015               	movlw	21
  4716     0E28  0097               	movwf	23	;volatile
  4717                           
  4718                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xA0;
  4719     0E29  30A0               	movlw	160
  4720     0E2A  0096               	movwf	22	;volatile
  4721                           
  4722                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4723     0E2B  1011               	bcf	17,0	;volatile
  4724                           
  4725                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4726     0E2C  0817               	movf	23,w	;volatile
  4727     0E2D  00B0               	movwf	_timer1ReloadVal+1	;volatile
  4728     0E2E  0816               	movf	22,w	;volatile
  4729     0E2F  00AF               	movwf	_timer1ReloadVal	;volatile
  4730                           
  4731                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4732     0E30  0021               	movlb	1	; select bank1
  4733     0E31  1411               	bsf	17,0	;volatile
  4734                           
  4735                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4736     0E32  3003               	movlw	low _TMR1_DefaultInterruptHandler
  4737     0E33  00C0               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  4738     0E34  3000               	movlw	high _TMR1_DefaultInterruptHandler
  4739     0E35  00C1               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4740     0E36  318C  247E         	fcall	_TMR1_SetInterruptHandler
  4741                           
  4742                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x01;
  4743     0E38  3001               	movlw	1
  4744     0E39  0020               	movlb	0	; select bank0
  4745     0E3A  0098               	movwf	24	;volatile
  4746     0E3B  0008               	return
  4747     0E3C                     __end_of_TMR1_Initialize:
  4748                           
  4749                           	psect	text9
  4750     0C7E                     __ptext9:	
  4751 ;; *************** function _TMR1_SetInterruptHandler *****************
  4752 ;; Defined at:
  4753 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4756 ;;		 -> Write_UART(1), TMR1_DefaultInterruptHandler(1), 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg
  4763 ;; Tracked objects:
  4764 ;;		On entry : 1F/1
  4765 ;;		On exit  : 1F/1
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4768 ;;      Params:         0       0       2       0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0
  4771 ;;      Totals:         0       0       2       0       0       0
  4772 ;;Total ram usage:        2 bytes
  4773 ;; Hardware stack levels used: 1
  4774 ;; Hardware stack levels required when called: 7
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_TMR1_Initialize
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783     0C7E                     _TMR1_SetInterruptHandler:	
  4784                           ;psect for function _TMR1_SetInterruptHandler
  4785                           
  4786                           
  4787                           ;mcc_generated_files/tmr1.c: 186:     TMR1_InterruptHandler = InterruptHandler;
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4791     0C7E  0841               	movf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  4792     0C7F  00DA               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  4793     0C80  0840               	movf	TMR1_SetInterruptHandler@InterruptHandler^(0+128),w
  4794     0C81  00D9               	movwf	_TMR1_InterruptHandler^(0+128)
  4795     0C82  0008               	return
  4796     0C83                     __end_of_TMR1_SetInterruptHandler:
  4797                           
  4798                           	psect	text10
  4799     0CCD                     __ptext10:	
  4800 ;; *************** function _TMR0_Initialize *****************
  4801 ;; Defined at:
  4802 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2
  4811 ;; Tracked objects:
  4812 ;;		On entry : 1F/0
  4813 ;;		On exit  : 1F/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4816 ;;      Params:         0       0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0
  4819 ;;      Totals:         0       0       0       0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used: 1
  4822 ;; Hardware stack levels required when called: 7
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_SYSTEM_Initialize
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830     0CCD                     _TMR0_Initialize:	
  4831                           ;psect for function _TMR0_Initialize
  4832                           
  4833                           
  4834                           ;mcc_generated_files/tmr0.c: 68:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xE8 
      +                          & 0x3F));
  4835                           
  4836                           ;incstack = 0
  4837                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4838     0CCD  0021               	movlb	1	; select bank1
  4839     0CCE  0815               	movf	21,w	;volatile
  4840     0CCF  39C0               	andlw	192
  4841     0CD0  3828               	iorlw	40
  4842     0CD1  0095               	movwf	21	;volatile
  4843                           
  4844                           ;mcc_generated_files/tmr0.c: 71:     TMR0 = 0x00;
  4845     0CD2  0020               	movlb	0	; select bank0
  4846     0CD3  0195               	clrf	21	;volatile
  4847                           
  4848                           ;mcc_generated_files/tmr0.c: 74:     timer0ReloadVal= 0;
  4849     0CD4  01B5               	clrf	_timer0ReloadVal	;volatile
  4850                           
  4851                           ;mcc_generated_files/tmr0.c: 77:     INTCONbits.TMR0IF = 0;
  4852     0CD5  110B               	bcf	11,2	;volatile
  4853     0CD6  0008               	return
  4854     0CD7                     __end_of_TMR0_Initialize:
  4855                           
  4856                           	psect	text11
  4857     0D25                     __ptext11:	
  4858 ;; *************** function _SPI1_Initialize *****************
  4859 ;; Defined at:
  4860 ;;		line 62 in file "mcc_generated_files/spi1.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;		None
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;		None
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		None
  4869 ;; Tracked objects:
  4870 ;;		On entry : B1F/0
  4871 ;;		On exit  : B1F/4
  4872 ;;		Unchanged: B00/0
  4873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4874 ;;      Params:         0       0       0       0       0       0
  4875 ;;      Locals:         0       0       0       0       0       0
  4876 ;;      Temps:          0       0       0       0       0       0
  4877 ;;      Totals:         0       0       0       0       0       0
  4878 ;;Total ram usage:        0 bytes
  4879 ;; Hardware stack levels used: 1
  4880 ;; Hardware stack levels required when called: 7
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_SYSTEM_Initialize
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888     0D25                     _SPI1_Initialize:	
  4889                           ;psect for function _SPI1_Initialize
  4890                           
  4891                           
  4892                           ;mcc_generated_files/spi1.c: 65:     SSP1STAT = 0x40;
  4893                           
  4894                           ;incstack = 0
  4895                           ; Regs used in _SPI1_Initialize: []
  4896     0D25  3040               	movlw	64
  4897     0D26  0024               	movlb	4	; select bank4
  4898     0D27  0094               	movwf	20	;volatile
  4899                           
  4900                           ;mcc_generated_files/spi1.c: 66:     SSP1CON1 = 0x03;
  4901     0D28  3003               	movlw	3
  4902     0D29  0095               	movwf	21	;volatile
  4903                           
  4904                           ;mcc_generated_files/spi1.c: 67:     SSP1ADD = 0x13;
  4905     0D2A  3013               	movlw	19
  4906     0D2B  0092               	movwf	18	;volatile
  4907                           
  4908                           ;mcc_generated_files/spi1.c: 68:     TRISBbits.TRISB4 = 0;
  4909     0D2C  0021               	movlb	1	; select bank1
  4910     0D2D  120D               	bcf	13,4	;volatile
  4911                           
  4912                           ;mcc_generated_files/spi1.c: 69:     SSP1CON1bits.SSPEN = 0;
  4913     0D2E  0024               	movlb	4	; select bank4
  4914     0D2F  1295               	bcf	21,5	;volatile
  4915     0D30  0008               	return
  4916     0D31                     __end_of_SPI1_Initialize:
  4917                           
  4918                           	psect	text12
  4919     0D65                     __ptext12:	
  4920 ;; *************** function _PWM3_Initialize *****************
  4921 ;; Defined at:
  4922 ;;		line 64 in file "mcc_generated_files/pwm3.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;		None
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;		None
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, status,2, status,0
  4931 ;; Tracked objects:
  4932 ;;		On entry : 1F/1
  4933 ;;		On exit  : 1F/5
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4936 ;;      Params:         0       0       0       0       0       0
  4937 ;;      Locals:         0       0       0       0       0       0
  4938 ;;      Temps:          0       0       0       0       0       0
  4939 ;;      Totals:         0       0       0       0       0       0
  4940 ;;Total ram usage:        0 bytes
  4941 ;; Hardware stack levels used: 1
  4942 ;; Hardware stack levels required when called: 7
  4943 ;; This function calls:
  4944 ;;		Nothing
  4945 ;; This function is called by:
  4946 ;;		_SYSTEM_Initialize
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950     0D65                     _PWM3_Initialize:	
  4951                           ;psect for function _PWM3_Initialize
  4952                           
  4953                           
  4954                           ;mcc_generated_files/pwm3.c: 69:  CCP3CON = 0x1C;
  4955                           
  4956                           ;incstack = 0
  4957                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  4958     0D65  301C               	movlw	28
  4959     0D66  0026               	movlb	6	; select bank6
  4960     0D67  0093               	movwf	19	;volatile
  4961                           
  4962                           ;mcc_generated_files/pwm3.c: 72:  CCPR3L = 0x7F;
  4963     0D68  307F               	movlw	127
  4964     0D69  0091               	movwf	17	;volatile
  4965                           
  4966                           ;mcc_generated_files/pwm3.c: 75:  CCPR3H = 0x01;
  4967     0D6A  3001               	movlw	1
  4968     0D6B  0092               	movwf	18	;volatile
  4969                           
  4970                           ;mcc_generated_files/pwm3.c: 78:  CCPTMRS0bits.C3TSEL = 0x2;
  4971     0D6C  0025               	movlb	5	; select bank5
  4972     0D6D  081E               	movf	30,w	;volatile
  4973     0D6E  39CF               	andlw	-49
  4974     0D6F  3820               	iorlw	32
  4975     0D70  009E               	movwf	30	;volatile
  4976     0D71  0008               	return
  4977     0D72                     __end_of_PWM3_Initialize:
  4978                           
  4979                           	psect	text13
  4980     0FD1                     __ptext13:	
  4981 ;; *************** function _PIN_MANAGER_Initialize *****************
  4982 ;; Defined at:
  4983 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, pclath, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : B1F/4
  4994 ;;		On exit  : 1F/1
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4997 ;;      Params:         0       0       0       0       0       0
  4998 ;;      Locals:         0       0       0       0       0       0
  4999 ;;      Temps:          0       0       0       0       0       0
  5000 ;;      Totals:         0       0       0       0       0       0
  5001 ;;Total ram usage:        0 bytes
  5002 ;; Hardware stack levels used: 1
  5003 ;; Hardware stack levels required when called: 8
  5004 ;; This function calls:
  5005 ;;		_IOCBF0_SetInterruptHandler
  5006 ;;		_IOCBF3_SetInterruptHandler
  5007 ;; This function is called by:
  5008 ;;		_SYSTEM_Initialize
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012     0FD1                     _PIN_MANAGER_Initialize:	
  5013                           ;psect for function _PIN_MANAGER_Initialize
  5014                           
  5015                           
  5016                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5017                           
  5018                           ;incstack = 0
  5019                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5020     0FD1  0022               	movlb	2	; select bank2
  5021     0FD2  018C               	clrf	12	;volatile
  5022                           
  5023                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  5024     0FD3  018D               	clrf	13	;volatile
  5025                           
  5026                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x37;
  5027     0FD4  3037               	movlw	55
  5028     0FD5  0021               	movlb	1	; select bank1
  5029     0FD6  008C               	movwf	12	;volatile
  5030                           
  5031                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x2D;
  5032     0FD7  302D               	movlw	45
  5033     0FD8  008D               	movwf	13	;volatile
  5034                           
  5035                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0xC0;
  5036     0FD9  30C0               	movlw	192
  5037     0FDA  0023               	movlb	3	; select bank3
  5038     0FDB  008D               	movwf	13	;volatile
  5039                           
  5040                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x07;
  5041     0FDC  3007               	movlw	7
  5042     0FDD  008C               	movwf	12	;volatile
  5043                           
  5044                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x09;
  5045     0FDE  3009               	movlw	9
  5046     0FDF  0024               	movlb	4	; select bank4
  5047     0FE0  008D               	movwf	13	;volatile
  5048                           
  5049                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  5050     0FE1  018C               	clrf	12	;volatile
  5051                           
  5052                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 0;
  5053     0FE2  0021               	movlb	1	; select bank1
  5054     0FE3  1395               	bcf	21,7	;volatile
  5055                           
  5056                           ;mcc_generated_files/pin_manager.c: 89:     APFCON0 = 0xC9;
  5057     0FE4  30C9               	movlw	201
  5058     0FE5  0022               	movlb	2	; select bank2
  5059     0FE6  009D               	movwf	29	;volatile
  5060                           
  5061                           ;mcc_generated_files/pin_manager.c: 90:     APFCON1 = 0x01;
  5062     0FE7  3001               	movlw	1
  5063     0FE8  009E               	movwf	30	;volatile
  5064                           
  5065                           ;mcc_generated_files/pin_manager.c: 96:     IOCBFbits.IOCBF0 = 0;
  5066     0FE9  0027               	movlb	7	; select bank7
  5067     0FEA  1016               	bcf	22,0	;volatile
  5068                           
  5069                           ;mcc_generated_files/pin_manager.c: 98:     IOCBFbits.IOCBF3 = 0;
  5070     0FEB  1196               	bcf	22,3	;volatile
  5071                           
  5072                           ;mcc_generated_files/pin_manager.c: 100:     IOCBNbits.IOCBN0 = 1;
  5073     0FEC  1415               	bsf	21,0	;volatile
  5074                           
  5075                           ;mcc_generated_files/pin_manager.c: 102:     IOCBNbits.IOCBN3 = 1;
  5076     0FED  1595               	bsf	21,3	;volatile
  5077                           
  5078                           ;mcc_generated_files/pin_manager.c: 104:     IOCBPbits.IOCBP0 = 0;
  5079     0FEE  1014               	bcf	20,0	;volatile
  5080                           
  5081                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP3 = 0;
  5082     0FEF  1194               	bcf	20,3	;volatile
  5083                           
  5084                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF0_SetInterruptHandler(IOCBF0_DefaultIn
      +                          terruptHandler);
  5085     0FF0  303D               	movlw	low _IOCBF0_DefaultInterruptHandler
  5086     0FF1  0021               	movlb	1	; select bank1
  5087     0FF2  00C0               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  5088     0FF3  300C               	movlw	high _IOCBF0_DefaultInterruptHandler
  5089     0FF4  00C1               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5090     0FF5  318C  2474  318F   	fcall	_IOCBF0_SetInterruptHandler
  5091                           
  5092                           ;mcc_generated_files/pin_manager.c: 112:     IOCBF3_SetInterruptHandler(IOCBF3_DefaultIn
      +                          terruptHandler);
  5093     0FF8  303E               	movlw	low _IOCBF3_DefaultInterruptHandler
  5094     0FF9  00C0               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  5095     0FFA  300C               	movlw	high _IOCBF3_DefaultInterruptHandler
  5096     0FFB  00C1               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5097     0FFC  318C  2479         	fcall	_IOCBF3_SetInterruptHandler
  5098                           
  5099                           ;mcc_generated_files/pin_manager.c: 115:     INTCONbits.IOCIE = 1;
  5100     0FFE  158B               	bsf	11,3	;volatile
  5101     0FFF  0008               	return
  5102     1000                     __end_of_PIN_MANAGER_Initialize:
  5103                           
  5104                           	psect	text14
  5105     0C79                     __ptext14:	
  5106 ;; *************** function _IOCBF3_SetInterruptHandler *****************
  5107 ;; Defined at:
  5108 ;;		line 181 in file "mcc_generated_files/pin_manager.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5111 ;;		 -> ISR_Floor2(1), IOCBF3_DefaultInterruptHandler(1), 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1    wreg      void 
  5116 ;; Registers used:
  5117 ;;		wreg
  5118 ;; Tracked objects:
  5119 ;;		On entry : 1F/1
  5120 ;;		On exit  : 1F/1
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5123 ;;      Params:         0       0       2       0       0       0
  5124 ;;      Locals:         0       0       0       0       0       0
  5125 ;;      Temps:          0       0       0       0       0       0
  5126 ;;      Totals:         0       0       2       0       0       0
  5127 ;;Total ram usage:        2 bytes
  5128 ;; Hardware stack levels used: 1
  5129 ;; Hardware stack levels required when called: 7
  5130 ;; This function calls:
  5131 ;;		Nothing
  5132 ;; This function is called by:
  5133 ;;		_PIN_MANAGER_Initialize
  5134 ;;		_main
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138     0C79                     _IOCBF3_SetInterruptHandler:	
  5139                           ;psect for function _IOCBF3_SetInterruptHandler
  5140                           
  5141                           
  5142                           ;mcc_generated_files/pin_manager.c: 182:     IOCBF3_InterruptHandler = InterruptHandler;
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _IOCBF3_SetInterruptHandler: [wreg]
  5146     0C79  0841               	movf	(IOCBF3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5147     0C7A  00E4               	movwf	(_IOCBF3_InterruptHandler+1)^(0+128)
  5148     0C7B  0840               	movf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128),w
  5149     0C7C  00E3               	movwf	_IOCBF3_InterruptHandler^(0+128)
  5150     0C7D  0008               	return
  5151     0C7E                     __end_of_IOCBF3_SetInterruptHandler:
  5152                           
  5153                           	psect	text15
  5154     0C74                     __ptext15:	
  5155 ;; *************** function _IOCBF0_SetInterruptHandler *****************
  5156 ;; Defined at:
  5157 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5160 ;;		 -> ISR_Floor1(1), IOCBF0_DefaultInterruptHandler(1), 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;		None
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      void 
  5165 ;; Registers used:
  5166 ;;		wreg
  5167 ;; Tracked objects:
  5168 ;;		On entry : 1F/1
  5169 ;;		On exit  : 1F/1
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5172 ;;      Params:         0       0       2       0       0       0
  5173 ;;      Locals:         0       0       0       0       0       0
  5174 ;;      Temps:          0       0       0       0       0       0
  5175 ;;      Totals:         0       0       2       0       0       0
  5176 ;;Total ram usage:        2 bytes
  5177 ;; Hardware stack levels used: 1
  5178 ;; Hardware stack levels required when called: 7
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		_PIN_MANAGER_Initialize
  5183 ;;		_main
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187     0C74                     _IOCBF0_SetInterruptHandler:	
  5188                           ;psect for function _IOCBF0_SetInterruptHandler
  5189                           
  5190                           
  5191                           ;mcc_generated_files/pin_manager.c: 152:     IOCBF0_InterruptHandler = InterruptHandler;
  5192                           
  5193                           ;incstack = 0
  5194                           ; Regs used in _IOCBF0_SetInterruptHandler: [wreg]
  5195     0C74  0841               	movf	(IOCBF0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5196     0C75  00E6               	movwf	(_IOCBF0_InterruptHandler+1)^(0+128)
  5197     0C76  0840               	movf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128),w
  5198     0C77  00E5               	movwf	_IOCBF0_InterruptHandler^(0+128)
  5199     0C78  0008               	return
  5200     0C79                     __end_of_IOCBF0_SetInterruptHandler:
  5201                           
  5202                           	psect	text16
  5203     0C83                     __ptext16:	
  5204 ;; *************** function _OSCILLATOR_Initialize *****************
  5205 ;; Defined at:
  5206 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;		None
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  1    wreg      void 
  5213 ;; Registers used:
  5214 ;;		status,2
  5215 ;; Tracked objects:
  5216 ;;		On entry : 1F/1
  5217 ;;		On exit  : 1F/2
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5220 ;;      Params:         0       0       0       0       0       0
  5221 ;;      Locals:         0       0       0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0
  5223 ;;      Totals:         0       0       0       0       0       0
  5224 ;;Total ram usage:        0 bytes
  5225 ;; Hardware stack levels used: 1
  5226 ;; Hardware stack levels required when called: 7
  5227 ;; This function calls:
  5228 ;;		Nothing
  5229 ;; This function is called by:
  5230 ;;		_SYSTEM_Initialize
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234     0C83                     _OSCILLATOR_Initialize:	
  5235                           ;psect for function _OSCILLATOR_Initialize
  5236                           
  5237                           
  5238                           ;mcc_generated_files/mcc.c: 72:     OSCCON = 0x70;
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
  5242     0C83  3070               	movlw	112
  5243     0C84  0099               	movwf	25	;volatile
  5244                           
  5245                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
  5246     0C85  0198               	clrf	24	;volatile
  5247                           
  5248                           ;mcc_generated_files/mcc.c: 76:     BORCON = 0x00;
  5249     0C86  0022               	movlb	2	; select bank2
  5250     0C87  0196               	clrf	22	;volatile
  5251     0C88  0008               	return
  5252     0C89                     __end_of_OSCILLATOR_Initialize:
  5253                           
  5254                           	psect	text17
  5255     0C4A                     __ptext17:	
  5256 ;; *************** function _FVR_Initialize *****************
  5257 ;; Defined at:
  5258 ;;		line 58 in file "mcc_generated_files/fvr.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  1    wreg      void 
  5265 ;; Registers used:
  5266 ;;		None
  5267 ;; Tracked objects:
  5268 ;;		On entry : 1F/1
  5269 ;;		On exit  : 1F/2
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5272 ;;      Params:         0       0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0
  5275 ;;      Totals:         0       0       0       0       0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used: 1
  5278 ;; Hardware stack levels required when called: 7
  5279 ;; This function calls:
  5280 ;;		Nothing
  5281 ;; This function is called by:
  5282 ;;		_SYSTEM_Initialize
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286     0C4A                     _FVR_Initialize:	
  5287                           ;psect for function _FVR_Initialize
  5288                           
  5289                           
  5290                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x85;
  5291                           
  5292                           ;incstack = 0
  5293                           ; Regs used in _FVR_Initialize: []
  5294     0C4A  3085               	movlw	133
  5295     0C4B  0022               	movlb	2	; select bank2
  5296     0C4C  0097               	movwf	23	;volatile
  5297     0C4D  0008               	return
  5298     0C4E                     __end_of_FVR_Initialize:
  5299                           
  5300                           	psect	text18
  5301     07A9                     __ptext18:	
  5302 ;; *************** function _EUSART_Initialize *****************
  5303 ;; Defined at:
  5304 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, pclath, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 1F/0
  5315 ;;		On exit  : 1F/1
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5318 ;;      Params:         0       0       0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0
  5321 ;;      Totals:         0       0       0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used: 1
  5324 ;; Hardware stack levels required when called: 8
  5325 ;; This function calls:
  5326 ;;		_EUSART_SetErrorHandler
  5327 ;;		_EUSART_SetFramingErrorHandler
  5328 ;;		_EUSART_SetOverrunErrorHandler
  5329 ;;		_EUSART_SetRxInterruptHandler
  5330 ;; This function is called by:
  5331 ;;		_SYSTEM_Initialize
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335     07A9                     _EUSART_Initialize:	
  5336                           ;psect for function _EUSART_Initialize
  5337                           
  5338                           
  5339                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5343     07A9  0021               	movlb	1	; select bank1
  5344     07AA  1291               	bcf	17,5	;volatile
  5345                           
  5346                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5347     07AB  30DC               	movlw	low _EUSART_Receive_ISR
  5348     07AC  00C0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5349     07AD  3006               	movlw	high _EUSART_Receive_ISR
  5350     07AE  00C1               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5351     07AF  318C  246F  3187   	fcall	_EUSART_SetRxInterruptHandler
  5352                           
  5353                           ;mcc_generated_files/eusart.c: 91:     BAUDCON = 0x08;
  5354     07B2  3008               	movlw	8
  5355     07B3  0023               	movlb	3	; select bank3
  5356     07B4  009F               	movwf	31	;volatile
  5357                           
  5358                           ;mcc_generated_files/eusart.c: 94:     RCSTA = 0x90;
  5359     07B5  3090               	movlw	144
  5360     07B6  009D               	movwf	29	;volatile
  5361                           
  5362                           ;mcc_generated_files/eusart.c: 97:     TXSTA = 0xA4;
  5363     07B7  30A4               	movlw	164
  5364     07B8  009E               	movwf	30	;volatile
  5365                           
  5366                           ;mcc_generated_files/eusart.c: 100:     SPBRGL = 0x67;
  5367     07B9  3067               	movlw	103
  5368     07BA  009B               	movwf	27	;volatile
  5369                           
  5370                           ;mcc_generated_files/eusart.c: 103:     SPBRGH = 0x00;
  5371     07BB  019C               	clrf	28	;volatile
  5372                           
  5373                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5374     07BC  3002               	movlw	low _EUSART_DefaultFramingErrorHandler
  5375     07BD  0021               	movlb	1	; select bank1
  5376     07BE  00C0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5377     07BF  3000               	movlw	high _EUSART_DefaultFramingErrorHandler
  5378     07C0  00C1               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5379     07C1  318C  2465  3187   	fcall	_EUSART_SetFramingErrorHandler
  5380                           
  5381                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5382     07C4  3046               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5383     07C5  00C0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5384     07C6  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5385     07C7  00C1               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5386     07C8  318C  246A  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5387                           
  5388                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5389     07CB  303F               	movlw	low _EUSART_DefaultErrorHandler
  5390     07CC  00C0               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5391     07CD  300C               	movlw	high _EUSART_DefaultErrorHandler
  5392     07CE  00C1               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5393     07CF  318C  2460         	fcall	_EUSART_SetErrorHandler
  5394                           
  5395                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
  5396     07D1  0020               	movlb	0	; select bank0
  5397     07D2  01B6               	clrf	_eusartRxLastError	;volatile
  5398                           
  5399                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
  5400     07D3  01B9               	clrf	_eusartRxHead	;volatile
  5401                           
  5402                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
  5403     07D4  01B8               	clrf	_eusartRxTail	;volatile
  5404                           
  5405                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
  5406     07D5  01B7               	clrf	_eusartRxCount	;volatile
  5407                           
  5408                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
  5409     07D6  0021               	movlb	1	; select bank1
  5410     07D7  1691               	bsf	17,5	;volatile
  5411     07D8  0008               	return
  5412     07D9                     __end_of_EUSART_Initialize:
  5413                           
  5414                           	psect	text19
  5415     0C6F                     __ptext19:	
  5416 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5417 ;; Defined at:
  5418 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5421 ;;		 -> Read_UART(1), EUSART_Receive_ISR(1), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg
  5428 ;; Tracked objects:
  5429 ;;		On entry : 1F/1
  5430 ;;		On exit  : 1F/1
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5433 ;;      Params:         0       0       2       0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0       0
  5436 ;;      Totals:         0       0       2       0       0       0
  5437 ;;Total ram usage:        2 bytes
  5438 ;; Hardware stack levels used: 1
  5439 ;; Hardware stack levels required when called: 7
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_EUSART_Initialize
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448     0C6F                     _EUSART_SetRxInterruptHandler:	
  5449                           ;psect for function _EUSART_SetRxInterruptHandler
  5450                           
  5451                           
  5452                           ;mcc_generated_files/eusart.c: 235:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5456     0C6F  0841               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5457     0C70  00E2               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5458     0C71  0840               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5459     0C72  00E1               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5460     0C73  0008               	return
  5461     0C74                     __end_of_EUSART_SetRxInterruptHandler:
  5462                           
  5463                           	psect	text20
  5464     0C6A                     __ptext20:	
  5465 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5466 ;; Defined at:
  5467 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5470 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg
  5477 ;; Tracked objects:
  5478 ;;		On entry : 1F/1
  5479 ;;		On exit  : 1F/1
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5482 ;;      Params:         0       0       2       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0
  5485 ;;      Totals:         0       0       2       0       0       0
  5486 ;;Total ram usage:        2 bytes
  5487 ;; Hardware stack levels used: 1
  5488 ;; Hardware stack levels required when called: 7
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_EUSART_Initialize
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496     0C6A                     _EUSART_SetOverrunErrorHandler:	
  5497                           ;psect for function _EUSART_SetOverrunErrorHandler
  5498                           
  5499                           
  5500                           ;mcc_generated_files/eusart.c: 226:     EUSART_OverrunErrorHandler = interruptHandler;
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5504     0C6A  0841               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5505     0C6B  00DE               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5506     0C6C  0840               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5507     0C6D  00DD               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5508     0C6E  0008               	return
  5509     0C6F                     __end_of_EUSART_SetOverrunErrorHandler:
  5510                           
  5511                           	psect	text21
  5512     0C65                     __ptext21:	
  5513 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5514 ;; Defined at:
  5515 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5518 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      void 
  5523 ;; Registers used:
  5524 ;;		wreg
  5525 ;; Tracked objects:
  5526 ;;		On entry : 1F/1
  5527 ;;		On exit  : 1F/1
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5530 ;;      Params:         0       0       2       0       0       0
  5531 ;;      Locals:         0       0       0       0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0
  5533 ;;      Totals:         0       0       2       0       0       0
  5534 ;;Total ram usage:        2 bytes
  5535 ;; Hardware stack levels used: 1
  5536 ;; Hardware stack levels required when called: 7
  5537 ;; This function calls:
  5538 ;;		Nothing
  5539 ;; This function is called by:
  5540 ;;		_EUSART_Initialize
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544     0C65                     _EUSART_SetFramingErrorHandler:	
  5545                           ;psect for function _EUSART_SetFramingErrorHandler
  5546                           
  5547                           
  5548                           ;mcc_generated_files/eusart.c: 222:     EUSART_FramingErrorHandler = interruptHandler;
  5549                           
  5550                           ;incstack = 0
  5551                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5552     0C65  0841               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5553     0C66  00E0               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5554     0C67  0840               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5555     0C68  00DF               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5556     0C69  0008               	return
  5557     0C6A                     __end_of_EUSART_SetFramingErrorHandler:
  5558                           
  5559                           	psect	text22
  5560     0C60                     __ptext22:	
  5561 ;; *************** function _EUSART_SetErrorHandler *****************
  5562 ;; Defined at:
  5563 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5566 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg
  5573 ;; Tracked objects:
  5574 ;;		On entry : 1F/1
  5575 ;;		On exit  : 1F/1
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5578 ;;      Params:         0       0       2       0       0       0
  5579 ;;      Locals:         0       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0
  5581 ;;      Totals:         0       0       2       0       0       0
  5582 ;;Total ram usage:        2 bytes
  5583 ;; Hardware stack levels used: 1
  5584 ;; Hardware stack levels required when called: 7
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_EUSART_Initialize
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592     0C60                     _EUSART_SetErrorHandler:	
  5593                           ;psect for function _EUSART_SetErrorHandler
  5594                           
  5595                           
  5596                           ;mcc_generated_files/eusart.c: 230:     EUSART_ErrorHandler = interruptHandler;
  5597                           
  5598                           ;incstack = 0
  5599                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5600     0C60  0841               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5601     0C61  00DC               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5602     0C62  0840               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5603     0C63  00DB               	movwf	_EUSART_ErrorHandler^(0+128)
  5604     0C64  0008               	return
  5605     0C65                     __end_of_EUSART_SetErrorHandler:
  5606                           
  5607                           	psect	text23
  5608     0D02                     __ptext23:	
  5609 ;; *************** function _CMP2_Initialize *****************
  5610 ;; Defined at:
  5611 ;;		line 59 in file "mcc_generated_files/cmp2.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		None
  5620 ;; Tracked objects:
  5621 ;;		On entry : 1F/1
  5622 ;;		On exit  : 1F/1
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5625 ;;      Params:         0       0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0
  5628 ;;      Totals:         0       0       0       0       0       0
  5629 ;;Total ram usage:        0 bytes
  5630 ;; Hardware stack levels used: 1
  5631 ;; Hardware stack levels required when called: 7
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_SYSTEM_Initialize
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639     0D02                     _CMP2_Initialize:	
  5640                           ;psect for function _CMP2_Initialize
  5641                           
  5642                           
  5643                           ;mcc_generated_files/cmp2.c: 66:     PIE2bits.C2IE = 0;
  5644                           
  5645                           ;incstack = 0
  5646                           ; Regs used in _CMP2_Initialize: []
  5647     0D02  1312               	bcf	18,6	;volatile
  5648                           
  5649                           ;mcc_generated_files/cmp2.c: 69:     CM2CON0 = 0x84;
  5650     0D03  3084               	movlw	132
  5651     0D04  0022               	movlb	2	; select bank2
  5652     0D05  0093               	movwf	19	;volatile
  5653                           
  5654                           ;mcc_generated_files/cmp2.c: 72:     CM2CON1 = 0xA1;
  5655     0D06  30A1               	movlw	161
  5656     0D07  0094               	movwf	20	;volatile
  5657                           
  5658                           ;mcc_generated_files/cmp2.c: 75:     PIR2bits.C2IF = 0;
  5659     0D08  0020               	movlb	0	; select bank0
  5660     0D09  1312               	bcf	18,6	;volatile
  5661                           
  5662                           ;mcc_generated_files/cmp2.c: 78:     PIE2bits.C2IE = 1;
  5663     0D0A  0021               	movlb	1	; select bank1
  5664     0D0B  1712               	bsf	18,6	;volatile
  5665     0D0C  0008               	return
  5666     0D0D                     __end_of_CMP2_Initialize:
  5667                           
  5668                           	psect	text24
  5669     0D19                     __ptext24:	
  5670 ;; *************** function _CMP1_Initialize *****************
  5671 ;; Defined at:
  5672 ;;		line 60 in file "mcc_generated_files/cmp1.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		None
  5681 ;; Tracked objects:
  5682 ;;		On entry : 1F/8
  5683 ;;		On exit  : 1F/1
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5686 ;;      Params:         0       0       0       0       0       0
  5687 ;;      Locals:         0       0       0       0       0       0
  5688 ;;      Temps:          0       0       0       0       0       0
  5689 ;;      Totals:         0       0       0       0       0       0
  5690 ;;Total ram usage:        0 bytes
  5691 ;; Hardware stack levels used: 1
  5692 ;; Hardware stack levels required when called: 7
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_SYSTEM_Initialize
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700     0D19                     _CMP1_Initialize:	
  5701                           ;psect for function _CMP1_Initialize
  5702                           
  5703                           
  5704                           ;mcc_generated_files/cmp1.c: 67:     PIE2bits.C1IE = 0;
  5705                           
  5706                           ;incstack = 0
  5707                           ; Regs used in _CMP1_Initialize: []
  5708     0D19  0021               	movlb	1	; select bank1
  5709     0D1A  1292               	bcf	18,5	;volatile
  5710                           
  5711                           ;mcc_generated_files/cmp1.c: 70:     CM1CON0 = 0x84;
  5712     0D1B  3084               	movlw	132
  5713     0D1C  0022               	movlb	2	; select bank2
  5714     0D1D  0091               	movwf	17	;volatile
  5715                           
  5716                           ;mcc_generated_files/cmp1.c: 73:     CM1CON1 = 0xA0;
  5717     0D1E  30A0               	movlw	160
  5718     0D1F  0092               	movwf	18	;volatile
  5719                           
  5720                           ;mcc_generated_files/cmp1.c: 76:     PIR2bits.C1IF = 0;
  5721     0D20  0020               	movlb	0	; select bank0
  5722     0D21  1292               	bcf	18,5	;volatile
  5723                           
  5724                           ;mcc_generated_files/cmp1.c: 79:     PIE2bits.C1IE = 1;
  5725     0D22  0021               	movlb	1	; select bank1
  5726     0D23  1692               	bsf	18,5	;volatile
  5727     0D24  0008               	return
  5728     0D25                     __end_of_CMP1_Initialize:
  5729                           
  5730                           	psect	text25
  5731     0D8E                     __ptext25:	
  5732 ;; *************** function _ADC_Initialize *****************
  5733 ;; Defined at:
  5734 ;;		line 67 in file "mcc_generated_files/adc.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, status,0, pclath, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 1F/1
  5745 ;;		On exit  : 1F/1
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5748 ;;      Params:         0       0       0       0       0       0
  5749 ;;      Locals:         0       0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0
  5751 ;;      Totals:         0       0       0       0       0       0
  5752 ;;Total ram usage:        0 bytes
  5753 ;; Hardware stack levels used: 1
  5754 ;; Hardware stack levels required when called: 8
  5755 ;; This function calls:
  5756 ;;		_ADC_SetInterruptHandler
  5757 ;; This function is called by:
  5758 ;;		_SYSTEM_Initialize
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762     0D8E                     _ADC_Initialize:	
  5763                           ;psect for function _ADC_Initialize
  5764                           
  5765                           
  5766                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x93;
  5767                           
  5768                           ;incstack = 0
  5769                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5770     0D8E  3093               	movlw	147
  5771     0D8F  009E               	movwf	30	;volatile
  5772                           
  5773                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  5774     0D90  019B               	clrf	27	;volatile
  5775                           
  5776                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  5777     0D91  019C               	clrf	28	;volatile
  5778                           
  5779                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x09;
  5780     0D92  3009               	movlw	9
  5781     0D93  009D               	movwf	29	;volatile
  5782                           
  5783                           ;mcc_generated_files/adc.c: 84:     PIE1bits.ADIE = 1;
  5784     0D94  1711               	bsf	17,6	;volatile
  5785                           
  5786                           ;mcc_generated_files/adc.c: 87:     ADC_SetInterruptHandler(ADC_DefaultInterruptHandler)
      +                          ;
  5787     0D95  303C               	movlw	low _ADC_DefaultInterruptHandler
  5788     0D96  00C0               	movwf	ADC_SetInterruptHandler@InterruptHandler^(0+128)
  5789     0D97  300C               	movlw	high _ADC_DefaultInterruptHandler
  5790     0D98  00C1               	movwf	(ADC_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5791     0D99  318C  245B         	fcall	_ADC_SetInterruptHandler
  5792     0D9B  0008               	return
  5793     0D9C                     __end_of_ADC_Initialize:
  5794                           
  5795                           	psect	text26
  5796     0C5B                     __ptext26:	
  5797 ;; *************** function _ADC_SetInterruptHandler *****************
  5798 ;; Defined at:
  5799 ;;		line 156 in file "mcc_generated_files/adc.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5802 ;;		 -> ADC_DefaultInterruptHandler(1), 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg
  5809 ;; Tracked objects:
  5810 ;;		On entry : 1F/1
  5811 ;;		On exit  : 1F/1
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5814 ;;      Params:         0       0       2       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0
  5817 ;;      Totals:         0       0       2       0       0       0
  5818 ;;Total ram usage:        2 bytes
  5819 ;; Hardware stack levels used: 1
  5820 ;; Hardware stack levels required when called: 7
  5821 ;; This function calls:
  5822 ;;		Nothing
  5823 ;; This function is called by:
  5824 ;;		_ADC_Initialize
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828     0C5B                     _ADC_SetInterruptHandler:	
  5829                           ;psect for function _ADC_SetInterruptHandler
  5830                           
  5831                           
  5832                           ;mcc_generated_files/adc.c: 157:     ADC_InterruptHandler = InterruptHandler;
  5833                           
  5834                           ;incstack = 0
  5835                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
  5836     0C5B  0841               	movf	(ADC_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5837     0C5C  00D8               	movwf	(_ADC_InterruptHandler+1)^(0+128)
  5838     0C5D  0840               	movf	ADC_SetInterruptHandler@InterruptHandler^(0+128),w
  5839     0C5E  00D7               	movwf	_ADC_InterruptHandler^(0+128)
  5840     0C5F  0008               	return
  5841     0C60                     __end_of_ADC_SetInterruptHandler:
  5842                           
  5843                           	psect	text27
  5844     04F4                     __ptext27:	
  5845 ;; *************** function _SPI1_Open *****************
  5846 ;; Defined at:
  5847 ;;		line 72 in file "mcc_generated_files/spi1.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  spi1UniqueCo    1    wreg     enum E358
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  spi1UniqueCo    1    3[BANK1 ] enum E358
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      _Bool 
  5854 ;; Registers used:
  5855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5856 ;; Tracked objects:
  5857 ;;		On entry : 1F/2
  5858 ;;		On exit  : 1F/4
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5861 ;;      Params:         0       0       0       0       0       0
  5862 ;;      Locals:         0       0       1       0       0       0
  5863 ;;      Temps:          0       0       3       0       0       0
  5864 ;;      Totals:         0       0       4       0       0       0
  5865 ;;Total ram usage:        4 bytes
  5866 ;; Hardware stack levels used: 1
  5867 ;; Hardware stack levels required when called: 7
  5868 ;; This function calls:
  5869 ;;		Nothing
  5870 ;; This function is called by:
  5871 ;;		_main
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875     04F4                     _SPI1_Open:	
  5876                           ;psect for function _SPI1_Open
  5877                           
  5878                           
  5879                           ;incstack = 0
  5880                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath]
  5881                           ;SPI1_Open@spi1UniqueConfiguration stored from wreg
  5882     04F4  0021               	movlb	1	; select bank1
  5883     04F5  00C3               	movwf	SPI1_Open@spi1UniqueConfiguration^(0+128)
  5884                           
  5885                           ;mcc_generated_files/spi1.c: 72: _Bool SPI1_Open(spi1_modes_t spi1UniqueConfiguration);m
      +                          cc_generated_files/spi1.c: 73: {;mcc_generated_files/spi1.c: 74:     if(!SSP1CON1bits.SS
      +                          PEN)
  5886     04F6  0024               	movlb	4	; select bank4
  5887     04F7  1A95               	btfsc	21,5	;volatile
  5888     04F8  0008               	return
  5889                           
  5890                           ;mcc_generated_files/spi1.c: 75:     {;mcc_generated_files/spi1.c: 76:         SSP1STAT 
      +                          = spi1_configuration[spi1UniqueConfiguration].stat;
  5891     04F9  0021               	movlb	1	; select bank1
  5892     04FA  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5893     04FB  00C0               	movwf	??_SPI1_Open^(0+128)
  5894     04FC  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5895     04FD  35C0               	lslf	??_SPI1_Open^(0+128),f
  5896     04FE  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5897     04FF  35C0               	lslf	??_SPI1_Open^(0+128),f
  5898     0500  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5899     0501  3029               	movlw	low (_spi1_configuration+1)
  5900     0502  0740               	addwf	??_SPI1_Open^(0+128),w
  5901     0503  0084               	movwf	4
  5902     0504  3008               	movlw	high (_spi1_configuration+1)
  5903     0505  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5904     0506  3880               	iorlw	128
  5905     0507  0085               	movwf	5
  5906     0508  0800               	movf	0,w	;code access
  5907     0509  0024               	movlb	4	; select bank4
  5908     050A  0094               	movwf	20	;volatile
  5909                           
  5910                           ;mcc_generated_files/spi1.c: 77:         SSP1CON1 = spi1_configuration[spi1UniqueConfigu
      +                          ration].con1;
  5911     050B  0021               	movlb	1	; select bank1
  5912     050C  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5913     050D  00C0               	movwf	??_SPI1_Open^(0+128)
  5914     050E  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5915     050F  35C0               	lslf	??_SPI1_Open^(0+128),f
  5916     0510  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5917     0511  35C0               	lslf	??_SPI1_Open^(0+128),f
  5918     0512  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5919     0513  3028               	movlw	low _spi1_configuration
  5920     0514  0740               	addwf	??_SPI1_Open^(0+128),w
  5921     0515  0084               	movwf	4
  5922     0516  3008               	movlw	high _spi1_configuration
  5923     0517  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5924     0518  3880               	iorlw	128
  5925     0519  0085               	movwf	5
  5926     051A  0800               	movf	0,w	;code access
  5927     051B  0024               	movlb	4	; select bank4
  5928     051C  0095               	movwf	21	;volatile
  5929                           
  5930                           ;mcc_generated_files/spi1.c: 78:         SSP1CON2 = 0x00;
  5931     051D  0196               	clrf	22	;volatile
  5932                           
  5933                           ;mcc_generated_files/spi1.c: 79:         SSP1ADD = spi1_configuration[spi1UniqueConfigur
      +                          ation].add;
  5934     051E  0021               	movlb	1	; select bank1
  5935     051F  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5936     0520  00C0               	movwf	??_SPI1_Open^(0+128)
  5937     0521  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5938     0522  35C0               	lslf	??_SPI1_Open^(0+128),f
  5939     0523  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5940     0524  35C0               	lslf	??_SPI1_Open^(0+128),f
  5941     0525  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5942     0526  302A               	movlw	low (_spi1_configuration+2)
  5943     0527  0740               	addwf	??_SPI1_Open^(0+128),w
  5944     0528  0084               	movwf	4
  5945     0529  3008               	movlw	high (_spi1_configuration+2)
  5946     052A  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5947     052B  3880               	iorlw	128
  5948     052C  0085               	movwf	5
  5949     052D  0800               	movf	0,w	;code access
  5950     052E  0024               	movlb	4	; select bank4
  5951     052F  0092               	movwf	18	;volatile
  5952                           
  5953                           ;mcc_generated_files/spi1.c: 80:         TRISBbits.TRISB4 = spi1_configuration[spi1Uniqu
      +                          eConfiguration].operation;
  5954     0530  0021               	movlb	1	; select bank1
  5955     0531  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5956     0532  00C0               	movwf	??_SPI1_Open^(0+128)
  5957     0533  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5958     0534  35C0               	lslf	??_SPI1_Open^(0+128),f
  5959     0535  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5960     0536  35C0               	lslf	??_SPI1_Open^(0+128),f
  5961     0537  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5962     0538  302B               	movlw	low (_spi1_configuration+3)
  5963     0539  0740               	addwf	??_SPI1_Open^(0+128),w
  5964     053A  0084               	movwf	4
  5965     053B  3008               	movlw	high (_spi1_configuration+3)
  5966     053C  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5967     053D  3880               	iorlw	128
  5968     053E  0085               	movwf	5
  5969     053F  0800               	movf	0,w	;code access
  5970     0540  00C2               	movwf	(??_SPI1_Open+2)^(0+128)
  5971     0541  0EC2               	swapf	(??_SPI1_Open+2)^(0+128),f
  5972     0542  080D               	movf	13,w	;volatile
  5973     0543  0642               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5974     0544  39EF               	andlw	-17
  5975     0545  0642               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5976     0546  008D               	movwf	13	;volatile
  5977                           
  5978                           ;mcc_generated_files/spi1.c: 81:         SSP1CON1bits.SSPEN = 1;
  5979     0547  0024               	movlb	4	; select bank4
  5980     0548  1695               	bsf	21,5	;volatile
  5981     0549  0008               	return
  5982     054A                     __end_of_SPI1_Open:
  5983                           
  5984                           	psect	text28
  5985     0E8B                     __ptext28:	
  5986 ;; *************** function _Route_empty *****************
  5987 ;; Defined at:
  5988 ;;		line 135 in file "main.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  i               2    1[BANK1 ] int 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      _Bool 
  5995 ;; Registers used:
  5996 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/1
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6002 ;;      Params:         0       0       0       0       0       0
  6003 ;;      Locals:         0       0       2       0       0       0
  6004 ;;      Temps:          0       0       1       0       0       0
  6005 ;;      Totals:         0       0       3       0       0       0
  6006 ;;Total ram usage:        3 bytes
  6007 ;; Hardware stack levels used: 1
  6008 ;; Hardware stack levels required when called: 7
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		_main
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016     0E8B                     _Route_empty:	
  6017                           ;psect for function _Route_empty
  6018                           
  6019                           
  6020                           ;main.c: 136:   for(int i=0; i<6; i++){
  6021                           
  6022                           ;incstack = 0
  6023                           ; Regs used in _Route_empty: [wreg+fsr1l+fsr1h+status,2+status,0]
  6024     0E8B  0021               	movlb	1	; select bank1
  6025     0E8C  01C1               	clrf	Route_empty@i^(0+128)
  6026     0E8D  01C2               	clrf	(Route_empty@i+1)^(0+128)
  6027     0E8E                     l4645:
  6028                           
  6029                           ;main.c: 137:       if (route[i] != 0) return 0;
  6030     0E8E  0021               	movlb	1	; select bank1
  6031     0E8F  0841               	movf	Route_empty@i^(0+128),w
  6032     0E90  3E27               	addlw	(low (_route| 0))& (0+255)
  6033     0E91  0086               	movwf	6
  6034     0E92  0187               	clrf	7
  6035     0E93  0801               	movf	1,w
  6036     0E94  1903               	btfsc	3,2
  6037     0E95  2E98               	goto	l4651
  6038     0E96  3000               	movlw	0
  6039     0E97  0008               	return
  6040     0E98                     l4651:
  6041                           
  6042                           ;main.c: 138:     }
  6043     0E98  3001               	movlw	1
  6044     0E99  07C1               	addwf	Route_empty@i^(0+128),f
  6045     0E9A  3000               	movlw	0
  6046     0E9B  3DC2               	addwfc	(Route_empty@i+1)^(0+128),f
  6047     0E9C  0842               	movf	(Route_empty@i+1)^(0+128),w
  6048     0E9D  3A80               	xorlw	128
  6049     0E9E  00C0               	movwf	??_Route_empty^(0+128)
  6050     0E9F  3080               	movlw	128
  6051     0EA0  0240               	subwf	??_Route_empty^(0+128),w
  6052     0EA1  1D03               	skipz
  6053     0EA2  2EA5               	goto	u3465
  6054     0EA3  3006               	movlw	6
  6055     0EA4  0241               	subwf	Route_empty@i^(0+128),w
  6056     0EA5                     u3465:
  6057     0EA5  1C03               	skipc
  6058     0EA6  2E8E               	goto	l4645
  6059                           
  6060                           ;main.c: 139:   return 1;
  6061     0EA7  3001               	movlw	1
  6062     0EA8  0008               	return
  6063     0EA9                     __end_of_Route_empty:
  6064                           
  6065                           	psect	text29
  6066     0712                     __ptext29:	
  6067 ;; *************** function _Next_index *****************
  6068 ;; Defined at:
  6069 ;;		line 141 in file "main.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;		None
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;  i               2    9[BANK1 ] int 
  6074 ;;  index_          2    7[BANK1 ] int 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      unsigned char 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 1F/0
  6081 ;;		On exit  : 1F/1
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6084 ;;      Params:         0       0       0       0       0       0
  6085 ;;      Locals:         0       0       4       0       0       0
  6086 ;;      Temps:          0       0       1       0       0       0
  6087 ;;      Totals:         0       0       5       0       0       0
  6088 ;;Total ram usage:        5 bytes
  6089 ;; Hardware stack levels used: 1
  6090 ;; Hardware stack levels required when called: 8
  6091 ;; This function calls:
  6092 ;;		___awmod
  6093 ;; This function is called by:
  6094 ;;		_main
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098     0712                     _Next_index:	
  6099                           ;psect for function _Next_index
  6100                           
  6101                           
  6102                           ;main.c: 143:     for(int i=1; i<6;i++){
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _Next_index: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6106     0712  3001               	movlw	1
  6107     0713  0021               	movlb	1	; select bank1
  6108     0714  00C9               	movwf	Next_index@i^(0+128)
  6109     0715  3000               	movlw	0
  6110     0716  00CA               	movwf	(Next_index@i^(0+128)+1)
  6111     0717                     l4665:
  6112                           
  6113                           ;main.c: 144:         index_ = (index+i)%6;
  6114     0717  3006               	movlw	6
  6115     0718  0021               	movlb	1	; select bank1
  6116     0719  00C0               	movwf	___awmod@divisor^(0+128)
  6117     071A  3000               	movlw	0
  6118     071B  00C1               	movwf	(___awmod@divisor^(0+128)+1)
  6119     071C  0020               	movlb	0	; select bank0
  6120     071D  083E               	movf	_index,w
  6121     071E  0021               	movlb	1	; select bank1
  6122     071F  0749               	addwf	Next_index@i^(0+128),w
  6123     0720  00C2               	movwf	___awmod@dividend^(0+128)
  6124     0721  084A               	movf	(Next_index@i+1)^(0+128),w
  6125     0722  1803               	skipnc
  6126     0723  0A4A               	incf	(Next_index@i+1)^(0+128),w
  6127     0724  00C3               	movwf	(___awmod@dividend^(0+128)+1)
  6128     0725  3185  2597  3187   	fcall	___awmod
  6129     0728  0841               	movf	(?___awmod+1)^(0+128),w
  6130     0729  00C8               	movwf	(Next_index@index_+1)^(0+128)
  6131     072A  0840               	movf	?___awmod^(0+128),w
  6132     072B  00C7               	movwf	Next_index@index_^(0+128)
  6133                           
  6134                           ;main.c: 145:         if(route[index_]==1){
  6135     072C  0847               	movf	Next_index@index_^(0+128),w
  6136     072D  3E27               	addlw	(low (_route| 0))& (0+255)
  6137     072E  0086               	movwf	6
  6138     072F  0187               	clrf	7
  6139     0730  0301               	decf	1,w
  6140     0731  1D03               	btfss	3,2
  6141     0732  2F36               	goto	l4673
  6142     0733                     l4669:
  6143                           
  6144                           ;main.c: 146:         return index_;
  6145     0733  0021               	movlb	1	; select bank1
  6146     0734  0847               	movf	Next_index@index_^(0+128),w
  6147     0735  0008               	return
  6148     0736                     l4673:
  6149                           
  6150                           ;main.c: 148:     }
  6151     0736  3001               	movlw	1
  6152     0737  07C9               	addwf	Next_index@i^(0+128),f
  6153     0738  3000               	movlw	0
  6154     0739  3DCA               	addwfc	(Next_index@i+1)^(0+128),f
  6155     073A  084A               	movf	(Next_index@i+1)^(0+128),w
  6156     073B  3A80               	xorlw	128
  6157     073C  00C6               	movwf	??_Next_index^(0+128)
  6158     073D  3080               	movlw	128
  6159     073E  0246               	subwf	??_Next_index^(0+128),w
  6160     073F  1D03               	skipz
  6161     0740  2F43               	goto	u3485
  6162     0741  3006               	movlw	6
  6163     0742  0249               	subwf	Next_index@i^(0+128),w
  6164     0743                     u3485:
  6165     0743  1803               	btfsc	3,0
  6166     0744  2F33               	goto	l4669
  6167     0745  2F17               	goto	l4665
  6168     0746                     __end_of_Next_index:
  6169                           
  6170                           	psect	text30
  6171     065F                     __ptext30:	
  6172 ;; *************** function _Next_floor *****************
  6173 ;; Defined at:
  6174 ;;		line 151 in file "main.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  index_          2    7[BANK1 ] int 
  6179 ;;  i               2    9[BANK1 ] int 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      unsigned char 
  6182 ;; Registers used:
  6183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 1F/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6189 ;;      Params:         0       0       0       0       0       0
  6190 ;;      Locals:         0       0       4       0       0       0
  6191 ;;      Temps:          0       0       1       0       0       0
  6192 ;;      Totals:         0       0       5       0       0       0
  6193 ;;Total ram usage:        5 bytes
  6194 ;; Hardware stack levels used: 1
  6195 ;; Hardware stack levels required when called: 8
  6196 ;; This function calls:
  6197 ;;		___awmod
  6198 ;; This function is called by:
  6199 ;;		_main
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203     065F                     _Next_floor:	
  6204                           ;psect for function _Next_floor
  6205                           
  6206                           
  6207                           ;main.c: 152:     for(int i=1; i<6;i++){
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _Next_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6211     065F  3001               	movlw	1
  6212     0660  0021               	movlb	1	; select bank1
  6213     0661  00C9               	movwf	Next_floor@i^(0+128)
  6214     0662  3000               	movlw	0
  6215     0663  00CA               	movwf	(Next_floor@i^(0+128)+1)
  6216     0664                     l4683:
  6217                           
  6218                           ;main.c: 153:         int index_ = (index+i)%6;
  6219     0664  3006               	movlw	6
  6220     0665  0021               	movlb	1	; select bank1
  6221     0666  00C0               	movwf	___awmod@divisor^(0+128)
  6222     0667  3000               	movlw	0
  6223     0668  00C1               	movwf	(___awmod@divisor^(0+128)+1)
  6224     0669  0020               	movlb	0	; select bank0
  6225     066A  083E               	movf	_index,w
  6226     066B  0021               	movlb	1	; select bank1
  6227     066C  0749               	addwf	Next_floor@i^(0+128),w
  6228     066D  00C2               	movwf	___awmod@dividend^(0+128)
  6229     066E  084A               	movf	(Next_floor@i+1)^(0+128),w
  6230     066F  1803               	skipnc
  6231     0670  0A4A               	incf	(Next_floor@i+1)^(0+128),w
  6232     0671  00C3               	movwf	(___awmod@dividend^(0+128)+1)
  6233     0672  3185  2597  3186   	fcall	___awmod
  6234     0675  0841               	movf	(?___awmod+1)^(0+128),w
  6235     0676  00C8               	movwf	(Next_floor@index_+1)^(0+128)
  6236     0677  0840               	movf	?___awmod^(0+128),w
  6237     0678  00C7               	movwf	Next_floor@index_^(0+128)
  6238                           
  6239                           ;main.c: 154:         if(route[index_]==1){
  6240     0679  0847               	movf	Next_floor@index_^(0+128),w
  6241     067A  3E27               	addlw	(low (_route| 0))& (0+255)
  6242     067B  0086               	movwf	6
  6243     067C  0187               	clrf	7
  6244     067D  0301               	decf	1,w
  6245     067E  1D03               	btfss	3,2
  6246     067F  2E8C               	goto	l4693
  6247                           
  6248                           ;main.c: 155:         next_floor = FLOORS[index_];
  6249     0680  3022               	movlw	low _FLOORS
  6250     0681  0747               	addwf	Next_floor@index_^(0+128),w
  6251     0682  0084               	movwf	4
  6252     0683  3008               	movlw	high _FLOORS
  6253     0684  3D48               	addwfc	(Next_floor@index_+1)^(0+128),w
  6254     0685  3880               	iorlw	128
  6255     0686  0085               	movwf	5
  6256     0687  0800               	movf	0,w	;code access
  6257     0688  0020               	movlb	0	; select bank0
  6258     0689  00BC               	movwf	_next_floor
  6259     068A                     l4689:
  6260                           
  6261                           ;main.c: 156:         return next_floor;
  6262     068A  083C               	movf	_next_floor,w
  6263     068B  0008               	return
  6264     068C                     l4693:
  6265                           
  6266                           ;main.c: 158:     }
  6267     068C  3001               	movlw	1
  6268     068D  07C9               	addwf	Next_floor@i^(0+128),f
  6269     068E  3000               	movlw	0
  6270     068F  3DCA               	addwfc	(Next_floor@i+1)^(0+128),f
  6271     0690  084A               	movf	(Next_floor@i+1)^(0+128),w
  6272     0691  3A80               	xorlw	128
  6273     0692  00C6               	movwf	??_Next_floor^(0+128)
  6274     0693  3080               	movlw	128
  6275     0694  0246               	subwf	??_Next_floor^(0+128),w
  6276     0695  1D03               	skipz
  6277     0696  2E99               	goto	u3505
  6278     0697  3006               	movlw	6
  6279     0698  0249               	subwf	Next_floor@i^(0+128),w
  6280     0699                     u3505:
  6281     0699  1C03               	skipc
  6282     069A  2E64               	goto	l4683
  6283                           
  6284                           ;main.c: 159:     next_floor = 0;
  6285     069B  0020               	movlb	0	; select bank0
  6286     069C  01BC               	clrf	_next_floor
  6287     069D  2E8A               	goto	l4689
  6288     069E                     __end_of_Next_floor:
  6289                           
  6290                           	psect	text31
  6291     0597                     __ptext31:	
  6292 ;; *************** function ___awmod *****************
  6293 ;; Defined at:
  6294 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  divisor         2    0[BANK1 ] int 
  6297 ;;  dividend        2    2[BANK1 ] int 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  sign            1    5[BANK1 ] unsigned char 
  6300 ;;  counter         1    4[BANK1 ] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  2    0[BANK1 ] int 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0
  6305 ;; Tracked objects:
  6306 ;;		On entry : 1F/1
  6307 ;;		On exit  : 1F/1
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6310 ;;      Params:         0       0       4       0       0       0
  6311 ;;      Locals:         0       0       2       0       0       0
  6312 ;;      Temps:          0       0       0       0       0       0
  6313 ;;      Totals:         0       0       6       0       0       0
  6314 ;;Total ram usage:        6 bytes
  6315 ;; Hardware stack levels used: 1
  6316 ;; Hardware stack levels required when called: 7
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_Next_index
  6321 ;;		_Next_floor
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325     0597                     ___awmod:	
  6326                           ;psect for function ___awmod
  6327                           
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6331     0597  01C5               	clrf	___awmod@sign^(0+128)
  6332     0598  1FC3               	btfss	(___awmod@dividend+1)^(0+128),7
  6333     0599  2DA1               	goto	l4537
  6334     059A  09C2               	comf	___awmod@dividend^(0+128),f
  6335     059B  09C3               	comf	(___awmod@dividend+1)^(0+128),f
  6336     059C  0AC2               	incf	___awmod@dividend^(0+128),f
  6337     059D  1903               	skipnz
  6338     059E  0AC3               	incf	(___awmod@dividend+1)^(0+128),f
  6339     059F  3001               	movlw	1
  6340     05A0  00C5               	movwf	___awmod@sign^(0+128)
  6341     05A1                     l4537:
  6342     05A1  1FC1               	btfss	(___awmod@divisor+1)^(0+128),7
  6343     05A2  2DA8               	goto	l4541
  6344     05A3  09C0               	comf	___awmod@divisor^(0+128),f
  6345     05A4  09C1               	comf	(___awmod@divisor+1)^(0+128),f
  6346     05A5  0AC0               	incf	___awmod@divisor^(0+128),f
  6347     05A6  1903               	skipnz
  6348     05A7  0AC1               	incf	(___awmod@divisor+1)^(0+128),f
  6349     05A8                     l4541:
  6350     05A8  0840               	movf	___awmod@divisor^(0+128),w
  6351     05A9  0441               	iorwf	(___awmod@divisor+1)^(0+128),w
  6352     05AA  1903               	btfsc	3,2
  6353     05AB  2DCD               	goto	l4559
  6354     05AC  3001               	movlw	1
  6355     05AD  00C4               	movwf	___awmod@counter^(0+128)
  6356     05AE                     l4549:
  6357     05AE  1BC1               	btfsc	(___awmod@divisor+1)^(0+128),7
  6358     05AF  2DB8               	goto	l4551
  6359     05B0  3001               	movlw	1
  6360     05B1                     u3355:
  6361     05B1  35C0               	lslf	___awmod@divisor^(0+128),f
  6362     05B2  0DC1               	rlf	(___awmod@divisor+1)^(0+128),f
  6363     05B3  0B89               	decfsz	9,f
  6364     05B4  2DB1               	goto	u3355
  6365     05B5  3001               	movlw	1
  6366     05B6  07C4               	addwf	___awmod@counter^(0+128),f
  6367     05B7  2DAE               	goto	l4549
  6368     05B8                     l4551:
  6369     05B8  0841               	movf	(___awmod@divisor+1)^(0+128),w
  6370     05B9  0243               	subwf	(___awmod@dividend+1)^(0+128),w
  6371     05BA  1D03               	skipz
  6372     05BB  2DBE               	goto	u3375
  6373     05BC  0840               	movf	___awmod@divisor^(0+128),w
  6374     05BD  0242               	subwf	___awmod@dividend^(0+128),w
  6375     05BE                     u3375:
  6376     05BE  1C03               	skipc
  6377     05BF  2DC4               	goto	l4555
  6378     05C0  0840               	movf	___awmod@divisor^(0+128),w
  6379     05C1  02C2               	subwf	___awmod@dividend^(0+128),f
  6380     05C2  0841               	movf	(___awmod@divisor+1)^(0+128),w
  6381     05C3  3BC3               	subwfb	(___awmod@dividend+1)^(0+128),f
  6382     05C4                     l4555:
  6383     05C4  3001               	movlw	1
  6384     05C5                     u3385:
  6385     05C5  36C1               	lsrf	(___awmod@divisor+1)^(0+128),f
  6386     05C6  0CC0               	rrf	___awmod@divisor^(0+128),f
  6387     05C7  0B89               	decfsz	9,f
  6388     05C8  2DC5               	goto	u3385
  6389     05C9  3001               	movlw	1
  6390     05CA  02C4               	subwf	___awmod@counter^(0+128),f
  6391     05CB  1D03               	btfss	3,2
  6392     05CC  2DB8               	goto	l4551
  6393     05CD                     l4559:
  6394     05CD  0845               	movf	___awmod@sign^(0+128),w
  6395     05CE  1903               	btfsc	3,2
  6396     05CF  2DD5               	goto	l4563
  6397     05D0  09C2               	comf	___awmod@dividend^(0+128),f
  6398     05D1  09C3               	comf	(___awmod@dividend+1)^(0+128),f
  6399     05D2  0AC2               	incf	___awmod@dividend^(0+128),f
  6400     05D3  1903               	skipnz
  6401     05D4  0AC3               	incf	(___awmod@dividend+1)^(0+128),f
  6402     05D5                     l4563:
  6403     05D5  0843               	movf	(___awmod@dividend+1)^(0+128),w
  6404     05D6  00C1               	movwf	(?___awmod+1)^(0+128)
  6405     05D7  0842               	movf	___awmod@dividend^(0+128),w
  6406     05D8  00C0               	movwf	?___awmod^(0+128)
  6407     05D9  0008               	return
  6408     05DA                     __end_of___awmod:
  6409                           
  6410                           	psect	text32
  6411     069E                     __ptext32:	
  6412 ;; *************** function _Ini_matrix *****************
  6413 ;; Defined at:
  6414 ;;		line 211 in file "main.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;  i               1   11[BANK1 ] unsigned char 
  6419 ;;  i               1    7[BANK1 ] unsigned char 
  6420 ;;  data            2    8[BANK1 ] unsigned char [2]
  6421 ;;  k               1   10[BANK1 ] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 1F/4
  6428 ;;		On exit  : 1F/1
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6431 ;;      Params:         0       0       0       0       0       0
  6432 ;;      Locals:         0       0       5       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0
  6434 ;;      Totals:         0       0       5       0       0       0
  6435 ;;Total ram usage:        5 bytes
  6436 ;; Hardware stack levels used: 1
  6437 ;; Hardware stack levels required when called: 9
  6438 ;; This function calls:
  6439 ;;		_Tx_spi
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445     069E                     _Ini_matrix:	
  6446                           ;psect for function _Ini_matrix
  6447                           
  6448                           
  6449                           ;main.c: 212:     uint8_t data[2];;main.c: 213:     uint8_t k=0;
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _Ini_matrix: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6453     069E  0021               	movlb	1	; select bank1
  6454     069F  01CA               	clrf	Ini_matrix@k^(0+128)
  6455                           
  6456                           ;main.c: 215:     for(uint8_t i=0;i<6;i++){
  6457     06A0  01C7               	clrf	Ini_matrix@i^(0+128)
  6458     06A1                     l4753:
  6459                           
  6460                           ;main.c: 216:         data[0]= MATRIX_CONFIG[k];
  6461     06A1  084A               	movf	Ini_matrix@k^(0+128),w
  6462     06A2  3E0D               	addlw	low (_MATRIX_CONFIG| (0+32768))
  6463     06A3  0084               	movwf	4
  6464     06A4  3088               	movlw	high (_MATRIX_CONFIG| (0+32768))
  6465     06A5  1803               	skipnc
  6466     06A6  3E01               	addlw	1
  6467     06A7  0085               	movwf	5
  6468     06A8  0800               	movf	0,w	;code access
  6469     06A9  00C8               	movwf	Ini_matrix@data^(0+128)
  6470                           
  6471                           ;main.c: 217:         data[1]= MATRIX_CONFIG[k+1];
  6472     06AA  084A               	movf	Ini_matrix@k^(0+128),w
  6473     06AB  3E0E               	addlw	low ((_MATRIX_CONFIG+1)| (0+32768))
  6474     06AC  0084               	movwf	4
  6475     06AD  3088               	movlw	high ((_MATRIX_CONFIG+1)| (0+32768))
  6476     06AE  1803               	skipnc
  6477     06AF  3E01               	addlw	1
  6478     06B0  0085               	movwf	5
  6479     06B1  0800               	movf	0,w	;code access
  6480     06B2  00C9               	movwf	(Ini_matrix@data^(0+128)+1)
  6481                           
  6482                           ;main.c: 218:         k=k+2;
  6483     06B3  084A               	movf	Ini_matrix@k^(0+128),w
  6484     06B4  3E02               	addlw	2
  6485     06B5  00CA               	movwf	Ini_matrix@k^(0+128)
  6486                           
  6487                           ;main.c: 219:         Tx_spi(data, 2);
  6488     06B6  30C8               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6489     06B7  00C4               	movwf	Tx_spi@data^(0+128)
  6490     06B8  3002               	movlw	2
  6491     06B9  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6492     06BA  3000               	movlw	0
  6493     06BB  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6494     06BC  318D  25CA  3186   	fcall	_Tx_spi
  6495                           
  6496                           ;main.c: 220:     }
  6497     06BF  3001               	movlw	1
  6498     06C0  0021               	movlb	1	; select bank1
  6499     06C1  07C7               	addwf	Ini_matrix@i^(0+128),f
  6500     06C2  3006               	movlw	6
  6501     06C3  0247               	subwf	Ini_matrix@i^(0+128),w
  6502     06C4  1C03               	skipc
  6503     06C5  2EA1               	goto	l4753
  6504                           
  6505                           ;main.c: 222:     data[1] = 0b00000000;
  6506     06C6  01C9               	clrf	(Ini_matrix@data^(0+128)+1)
  6507                           
  6508                           ;main.c: 223:     for(uint8_t i=1;i<9;i++){
  6509     06C7  3001               	movlw	1
  6510     06C8  00CB               	movwf	Ini_matrix@i_1791^(0+128)
  6511     06C9                     l4771:
  6512                           
  6513                           ;main.c: 224:     data[0] = i;
  6514     06C9  084B               	movf	Ini_matrix@i_1791^(0+128),w
  6515     06CA  00C8               	movwf	Ini_matrix@data^(0+128)
  6516                           
  6517                           ;main.c: 225:     Tx_spi(data, 2);
  6518     06CB  30C8               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6519     06CC  00C4               	movwf	Tx_spi@data^(0+128)
  6520     06CD  3002               	movlw	2
  6521     06CE  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6522     06CF  3000               	movlw	0
  6523     06D0  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6524     06D1  318D  25CA  3186   	fcall	_Tx_spi
  6525                           
  6526                           ;main.c: 226:     }
  6527     06D4  3001               	movlw	1
  6528     06D5  0021               	movlb	1	; select bank1
  6529     06D6  07CB               	addwf	Ini_matrix@i_1791^(0+128),f
  6530     06D7  3009               	movlw	9
  6531     06D8  024B               	subwf	Ini_matrix@i_1791^(0+128),w
  6532     06D9  1803               	btfsc	3,0
  6533     06DA  0008               	return
  6534     06DB  2EC9               	goto	l4771
  6535     06DC                     __end_of_Ini_matrix:
  6536                           
  6537                           	psect	text33
  6538     0DFC                     __ptext33:	
  6539 ;; *************** function _Idle *****************
  6540 ;; Defined at:
  6541 ;;		line 190 in file "main.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 1F/2
  6552 ;;		On exit  : 18/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6555 ;;      Params:         0       0       0       0       0       0
  6556 ;;      Locals:         0       0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0       0
  6558 ;;      Totals:         0       0       0       0       0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used: 1
  6561 ;; Hardware stack levels required when called: 11
  6562 ;; This function calls:
  6563 ;;		_Motor_Turn_Off
  6564 ;;		_Motor_Turn_On
  6565 ;; This function is called by:
  6566 ;;		_main
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570     0DFC                     _Idle:	
  6571                           ;psect for function _Idle
  6572                           
  6573                           
  6574                           ;main.c: 191:   idle = 1;
  6575                           
  6576                           ;incstack = 0
  6577                           ; Regs used in _Idle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6578     0DFC  3001               	movlw	1
  6579     0DFD  0020               	movlb	0	; select bank0
  6580     0DFE  00BA               	movwf	_idle
  6581                           
  6582                           ;main.c: 192:   var.D =0;
  6583     0DFF  300F               	movlw	-241
  6584     0E00  05A0               	andwf	_var,f
  6585                           
  6586                           ;main.c: 193:   if(current_floor == 0){
  6587     0E01  083D               	movf	_current_floor,w
  6588     0E02  1D03               	btfss	3,2
  6589     0E03  2E0B               	goto	l948
  6590                           
  6591                           ;main.c: 194:       LATAbits.LATA7 = 1;
  6592     0E04  0022               	movlb	2	; select bank2
  6593     0E05  178C               	bsf	12,7	;volatile
  6594                           
  6595                           ;main.c: 195:       Motor_Turn_Off();
  6596     0E06  318C  24F7         	fcall	_Motor_Turn_Off
  6597                           
  6598                           ;main.c: 196:       index = 0;
  6599     0E08  0020               	movlb	0	; select bank0
  6600     0E09  01BE               	clrf	_index
  6601                           
  6602                           ;main.c: 197:     }
  6603     0E0A  0008               	return
  6604     0E0B                     l948:	
  6605                           ;main.c: 198:   else{
  6606                           
  6607                           
  6608                           ;main.c: 199:       LATAbits.LATA7 = 0;
  6609     0E0B  0022               	movlb	2	; select bank2
  6610     0E0C  138C               	bcf	12,7	;volatile
  6611                           
  6612                           ;main.c: 200:       Motor_Turn_On();
  6613     0E0D  318D  2558         	fcall	_Motor_Turn_On
  6614     0E0F  0008               	return
  6615     0E10                     __end_of_Idle:
  6616                           
  6617                           	psect	text34
  6618     0D58                     __ptext34:	
  6619 ;; *************** function _Motor_Turn_On *****************
  6620 ;; Defined at:
  6621 ;;		line 12 in file "main.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 1F/2
  6632 ;;		On exit  : 18/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6635 ;;      Params:         0       0       0       0       0       0
  6636 ;;      Locals:         0       0       0       0       0       0
  6637 ;;      Temps:          0       0       0       0       0       0
  6638 ;;      Totals:         0       0       0       0       0       0
  6639 ;;Total ram usage:        0 bytes
  6640 ;; Hardware stack levels used: 1
  6641 ;; Hardware stack levels required when called: 10
  6642 ;; This function calls:
  6643 ;;		_Matrix_update_dir
  6644 ;; This function is called by:
  6645 ;;		_Start
  6646 ;;		_Idle
  6647 ;;		_main
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651     0D58                     _Motor_Turn_On:	
  6652                           ;psect for function _Motor_Turn_On
  6653                           
  6654                           
  6655                           ;main.c: 13:     if(CCP3CONbits.CCP3M != 0x0C){
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _Motor_Turn_On: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6659     0D58  0026               	movlb	6	; select bank6
  6660     0D59  0813               	movf	19,w	;volatile
  6661     0D5A  390F               	andlw	15
  6662     0D5B  3A0C               	xorlw	12
  6663     0D5C  1903               	skipnz
  6664     0D5D  0008               	return
  6665                           
  6666                           ;main.c: 14:         CCP3CONbits.CCP3M = 0x0C;
  6667     0D5E  0813               	movf	19,w	;volatile
  6668     0D5F  39F0               	andlw	-16
  6669     0D60  380C               	iorlw	12
  6670     0D61  0093               	movwf	19	;volatile
  6671                           
  6672                           ;main.c: 15:         Matrix_update_dir();
  6673     0D62  3183  23FA         	fcall	_Matrix_update_dir
  6674     0D64  0008               	return
  6675     0D65                     __end_of_Motor_Turn_On:
  6676                           
  6677                           	psect	text35
  6678     0CF7                     __ptext35:	
  6679 ;; *************** function _Motor_Turn_Off *****************
  6680 ;; Defined at:
  6681 ;;		line 5 in file "main.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      void 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 18/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6695 ;;      Params:         0       0       0       0       0       0
  6696 ;;      Locals:         0       0       0       0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0
  6698 ;;      Totals:         0       0       0       0       0       0
  6699 ;;Total ram usage:        0 bytes
  6700 ;; Hardware stack levels used: 1
  6701 ;; Hardware stack levels required when called: 10
  6702 ;; This function calls:
  6703 ;;		_Matrix_update_dir
  6704 ;; This function is called by:
  6705 ;;		_Start
  6706 ;;		_Idle
  6707 ;;		_main
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711     0CF7                     _Motor_Turn_Off:	
  6712                           ;psect for function _Motor_Turn_Off
  6713                           
  6714                           
  6715                           ;main.c: 6:     if(CCP3CONbits.CCP3M != 0x00){
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _Motor_Turn_Off: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6719     0CF7  0026               	movlb	6	; select bank6
  6720     0CF8  0813               	movf	19,w	;volatile
  6721     0CF9  390F               	andlw	15
  6722     0CFA  3A00               	xorlw	0
  6723     0CFB  1903               	skipnz
  6724     0CFC  0008               	return
  6725                           
  6726                           ;main.c: 7:         CCP3CONbits.CCP3M = 0x00;
  6727     0CFD  30F0               	movlw	-16
  6728     0CFE  0593               	andwf	19,f	;volatile
  6729                           
  6730                           ;main.c: 8:         Matrix_update_dir();
  6731     0CFF  3183  23FA         	fcall	_Matrix_update_dir
  6732     0D01  0008               	return
  6733     0D02                     __end_of_Motor_Turn_Off:
  6734                           
  6735                           	psect	text36
  6736     03FA                     __ptext36:	
  6737 ;; *************** function _Matrix_update_dir *****************
  6738 ;; Defined at:
  6739 ;;		line 239 in file "main.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;		None
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;  i               1   16[BANK1 ] unsigned char 
  6744 ;;  i               2   17[BANK1 ] int 
  6745 ;;  route_          4    8[BANK1 ] _Bool [4]
  6746 ;;  data            2   14[BANK1 ] unsigned char [2]
  6747 ;;  display_dir     1   13[BANK1 ] unsigned char 
  6748 ;;  mask            1   12[BANK1 ] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 1F/6
  6755 ;;		On exit  : 1F/1
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6758 ;;      Params:         0       0       0       0       0       0
  6759 ;;      Locals:         0       0      11       0       0       0
  6760 ;;      Temps:          0       0       1       0       0       0
  6761 ;;      Totals:         0       0      12       0       0       0
  6762 ;;Total ram usage:       12 bytes
  6763 ;; Hardware stack levels used: 1
  6764 ;; Hardware stack levels required when called: 9
  6765 ;; This function calls:
  6766 ;;		_Tx_spi
  6767 ;;		___bmul
  6768 ;; This function is called by:
  6769 ;;		_Motor_Turn_Off
  6770 ;;		_Motor_Turn_On
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774     03FA                     _Matrix_update_dir:	
  6775                           ;psect for function _Matrix_update_dir
  6776                           
  6777                           
  6778                           ;main.c: 240:     uint8_t data[2];;main.c: 241:     uint8_t display_dir;;main.c: 243:   
      +                            _Bool route_[4];;main.c: 244:     route_[0] = route[0];
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in _Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6782     03FA  0020               	movlb	0	; select bank0
  6783     03FB  0827               	movf	_route,w
  6784     03FC  0021               	movlb	1	; select bank1
  6785     03FD  00C8               	movwf	Matrix_update_dir@route_^(0+128)
  6786                           
  6787                           ;main.c: 245:     route_[1] = route[1] | route[5];
  6788     03FE  0020               	movlb	0	; select bank0
  6789     03FF  0828               	movf	_route+1,w
  6790     0400  042C               	iorwf	_route+5,w
  6791     0401  0021               	movlb	1	; select bank1
  6792     0402  00C9               	movwf	(Matrix_update_dir@route_^(0+128)+1)
  6793                           
  6794                           ;main.c: 246:     route_[2] = route[2] | route[4];
  6795     0403  0020               	movlb	0	; select bank0
  6796     0404  0829               	movf	_route+2,w
  6797     0405  042B               	iorwf	_route+4,w
  6798     0406  0021               	movlb	1	; select bank1
  6799     0407  00CA               	movwf	(Matrix_update_dir@route_^(0+128)+2)
  6800                           
  6801                           ;main.c: 247:     route_[3] = route[3];
  6802     0408  0020               	movlb	0	; select bank0
  6803     0409  082A               	movf	_route+3,w
  6804     040A  0021               	movlb	1	; select bank1
  6805     040B  00CB               	movwf	(Matrix_update_dir@route_^(0+128)+3)
  6806                           
  6807                           ;main.c: 249:     uint8_t mask = 0;
  6808     040C  01CC               	clrf	Matrix_update_dir@mask^(0+128)
  6809                           
  6810                           ;main.c: 251:     for (int i = 0; i < 4; i++) {
  6811     040D  01D1               	clrf	Matrix_update_dir@i^(0+128)
  6812     040E  01D2               	clrf	(Matrix_update_dir@i+1)^(0+128)
  6813     040F                     l4129:
  6814                           
  6815                           ;main.c: 252:         if (route_[i]) mask |= (1 << i);
  6816     040F  0021               	movlb	1	; select bank1
  6817     0410  0851               	movf	Matrix_update_dir@i^(0+128),w
  6818     0411  3EC8               	addlw	(low (Matrix_update_dir@route_| 0))& (0+255)
  6819     0412  0086               	movwf	6
  6820     0413  0187               	clrf	7
  6821     0414  0801               	movf	1,w
  6822     0415  1903               	btfsc	3,2
  6823     0416  2C20               	goto	l4133
  6824     0417  3001               	movlw	1
  6825     0418  00C7               	movwf	??_Matrix_update_dir^(0+128)
  6826     0419  0A51               	incf	Matrix_update_dir@i^(0+128),w
  6827     041A  2C1C               	goto	u3024
  6828     041B                     u3025:
  6829     041B  35C7               	lslf	??_Matrix_update_dir^(0+128),f
  6830     041C                     u3024:
  6831     041C  0B89               	decfsz	9,f
  6832     041D  2C1B               	goto	u3025
  6833     041E  0847               	movf	??_Matrix_update_dir^(0+128),w
  6834     041F  04CC               	iorwf	Matrix_update_dir@mask^(0+128),f
  6835     0420                     l4133:
  6836                           
  6837                           ;main.c: 253:     }
  6838     0420  3001               	movlw	1
  6839     0421  07D1               	addwf	Matrix_update_dir@i^(0+128),f
  6840     0422  3000               	movlw	0
  6841     0423  3DD2               	addwfc	(Matrix_update_dir@i+1)^(0+128),f
  6842     0424  0852               	movf	(Matrix_update_dir@i+1)^(0+128),w
  6843     0425  3A80               	xorlw	128
  6844     0426  00C7               	movwf	??_Matrix_update_dir^(0+128)
  6845     0427  3080               	movlw	128
  6846     0428  0247               	subwf	??_Matrix_update_dir^(0+128),w
  6847     0429  1D03               	skipz
  6848     042A  2C2D               	goto	u3035
  6849     042B  3004               	movlw	4
  6850     042C  0251               	subwf	Matrix_update_dir@i^(0+128),w
  6851     042D                     u3035:
  6852     042D  1C03               	skipc
  6853     042E  2C0F               	goto	l4129
  6854                           
  6855                           ;main.c: 255:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
  6856     042F  0026               	movlb	6	; select bank6
  6857     0430  0813               	movf	19,w	;volatile
  6858     0431  390F               	andlw	15
  6859     0432  3A00               	xorlw	0
  6860     0433  1D03               	skipz
  6861     0434  2C38               	goto	l4141
  6862     0435  3006               	movlw	6
  6863     0436  0021               	movlb	1	; select bank1
  6864     0437  2C42               	goto	L1
  6865     0438                     l4141:
  6866     0438  3003               	movlw	3
  6867     0439  0021               	movlb	1	; select bank1
  6868     043A  00C0               	movwf	___bmul@multiplicand^(0+128)
  6869     043B  0022               	movlb	2	; select bank2
  6870     043C  0D0C               	rlf	12,w	;volatile
  6871     043D  0D0C               	rlf	12,w	;volatile
  6872     043E  3901               	andlw	1
  6873     043F  318D  25DA  3183   	fcall	___bmul
  6874     0442                     L1:
  6875     0442  00CD               	movwf	Matrix_update_dir@display_dir^(0+128)
  6876                           
  6877                           ;main.c: 257:     data[0] = 1;
  6878     0443  3001               	movlw	1
  6879     0444  00CE               	movwf	Matrix_update_dir@data^(0+128)
  6880                           
  6881                           ;main.c: 258:     data[1] = MATRIX_DIR[display_dir] | mask;
  6882     0445  084D               	movf	Matrix_update_dir@display_dir^(0+128),w
  6883     0446  3E19               	addlw	low (_MATRIX_DIR| (0+32768))
  6884     0447  0084               	movwf	4
  6885     0448  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6886     0449  1803               	skipnc
  6887     044A  3E01               	addlw	1
  6888     044B  0085               	movwf	5
  6889     044C  0800               	movf	0,w	;code access
  6890     044D  044C               	iorwf	Matrix_update_dir@mask^(0+128),w
  6891     044E  00CF               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6892                           
  6893                           ;main.c: 259:     Tx_spi(data, 2);
  6894     044F  30CE               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6895     0450  00C4               	movwf	Tx_spi@data^(0+128)
  6896     0451  3002               	movlw	2
  6897     0452  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6898     0453  3000               	movlw	0
  6899     0454  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6900     0455  318D  25CA  3183   	fcall	_Tx_spi
  6901                           
  6902                           ;main.c: 260:     display_dir++;
  6903     0458  3001               	movlw	1
  6904     0459  0021               	movlb	1	; select bank1
  6905     045A  07CD               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6906                           
  6907                           ;main.c: 262:     for(uint8_t i=2;i<=3;i++){
  6908     045B  3002               	movlw	2
  6909     045C  00D0               	movwf	Matrix_update_dir@i_1802^(0+128)
  6910     045D                     l4157:
  6911                           
  6912                           ;main.c: 263:         data[0] = i;
  6913     045D  0850               	movf	Matrix_update_dir@i_1802^(0+128),w
  6914     045E  00CE               	movwf	Matrix_update_dir@data^(0+128)
  6915                           
  6916                           ;main.c: 264:         data[1] = MATRIX_DIR[display_dir];
  6917     045F  084D               	movf	Matrix_update_dir@display_dir^(0+128),w
  6918     0460  3E19               	addlw	low (_MATRIX_DIR| (0+32768))
  6919     0461  0084               	movwf	4
  6920     0462  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6921     0463  1803               	skipnc
  6922     0464  3E01               	addlw	1
  6923     0465  0085               	movwf	5
  6924     0466  0800               	movf	0,w	;code access
  6925     0467  00CF               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6926                           
  6927                           ;main.c: 265:         Tx_spi(data, 2);
  6928     0468  30CE               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6929     0469  00C4               	movwf	Tx_spi@data^(0+128)
  6930     046A  3002               	movlw	2
  6931     046B  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6932     046C  3000               	movlw	0
  6933     046D  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6934     046E  318D  25CA  3183   	fcall	_Tx_spi
  6935                           
  6936                           ;main.c: 266:         display_dir++;
  6937     0471  3001               	movlw	1
  6938     0472  0021               	movlb	1	; select bank1
  6939     0473  07CD               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6940                           
  6941                           ;main.c: 268:     }
  6942     0474  3001               	movlw	1
  6943     0475  07D0               	addwf	Matrix_update_dir@i_1802^(0+128),f
  6944     0476  3004               	movlw	4
  6945     0477  0250               	subwf	Matrix_update_dir@i_1802^(0+128),w
  6946     0478  1803               	btfsc	3,0
  6947     0479  0008               	return
  6948     047A  2C5D               	goto	l4157
  6949     047B                     __end_of_Matrix_update_dir:
  6950                           
  6951                           	psect	text37
  6952     0DDA                     __ptext37:	
  6953 ;; *************** function ___bmul *****************
  6954 ;; Defined at:
  6955 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;  multiplier      1    wreg     unsigned char 
  6958 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  multiplier      1    2[BANK1 ] unsigned char 
  6961 ;;  product         1    1[BANK1 ] unsigned char 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      unsigned char 
  6964 ;; Registers used:
  6965 ;;		wreg, status,2, status,0
  6966 ;; Tracked objects:
  6967 ;;		On entry : 1F/2
  6968 ;;		On exit  : 1F/1
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6971 ;;      Params:         0       0       1       0       0       0
  6972 ;;      Locals:         0       0       2       0       0       0
  6973 ;;      Temps:          0       0       0       0       0       0
  6974 ;;      Totals:         0       0       3       0       0       0
  6975 ;;Total ram usage:        3 bytes
  6976 ;; Hardware stack levels used: 1
  6977 ;; Hardware stack levels required when called: 7
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_Matrix_update_dir
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985     0DDA                     ___bmul:	
  6986                           ;psect for function ___bmul
  6987                           
  6988                           
  6989                           ;incstack = 0
  6990                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6991                           ;___bmul@multiplier stored from wreg
  6992     0DDA  0021               	movlb	1	; select bank1
  6993     0DDB  00C2               	movwf	___bmul@multiplier^(0+128)
  6994     0DDC  01C1               	clrf	___bmul@product^(0+128)
  6995     0DDD                     l4069:
  6996     0DDD  1C42               	btfss	___bmul@multiplier^(0+128),0
  6997     0DDE  2DE1               	goto	l4073
  6998     0DDF  0840               	movf	___bmul@multiplicand^(0+128),w
  6999     0DE0  07C1               	addwf	___bmul@product^(0+128),f
  7000     0DE1                     l4073:
  7001     0DE1  1003               	clrc
  7002     0DE2  0DC0               	rlf	___bmul@multiplicand^(0+128),f
  7003     0DE3  1003               	clrc
  7004     0DE4  0CC2               	rrf	___bmul@multiplier^(0+128),f
  7005     0DE5  0842               	movf	___bmul@multiplier^(0+128),w
  7006     0DE6  1D03               	btfss	3,2
  7007     0DE7  2DDD               	goto	l4069
  7008     0DE8  0841               	movf	___bmul@product^(0+128),w
  7009     0DE9  0008               	return
  7010     0DEA                     __end_of___bmul:
  7011                           
  7012                           	psect	text38
  7013     0DCA                     __ptext38:	
  7014 ;; *************** function _Tx_spi *****************
  7015 ;; Defined at:
  7016 ;;		line 204 in file "main.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  data            1    4[BANK1 ] PTR unsigned char 
  7019 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  7020 ;;  dataSize        2    5[BANK1 ] unsigned int 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 1F/1
  7029 ;;		On exit  : 1F/2
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7032 ;;      Params:         0       0       3       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0
  7035 ;;      Totals:         0       0       3       0       0       0
  7036 ;;Total ram usage:        3 bytes
  7037 ;; Hardware stack levels used: 1
  7038 ;; Hardware stack levels required when called: 8
  7039 ;; This function calls:
  7040 ;;		_SPI1_ExchangeBlock
  7041 ;; This function is called by:
  7042 ;;		_Ini_matrix
  7043 ;;		_Matrix_update_floor
  7044 ;;		_Matrix_update_dir
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048     0DCA                     _Tx_spi:	
  7049                           ;psect for function _Tx_spi
  7050                           
  7051                           
  7052                           ;main.c: 205:     LATBbits.LATB1 = 0;
  7053                           
  7054                           ;incstack = 0
  7055                           ; Regs used in _Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7056     0DCA  0022               	movlb	2	; select bank2
  7057     0DCB  108D               	bcf	13,1	;volatile
  7058                           
  7059                           ;main.c: 206:     __nop();
  7060     0DCC  0000               	nop
  7061                           
  7062                           ;main.c: 207:     __nop();
  7063     0DCD  0000               	nop
  7064                           
  7065                           ;main.c: 208:     SPI1_ExchangeBlock(data,dataSize);
  7066     0DCE  0021               	movlb	1	; select bank1
  7067     0DCF  0844               	movf	Tx_spi@data^(0+128),w
  7068     0DD0  00C0               	movwf	SPI1_ExchangeBlock@block^(0+128)
  7069     0DD1  0846               	movf	(Tx_spi@dataSize+1)^(0+128),w
  7070     0DD2  00C2               	movwf	(SPI1_ExchangeBlock@blockSize+1)^(0+128)
  7071     0DD3  0845               	movf	Tx_spi@dataSize^(0+128),w
  7072     0DD4  00C1               	movwf	SPI1_ExchangeBlock@blockSize^(0+128)
  7073     0DD5  318F  2708         	fcall	_SPI1_ExchangeBlock
  7074                           
  7075                           ;main.c: 209:     LATBbits.LATB1 = 1;
  7076     0DD7  0022               	movlb	2	; select bank2
  7077     0DD8  148D               	bsf	13,1	;volatile
  7078     0DD9  0008               	return
  7079     0DDA                     __end_of_Tx_spi:
  7080                           
  7081                           	psect	text39
  7082     0F08                     __ptext39:	
  7083 ;; *************** function _SPI1_ExchangeBlock *****************
  7084 ;; Defined at:
  7085 ;;		line 100 in file "mcc_generated_files/spi1.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  block           1    0[BANK1 ] PTR void 
  7088 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  7089 ;;  blockSize       2    1[BANK1 ] unsigned int 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  data            1    3[BANK1 ] PTR unsigned char 
  7092 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7097 ;; Tracked objects:
  7098 ;;		On entry : 1F/1
  7099 ;;		On exit  : 1F/1
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7102 ;;      Params:         0       0       3       0       0       0
  7103 ;;      Locals:         0       0       1       0       0       0
  7104 ;;      Temps:          0       0       0       0       0       0
  7105 ;;      Totals:         0       0       4       0       0       0
  7106 ;;Total ram usage:        4 bytes
  7107 ;; Hardware stack levels used: 1
  7108 ;; Hardware stack levels required when called: 7
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		_Tx_spi
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116     0F08                     _SPI1_ExchangeBlock:	
  7117                           ;psect for function _SPI1_ExchangeBlock
  7118                           
  7119                           
  7120                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
  7121                           
  7122                           ;incstack = 0
  7123                           ; Regs used in _SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
  7124     0F08  0840               	movf	SPI1_ExchangeBlock@block^(0+128),w
  7125     0F09  00C3               	movwf	SPI1_ExchangeBlock@data^(0+128)
  7126     0F0A                     l4053:	
  7127                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  7128                           
  7129                           
  7130                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  7131     0F0A  3001               	movlw	1
  7132     0F0B  02C1               	subwf	SPI1_ExchangeBlock@blockSize^(0+128),f
  7133     0F0C  3000               	movlw	0
  7134     0F0D  3BC2               	subwfb	(SPI1_ExchangeBlock@blockSize+1)^(0+128),f
  7135     0F0E  0A41               	incf	SPI1_ExchangeBlock@blockSize^(0+128),w
  7136     0F0F  1903               	btfsc	3,2
  7137     0F10  0A42               	incf	(SPI1_ExchangeBlock@blockSize+1)^(0+128),w
  7138     0F11  1903               	btfsc	3,2
  7139     0F12  0008               	return
  7140                           
  7141                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
  7142     0F13  0843               	movf	SPI1_ExchangeBlock@data^(0+128),w
  7143     0F14  0086               	movwf	6
  7144     0F15  0187               	clrf	7
  7145     0F16  0801               	movf	1,w
  7146     0F17  0024               	movlb	4	; select bank4
  7147     0F18  0091               	movwf	17	;volatile
  7148     0F19                     l484:	
  7149                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
  7150                           
  7151     0F19  0020               	movlb	0	; select bank0
  7152     0F1A  1991               	btfsc	17,3	;volatile
  7153     0F1B  2F1F               	goto	l486
  7154     0F1C  0022               	movlb	2	; select bank2
  7155     0F1D  108D               	bcf	13,1	;volatile
  7156     0F1E  2F19               	goto	l484
  7157     0F1F                     l486:
  7158                           
  7159                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
  7160     0F1F  1191               	bcf	17,3	;volatile
  7161                           
  7162                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
  7163     0F20  0021               	movlb	1	; select bank1
  7164     0F21  0843               	movf	SPI1_ExchangeBlock@data^(0+128),w
  7165     0F22  0086               	movwf	6
  7166     0F23  0187               	clrf	7
  7167     0F24  0024               	movlb	4	; select bank4
  7168     0F25  0811               	movf	17,w	;volatile
  7169     0F26  0081               	movwf	1
  7170     0F27  3001               	movlw	1
  7171     0F28  0021               	movlb	1	; select bank1
  7172     0F29  07C3               	addwf	SPI1_ExchangeBlock@data^(0+128),f
  7173     0F2A  2F0A               	goto	l4053
  7174     0F2B                     __end_of_SPI1_ExchangeBlock:
  7175                           
  7176                           	psect	intentry
  7177     0004                     __pintentry:	
  7178 ;; *************** function _INTERRUPT_InterruptManager *****************
  7179 ;; Defined at:
  7180 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;		None
  7183 ;; Auto vars:     Size  Location     Type
  7184 ;;		None
  7185 ;; Return value:  Size  Location     Type
  7186 ;;                  1    wreg      void 
  7187 ;; Registers used:
  7188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7194 ;;      Params:         0       0       0       0       0       0
  7195 ;;      Locals:         0       0       0       0       0       0
  7196 ;;      Temps:          0       0       0       0       0       0
  7197 ;;      Totals:         0       0       0       0       0       0
  7198 ;;Total ram usage:        0 bytes
  7199 ;; Hardware stack levels used: 1
  7200 ;; Hardware stack levels required when called: 6
  7201 ;; This function calls:
  7202 ;;		NULL
  7203 ;;		_ADC_ISR
  7204 ;;		_CMP1_ISR
  7205 ;;		_CMP2_ISR
  7206 ;;		_EUSART_Receive_ISR
  7207 ;;		_PIN_MANAGER_IOC
  7208 ;;		_Read_UART
  7209 ;;		_TMR1_ISR
  7210 ;; This function is called by:
  7211 ;;		Interrupt level 1
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215     0004                     _INTERRUPT_InterruptManager:
  7216                           
  7217                           ;incstack = 0
  7218     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7219                           
  7220                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7221     0005  3180               	pagesel	$
  7222                           
  7223                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  7224     0006  198B               	btfsc	11,3	;volatile
  7225     0007  1C0B               	btfss	11,0	;volatile
  7226     0008  280C               	goto	i1l4785
  7227                           
  7228                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  7229     0009  318C  24E1  3180   	fcall	_PIN_MANAGER_IOC
  7230     000C                     i1l4785:
  7231                           
  7232                           ;mcc_generated_files/interrupt_manager.c: 59:     if(INTCONbits.PEIE == 1)
  7233     000C  1F0B               	btfss	11,6	;volatile
  7234     000D  283D               	goto	i1l279
  7235                           
  7236                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7237     000E  0021               	movlb	1	; select bank1
  7238     000F  1F11               	btfss	17,6	;volatile
  7239     0010  2817               	goto	i1l4793
  7240     0011  0020               	movlb	0	; select bank0
  7241     0012  1F11               	btfss	17,6	;volatile
  7242     0013  2817               	goto	i1l4793
  7243                           
  7244                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             ADC_ISR();
  7245     0014  318D  250D  3180   	fcall	_ADC_ISR
  7246     0017                     i1l4793:
  7247                           
  7248                           ;mcc_generated_files/interrupt_manager.c: 65:         if(PIE1bits.RCIE == 1 && PIR1bits.
      +                          RCIF == 1)
  7249     0017  0021               	movlb	1	; select bank1
  7250     0018  1E91               	btfss	17,5	;volatile
  7251     0019  2823               	goto	i1l4799
  7252     001A  0020               	movlb	0	; select bank0
  7253     001B  1E91               	btfss	17,5	;volatile
  7254     001C  2823               	goto	i1l4799
  7255                           
  7256                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
  7257     001D  0021               	movlb	1	; select bank1
  7258     001E  0862               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  7259     001F  008A               	movwf	10
  7260     0020  0861               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  7261     0021  000A               	callw
  7262     0022  3180               	pagesel	$
  7263     0023                     i1l4799:
  7264                           
  7265                           ;mcc_generated_files/interrupt_manager.c: 69:         if(PIE2bits.C1IE == 1 && PIR2bits.
      +                          C1IF == 1)
  7266     0023  0021               	movlb	1	; select bank1
  7267     0024  1E92               	btfss	18,5	;volatile
  7268     0025  282C               	goto	i1l4805
  7269     0026  0020               	movlb	0	; select bank0
  7270     0027  1E92               	btfss	18,5	;volatile
  7271     0028  282C               	goto	i1l4805
  7272                           
  7273                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             CMP1_ISR();
  7274     0029  318C  24BB  3180   	fcall	_CMP1_ISR
  7275     002C                     i1l4805:
  7276                           
  7277                           ;mcc_generated_files/interrupt_manager.c: 73:         if(PIE2bits.C2IE == 1 && PIR2bits.
      +                          C2IF == 1)
  7278     002C  0021               	movlb	1	; select bank1
  7279     002D  1F12               	btfss	18,6	;volatile
  7280     002E  2835               	goto	i1l4811
  7281     002F  0020               	movlb	0	; select bank0
  7282     0030  1F12               	btfss	18,6	;volatile
  7283     0031  2835               	goto	i1l4811
  7284                           
  7285                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             CMP2_ISR();
  7286     0032  318C  24C4  3180   	fcall	_CMP2_ISR
  7287     0035                     i1l4811:
  7288                           
  7289                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1)
  7290     0035  0021               	movlb	1	; select bank1
  7291     0036  1C11               	btfss	17,0	;volatile
  7292     0037  283D               	goto	i1l279
  7293     0038  0020               	movlb	0	; select bank0
  7294     0039  1C11               	btfss	17,0	;volatile
  7295     003A  283D               	goto	i1l279
  7296                           
  7297                           ;mcc_generated_files/interrupt_manager.c: 78:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 79:             TMR1_ISR();
  7298     003B  318E  263C         	fcall	_TMR1_ISR
  7299     003D                     i1l279:
  7300     003D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7301     003E  0009               	retfie
  7302     003F                     __end_of_INTERRUPT_InterruptManager:
  7303                           
  7304                           	psect	text41
  7305     0E3C                     __ptext41:	
  7306 ;; *************** function _TMR1_ISR *****************
  7307 ;; Defined at:
  7308 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;		None
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 1F/0
  7319 ;;		On exit  : 1F/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7322 ;;      Params:         0       0       0       0       0       0
  7323 ;;      Locals:         0       0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0
  7325 ;;      Totals:         0       0       0       0       0       0
  7326 ;;Total ram usage:        0 bytes
  7327 ;; Hardware stack levels used: 1
  7328 ;; Hardware stack levels required when called: 4
  7329 ;; This function calls:
  7330 ;;		_TMR1_CallBack
  7331 ;;		_TMR1_WriteTimer
  7332 ;; This function is called by:
  7333 ;;		_INTERRUPT_InterruptManager
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337     0E3C                     _TMR1_ISR:	
  7338                           ;psect for function _TMR1_ISR
  7339                           
  7340                           
  7341                           ;mcc_generated_files/tmr1.c: 159:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr1.c: 162:     PIR1bits.TMR1IF = 0;
  7342                           
  7343                           ;incstack = 0
  7344                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7345     0E3C  1011               	bcf	17,0	;volatile
  7346                           
  7347                           ;mcc_generated_files/tmr1.c: 163:     TMR1_WriteTimer(timer1ReloadVal);
  7348     0E3D  0830               	movf	_timer1ReloadVal+1,w	;volatile
  7349     0E3E  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7350     0E3F  082F               	movf	_timer1ReloadVal,w	;volatile
  7351     0E40  00F0               	movwf	TMR1_WriteTimer@timerVal
  7352     0E41  318D  2580  318E   	fcall	_TMR1_WriteTimer
  7353                           
  7354                           ;mcc_generated_files/tmr1.c: 166:     if (++CountCallBack >= 10)
  7355     0E44  3001               	movlw	1
  7356     0E45  07AD               	addwf	TMR1_ISR@CountCallBack,f	;volatile
  7357     0E46  3000               	movlw	0
  7358     0E47  3DAE               	addwfc	TMR1_ISR@CountCallBack+1,f	;volatile
  7359     0E48  3000               	movlw	0
  7360     0E49  022E               	subwf	TMR1_ISR@CountCallBack+1,w	;volatile
  7361     0E4A  300A               	movlw	10
  7362     0E4B  1903               	skipnz
  7363     0E4C  022D               	subwf	TMR1_ISR@CountCallBack,w	;volatile
  7364     0E4D  1C03               	skipc
  7365     0E4E  0008               	return
  7366                           
  7367                           ;mcc_generated_files/tmr1.c: 167:     {;mcc_generated_files/tmr1.c: 169:         TMR1_Ca
      +                          llBack();
  7368     0E4F  318C  24EC         	fcall	_TMR1_CallBack
  7369                           
  7370                           ;mcc_generated_files/tmr1.c: 172:         CountCallBack = 0;
  7371     0E51  0020               	movlb	0	; select bank0
  7372     0E52  01AD               	clrf	TMR1_ISR@CountCallBack	;volatile
  7373     0E53  01AE               	clrf	TMR1_ISR@CountCallBack+1	;volatile
  7374     0E54  0008               	return
  7375     0E55                     __end_of_TMR1_ISR:
  7376                           
  7377                           	psect	text42
  7378     0D80                     __ptext42:	
  7379 ;; *************** function _TMR1_WriteTimer *****************
  7380 ;; Defined at:
  7381 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  timerVal        2    0[COMMON] unsigned short 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;		None
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg
  7390 ;; Tracked objects:
  7391 ;;		On entry : 1F/0
  7392 ;;		On exit  : 1F/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7395 ;;      Params:         2       0       0       0       0       0
  7396 ;;      Locals:         0       0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0
  7398 ;;      Totals:         2       0       0       0       0       0
  7399 ;;Total ram usage:        2 bytes
  7400 ;; Hardware stack levels used: 1
  7401 ;; This function calls:
  7402 ;;		Nothing
  7403 ;; This function is called by:
  7404 ;;		_TMR1_ISR
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408     0D80                     _TMR1_WriteTimer:	
  7409                           ;psect for function _TMR1_WriteTimer
  7410                           
  7411                           
  7412                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  7413                           
  7414                           ;incstack = 0
  7415                           ; Regs used in _TMR1_WriteTimer: [wreg]
  7416     0D80  1D18               	btfss	24,2	;volatile
  7417     0D81  2D89               	goto	i1l3549
  7418                           
  7419                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7420     0D82  1018               	bcf	24,0	;volatile
  7421                           
  7422                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  7423     0D83  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7424     0D84  0097               	movwf	23	;volatile
  7425                           
  7426                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  7427     0D85  0870               	movf	TMR1_WriteTimer@timerVal,w
  7428     0D86  0096               	movwf	22	;volatile
  7429                           
  7430                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7431     0D87  1418               	bsf	24,0	;volatile
  7432                           
  7433                           ;mcc_generated_files/tmr1.c: 133:     }
  7434     0D88  0008               	return
  7435     0D89                     i1l3549:
  7436                           
  7437                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  7438     0D89  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7439     0D8A  0097               	movwf	23	;volatile
  7440                           
  7441                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  7442     0D8B  0870               	movf	TMR1_WriteTimer@timerVal,w
  7443     0D8C  0096               	movwf	22	;volatile
  7444     0D8D  0008               	return
  7445     0D8E                     __end_of_TMR1_WriteTimer:
  7446                           
  7447                           	psect	text43
  7448     0CEC                     __ptext43:	
  7449 ;; *************** function _TMR1_CallBack *****************
  7450 ;; Defined at:
  7451 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 1F/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7465 ;;      Params:         0       0       0       0       0       0
  7466 ;;      Locals:         0       0       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0
  7468 ;;      Totals:         0       0       0       0       0       0
  7469 ;;Total ram usage:        0 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 3
  7472 ;; This function calls:
  7473 ;;		NULL
  7474 ;;		_TMR1_DefaultInterruptHandler
  7475 ;;		_Write_UART
  7476 ;; This function is called by:
  7477 ;;		_TMR1_ISR
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481     0CEC                     _TMR1_CallBack:	
  7482                           ;psect for function _TMR1_CallBack
  7483                           
  7484                           
  7485                           ;mcc_generated_files/tmr1.c: 179:     if(TMR1_InterruptHandler)
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _TMR1_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7489     0CEC  0021               	movlb	1	; select bank1
  7490     0CED  0859               	movf	_TMR1_InterruptHandler^(0+128),w
  7491     0CEE  045A               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  7492     0CEF  1903               	btfsc	3,2
  7493     0CF0  0008               	return
  7494                           
  7495                           ;mcc_generated_files/tmr1.c: 180:     {;mcc_generated_files/tmr1.c: 181:         TMR1_In
      +                          terruptHandler();
  7496     0CF1  085A               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  7497     0CF2  008A               	movwf	10
  7498     0CF3  0859               	movf	_TMR1_InterruptHandler^(0+128),w
  7499     0CF4  000A               	callw
  7500     0CF5  318C               	pagesel	$
  7501     0CF6  0008               	return
  7502     0CF7                     __end_of_TMR1_CallBack:
  7503                           
  7504                           	psect	text44
  7505     0003                     __ptext44:	
  7506 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7507 ;; Defined at:
  7508 ;;		line 189 in file "mcc_generated_files/tmr1.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;		None
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		None
  7517 ;; Tracked objects:
  7518 ;;		On entry : 1F/1
  7519 ;;		On exit  : 1F/1
  7520 ;;		Unchanged: 1F/0
  7521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7522 ;;      Params:         0       0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0
  7525 ;;      Totals:         0       0       0       0       0       0
  7526 ;;Total ram usage:        0 bytes
  7527 ;; Hardware stack levels used: 1
  7528 ;; This function calls:
  7529 ;;		Nothing
  7530 ;; This function is called by:
  7531 ;;		_TMR1_Initialize
  7532 ;;		_TMR1_CallBack
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536     0003                     _TMR1_DefaultInterruptHandler:	
  7537                           ;psect for function _TMR1_DefaultInterruptHandler
  7538                           
  7539                           
  7540                           ;incstack = 0
  7541                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7542     0003  0008               	return
  7543     0004                     __end_of_TMR1_DefaultInterruptHandler:
  7544                           
  7545                           	psect	text45
  7546     07D9                     __ptext45:	
  7547 ;; *************** function _Write_UART *****************
  7548 ;; Defined at:
  7549 ;;		line 127 in file "main.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  i               2    8[BANK0 ] int 
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7558 ;; Tracked objects:
  7559 ;;		On entry : 1F/1
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7563 ;;      Params:         0       0       0       0       0       0
  7564 ;;      Locals:         0       2       0       0       0       0
  7565 ;;      Temps:          0       1       0       0       0       0
  7566 ;;      Totals:         0       3       0       0       0       0
  7567 ;;Total ram usage:        3 bytes
  7568 ;; Hardware stack levels used: 1
  7569 ;; Hardware stack levels required when called: 2
  7570 ;; This function calls:
  7571 ;;		_EUSART_Write
  7572 ;;		_EUSART_is_tx_ready
  7573 ;;		_Update_tx_buffer
  7574 ;; This function is called by:
  7575 ;;		_main
  7576 ;;		_TMR1_CallBack
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580     07D9                     _Write_UART:	
  7581                           ;psect for function _Write_UART
  7582                           
  7583                           
  7584                           ;main.c: 128:   Update_tx_buffer();
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _Write_UART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7588     07D9  3180  206C  3187   	fcall	_Update_tx_buffer
  7589                           
  7590                           ;main.c: 129:     for(int i=0; i<21; i++){
  7591     07DC  0020               	movlb	0	; select bank0
  7592     07DD  01C7               	clrf	Write_UART@i
  7593     07DE  01C8               	clrf	Write_UART@i+1
  7594     07DF                     i1l3221:
  7595                           
  7596                           ;main.c: 130:         EUSART_is_tx_ready();
  7597     07DF  318C  249C  3187   	fcall	_EUSART_is_tx_ready
  7598                           
  7599                           ;main.c: 131:         EUSART_Write(uart_write_buffer[i]);
  7600     07E2  0020               	movlb	0	; select bank0
  7601     07E3  0847               	movf	Write_UART@i,w
  7602     07E4  3E20               	addlw	(low (_uart_write_buffer| (0+256)))& (0+255)
  7603     07E5  0086               	movwf	6
  7604     07E6  3001               	movlw	1	; select bank2/3
  7605     07E7  0087               	movwf	7
  7606     07E8  0801               	movf	1,w
  7607     07E9  318C  2495  3187   	fcall	_EUSART_Write
  7608                           
  7609                           ;main.c: 132:       }
  7610     07EC  3001               	movlw	1
  7611     07ED  0020               	movlb	0	; select bank0
  7612     07EE  07C7               	addwf	Write_UART@i,f
  7613     07EF  3000               	movlw	0
  7614     07F0  3DC8               	addwfc	Write_UART@i+1,f
  7615     07F1  0848               	movf	Write_UART@i+1,w
  7616     07F2  3A80               	xorlw	128
  7617     07F3  00C6               	movwf	??_Write_UART
  7618     07F4  3080               	movlw	128
  7619     07F5  0246               	subwf	??_Write_UART,w
  7620     07F6  1D03               	skipz
  7621     07F7  2FFA               	goto	u209_25
  7622     07F8  3015               	movlw	21
  7623     07F9  0247               	subwf	Write_UART@i,w
  7624     07FA                     u209_25:
  7625     07FA  1803               	btfsc	3,0
  7626     07FB  0008               	return
  7627     07FC  2FDF               	goto	i1l3221
  7628     07FD                     __end_of_Write_UART:
  7629                           
  7630                           	psect	text46
  7631     006C                     __ptext46:	
  7632 ;; *************** function _Update_tx_buffer *****************
  7633 ;; Defined at:
  7634 ;;		line 95 in file "main.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;		None
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      void 
  7641 ;; Registers used:
  7642 ;;		wreg, status,2, status,0, pclath, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 1F/1
  7645 ;;		On exit  : 1F/2
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7648 ;;      Params:         0       0       0       0       0       0
  7649 ;;      Locals:         0       0       0       0       0       0
  7650 ;;      Temps:          0       2       0       0       0       0
  7651 ;;      Totals:         0       2       0       0       0       0
  7652 ;;Total ram usage:        2 bytes
  7653 ;; Hardware stack levels used: 1
  7654 ;; Hardware stack levels required when called: 1
  7655 ;; This function calls:
  7656 ;;		_TMR0_ReadTimer
  7657 ;;		___awdiv
  7658 ;;		___lbdiv
  7659 ;;		___lbmod
  7660 ;;		___lwdiv
  7661 ;;		___lwmod
  7662 ;;		___wmul
  7663 ;;		i1_TMR0_Reload
  7664 ;; This function is called by:
  7665 ;;		_Write_UART
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669     006C                     _Update_tx_buffer:	
  7670                           ;psect for function _Update_tx_buffer
  7671                           
  7672                           
  7673                           ;main.c: 96:     var.A = current_floor;
  7674                           
  7675                           ;incstack = 0
  7676                           ; Regs used in _Update_tx_buffer: [wreg+status,2+status,0+pclath+cstack]
  7677     006C  0020               	movlb	0	; select bank0
  7678     006D  0821               	movf	_var+1,w
  7679     006E  063D               	xorwf	_current_floor,w
  7680     006F  39F0               	andlw	-16
  7681     0070  063D               	xorwf	_current_floor,w
  7682     0071  00A1               	movwf	_var+1
  7683                           
  7684                           ;main.c: 97:     var.D = next_floor;
  7685     0072  083C               	movf	_next_floor,w
  7686     0073  00C4               	movwf	??_Update_tx_buffer
  7687     0074  0EC4               	swapf	??_Update_tx_buffer,f
  7688     0075  0820               	movf	_var,w
  7689     0076  0644               	xorwf	??_Update_tx_buffer,w
  7690     0077  390F               	andlw	-241
  7691     0078  0644               	xorwf	??_Update_tx_buffer,w
  7692     0079  00A0               	movwf	_var
  7693                           
  7694                           ;main.c: 98:     if(CCP3CONbits.CCP3M && LATAbits.LATA7==0) var.M = 2;
  7695     007A  0026               	movlb	6	; select bank6
  7696     007B  0813               	movf	19,w	;volatile
  7697     007C  390F               	andlw	15
  7698     007D  3A00               	xorlw	0
  7699     007E  1903               	skipnz
  7700     007F  2889               	goto	i1l3031
  7701     0080  0022               	movlb	2	; select bank2
  7702     0081  1B8C               	btfsc	12,7	;volatile
  7703     0082  2889               	goto	i1l3031
  7704     0083  0020               	movlb	0	; select bank0
  7705     0084  0821               	movf	_var+1,w
  7706     0085  39CF               	andlw	-49
  7707     0086  3820               	iorlw	32
  7708     0087  00A1               	movwf	_var+1
  7709     0088  2899               	goto	i1l3039
  7710     0089                     i1l3031:
  7711     0089  0026               	movlb	6	; select bank6
  7712     008A  0813               	movf	19,w	;volatile
  7713     008B  390F               	andlw	15
  7714     008C  3A00               	xorlw	0
  7715     008D  1903               	skipnz
  7716     008E  2896               	goto	i1l3037
  7717     008F  0022               	movlb	2	; select bank2
  7718     0090  1F8C               	btfss	12,7	;volatile
  7719     0091  2896               	goto	i1l3037
  7720     0092  3030               	movlw	48
  7721     0093  0020               	movlb	0	; select bank0
  7722     0094  04A1               	iorwf	_var+1,f
  7723     0095  2899               	goto	i1l3039
  7724     0096                     i1l3037:
  7725     0096  30CF               	movlw	-49
  7726     0097  0020               	movlb	0	; select bank0
  7727     0098  05A1               	andwf	_var+1,f
  7728     0099                     i1l3039:
  7729                           
  7730                           ;main.c: 101:     if(TMR0_ReadTimer() < 3) TMR0_Reload();
  7731     0099  318C  2456  3180   	fcall	_TMR0_ReadTimer
  7732     009C  00C4               	movwf	??_Update_tx_buffer
  7733     009D  3003               	movlw	3
  7734     009E  0244               	subwf	??_Update_tx_buffer,w
  7735     009F  1803               	skipnc
  7736     00A0  28A4               	goto	i1l3043
  7737     00A1  318C  2442  3180   	fcall	i1_TMR0_Reload
  7738     00A4                     i1l3043:
  7739                           
  7740                           ;main.c: 102:     position0 = var.HHH;
  7741     00A4  0822               	movf	_var+2,w
  7742     00A5  00C4               	movwf	??_Update_tx_buffer
  7743     00A6  01C5               	clrf	??_Update_tx_buffer+1
  7744     00A7  0844               	movf	??_Update_tx_buffer,w
  7745     00A8  00B1               	movwf	_position0
  7746     00A9  0845               	movf	??_Update_tx_buffer+1,w
  7747     00AA  00B2               	movwf	_position0+1
  7748                           
  7749                           ;main.c: 103:     if(LATAbits.LATA7 != 0) var.HHH += (TMR0_ReadTimer()*1655)/1000;
  7750     00AB  0022               	movlb	2	; select bank2
  7751     00AC  1F8C               	btfss	12,7	;volatile
  7752     00AD  28CB               	goto	i1l3049
  7753     00AE  30E8               	movlw	232
  7754     00AF  00F7               	movwf	___awdiv@divisor
  7755     00B0  3003               	movlw	3
  7756     00B1  00F8               	movwf	___awdiv@divisor+1
  7757     00B2  318C  2456  3180   	fcall	_TMR0_ReadTimer
  7758     00B5  00C4               	movwf	??_Update_tx_buffer
  7759     00B6  01C5               	clrf	??_Update_tx_buffer+1
  7760     00B7  0844               	movf	??_Update_tx_buffer,w
  7761     00B8  00F1               	movwf	___wmul@multiplier
  7762     00B9  0845               	movf	??_Update_tx_buffer+1,w
  7763     00BA  00F2               	movwf	___wmul@multiplier+1
  7764     00BB  3077               	movlw	119
  7765     00BC  00F3               	movwf	___wmul@multiplicand
  7766     00BD  3006               	movlw	6
  7767     00BE  00F4               	movwf	___wmul@multiplicand+1
  7768     00BF  318E  2670  3180   	fcall	___wmul
  7769     00C2  0872               	movf	?___wmul+1,w
  7770     00C3  00FA               	movwf	___awdiv@dividend+1
  7771     00C4  0871               	movf	?___wmul,w
  7772     00C5  00F9               	movwf	___awdiv@dividend
  7773     00C6  3185  254A  3180   	fcall	___awdiv
  7774     00C9  0877               	movf	?___awdiv,w
  7775     00CA  07A2               	addwf	_var+2,f
  7776     00CB                     i1l3049:
  7777                           
  7778                           ;main.c: 104:     if(LATAbits.LATA7 == 0) var.HHH -= (TMR0_ReadTimer()*1655)/1000;
  7779     00CB  0022               	movlb	2	; select bank2
  7780     00CC  1B8C               	btfsc	12,7	;volatile
  7781     00CD  28EB               	goto	i1l913
  7782     00CE  30E8               	movlw	232
  7783     00CF  00F7               	movwf	___awdiv@divisor
  7784     00D0  3003               	movlw	3
  7785     00D1  00F8               	movwf	___awdiv@divisor+1
  7786     00D2  318C  2456  3180   	fcall	_TMR0_ReadTimer
  7787     00D5  00C4               	movwf	??_Update_tx_buffer
  7788     00D6  01C5               	clrf	??_Update_tx_buffer+1
  7789     00D7  0844               	movf	??_Update_tx_buffer,w
  7790     00D8  00F1               	movwf	___wmul@multiplier
  7791     00D9  0845               	movf	??_Update_tx_buffer+1,w
  7792     00DA  00F2               	movwf	___wmul@multiplier+1
  7793     00DB  3077               	movlw	119
  7794     00DC  00F3               	movwf	___wmul@multiplicand
  7795     00DD  3006               	movlw	6
  7796     00DE  00F4               	movwf	___wmul@multiplicand+1
  7797     00DF  318E  2670  3180   	fcall	___wmul
  7798     00E2  0872               	movf	?___wmul+1,w
  7799     00E3  00FA               	movwf	___awdiv@dividend+1
  7800     00E4  0871               	movf	?___wmul,w
  7801     00E5  00F9               	movwf	___awdiv@dividend
  7802     00E6  3185  254A  3180   	fcall	___awdiv
  7803     00E9  0877               	movf	?___awdiv,w
  7804     00EA  02A2               	subwf	_var+2,f
  7805     00EB                     i1l913:
  7806                           
  7807                           ;main.c: 105:     TMR0_Reload();
  7808     00EB  318C  2442  3180   	fcall	i1_TMR0_Reload
  7809                           
  7810                           ;main.c: 106:     if(var.HHH >= position0) var.VVV = ((var.HHH - position0)*100/3)&0x01F
      +                          F;
  7811     00EE  0822               	movf	_var+2,w
  7812     00EF  00C4               	movwf	??_Update_tx_buffer
  7813     00F0  0832               	movf	_position0+1,w
  7814     00F1  1D03               	skipz
  7815     00F2  28F5               	goto	u196_25
  7816     00F3  0831               	movf	_position0,w
  7817     00F4  0244               	subwf	??_Update_tx_buffer,w
  7818     00F5                     u196_25:
  7819     00F5  1C03               	skipc
  7820     00F6  2904               	goto	i1l3057
  7821     00F7  3003               	movlw	3
  7822     00F8  00F7               	movwf	___lwdiv@divisor
  7823     00F9  3000               	movlw	0
  7824     00FA  00F8               	movwf	___lwdiv@divisor+1
  7825     00FB  0822               	movf	_var+2,w
  7826     00FC  00C4               	movwf	??_Update_tx_buffer
  7827     00FD  0831               	movf	_position0,w
  7828     00FE  0244               	subwf	??_Update_tx_buffer,w
  7829     00FF  00F1               	movwf	___wmul@multiplier
  7830     0100  0932               	comf	_position0+1,w
  7831     0101  1803               	skipnc
  7832     0102  0A89               	incf	9,f
  7833     0103  290D               	goto	L2
  7834     0104                     i1l3057:
  7835     0104  3003               	movlw	3
  7836     0105  00F7               	movwf	___lwdiv@divisor
  7837     0106  3000               	movlw	0
  7838     0107  00F8               	movwf	___lwdiv@divisor+1
  7839     0108  0822               	movf	_var+2,w
  7840     0109  0231               	subwf	_position0,w
  7841     010A  00F1               	movwf	___wmul@multiplier
  7842     010B  3000               	movlw	0
  7843     010C  3B32               	subwfb	_position0+1,w
  7844     010D                     L2:
  7845     010D  00F2               	movwf	___wmul@multiplier+1
  7846     010E  3064               	movlw	100
  7847     010F  00F3               	movwf	___wmul@multiplicand
  7848     0110  3000               	movlw	0
  7849     0111  00F4               	movwf	___wmul@multiplicand+1
  7850     0112  318E  2670  3180   	fcall	___wmul
  7851     0115  0872               	movf	?___wmul+1,w
  7852     0116  00FA               	movwf	___lwdiv@dividend+1
  7853     0117  0871               	movf	?___wmul,w
  7854     0118  00F9               	movwf	___lwdiv@dividend
  7855     0119  3187  2746  3180   	fcall	___lwdiv
  7856     011C  30FF               	movlw	255
  7857     011D  0577               	andwf	?___lwdiv,w
  7858     011E  00A3               	movwf	_var+3
  7859     011F  3001               	movlw	1
  7860     0120  0578               	andwf	?___lwdiv+1,w
  7861     0121  00A4               	movwf	_var+4
  7862                           
  7863                           ;main.c: 110:     ADCON0bits.GO_nDONE = 1;
  7864     0122  0021               	movlb	1	; select bank1
  7865     0123  149D               	bsf	29,1	;volatile
  7866     0124                     i1l916:	
  7867                           ;main.c: 111:     while (ADCON0bits.GO_nDONE);
  7868                           
  7869     0124  189D               	btfsc	29,1	;volatile
  7870     0125  2924               	goto	i1l916
  7871                           
  7872                           ;main.c: 112:     var.TTT = ((ADRESH << 8) + ADRESL);
  7873     0126  081C               	movf	28,w	;volatile
  7874     0127  0020               	movlb	0	; select bank0
  7875     0128  00A6               	movwf	_var+6
  7876     0129  0021               	movlb	1	; select bank1
  7877     012A  081B               	movf	27,w	;volatile
  7878     012B  0020               	movlb	0	; select bank0
  7879     012C  00A5               	movwf	_var+5
  7880                           
  7881                           ;main.c: 114:     uart_write_buffer[1] = var.A + 1 + '0';
  7882     012D  0821               	movf	_var+1,w
  7883     012E  390F               	andlw	15
  7884     012F  3E31               	addlw	49
  7885     0130  0022               	movlb	2	; select bank2
  7886     0131  00A1               	movwf	(_uart_write_buffer^(0+256)+1)
  7887                           
  7888                           ;main.c: 115:     uart_write_buffer[3] = var.D + 1 + '0';
  7889     0132  0020               	movlb	0	; select bank0
  7890     0133  0E20               	swapf	_var,w
  7891     0134  390F               	andlw	15
  7892     0135  3E31               	addlw	49
  7893     0136  0022               	movlb	2	; select bank2
  7894     0137  00A3               	movwf	(_uart_write_buffer^(0+256)+3)
  7895                           
  7896                           ;main.c: 116:     uart_write_buffer[5] = var.M + '0';
  7897     0138  0020               	movlb	0	; select bank0
  7898     0139  0E21               	swapf	_var+1,w
  7899     013A  3903               	andlw	3
  7900     013B  3E30               	addlw	48
  7901     013C  0022               	movlb	2	; select bank2
  7902     013D  00A5               	movwf	(_uart_write_buffer^(0+256)+5)
  7903                           
  7904                           ;main.c: 117:     uart_write_buffer[7] = (var.HHH / 100) % 10 + '0';
  7905     013E  300A               	movlw	10
  7906     013F  00F4               	movwf	___lbmod@divisor
  7907     0140  3064               	movlw	100
  7908     0141  00F0               	movwf	___lbdiv@divisor
  7909     0142  0020               	movlb	0	; select bank0
  7910     0143  0822               	movf	_var+2,w
  7911     0144  318E  26C8  3180   	fcall	___lbdiv
  7912     0147  318E  2655  3180   	fcall	___lbmod
  7913     014A  3E30               	addlw	48
  7914     014B  0022               	movlb	2	; select bank2
  7915     014C  00A7               	movwf	(_uart_write_buffer^(0+256)+7)
  7916                           
  7917                           ;main.c: 118:     uart_write_buffer[8]= (var.HHH/ 10) % 10 + '0';
  7918     014D  300A               	movlw	10
  7919     014E  00F4               	movwf	___lbmod@divisor
  7920     014F  300A               	movlw	10
  7921     0150  00F0               	movwf	___lbdiv@divisor
  7922     0151  0020               	movlb	0	; select bank0
  7923     0152  0822               	movf	_var+2,w
  7924     0153  318E  26C8  3180   	fcall	___lbdiv
  7925     0156  318E  2655  3180   	fcall	___lbmod
  7926     0159  3E30               	addlw	48
  7927     015A  0022               	movlb	2	; select bank2
  7928     015B  00A8               	movwf	(_uart_write_buffer^(0+256)+8)
  7929                           
  7930                           ;main.c: 119:     uart_write_buffer[9]=var.HHH % 10 + '0';
  7931     015C  300A               	movlw	10
  7932     015D  00F4               	movwf	___lbmod@divisor
  7933     015E  0020               	movlb	0	; select bank0
  7934     015F  0822               	movf	_var+2,w
  7935     0160  318E  2655  3180   	fcall	___lbmod
  7936     0163  3E30               	addlw	48
  7937     0164  0022               	movlb	2	; select bank2
  7938     0165  00A9               	movwf	(_uart_write_buffer^(0+256)+9)
  7939                           
  7940                           ;main.c: 120:     uart_write_buffer[11]= (var.VVV/100)%10 + '0';
  7941     0166  300A               	movlw	10
  7942     0167  0020               	movlb	0	; select bank0
  7943     0168  00BF               	movwf	___lwmod@divisor
  7944     0169  3000               	movlw	0
  7945     016A  00C0               	movwf	___lwmod@divisor+1
  7946     016B  3064               	movlw	100
  7947     016C  00F7               	movwf	___lwdiv@divisor
  7948     016D  3000               	movlw	0
  7949     016E  00F8               	movwf	___lwdiv@divisor+1
  7950     016F  0824               	movf	_var+4,w
  7951     0170  00FA               	movwf	___lwdiv@dividend+1
  7952     0171  0823               	movf	_var+3,w
  7953     0172  00F9               	movwf	___lwdiv@dividend
  7954     0173  3187  2746  3180   	fcall	___lwdiv
  7955     0176  0878               	movf	?___lwdiv+1,w
  7956     0177  00C2               	movwf	___lwmod@dividend+1
  7957     0178  0877               	movf	?___lwdiv,w
  7958     0179  00C1               	movwf	___lwmod@dividend
  7959     017A  318F  2753  3180   	fcall	___lwmod
  7960     017D  083F               	movf	?___lwmod,w
  7961     017E  3E30               	addlw	48
  7962     017F  0022               	movlb	2	; select bank2
  7963     0180  00AB               	movwf	(_uart_write_buffer^(0+256)+11)
  7964                           
  7965                           ;main.c: 121:     uart_write_buffer[12]= ((var.VVV/10)%10) + '0';
  7966     0181  300A               	movlw	10
  7967     0182  0020               	movlb	0	; select bank0
  7968     0183  00BF               	movwf	___lwmod@divisor
  7969     0184  3000               	movlw	0
  7970     0185  00C0               	movwf	___lwmod@divisor+1
  7971     0186  300A               	movlw	10
  7972     0187  00F7               	movwf	___lwdiv@divisor
  7973     0188  3000               	movlw	0
  7974     0189  00F8               	movwf	___lwdiv@divisor+1
  7975     018A  0824               	movf	_var+4,w
  7976     018B  00FA               	movwf	___lwdiv@dividend+1
  7977     018C  0823               	movf	_var+3,w
  7978     018D  00F9               	movwf	___lwdiv@dividend
  7979     018E  3187  2746  3180   	fcall	___lwdiv
  7980     0191  0878               	movf	?___lwdiv+1,w
  7981     0192  00C2               	movwf	___lwmod@dividend+1
  7982     0193  0877               	movf	?___lwdiv,w
  7983     0194  00C1               	movwf	___lwmod@dividend
  7984     0195  318F  2753  3180   	fcall	___lwmod
  7985     0198  083F               	movf	?___lwmod,w
  7986     0199  3E30               	addlw	48
  7987     019A  0022               	movlb	2	; select bank2
  7988     019B  00AC               	movwf	(_uart_write_buffer^(0+256)+12)
  7989                           
  7990                           ;main.c: 122:     uart_write_buffer[14]= (var.VVV)%10 + '0';
  7991     019C  300A               	movlw	10
  7992     019D  0020               	movlb	0	; select bank0
  7993     019E  00BF               	movwf	___lwmod@divisor
  7994     019F  3000               	movlw	0
  7995     01A0  00C0               	movwf	___lwmod@divisor+1
  7996     01A1  0824               	movf	_var+4,w
  7997     01A2  00C2               	movwf	___lwmod@dividend+1
  7998     01A3  0823               	movf	_var+3,w
  7999     01A4  00C1               	movwf	___lwmod@dividend
  8000     01A5  318F  2753  3180   	fcall	___lwmod
  8001     01A8  083F               	movf	?___lwmod,w
  8002     01A9  3E30               	addlw	48
  8003     01AA  0022               	movlb	2	; select bank2
  8004     01AB  00AE               	movwf	(_uart_write_buffer^(0+256)+14)
  8005                           
  8006                           ;main.c: 123:     uart_write_buffer[16]= (var.TTT/100)%10 + '0';
  8007     01AC  300A               	movlw	10
  8008     01AD  0020               	movlb	0	; select bank0
  8009     01AE  00BF               	movwf	___lwmod@divisor
  8010     01AF  3000               	movlw	0
  8011     01B0  00C0               	movwf	___lwmod@divisor+1
  8012     01B1  3064               	movlw	100
  8013     01B2  00F7               	movwf	___lwdiv@divisor
  8014     01B3  3000               	movlw	0
  8015     01B4  00F8               	movwf	___lwdiv@divisor+1
  8016     01B5  0826               	movf	_var+6,w
  8017     01B6  00FA               	movwf	___lwdiv@dividend+1
  8018     01B7  0825               	movf	_var+5,w
  8019     01B8  00F9               	movwf	___lwdiv@dividend
  8020     01B9  3187  2746  3180   	fcall	___lwdiv
  8021     01BC  0878               	movf	?___lwdiv+1,w
  8022     01BD  00C2               	movwf	___lwmod@dividend+1
  8023     01BE  0877               	movf	?___lwdiv,w
  8024     01BF  00C1               	movwf	___lwmod@dividend
  8025     01C0  318F  2753  3180   	fcall	___lwmod
  8026     01C3  083F               	movf	?___lwmod,w
  8027     01C4  3E30               	addlw	48
  8028     01C5  0022               	movlb	2	; select bank2
  8029     01C6  00B0               	movwf	(_uart_write_buffer^(0+256)+16)
  8030                           
  8031                           ;main.c: 124:     uart_write_buffer[17]= (var.TTT/10)%10 + '0';
  8032     01C7  300A               	movlw	10
  8033     01C8  0020               	movlb	0	; select bank0
  8034     01C9  00BF               	movwf	___lwmod@divisor
  8035     01CA  3000               	movlw	0
  8036     01CB  00C0               	movwf	___lwmod@divisor+1
  8037     01CC  300A               	movlw	10
  8038     01CD  00F7               	movwf	___lwdiv@divisor
  8039     01CE  3000               	movlw	0
  8040     01CF  00F8               	movwf	___lwdiv@divisor+1
  8041     01D0  0826               	movf	_var+6,w
  8042     01D1  00FA               	movwf	___lwdiv@dividend+1
  8043     01D2  0825               	movf	_var+5,w
  8044     01D3  00F9               	movwf	___lwdiv@dividend
  8045     01D4  3187  2746  3180   	fcall	___lwdiv
  8046     01D7  0878               	movf	?___lwdiv+1,w
  8047     01D8  00C2               	movwf	___lwmod@dividend+1
  8048     01D9  0877               	movf	?___lwdiv,w
  8049     01DA  00C1               	movwf	___lwmod@dividend
  8050     01DB  318F  2753  3180   	fcall	___lwmod
  8051     01DE  083F               	movf	?___lwmod,w
  8052     01DF  3E30               	addlw	48
  8053     01E0  0022               	movlb	2	; select bank2
  8054     01E1  00B1               	movwf	(_uart_write_buffer^(0+256)+17)
  8055                           
  8056                           ;main.c: 125:     uart_write_buffer[19]= (var.TTT%10) + '0';
  8057     01E2  300A               	movlw	10
  8058     01E3  0020               	movlb	0	; select bank0
  8059     01E4  00BF               	movwf	___lwmod@divisor
  8060     01E5  3000               	movlw	0
  8061     01E6  00C0               	movwf	___lwmod@divisor+1
  8062     01E7  0826               	movf	_var+6,w
  8063     01E8  00C2               	movwf	___lwmod@dividend+1
  8064     01E9  0825               	movf	_var+5,w
  8065     01EA  00C1               	movwf	___lwmod@dividend
  8066     01EB  318F  2753         	fcall	___lwmod
  8067     01ED  083F               	movf	?___lwmod,w
  8068     01EE  3E30               	addlw	48
  8069     01EF  0022               	movlb	2	; select bank2
  8070     01F0  00B3               	movwf	(_uart_write_buffer^(0+256)+19)
  8071     01F1  0008               	return
  8072     01F2                     __end_of_Update_tx_buffer:
  8073                           
  8074                           	psect	text47
  8075     0E70                     __ptext47:	
  8076 ;; *************** function ___wmul *****************
  8077 ;; Defined at:
  8078 ;;		line 15 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  multiplier      2    1[COMMON] unsigned int 
  8081 ;;  multiplicand    2    3[COMMON] unsigned int 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  product         2    5[COMMON] unsigned int 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  2    1[COMMON] unsigned int 
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 1F/0
  8090 ;;		On exit  : 1F/0
  8091 ;;		Unchanged: 1F/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8093 ;;      Params:         4       0       0       0       0       0
  8094 ;;      Locals:         2       0       0       0       0       0
  8095 ;;      Temps:          0       0       0       0       0       0
  8096 ;;      Totals:         6       0       0       0       0       0
  8097 ;;Total ram usage:        6 bytes
  8098 ;; Hardware stack levels used: 1
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		_Update_tx_buffer
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106     0E70                     ___wmul:	
  8107                           ;psect for function ___wmul
  8108                           
  8109                           
  8110                           ;incstack = 0
  8111                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8112     0E70  01F5               	clrf	___wmul@product
  8113     0E71  01F6               	clrf	___wmul@product+1
  8114     0E72                     i1l2849:
  8115     0E72  1C71               	btfss	___wmul@multiplier,0
  8116     0E73  2E78               	goto	i1l1155
  8117     0E74  0873               	movf	___wmul@multiplicand,w
  8118     0E75  07F5               	addwf	___wmul@product,f
  8119     0E76  0874               	movf	___wmul@multiplicand+1,w
  8120     0E77  3DF6               	addwfc	___wmul@product+1,f
  8121     0E78                     i1l1155:
  8122     0E78  3001               	movlw	1
  8123     0E79                     u152_25:
  8124     0E79  35F3               	lslf	___wmul@multiplicand,f
  8125     0E7A  0DF4               	rlf	___wmul@multiplicand+1,f
  8126     0E7B  0B89               	decfsz	9,f
  8127     0E7C  2E79               	goto	u152_25
  8128     0E7D  3001               	movlw	1
  8129     0E7E                     u153_25:
  8130     0E7E  36F2               	lsrf	___wmul@multiplier+1,f
  8131     0E7F  0CF1               	rrf	___wmul@multiplier,f
  8132     0E80  0B89               	decfsz	9,f
  8133     0E81  2E7E               	goto	u153_25
  8134     0E82  0871               	movf	___wmul@multiplier,w
  8135     0E83  0472               	iorwf	___wmul@multiplier+1,w
  8136     0E84  1D03               	btfss	3,2
  8137     0E85  2E72               	goto	i1l2849
  8138     0E86  0876               	movf	___wmul@product+1,w
  8139     0E87  00F2               	movwf	?___wmul+1
  8140     0E88  0875               	movf	___wmul@product,w
  8141     0E89  00F1               	movwf	?___wmul
  8142     0E8A  0008               	return
  8143     0E8B                     __end_of___wmul:
  8144                           
  8145                           	psect	text48
  8146     0F53                     __ptext48:	
  8147 ;; *************** function ___lwmod *****************
  8148 ;; Defined at:
  8149 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  divisor         2    0[BANK0 ] unsigned int 
  8152 ;;  dividend        2    2[BANK0 ] unsigned int 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  counter         1    4[BANK0 ] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  2    0[BANK0 ] unsigned int 
  8157 ;; Registers used:
  8158 ;;		wreg, status,2, status,0
  8159 ;; Tracked objects:
  8160 ;;		On entry : 1F/0
  8161 ;;		On exit  : 1F/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8164 ;;      Params:         0       4       0       0       0       0
  8165 ;;      Locals:         0       1       0       0       0       0
  8166 ;;      Temps:          0       0       0       0       0       0
  8167 ;;      Totals:         0       5       0       0       0       0
  8168 ;;Total ram usage:        5 bytes
  8169 ;; Hardware stack levels used: 1
  8170 ;; This function calls:
  8171 ;;		Nothing
  8172 ;; This function is called by:
  8173 ;;		_Update_tx_buffer
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177     0F53                     ___lwmod:	
  8178                           ;psect for function ___lwmod
  8179                           
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8183     0F53  083F               	movf	___lwmod@divisor,w
  8184     0F54  0440               	iorwf	___lwmod@divisor+1,w
  8185     0F55  1903               	btfsc	3,2
  8186     0F56  2F78               	goto	i1l2991
  8187     0F57  3001               	movlw	1
  8188     0F58  00C3               	movwf	___lwmod@counter
  8189     0F59                     i1l2981:
  8190     0F59  1BC0               	btfsc	___lwmod@divisor+1,7
  8191     0F5A  2F63               	goto	i1l2983
  8192     0F5B  3001               	movlw	1
  8193     0F5C                     u180_25:
  8194     0F5C  35BF               	lslf	___lwmod@divisor,f
  8195     0F5D  0DC0               	rlf	___lwmod@divisor+1,f
  8196     0F5E  0B89               	decfsz	9,f
  8197     0F5F  2F5C               	goto	u180_25
  8198     0F60  3001               	movlw	1
  8199     0F61  07C3               	addwf	___lwmod@counter,f
  8200     0F62  2F59               	goto	i1l2981
  8201     0F63                     i1l2983:
  8202     0F63  0840               	movf	___lwmod@divisor+1,w
  8203     0F64  0242               	subwf	___lwmod@dividend+1,w
  8204     0F65  1D03               	skipz
  8205     0F66  2F69               	goto	u182_25
  8206     0F67  083F               	movf	___lwmod@divisor,w
  8207     0F68  0241               	subwf	___lwmod@dividend,w
  8208     0F69                     u182_25:
  8209     0F69  1C03               	skipc
  8210     0F6A  2F6F               	goto	i1l2987
  8211     0F6B  083F               	movf	___lwmod@divisor,w
  8212     0F6C  02C1               	subwf	___lwmod@dividend,f
  8213     0F6D  0840               	movf	___lwmod@divisor+1,w
  8214     0F6E  3BC2               	subwfb	___lwmod@dividend+1,f
  8215     0F6F                     i1l2987:
  8216     0F6F  3001               	movlw	1
  8217     0F70                     u183_25:
  8218     0F70  36C0               	lsrf	___lwmod@divisor+1,f
  8219     0F71  0CBF               	rrf	___lwmod@divisor,f
  8220     0F72  0B89               	decfsz	9,f
  8221     0F73  2F70               	goto	u183_25
  8222     0F74  3001               	movlw	1
  8223     0F75  02C3               	subwf	___lwmod@counter,f
  8224     0F76  1D03               	btfss	3,2
  8225     0F77  2F63               	goto	i1l2983
  8226     0F78                     i1l2991:
  8227     0F78  0842               	movf	___lwmod@dividend+1,w
  8228     0F79  00C0               	movwf	?___lwmod+1
  8229     0F7A  0841               	movf	___lwmod@dividend,w
  8230     0F7B  00BF               	movwf	?___lwmod
  8231     0F7C  0008               	return
  8232     0F7D                     __end_of___lwmod:
  8233                           
  8234                           	psect	text49
  8235     0746                     __ptext49:	
  8236 ;; *************** function ___lwdiv *****************
  8237 ;; Defined at:
  8238 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;  divisor         2    7[COMMON] unsigned int 
  8241 ;;  dividend        2    9[COMMON] unsigned int 
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;  quotient        2   11[COMMON] unsigned int 
  8244 ;;  counter         1   13[COMMON] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  2    7[COMMON] unsigned int 
  8247 ;; Registers used:
  8248 ;;		wreg, status,2, status,0
  8249 ;; Tracked objects:
  8250 ;;		On entry : 1F/0
  8251 ;;		On exit  : 1F/0
  8252 ;;		Unchanged: 1F/0
  8253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8254 ;;      Params:         4       0       0       0       0       0
  8255 ;;      Locals:         3       0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0
  8257 ;;      Totals:         7       0       0       0       0       0
  8258 ;;Total ram usage:        7 bytes
  8259 ;; Hardware stack levels used: 1
  8260 ;; This function calls:
  8261 ;;		Nothing
  8262 ;; This function is called by:
  8263 ;;		_Update_tx_buffer
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267     0746                     ___lwdiv:	
  8268                           ;psect for function ___lwdiv
  8269                           
  8270                           
  8271                           ;incstack = 0
  8272                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8273     0746  01FB               	clrf	___lwdiv@quotient
  8274     0747  01FC               	clrf	___lwdiv@quotient+1
  8275     0748  0877               	movf	___lwdiv@divisor,w
  8276     0749  0478               	iorwf	___lwdiv@divisor+1,w
  8277     074A  1903               	btfsc	3,2
  8278     074B  2F73               	goto	i1l2969
  8279     074C  3001               	movlw	1
  8280     074D  00FD               	movwf	___lwdiv@counter
  8281     074E                     i1l2957:
  8282     074E  1BF8               	btfsc	___lwdiv@divisor+1,7
  8283     074F  2F58               	goto	i1l2959
  8284     0750  3001               	movlw	1
  8285     0751                     u173_25:
  8286     0751  35F7               	lslf	___lwdiv@divisor,f
  8287     0752  0DF8               	rlf	___lwdiv@divisor+1,f
  8288     0753  0B89               	decfsz	9,f
  8289     0754  2F51               	goto	u173_25
  8290     0755  3001               	movlw	1
  8291     0756  07FD               	addwf	___lwdiv@counter,f
  8292     0757  2F4E               	goto	i1l2957
  8293     0758                     i1l2959:
  8294     0758  3001               	movlw	1
  8295     0759                     u175_25:
  8296     0759  35FB               	lslf	___lwdiv@quotient,f
  8297     075A  0DFC               	rlf	___lwdiv@quotient+1,f
  8298     075B  0B89               	decfsz	9,f
  8299     075C  2F59               	goto	u175_25
  8300     075D  0878               	movf	___lwdiv@divisor+1,w
  8301     075E  027A               	subwf	___lwdiv@dividend+1,w
  8302     075F  1D03               	skipz
  8303     0760  2F63               	goto	u176_25
  8304     0761  0877               	movf	___lwdiv@divisor,w
  8305     0762  0279               	subwf	___lwdiv@dividend,w
  8306     0763                     u176_25:
  8307     0763  1C03               	skipc
  8308     0764  2F6A               	goto	i1l2965
  8309     0765  0877               	movf	___lwdiv@divisor,w
  8310     0766  02F9               	subwf	___lwdiv@dividend,f
  8311     0767  0878               	movf	___lwdiv@divisor+1,w
  8312     0768  3BFA               	subwfb	___lwdiv@dividend+1,f
  8313     0769  147B               	bsf	___lwdiv@quotient,0
  8314     076A                     i1l2965:
  8315     076A  3001               	movlw	1
  8316     076B                     u177_25:
  8317     076B  36F8               	lsrf	___lwdiv@divisor+1,f
  8318     076C  0CF7               	rrf	___lwdiv@divisor,f
  8319     076D  0B89               	decfsz	9,f
  8320     076E  2F6B               	goto	u177_25
  8321     076F  3001               	movlw	1
  8322     0770  02FD               	subwf	___lwdiv@counter,f
  8323     0771  1D03               	btfss	3,2
  8324     0772  2F58               	goto	i1l2959
  8325     0773                     i1l2969:
  8326     0773  087C               	movf	___lwdiv@quotient+1,w
  8327     0774  00F8               	movwf	?___lwdiv+1
  8328     0775  087B               	movf	___lwdiv@quotient,w
  8329     0776  00F7               	movwf	?___lwdiv
  8330     0777  0008               	return
  8331     0778                     __end_of___lwdiv:
  8332                           
  8333                           	psect	text50
  8334     0E55                     __ptext50:	
  8335 ;; *************** function ___lbmod *****************
  8336 ;; Defined at:
  8337 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lbmod.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;  dividend        1    wreg     unsigned char 
  8340 ;;  divisor         1    4[COMMON] unsigned char 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  dividend        1    6[COMMON] unsigned char 
  8343 ;;  rem             1    8[COMMON] unsigned char 
  8344 ;;  counter         1    7[COMMON] unsigned char 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      unsigned char 
  8347 ;; Registers used:
  8348 ;;		wreg, status,2, status,0
  8349 ;; Tracked objects:
  8350 ;;		On entry : 1F/0
  8351 ;;		On exit  : 1F/0
  8352 ;;		Unchanged: 1F/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8354 ;;      Params:         1       0       0       0       0       0
  8355 ;;      Locals:         3       0       0       0       0       0
  8356 ;;      Temps:          1       0       0       0       0       0
  8357 ;;      Totals:         5       0       0       0       0       0
  8358 ;;Total ram usage:        5 bytes
  8359 ;; Hardware stack levels used: 1
  8360 ;; This function calls:
  8361 ;;		Nothing
  8362 ;; This function is called by:
  8363 ;;		_Update_tx_buffer
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367     0E55                     ___lbmod:	
  8368                           ;psect for function ___lbmod
  8369                           
  8370                           
  8371                           ;incstack = 0
  8372                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  8373                           ;___lbmod@dividend stored from wreg
  8374     0E55  00F6               	movwf	___lbmod@dividend
  8375     0E56  3008               	movlw	8
  8376     0E57  00F7               	movwf	___lbmod@counter
  8377     0E58  01F8               	clrf	___lbmod@rem
  8378     0E59                     i1l2935:
  8379     0E59  0876               	movf	___lbmod@dividend,w
  8380     0E5A  00F5               	movwf	??___lbmod
  8381     0E5B  3007               	movlw	7
  8382     0E5C                     u169_25:
  8383     0E5C  36F5               	lsrf	??___lbmod,f
  8384     0E5D  0B89               	decfsz	9,f
  8385     0E5E  2E5C               	goto	u169_25
  8386     0E5F  3578               	lslf	___lbmod@rem,w
  8387     0E60  0475               	iorwf	??___lbmod,w
  8388     0E61  00F8               	movwf	___lbmod@rem
  8389     0E62  1003               	clrc
  8390     0E63  0DF6               	rlf	___lbmod@dividend,f
  8391     0E64  0874               	movf	___lbmod@divisor,w
  8392     0E65  0278               	subwf	___lbmod@rem,w
  8393     0E66  1C03               	skipc
  8394     0E67  2E6A               	goto	i1l1373
  8395     0E68  0874               	movf	___lbmod@divisor,w
  8396     0E69  02F8               	subwf	___lbmod@rem,f
  8397     0E6A                     i1l1373:
  8398     0E6A  3001               	movlw	1
  8399     0E6B  02F7               	subwf	___lbmod@counter,f
  8400     0E6C  1D03               	btfss	3,2
  8401     0E6D  2E59               	goto	i1l2935
  8402     0E6E  0878               	movf	___lbmod@rem,w
  8403     0E6F  0008               	return
  8404     0E70                     __end_of___lbmod:
  8405                           
  8406                           	psect	text51
  8407     0EC8                     __ptext51:	
  8408 ;; *************** function ___lbdiv *****************
  8409 ;; Defined at:
  8410 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lbdiv.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  dividend        1    wreg     unsigned char 
  8413 ;;  divisor         1    0[COMMON] unsigned char 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  dividend        1    1[COMMON] unsigned char 
  8416 ;;  quotient        1    3[COMMON] unsigned char 
  8417 ;;  counter         1    2[COMMON] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      unsigned char 
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, status,0
  8422 ;; Tracked objects:
  8423 ;;		On entry : 1F/0
  8424 ;;		On exit  : 1F/0
  8425 ;;		Unchanged: 1F/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8427 ;;      Params:         1       0       0       0       0       0
  8428 ;;      Locals:         3       0       0       0       0       0
  8429 ;;      Temps:          0       0       0       0       0       0
  8430 ;;      Totals:         4       0       0       0       0       0
  8431 ;;Total ram usage:        4 bytes
  8432 ;; Hardware stack levels used: 1
  8433 ;; This function calls:
  8434 ;;		Nothing
  8435 ;; This function is called by:
  8436 ;;		_Update_tx_buffer
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440     0EC8                     ___lbdiv:	
  8441                           ;psect for function ___lbdiv
  8442                           
  8443                           
  8444                           ;incstack = 0
  8445                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  8446                           ;___lbdiv@dividend stored from wreg
  8447     0EC8  00F1               	movwf	___lbdiv@dividend
  8448     0EC9  01F3               	clrf	___lbdiv@quotient
  8449     0ECA  0870               	movf	___lbdiv@divisor,w
  8450     0ECB  1903               	btfsc	3,2
  8451     0ECC  2EE5               	goto	i1l2927
  8452     0ECD  3001               	movlw	1
  8453     0ECE  00F2               	movwf	___lbdiv@counter
  8454     0ECF                     i1l2915:
  8455     0ECF  1BF0               	btfsc	___lbdiv@divisor,7
  8456     0ED0  2ED6               	goto	i1l2917
  8457     0ED1  1003               	clrc
  8458     0ED2  0DF0               	rlf	___lbdiv@divisor,f
  8459     0ED3  3001               	movlw	1
  8460     0ED4  07F2               	addwf	___lbdiv@counter,f
  8461     0ED5  2ECF               	goto	i1l2915
  8462     0ED6                     i1l2917:
  8463     0ED6  1003               	clrc
  8464     0ED7  0DF3               	rlf	___lbdiv@quotient,f
  8465     0ED8  0870               	movf	___lbdiv@divisor,w
  8466     0ED9  0271               	subwf	___lbdiv@dividend,w
  8467     0EDA  1C03               	skipc
  8468     0EDB  2EE0               	goto	L3
  8469     0EDC  0870               	movf	___lbdiv@divisor,w
  8470     0EDD  02F1               	subwf	___lbdiv@dividend,f
  8471     0EDE  1473               	bsf	___lbdiv@quotient,0
  8472     0EDF  1003               	clrc
  8473     0EE0                     L3:
  8474     0EE0  0CF0               	rrf	___lbdiv@divisor,f
  8475     0EE1  3001               	movlw	1
  8476     0EE2  02F2               	subwf	___lbdiv@counter,f
  8477     0EE3  1D03               	btfss	3,2
  8478     0EE4  2ED6               	goto	i1l2917
  8479     0EE5                     i1l2927:
  8480     0EE5  0873               	movf	___lbdiv@quotient,w
  8481     0EE6  0008               	return
  8482     0EE7                     __end_of___lbdiv:
  8483                           
  8484                           	psect	text52
  8485     054A                     __ptext52:	
  8486 ;; *************** function ___awdiv *****************
  8487 ;; Defined at:
  8488 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  divisor         2    7[COMMON] int 
  8491 ;;  dividend        2    9[COMMON] int 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  quotient        2    2[BANK0 ] int 
  8494 ;;  sign            1    1[BANK0 ] unsigned char 
  8495 ;;  counter         1    0[BANK0 ] unsigned char 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  2    7[COMMON] int 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0
  8500 ;; Tracked objects:
  8501 ;;		On entry : 1F/0
  8502 ;;		On exit  : 1F/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8505 ;;      Params:         4       0       0       0       0       0
  8506 ;;      Locals:         0       4       0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0
  8508 ;;      Totals:         4       4       0       0       0       0
  8509 ;;Total ram usage:        8 bytes
  8510 ;; Hardware stack levels used: 1
  8511 ;; This function calls:
  8512 ;;		Nothing
  8513 ;; This function is called by:
  8514 ;;		_Update_tx_buffer
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518     054A                     ___awdiv:	
  8519                           ;psect for function ___awdiv
  8520                           
  8521                           
  8522                           ;incstack = 0
  8523                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8524     054A  01C0               	clrf	___awdiv@sign
  8525     054B  1FF8               	btfss	___awdiv@divisor+1,7
  8526     054C  2D54               	goto	i1l2869
  8527     054D  09F7               	comf	___awdiv@divisor,f
  8528     054E  09F8               	comf	___awdiv@divisor+1,f
  8529     054F  0AF7               	incf	___awdiv@divisor,f
  8530     0550  1903               	skipnz
  8531     0551  0AF8               	incf	___awdiv@divisor+1,f
  8532     0552  3001               	movlw	1
  8533     0553  00C0               	movwf	___awdiv@sign
  8534     0554                     i1l2869:
  8535     0554  1FFA               	btfss	___awdiv@dividend+1,7
  8536     0555  2D5D               	goto	i1l2875
  8537     0556  09F9               	comf	___awdiv@dividend,f
  8538     0557  09FA               	comf	___awdiv@dividend+1,f
  8539     0558  0AF9               	incf	___awdiv@dividend,f
  8540     0559  1903               	skipnz
  8541     055A  0AFA               	incf	___awdiv@dividend+1,f
  8542     055B  3001               	movlw	1
  8543     055C  06C0               	xorwf	___awdiv@sign,f
  8544     055D                     i1l2875:
  8545     055D  01C1               	clrf	___awdiv@quotient
  8546     055E  01C2               	clrf	___awdiv@quotient+1
  8547     055F  0877               	movf	___awdiv@divisor,w
  8548     0560  0478               	iorwf	___awdiv@divisor+1,w
  8549     0561  1903               	btfsc	3,2
  8550     0562  2D8A               	goto	i1l2897
  8551     0563  3001               	movlw	1
  8552     0564  00BF               	movwf	___awdiv@counter
  8553     0565                     i1l2885:
  8554     0565  1BF8               	btfsc	___awdiv@divisor+1,7
  8555     0566  2D6F               	goto	i1l2887
  8556     0567  3001               	movlw	1
  8557     0568                     u158_25:
  8558     0568  35F7               	lslf	___awdiv@divisor,f
  8559     0569  0DF8               	rlf	___awdiv@divisor+1,f
  8560     056A  0B89               	decfsz	9,f
  8561     056B  2D68               	goto	u158_25
  8562     056C  3001               	movlw	1
  8563     056D  07BF               	addwf	___awdiv@counter,f
  8564     056E  2D65               	goto	i1l2885
  8565     056F                     i1l2887:
  8566     056F  3001               	movlw	1
  8567     0570                     u160_25:
  8568     0570  35C1               	lslf	___awdiv@quotient,f
  8569     0571  0DC2               	rlf	___awdiv@quotient+1,f
  8570     0572  0B89               	decfsz	9,f
  8571     0573  2D70               	goto	u160_25
  8572     0574  0878               	movf	___awdiv@divisor+1,w
  8573     0575  027A               	subwf	___awdiv@dividend+1,w
  8574     0576  1D03               	skipz
  8575     0577  2D7A               	goto	u161_25
  8576     0578  0877               	movf	___awdiv@divisor,w
  8577     0579  0279               	subwf	___awdiv@dividend,w
  8578     057A                     u161_25:
  8579     057A  1C03               	skipc
  8580     057B  2D81               	goto	i1l2893
  8581     057C  0877               	movf	___awdiv@divisor,w
  8582     057D  02F9               	subwf	___awdiv@dividend,f
  8583     057E  0878               	movf	___awdiv@divisor+1,w
  8584     057F  3BFA               	subwfb	___awdiv@dividend+1,f
  8585     0580  1441               	bsf	___awdiv@quotient,0
  8586     0581                     i1l2893:
  8587     0581  3001               	movlw	1
  8588     0582                     u162_25:
  8589     0582  36F8               	lsrf	___awdiv@divisor+1,f
  8590     0583  0CF7               	rrf	___awdiv@divisor,f
  8591     0584  0B89               	decfsz	9,f
  8592     0585  2D82               	goto	u162_25
  8593     0586  3001               	movlw	1
  8594     0587  02BF               	subwf	___awdiv@counter,f
  8595     0588  1D03               	btfss	3,2
  8596     0589  2D6F               	goto	i1l2887
  8597     058A                     i1l2897:
  8598     058A  0840               	movf	___awdiv@sign,w
  8599     058B  1903               	btfsc	3,2
  8600     058C  2D92               	goto	i1l2901
  8601     058D  09C1               	comf	___awdiv@quotient,f
  8602     058E  09C2               	comf	___awdiv@quotient+1,f
  8603     058F  0AC1               	incf	___awdiv@quotient,f
  8604     0590  1903               	skipnz
  8605     0591  0AC2               	incf	___awdiv@quotient+1,f
  8606     0592                     i1l2901:
  8607     0592  0842               	movf	___awdiv@quotient+1,w
  8608     0593  00F8               	movwf	?___awdiv+1
  8609     0594  0841               	movf	___awdiv@quotient,w
  8610     0595  00F7               	movwf	?___awdiv
  8611     0596  0008               	return
  8612     0597                     __end_of___awdiv:
  8613                           
  8614                           	psect	text53
  8615     0C56                     __ptext53:	
  8616 ;; *************** function _TMR0_ReadTimer *****************
  8617 ;; Defined at:
  8618 ;;		line 80 in file "mcc_generated_files/tmr0.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  readVal         1    0[COMMON] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      unsigned char 
  8625 ;; Registers used:
  8626 ;;		wreg
  8627 ;; Tracked objects:
  8628 ;;		On entry : 1D/0
  8629 ;;		On exit  : 1F/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8632 ;;      Params:         0       0       0       0       0       0
  8633 ;;      Locals:         1       0       0       0       0       0
  8634 ;;      Temps:          0       0       0       0       0       0
  8635 ;;      Totals:         1       0       0       0       0       0
  8636 ;;Total ram usage:        1 bytes
  8637 ;; Hardware stack levels used: 1
  8638 ;; This function calls:
  8639 ;;		Nothing
  8640 ;; This function is called by:
  8641 ;;		_Update_tx_buffer
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645     0C56                     _TMR0_ReadTimer:	
  8646                           ;psect for function _TMR0_ReadTimer
  8647                           
  8648                           
  8649                           ;mcc_generated_files/tmr0.c: 82:     uint8_t readVal;;mcc_generated_files/tmr0.c: 84:   
      +                            readVal = TMR0;
  8650                           
  8651                           ;incstack = 0
  8652                           ; Regs used in _TMR0_ReadTimer: [wreg]
  8653     0C56  0020               	movlb	0	; select bank0
  8654     0C57  0815               	movf	21,w	;volatile
  8655     0C58  00F0               	movwf	TMR0_ReadTimer@readVal
  8656                           
  8657                           ;mcc_generated_files/tmr0.c: 86:     return readVal;
  8658     0C59  0870               	movf	TMR0_ReadTimer@readVal,w
  8659     0C5A  0008               	return
  8660     0C5B                     __end_of_TMR0_ReadTimer:
  8661                           
  8662                           	psect	text54
  8663     0C9C                     __ptext54:	
  8664 ;; *************** function _EUSART_is_tx_ready *****************
  8665 ;; Defined at:
  8666 ;;		line 121 in file "mcc_generated_files/eusart.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      _Bool 
  8673 ;; Registers used:
  8674 ;;		status,2
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 1C/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8680 ;;      Params:         0       0       0       0       0       0
  8681 ;;      Locals:         0       0       0       0       0       0
  8682 ;;      Temps:          0       0       0       0       0       0
  8683 ;;      Totals:         0       0       0       0       0       0
  8684 ;;Total ram usage:        0 bytes
  8685 ;; Hardware stack levels used: 1
  8686 ;; This function calls:
  8687 ;;		Nothing
  8688 ;; This function is called by:
  8689 ;;		_Write_UART
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693     0C9C                     _EUSART_is_tx_ready:	
  8694                           ;psect for function _EUSART_is_tx_ready
  8695                           
  8696                           
  8697                           ;incstack = 0
  8698                           ; Regs used in _EUSART_is_tx_ready: [status,2]
  8699     0C9C  0020               	movlb	0	; select bank0
  8700     0C9D  1E11               	btfss	17,4	;volatile
  8701     0C9E  0008               	return
  8702     0C9F  0023               	movlb	3	; select bank3
  8703     0CA0  1A9E               	btfsc	30,5	;volatile
  8704     0CA1  0008               	return
  8705     0CA2  0008               	return
  8706     0CA3                     __end_of_EUSART_is_tx_ready:
  8707                           
  8708                           	psect	text55
  8709     0C95                     __ptext55:	
  8710 ;; *************** function _EUSART_Write *****************
  8711 ;; Defined at:
  8712 ;;		line 162 in file "mcc_generated_files/eusart.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;  txData          1    wreg     unsigned char 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  txData          1    0[COMMON] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      void 
  8719 ;; Registers used:
  8720 ;;		wreg
  8721 ;; Tracked objects:
  8722 ;;		On entry : 1F/0
  8723 ;;		On exit  : 1F/3
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8726 ;;      Params:         0       0       0       0       0       0
  8727 ;;      Locals:         1       0       0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0
  8729 ;;      Totals:         1       0       0       0       0       0
  8730 ;;Total ram usage:        1 bytes
  8731 ;; Hardware stack levels used: 1
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_Write_UART
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739     0C95                     _EUSART_Write:	
  8740                           ;psect for function _EUSART_Write
  8741                           
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _EUSART_Write: [wreg]
  8745                           ;EUSART_Write@txData stored from wreg
  8746     0C95  00F0               	movwf	EUSART_Write@txData
  8747     0C96                     i1l593:	
  8748                           ;mcc_generated_files/eusart.c: 165:     {;mcc_generated_files/eusart.c: 166:     }
  8749                           
  8750                           
  8751                           ;mcc_generated_files/eusart.c: 164:     while(0 == PIR1bits.TXIF)
  8752     0C96  1E11               	btfss	17,4	;volatile
  8753     0C97  2C96               	goto	i1l593
  8754                           
  8755                           ;mcc_generated_files/eusart.c: 168:     TXREG = txData;
  8756     0C98  0870               	movf	EUSART_Write@txData,w
  8757     0C99  0023               	movlb	3	; select bank3
  8758     0C9A  009A               	movwf	26	;volatile
  8759     0C9B  0008               	return
  8760     0C9C                     __end_of_EUSART_Write:
  8761                           
  8762                           	psect	text56
  8763     06DC                     __ptext56:	
  8764 ;; *************** function _EUSART_Receive_ISR *****************
  8765 ;; Defined at:
  8766 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;		None
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;		None
  8771 ;; Return value:  Size  Location     Type
  8772 ;;                  1    wreg      void 
  8773 ;; Registers used:
  8774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 1F/1
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8780 ;;      Params:         0       0       0       0       0       0
  8781 ;;      Locals:         0       0       0       0       0       0
  8782 ;;      Temps:          0       0       0       0       0       0
  8783 ;;      Totals:         0       0       0       0       0       0
  8784 ;;Total ram usage:        0 bytes
  8785 ;; Hardware stack levels used: 1
  8786 ;; Hardware stack levels required when called: 2
  8787 ;; This function calls:
  8788 ;;		NULL
  8789 ;;		_EUSART_DefaultErrorHandler
  8790 ;;		_EUSART_DefaultFramingErrorHandler
  8791 ;;		_EUSART_DefaultOverrunErrorHandler
  8792 ;;		_EUSART_RxDataHandler
  8793 ;; This function is called by:
  8794 ;;		_EUSART_Initialize
  8795 ;;		_Read_UART
  8796 ;;		_INTERRUPT_InterruptManager
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800     06DC                     _EUSART_Receive_ISR:	
  8801                           ;psect for function _EUSART_Receive_ISR
  8802                           
  8803                           
  8804                           ;mcc_generated_files/eusart.c: 176:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8805                           
  8806                           ;incstack = 0
  8807                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8808     06DC  0020               	movlb	0	; select bank0
  8809     06DD  0839               	movf	_eusartRxHead,w	;volatile
  8810     06DE  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8811     06DF  0086               	movwf	6
  8812     06E0  0187               	clrf	7
  8813     06E1  0181               	clrf	1
  8814                           
  8815                           ;mcc_generated_files/eusart.c: 178:     if(RCSTAbits.FERR){
  8816     06E2  0023               	movlb	3	; select bank3
  8817     06E3  1D1D               	btfss	29,2	;volatile
  8818     06E4  2EF1               	goto	i1l3529
  8819                           
  8820                           ;mcc_generated_files/eusart.c: 179:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8821     06E5  0020               	movlb	0	; select bank0
  8822     06E6  0839               	movf	_eusartRxHead,w	;volatile
  8823     06E7  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8824     06E8  0086               	movwf	6
  8825     06E9  0187               	clrf	7
  8826     06EA  1481               	bsf	1,1
  8827                           
  8828                           ;mcc_generated_files/eusart.c: 180:         EUSART_FramingErrorHandler();
  8829     06EB  0021               	movlb	1	; select bank1
  8830     06EC  0860               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  8831     06ED  008A               	movwf	10
  8832     06EE  085F               	movf	_EUSART_FramingErrorHandler^(0+128),w
  8833     06EF  000A               	callw
  8834     06F0  3186               	pagesel	$
  8835     06F1                     i1l3529:
  8836                           
  8837                           ;mcc_generated_files/eusart.c: 183:     if(RCSTAbits.OERR){
  8838     06F1  0023               	movlb	3	; select bank3
  8839     06F2  1C9D               	btfss	29,1	;volatile
  8840     06F3  2F00               	goto	i1l3535
  8841                           
  8842                           ;mcc_generated_files/eusart.c: 184:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8843     06F4  0020               	movlb	0	; select bank0
  8844     06F5  0839               	movf	_eusartRxHead,w	;volatile
  8845     06F6  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8846     06F7  0086               	movwf	6
  8847     06F8  0187               	clrf	7
  8848     06F9  1501               	bsf	1,2
  8849                           
  8850                           ;mcc_generated_files/eusart.c: 185:         EUSART_OverrunErrorHandler();
  8851     06FA  0021               	movlb	1	; select bank1
  8852     06FB  085E               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  8853     06FC  008A               	movwf	10
  8854     06FD  085D               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  8855     06FE  000A               	callw
  8856     06FF  3186               	pagesel	$
  8857     0700                     i1l3535:
  8858                           
  8859                           ;mcc_generated_files/eusart.c: 188:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8860     0700  0020               	movlb	0	; select bank0
  8861     0701  0839               	movf	_eusartRxHead,w	;volatile
  8862     0702  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8863     0703  0086               	movwf	6
  8864     0704  0187               	clrf	7
  8865     0705  0801               	movf	1,w
  8866     0706  1903               	btfsc	3,2
  8867     0707  2F0F               	goto	i1l3539
  8868                           
  8869                           ;mcc_generated_files/eusart.c: 189:         EUSART_ErrorHandler();
  8870     0708  0021               	movlb	1	; select bank1
  8871     0709  085C               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  8872     070A  008A               	movwf	10
  8873     070B  085B               	movf	_EUSART_ErrorHandler^(0+128),w
  8874     070C  000A               	callw
  8875     070D  3186               	pagesel	$
  8876                           
  8877                           ;mcc_generated_files/eusart.c: 190:     } else {
  8878     070E  0008               	return
  8879     070F                     i1l3539:
  8880                           
  8881                           ;mcc_generated_files/eusart.c: 191:         EUSART_RxDataHandler();
  8882     070F  318D  25EA         	fcall	_EUSART_RxDataHandler
  8883     0711  0008               	return
  8884     0712                     __end_of_EUSART_Receive_ISR:
  8885                           
  8886                           	psect	text57
  8887     061D                     __ptext57:	
  8888 ;; *************** function _Read_UART *****************
  8889 ;; Defined at:
  8890 ;;		line 77 in file "main.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;		None
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;  dest            2   28[BANK0 ] int 
  8895 ;;  ori             2   26[BANK0 ] int 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 1F/1
  8902 ;;		On exit  : 1F/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8905 ;;      Params:         0       0       0       0       0       0
  8906 ;;      Locals:         0       4       0       0       0       0
  8907 ;;      Temps:          1       0       0       0       0       0
  8908 ;;      Totals:         1       4       0       0       0       0
  8909 ;;Total ram usage:        5 bytes
  8910 ;; Hardware stack levels used: 1
  8911 ;; Hardware stack levels required when called: 4
  8912 ;; This function calls:
  8913 ;;		_EUSART_Read
  8914 ;;		_EUSART_Receive_ISR
  8915 ;;		_New_request
  8916 ;; This function is called by:
  8917 ;;		_main
  8918 ;;		_INTERRUPT_InterruptManager
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922     061D                     _Read_UART:	
  8923                           ;psect for function _Read_UART
  8924                           
  8925                           
  8926                           ;main.c: 78:     EUSART_Receive_ISR();
  8927                           
  8928                           ;incstack = 0
  8929                           ; Regs used in _Read_UART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8930     061D  3186  26DC  3186   	fcall	_EUSART_Receive_ISR
  8931                           
  8932                           ;main.c: 79:     uart_read_buffer[uart_read_buffer_count] = EUSART_Read();
  8933     0620  318E  26A9  3186   	fcall	_EUSART_Read
  8934     0623  00FC               	movwf	??_Read_UART
  8935     0624  0020               	movlb	0	; select bank0
  8936     0625  0833               	movf	_uart_read_buffer_count,w
  8937     0626  3EA0               	addlw	(low (_uart_read_buffer| 0))& (0+255)
  8938     0627  0086               	movwf	6
  8939     0628  0187               	clrf	7
  8940     0629  087C               	movf	??_Read_UART,w
  8941     062A  0081               	movwf	1
  8942                           
  8943                           ;main.c: 80:     if(uart_read_buffer[uart_read_buffer_count] =='\r'){
  8944     062B  0833               	movf	_uart_read_buffer_count,w
  8945     062C  3EA0               	addlw	(low (_uart_read_buffer| 0))& (0+255)
  8946     062D  0086               	movwf	6
  8947     062E  0187               	clrf	7
  8948     062F  300D               	movlw	13
  8949     0630  0601               	xorwf	1,w
  8950     0631  1D03               	btfss	3,2
  8951     0632  2E5A               	goto	i1l4635
  8952                           
  8953                           ;main.c: 81:         int ori = uart_read_buffer[0] - '0';
  8954     0633  0021               	movlb	1	; select bank1
  8955     0634  0820               	movf	_uart_read_buffer^(0+128),w
  8956     0635  3ED0               	addlw	208
  8957     0636  0020               	movlb	0	; select bank0
  8958     0637  00D9               	movwf	Read_UART@ori
  8959     0638  30FF               	movlw	255
  8960     0639  1803               	skipnc
  8961     063A  3000               	movlw	0
  8962     063B  00DA               	movwf	Read_UART@ori+1
  8963                           
  8964                           ;main.c: 82:         int dest = uart_read_buffer[1] - '0';
  8965     063C  0021               	movlb	1	; select bank1
  8966     063D  0821               	movf	(_uart_read_buffer^(0+128)+1),w
  8967     063E  3ED0               	addlw	208
  8968     063F  0020               	movlb	0	; select bank0
  8969     0640  00DB               	movwf	Read_UART@dest
  8970     0641  30FF               	movlw	255
  8971     0642  1803               	skipnc
  8972     0643  3000               	movlw	0
  8973     0644  00DC               	movwf	Read_UART@dest+1
  8974                           
  8975                           ;main.c: 83:         ori--;
  8976     0645  30FF               	movlw	255
  8977     0646  07D9               	addwf	Read_UART@ori,f
  8978     0647  30FF               	movlw	255
  8979     0648  3DDA               	addwfc	Read_UART@ori+1,f
  8980                           
  8981                           ;main.c: 84:         dest--;
  8982     0649  30FF               	movlw	255
  8983     064A  07DB               	addwf	Read_UART@dest,f
  8984     064B  30FF               	movlw	255
  8985     064C  3DDC               	addwfc	Read_UART@dest+1,f
  8986                           
  8987                           ;main.c: 85:         New_request(ori,dest);
  8988     064D  085A               	movf	Read_UART@ori+1,w
  8989     064E  00F9               	movwf	New_request@origin+1
  8990     064F  0859               	movf	Read_UART@ori,w
  8991     0650  00F8               	movwf	New_request@origin
  8992     0651  085C               	movf	Read_UART@dest+1,w
  8993     0652  00FB               	movwf	New_request@dest+1
  8994     0653  085B               	movf	Read_UART@dest,w
  8995     0654  00FA               	movwf	New_request@dest
  8996     0655  3181  21F2         	fcall	_New_request
  8997                           
  8998                           ;main.c: 86:         uart_read_buffer_count = 0;
  8999     0657  01B3               	clrf	_uart_read_buffer_count
  9000     0658  01B4               	clrf	_uart_read_buffer_count+1
  9001     0659  0008               	return
  9002     065A                     i1l4635:
  9003                           
  9004                           ;main.c: 90:     uart_read_buffer_count++;
  9005     065A  3001               	movlw	1
  9006     065B  07B3               	addwf	_uart_read_buffer_count,f
  9007     065C  3000               	movlw	0
  9008     065D  3DB4               	addwfc	_uart_read_buffer_count+1,f
  9009     065E  0008               	return
  9010     065F                     __end_of_Read_UART:
  9011                           
  9012                           	psect	text58
  9013     01F2                     __ptext58:	
  9014 ;; *************** function _New_request *****************
  9015 ;; Defined at:
  9016 ;;		line 19 in file "main.c"
  9017 ;; Parameters:    Size  Location     Type
  9018 ;;  origin          2    8[COMMON] int 
  9019 ;;  dest            2   10[COMMON] int 
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;  i               2   22[BANK0 ] int 
  9022 ;;  i               2   20[BANK0 ] int 
  9023 ;;  i               2   18[BANK0 ] int 
  9024 ;;  i               2   16[BANK0 ] int 
  9025 ;;  index_          2   24[BANK0 ] int 
  9026 ;;  index_ori       2   14[BANK0 ] int 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      void 
  9029 ;; Registers used:
  9030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 1F/0
  9033 ;;		On exit  : 1F/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9036 ;;      Params:         4       0       0       0       0       0
  9037 ;;      Locals:         0      12       0       0       0       0
  9038 ;;      Temps:          0       3       0       0       0       0
  9039 ;;      Totals:         4      15       0       0       0       0
  9040 ;;Total ram usage:       19 bytes
  9041 ;; Hardware stack levels used: 1
  9042 ;; Hardware stack levels required when called: 3
  9043 ;; This function calls:
  9044 ;;		i1_Matrix_update_dir
  9045 ;;		i1___awmod
  9046 ;; This function is called by:
  9047 ;;		_Read_UART
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051     01F2                     _New_request:	
  9052                           ;psect for function _New_request
  9053                           
  9054                           
  9055                           ;main.c: 20:   int index_ori;;main.c: 21:   if(origin == dest){return;}
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _New_request: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9059     01F2  087B               	movf	New_request@dest+1,w
  9060     01F3  0679               	xorwf	New_request@origin+1,w
  9061     01F4  1D03               	skipz
  9062     01F5  29F8               	goto	u315_25
  9063     01F6  087A               	movf	New_request@dest,w
  9064     01F7  0678               	xorwf	New_request@origin,w
  9065     01F8                     u315_25:
  9066     01F8  1903               	btfsc	3,2
  9067     01F9  0008               	return
  9068                           
  9069                           ;main.c: 22:   int index_;;main.c: 23:   if(origin < dest){
  9070     01FA  0879               	movf	New_request@origin+1,w
  9071     01FB  3A80               	xorlw	128
  9072     01FC  00CA               	movwf	??_New_request
  9073     01FD  087B               	movf	New_request@dest+1,w
  9074     01FE  3A80               	xorlw	128
  9075     01FF  024A               	subwf	??_New_request,w
  9076     0200  1D03               	skipz
  9077     0201  2A04               	goto	u316_25
  9078     0202  087A               	movf	New_request@dest,w
  9079     0203  0278               	subwf	New_request@origin,w
  9080     0204                     u316_25:
  9081     0204  1803               	skipnc
  9082     0205  2A8F               	goto	i1l4459
  9083                           
  9084                           ;main.c: 24:       index_ = index + 1;
  9085     0206  0020               	movlb	0	; select bank0
  9086     0207  083E               	movf	_index,w
  9087     0208  3E01               	addlw	1
  9088     0209  00D7               	movwf	New_request@index_
  9089     020A  3000               	movlw	0
  9090     020B  1803               	skipnc
  9091     020C  3001               	movlw	1
  9092     020D  00D8               	movwf	New_request@index_+1
  9093                           
  9094                           ;main.c: 25:       for(int i=0; i<6; i++){
  9095     020E  01CF               	clrf	New_request@i
  9096     020F  01D0               	clrf	New_request@i+1
  9097     0210                     i1l4433:
  9098                           
  9099                           ;main.c: 26:           index_ = index_ % 6;
  9100     0210  3006               	movlw	6
  9101     0211  00F0               	movwf	i1___awmod@divisor
  9102     0212  3000               	movlw	0
  9103     0213  00F1               	movwf	i1___awmod@divisor+1
  9104     0214  0020               	movlb	0	; select bank0
  9105     0215  0858               	movf	New_request@index_+1,w
  9106     0216  00F3               	movwf	i1___awmod@dividend+1
  9107     0217  0857               	movf	New_request@index_,w
  9108     0218  00F2               	movwf	i1___awmod@dividend
  9109     0219  3185  25DA  3181   	fcall	i1___awmod
  9110     021C  0871               	movf	?i1___awmod+1,w
  9111     021D  00D8               	movwf	New_request@index_+1
  9112     021E  0870               	movf	?i1___awmod,w
  9113     021F  00D7               	movwf	New_request@index_
  9114                           
  9115                           ;main.c: 27:           if(FLOORS[index_] == origin){
  9116     0220  3022               	movlw	low _FLOORS
  9117     0221  0757               	addwf	New_request@index_,w
  9118     0222  0084               	movwf	4
  9119     0223  3008               	movlw	high _FLOORS
  9120     0224  3D58               	addwfc	New_request@index_+1,w
  9121     0225  3880               	iorlw	128
  9122     0226  0085               	movwf	5
  9123     0227  0800               	movf	0,w	;code access
  9124     0228  00CA               	movwf	??_New_request
  9125     0229  01CB               	clrf	??_New_request+1
  9126     022A  0879               	movf	New_request@origin+1,w
  9127     022B  064B               	xorwf	??_New_request+1,w
  9128     022C  1D03               	skipz
  9129     022D  2A30               	goto	u317_25
  9130     022E  0878               	movf	New_request@origin,w
  9131     022F  064A               	xorwf	??_New_request,w
  9132     0230                     u317_25:
  9133     0230  1D03               	skipz
  9134     0231  2A3D               	goto	i1l4441
  9135                           
  9136                           ;main.c: 28:               route[index_]=1;
  9137     0232  0857               	movf	New_request@index_,w
  9138     0233  3E27               	addlw	(low (_route| 0))& (0+255)
  9139     0234  0086               	movwf	6
  9140     0235  0187               	clrf	7
  9141     0236  3001               	movlw	1
  9142     0237  0081               	movwf	1
  9143                           
  9144                           ;main.c: 29:               index_ori = index_;
  9145     0238  0858               	movf	New_request@index_+1,w
  9146     0239  00CE               	movwf	New_request@index_ori+1
  9147     023A  0857               	movf	New_request@index_,w
  9148     023B  00CD               	movwf	New_request@index_ori
  9149                           
  9150                           ;main.c: 30:               break;
  9151     023C  2A50               	goto	i1l4443
  9152     023D                     i1l4441:
  9153                           
  9154                           ;main.c: 32:           index_++;
  9155     023D  3001               	movlw	1
  9156     023E  07D7               	addwf	New_request@index_,f
  9157     023F  3000               	movlw	0
  9158     0240  3DD8               	addwfc	New_request@index_+1,f
  9159                           
  9160                           ;main.c: 33:         }
  9161     0241  3001               	movlw	1
  9162     0242  07CF               	addwf	New_request@i,f
  9163     0243  3000               	movlw	0
  9164     0244  3DD0               	addwfc	New_request@i+1,f
  9165     0245  0850               	movf	New_request@i+1,w
  9166     0246  3A80               	xorlw	128
  9167     0247  00CA               	movwf	??_New_request
  9168     0248  3080               	movlw	128
  9169     0249  024A               	subwf	??_New_request,w
  9170     024A  1D03               	skipz
  9171     024B  2A4E               	goto	u318_25
  9172     024C  3006               	movlw	6
  9173     024D  024F               	subwf	New_request@i,w
  9174     024E                     u318_25:
  9175     024E  1C03               	skipc
  9176     024F  2A10               	goto	i1l4433
  9177     0250                     i1l4443:
  9178                           
  9179                           ;main.c: 34:       for(int i=0; i<6; i++){
  9180     0250  0020               	movlb	0	; select bank0
  9181     0251  01D1               	clrf	New_request@i_1746
  9182     0252  01D2               	clrf	New_request@i_1746+1
  9183     0253                     i1l4449:
  9184                           
  9185                           ;main.c: 35:           index_++;
  9186     0253  3001               	movlw	1
  9187     0254  0020               	movlb	0	; select bank0
  9188     0255  07D7               	addwf	New_request@index_,f
  9189     0256  3000               	movlw	0
  9190     0257  3DD8               	addwfc	New_request@index_+1,f
  9191                           
  9192                           ;main.c: 36:           index_ = index_ % 6;
  9193     0258  3006               	movlw	6
  9194     0259  00F0               	movwf	i1___awmod@divisor
  9195     025A  3000               	movlw	0
  9196     025B  00F1               	movwf	i1___awmod@divisor+1
  9197     025C  0858               	movf	New_request@index_+1,w
  9198     025D  00F3               	movwf	i1___awmod@dividend+1
  9199     025E  0857               	movf	New_request@index_,w
  9200     025F  00F2               	movwf	i1___awmod@dividend
  9201     0260  3185  25DA  3181   	fcall	i1___awmod
  9202     0263  0871               	movf	?i1___awmod+1,w
  9203     0264  00D8               	movwf	New_request@index_+1
  9204     0265  0870               	movf	?i1___awmod,w
  9205     0266  00D7               	movwf	New_request@index_
  9206                           
  9207                           ;main.c: 37:           if(FLOORS[index_]== dest)
  9208     0267  3022               	movlw	low _FLOORS
  9209     0268  0757               	addwf	New_request@index_,w
  9210     0269  0084               	movwf	4
  9211     026A  3008               	movlw	high _FLOORS
  9212     026B  3D58               	addwfc	New_request@index_+1,w
  9213     026C  3880               	iorlw	128
  9214     026D  0085               	movwf	5
  9215     026E  0800               	movf	0,w	;code access
  9216     026F  00CA               	movwf	??_New_request
  9217     0270  01CB               	clrf	??_New_request+1
  9218     0271  087B               	movf	New_request@dest+1,w
  9219     0272  064B               	xorwf	??_New_request+1,w
  9220     0273  1D03               	skipz
  9221     0274  2A77               	goto	u319_25
  9222     0275  087A               	movf	New_request@dest,w
  9223     0276  064A               	xorwf	??_New_request,w
  9224     0277                     u319_25:
  9225     0277  1D03               	skipz
  9226     0278  2A80               	goto	i1l4457
  9227                           
  9228                           ;main.c: 38:             {;main.c: 39:               route[index_] = 1;
  9229     0279  0857               	movf	New_request@index_,w
  9230     027A  3E27               	addlw	(low (_route| 0))& (0+255)
  9231     027B  0086               	movwf	6
  9232     027C  0187               	clrf	7
  9233     027D  3001               	movlw	1
  9234     027E  0081               	movwf	1
  9235                           
  9236                           ;main.c: 40:               break;
  9237     027F  2A8F               	goto	i1l4459
  9238     0280                     i1l4457:
  9239                           
  9240                           ;main.c: 42:         }
  9241     0280  3001               	movlw	1
  9242     0281  07D1               	addwf	New_request@i_1746,f
  9243     0282  3000               	movlw	0
  9244     0283  3DD2               	addwfc	New_request@i_1746+1,f
  9245     0284  0852               	movf	New_request@i_1746+1,w
  9246     0285  3A80               	xorlw	128
  9247     0286  00CA               	movwf	??_New_request
  9248     0287  3080               	movlw	128
  9249     0288  024A               	subwf	??_New_request,w
  9250     0289  1D03               	skipz
  9251     028A  2A8D               	goto	u320_25
  9252     028B  3006               	movlw	6
  9253     028C  0251               	subwf	New_request@i_1746,w
  9254     028D                     u320_25:
  9255     028D  1C03               	skipc
  9256     028E  2A53               	goto	i1l4449
  9257     028F                     i1l4459:
  9258                           
  9259                           ;main.c: 45:     if(origin >= dest){
  9260     028F  0879               	movf	New_request@origin+1,w
  9261     0290  3A80               	xorlw	128
  9262     0291  0020               	movlb	0	; select bank0
  9263     0292  00CA               	movwf	??_New_request
  9264     0293  087B               	movf	New_request@dest+1,w
  9265     0294  3A80               	xorlw	128
  9266     0295  024A               	subwf	??_New_request,w
  9267     0296  1D03               	skipz
  9268     0297  2A9A               	goto	u321_25
  9269     0298  087A               	movf	New_request@dest,w
  9270     0299  0278               	subwf	New_request@origin,w
  9271     029A                     u321_25:
  9272     029A  1C03               	skipc
  9273     029B  2B29               	goto	i1l4497
  9274                           
  9275                           ;main.c: 46:       if(index > 3)index_ = index+1;
  9276     029C  3004               	movlw	4
  9277     029D  0020               	movlb	0	; select bank0
  9278     029E  023E               	subwf	_index,w
  9279     029F  1C03               	skipc
  9280     02A0  2AA8               	goto	i1l4465
  9281     02A1  083E               	movf	_index,w
  9282     02A2  3E01               	addlw	1
  9283     02A3  00D7               	movwf	New_request@index_
  9284     02A4  3000               	movlw	0
  9285     02A5  1803               	skipnc
  9286     02A6  3001               	movlw	1
  9287     02A7  2AAB               	goto	L4
  9288     02A8                     i1l4465:
  9289     02A8  3003               	movlw	3
  9290     02A9  00D7               	movwf	New_request@index_
  9291     02AA  3000               	movlw	0
  9292     02AB                     L4:
  9293     02AB  00D8               	movwf	New_request@index_+1
  9294                           
  9295                           ;main.c: 49:       for(int i=0; i<6; i++){
  9296     02AC  01D3               	clrf	New_request@i_1747
  9297     02AD  01D4               	clrf	New_request@i_1747+1
  9298     02AE                     i1l4473:
  9299                           
  9300                           ;main.c: 50:           index_ = index_ % 6;
  9301     02AE  3006               	movlw	6
  9302     02AF  00F0               	movwf	i1___awmod@divisor
  9303     02B0  3000               	movlw	0
  9304     02B1  00F1               	movwf	i1___awmod@divisor+1
  9305     02B2  0020               	movlb	0	; select bank0
  9306     02B3  0858               	movf	New_request@index_+1,w
  9307     02B4  00F3               	movwf	i1___awmod@dividend+1
  9308     02B5  0857               	movf	New_request@index_,w
  9309     02B6  00F2               	movwf	i1___awmod@dividend
  9310     02B7  3185  25DA  3181   	fcall	i1___awmod
  9311     02BA  0871               	movf	?i1___awmod+1,w
  9312     02BB  00D8               	movwf	New_request@index_+1
  9313     02BC  0870               	movf	?i1___awmod,w
  9314     02BD  00D7               	movwf	New_request@index_
  9315                           
  9316                           ;main.c: 51:           if(FLOORS[index_] == origin){
  9317     02BE  3022               	movlw	low _FLOORS
  9318     02BF  0757               	addwf	New_request@index_,w
  9319     02C0  0084               	movwf	4
  9320     02C1  3008               	movlw	high _FLOORS
  9321     02C2  3D58               	addwfc	New_request@index_+1,w
  9322     02C3  3880               	iorlw	128
  9323     02C4  0085               	movwf	5
  9324     02C5  0800               	movf	0,w	;code access
  9325     02C6  00CA               	movwf	??_New_request
  9326     02C7  01CB               	clrf	??_New_request+1
  9327     02C8  0879               	movf	New_request@origin+1,w
  9328     02C9  064B               	xorwf	??_New_request+1,w
  9329     02CA  1D03               	skipz
  9330     02CB  2ACE               	goto	u323_25
  9331     02CC  0878               	movf	New_request@origin,w
  9332     02CD  064A               	xorwf	??_New_request,w
  9333     02CE                     u323_25:
  9334     02CE  1D03               	skipz
  9335     02CF  2AD7               	goto	i1l4479
  9336                           
  9337                           ;main.c: 52:               route[index_]=1;
  9338     02D0  0857               	movf	New_request@index_,w
  9339     02D1  3E27               	addlw	(low (_route| 0))& (0+255)
  9340     02D2  0086               	movwf	6
  9341     02D3  0187               	clrf	7
  9342     02D4  3001               	movlw	1
  9343     02D5  0081               	movwf	1
  9344                           
  9345                           ;main.c: 53:               break;
  9346     02D6  2AEA               	goto	i1l4481
  9347     02D7                     i1l4479:
  9348                           
  9349                           ;main.c: 55:           index_++;
  9350     02D7  3001               	movlw	1
  9351     02D8  07D7               	addwf	New_request@index_,f
  9352     02D9  3000               	movlw	0
  9353     02DA  3DD8               	addwfc	New_request@index_+1,f
  9354                           
  9355                           ;main.c: 56:         }
  9356     02DB  3001               	movlw	1
  9357     02DC  07D3               	addwf	New_request@i_1747,f
  9358     02DD  3000               	movlw	0
  9359     02DE  3DD4               	addwfc	New_request@i_1747+1,f
  9360     02DF  0854               	movf	New_request@i_1747+1,w
  9361     02E0  3A80               	xorlw	128
  9362     02E1  00CA               	movwf	??_New_request
  9363     02E2  3080               	movlw	128
  9364     02E3  024A               	subwf	??_New_request,w
  9365     02E4  1D03               	skipz
  9366     02E5  2AE8               	goto	u324_25
  9367     02E6  3006               	movlw	6
  9368     02E7  0253               	subwf	New_request@i_1747,w
  9369     02E8                     u324_25:
  9370     02E8  1C03               	skipc
  9371     02E9  2AAE               	goto	i1l4473
  9372     02EA                     i1l4481:
  9373                           
  9374                           ;main.c: 57:       for(int i=0; i<6; i++){
  9375     02EA  0020               	movlb	0	; select bank0
  9376     02EB  01D5               	clrf	New_request@i_1748
  9377     02EC  01D6               	clrf	New_request@i_1748+1
  9378     02ED                     i1l4487:
  9379                           
  9380                           ;main.c: 58:           index_++;
  9381     02ED  3001               	movlw	1
  9382     02EE  0020               	movlb	0	; select bank0
  9383     02EF  07D7               	addwf	New_request@index_,f
  9384     02F0  3000               	movlw	0
  9385     02F1  3DD8               	addwfc	New_request@index_+1,f
  9386                           
  9387                           ;main.c: 59:           index_ = index_ % 6;
  9388     02F2  3006               	movlw	6
  9389     02F3  00F0               	movwf	i1___awmod@divisor
  9390     02F4  3000               	movlw	0
  9391     02F5  00F1               	movwf	i1___awmod@divisor+1
  9392     02F6  0858               	movf	New_request@index_+1,w
  9393     02F7  00F3               	movwf	i1___awmod@dividend+1
  9394     02F8  0857               	movf	New_request@index_,w
  9395     02F9  00F2               	movwf	i1___awmod@dividend
  9396     02FA  3185  25DA  3181   	fcall	i1___awmod
  9397     02FD  0871               	movf	?i1___awmod+1,w
  9398     02FE  00D8               	movwf	New_request@index_+1
  9399     02FF  0870               	movf	?i1___awmod,w
  9400     0300  00D7               	movwf	New_request@index_
  9401                           
  9402                           ;main.c: 60:           if(FLOORS[index_]== dest)
  9403     0301  3022               	movlw	low _FLOORS
  9404     0302  0757               	addwf	New_request@index_,w
  9405     0303  0084               	movwf	4
  9406     0304  3008               	movlw	high _FLOORS
  9407     0305  3D58               	addwfc	New_request@index_+1,w
  9408     0306  3880               	iorlw	128
  9409     0307  0085               	movwf	5
  9410     0308  0800               	movf	0,w	;code access
  9411     0309  00CA               	movwf	??_New_request
  9412     030A  01CB               	clrf	??_New_request+1
  9413     030B  087B               	movf	New_request@dest+1,w
  9414     030C  064B               	xorwf	??_New_request+1,w
  9415     030D  1D03               	skipz
  9416     030E  2B11               	goto	u325_25
  9417     030F  087A               	movf	New_request@dest,w
  9418     0310  064A               	xorwf	??_New_request,w
  9419     0311                     u325_25:
  9420     0311  1D03               	skipz
  9421     0312  2B1A               	goto	i1l4495
  9422                           
  9423                           ;main.c: 61:             {;main.c: 62:               route[index_] = 1;
  9424     0313  0857               	movf	New_request@index_,w
  9425     0314  3E27               	addlw	(low (_route| 0))& (0+255)
  9426     0315  0086               	movwf	6
  9427     0316  0187               	clrf	7
  9428     0317  3001               	movlw	1
  9429     0318  0081               	movwf	1
  9430                           
  9431                           ;main.c: 63:               break;
  9432     0319  2B29               	goto	i1l4497
  9433     031A                     i1l4495:
  9434                           
  9435                           ;main.c: 65:         }
  9436     031A  3001               	movlw	1
  9437     031B  07D5               	addwf	New_request@i_1748,f
  9438     031C  3000               	movlw	0
  9439     031D  3DD6               	addwfc	New_request@i_1748+1,f
  9440     031E  0856               	movf	New_request@i_1748+1,w
  9441     031F  3A80               	xorlw	128
  9442     0320  00CA               	movwf	??_New_request
  9443     0321  3080               	movlw	128
  9444     0322  024A               	subwf	??_New_request,w
  9445     0323  1D03               	skipz
  9446     0324  2B27               	goto	u326_25
  9447     0325  3006               	movlw	6
  9448     0326  0255               	subwf	New_request@i_1748,w
  9449     0327                     u326_25:
  9450     0327  1C03               	skipc
  9451     0328  2AED               	goto	i1l4487
  9452     0329                     i1l4497:
  9453                           
  9454                           ;main.c: 68:   Matrix_update_dir();
  9455     0329  3184  247B  3181   	fcall	i1_Matrix_update_dir
  9456                           
  9457                           ;main.c: 69:   if(origin == current_floor & CCP3CONbits.CCP3M==0)
  9458     032C  0026               	movlb	6	; select bank6
  9459     032D  0813               	movf	19,w	;volatile
  9460     032E  390F               	andlw	15
  9461     032F  3A00               	xorlw	0
  9462     0330  1D03               	btfss	3,2
  9463     0331  2B34               	goto	u327_20
  9464     0332  3001               	movlw	1
  9465     0333  2B35               	goto	u327_22
  9466     0334                     u327_20:
  9467     0334  3000               	movlw	0
  9468     0335                     u327_22:
  9469     0335  0020               	movlb	0	; select bank0
  9470     0336  00CA               	movwf	??_New_request
  9471     0337  083D               	movf	_current_floor,w
  9472     0338  00CB               	movwf	??_New_request+1
  9473     0339  01CC               	clrf	??_New_request+2
  9474     033A  0879               	movf	New_request@origin+1,w
  9475     033B  064C               	xorwf	??_New_request+2,w
  9476     033C  1D03               	skipz
  9477     033D  2B40               	goto	u328_25
  9478     033E  0878               	movf	New_request@origin,w
  9479     033F  064B               	xorwf	??_New_request+1,w
  9480     0340                     u328_25:
  9481     0340  1D03               	btfss	3,2
  9482     0341  2B44               	goto	u328_20
  9483     0342  3001               	movlw	1
  9484     0343  2B45               	goto	u328_22
  9485     0344                     u328_20:
  9486     0344  3000               	movlw	0
  9487     0345                     u328_22:
  9488     0345  054A               	andwf	??_New_request,w
  9489     0346  3800               	iorlw	0
  9490     0347  1903               	skipnz
  9491     0348  0008               	return
  9492                           
  9493                           ;main.c: 70:     {;main.c: 71:       _delay((unsigned long)((2000)*(8000000/4000.0)));
  9494     0349  3015               	movlw	21
  9495     034A  0020               	movlb	0	; select bank0
  9496     034B  00CB               	movwf	??_New_request+1
  9497     034C  304B               	movlw	75
  9498     034D  00CA               	movwf	??_New_request
  9499     034E  30BE               	movlw	190
  9500     034F                     u374_27:
  9501     034F  0B89               	decfsz	9,f
  9502     0350  2B4F               	goto	u374_27
  9503     0351  0BCA               	decfsz	??_New_request,f
  9504     0352  2B4F               	goto	u374_27
  9505     0353  0BCB               	decfsz	??_New_request+1,f
  9506     0354  2B4F               	goto	u374_27
  9507     0355  0000               	nop
  9508                           
  9509                           ;main.c: 72:       route[index_ori] = 0;
  9510     0356  0020               	movlb	0	; select bank0
  9511     0357  084D               	movf	New_request@index_ori,w
  9512     0358  3E27               	addlw	(low (_route| 0))& (0+255)
  9513     0359  0086               	movwf	6
  9514     035A  0187               	clrf	7
  9515     035B  0181               	clrf	1
  9516                           
  9517                           ;main.c: 73:       Matrix_update_dir();
  9518     035C  3184  247B         	fcall	i1_Matrix_update_dir
  9519     035E  0008               	return
  9520     035F                     __end_of_New_request:
  9521                           
  9522                           	psect	text59
  9523     05DA                     __ptext59:	
  9524 ;; *************** function i1___awmod *****************
  9525 ;; Defined at:
  9526 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  divisor         2    0[COMMON] int 
  9529 ;;  dividend        2    2[COMMON] int 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  sign            1    5[COMMON] unsigned char 
  9532 ;;  counter         1    4[COMMON] unsigned char 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  2    0[COMMON] int 
  9535 ;; Registers used:
  9536 ;;		wreg, status,2, status,0
  9537 ;; Tracked objects:
  9538 ;;		On entry : 1F/0
  9539 ;;		On exit  : 1F/0
  9540 ;;		Unchanged: 1F/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9542 ;;      Params:         4       0       0       0       0       0
  9543 ;;      Locals:         2       0       0       0       0       0
  9544 ;;      Temps:          0       0       0       0       0       0
  9545 ;;      Totals:         6       0       0       0       0       0
  9546 ;;Total ram usage:        6 bytes
  9547 ;; Hardware stack levels used: 1
  9548 ;; This function calls:
  9549 ;;		Nothing
  9550 ;; This function is called by:
  9551 ;;		_New_request
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555     05DA                     i1___awmod:	
  9556                           ;psect for function i1___awmod
  9557                           
  9558                           
  9559                           ;incstack = 0
  9560                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  9561     05DA  01F5               	clrf	i1___awmod@sign
  9562     05DB  1FF3               	btfss	i1___awmod@dividend+1,7
  9563     05DC  2DE4               	goto	i1l3313
  9564     05DD  09F2               	comf	i1___awmod@dividend,f
  9565     05DE  09F3               	comf	i1___awmod@dividend+1,f
  9566     05DF  0AF2               	incf	i1___awmod@dividend,f
  9567     05E0  1903               	skipnz
  9568     05E1  0AF3               	incf	i1___awmod@dividend+1,f
  9569     05E2  3001               	movlw	1
  9570     05E3  00F5               	movwf	i1___awmod@sign
  9571     05E4                     i1l3313:
  9572     05E4  1FF1               	btfss	i1___awmod@divisor+1,7
  9573     05E5  2DEB               	goto	i1l3317
  9574     05E6  09F0               	comf	i1___awmod@divisor,f
  9575     05E7  09F1               	comf	i1___awmod@divisor+1,f
  9576     05E8  0AF0               	incf	i1___awmod@divisor,f
  9577     05E9  1903               	skipnz
  9578     05EA  0AF1               	incf	i1___awmod@divisor+1,f
  9579     05EB                     i1l3317:
  9580     05EB  0870               	movf	i1___awmod@divisor,w
  9581     05EC  0471               	iorwf	i1___awmod@divisor+1,w
  9582     05ED  1903               	btfsc	3,2
  9583     05EE  2E10               	goto	i1l3335
  9584     05EF  3001               	movlw	1
  9585     05F0  00F4               	movwf	i1___awmod@counter
  9586     05F1                     i1l3325:
  9587     05F1  1BF1               	btfsc	i1___awmod@divisor+1,7
  9588     05F2  2DFB               	goto	i1l3327
  9589     05F3  3001               	movlw	1
  9590     05F4                     u218_25:
  9591     05F4  35F0               	lslf	i1___awmod@divisor,f
  9592     05F5  0DF1               	rlf	i1___awmod@divisor+1,f
  9593     05F6  0B89               	decfsz	9,f
  9594     05F7  2DF4               	goto	u218_25
  9595     05F8  3001               	movlw	1
  9596     05F9  07F4               	addwf	i1___awmod@counter,f
  9597     05FA  2DF1               	goto	i1l3325
  9598     05FB                     i1l3327:
  9599     05FB  0871               	movf	i1___awmod@divisor+1,w
  9600     05FC  0273               	subwf	i1___awmod@dividend+1,w
  9601     05FD  1D03               	skipz
  9602     05FE  2E01               	goto	u220_25
  9603     05FF  0870               	movf	i1___awmod@divisor,w
  9604     0600  0272               	subwf	i1___awmod@dividend,w
  9605     0601                     u220_25:
  9606     0601  1C03               	skipc
  9607     0602  2E07               	goto	i1l3331
  9608     0603  0870               	movf	i1___awmod@divisor,w
  9609     0604  02F2               	subwf	i1___awmod@dividend,f
  9610     0605  0871               	movf	i1___awmod@divisor+1,w
  9611     0606  3BF3               	subwfb	i1___awmod@dividend+1,f
  9612     0607                     i1l3331:
  9613     0607  3001               	movlw	1
  9614     0608                     u221_25:
  9615     0608  36F1               	lsrf	i1___awmod@divisor+1,f
  9616     0609  0CF0               	rrf	i1___awmod@divisor,f
  9617     060A  0B89               	decfsz	9,f
  9618     060B  2E08               	goto	u221_25
  9619     060C  3001               	movlw	1
  9620     060D  02F4               	subwf	i1___awmod@counter,f
  9621     060E  1D03               	btfss	3,2
  9622     060F  2DFB               	goto	i1l3327
  9623     0610                     i1l3335:
  9624     0610  0875               	movf	i1___awmod@sign,w
  9625     0611  1903               	btfsc	3,2
  9626     0612  2E18               	goto	i1l3339
  9627     0613  09F2               	comf	i1___awmod@dividend,f
  9628     0614  09F3               	comf	i1___awmod@dividend+1,f
  9629     0615  0AF2               	incf	i1___awmod@dividend,f
  9630     0616  1903               	skipnz
  9631     0617  0AF3               	incf	i1___awmod@dividend+1,f
  9632     0618                     i1l3339:
  9633     0618  0873               	movf	i1___awmod@dividend+1,w
  9634     0619  00F1               	movwf	?i1___awmod+1
  9635     061A  0872               	movf	i1___awmod@dividend,w
  9636     061B  00F0               	movwf	?i1___awmod
  9637     061C  0008               	return
  9638     061D                     __end_ofi1___awmod:
  9639                           
  9640                           	psect	text60
  9641     047B                     __ptext60:	
  9642 ;; *************** function i1_Matrix_update_dir *****************
  9643 ;; Defined at:
  9644 ;;		line 239 in file "main.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  route_          4    0[BANK0 ] _Bool [4]
  9649 ;;  data            2    5[BANK0 ] unsigned char [2]
  9650 ;;  i               2    9[BANK0 ] int 
  9651 ;;  i               1    8[BANK0 ] unsigned char 
  9652 ;;  display_dir     1    7[BANK0 ] unsigned char 
  9653 ;;  mask            1    4[BANK0 ] unsigned char 
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  1    wreg      void 
  9656 ;; Registers used:
  9657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 1F/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9663 ;;      Params:         0       0       0       0       0       0
  9664 ;;      Locals:         0      11       0       0       0       0
  9665 ;;      Temps:          1       0       0       0       0       0
  9666 ;;      Totals:         1      11       0       0       0       0
  9667 ;;Total ram usage:       12 bytes
  9668 ;; Hardware stack levels used: 1
  9669 ;; Hardware stack levels required when called: 2
  9670 ;; This function calls:
  9671 ;;		i1_Tx_spi
  9672 ;;		i1___bmul
  9673 ;; This function is called by:
  9674 ;;		_New_request
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678     047B                     i1_Matrix_update_dir:	
  9679                           ;psect for function i1_Matrix_update_dir
  9680                           
  9681                           
  9682                           ;main.c: 240:     uint8_t data[2];;main.c: 241:     uint8_t display_dir;;main.c: 243:   
      +                            _Bool route_[4];;main.c: 244:     route_[0] = route[0];
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in i1_Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9686     047B  0020               	movlb	0	; select bank0
  9687     047C  0827               	movf	_route,w
  9688     047D  00BF               	movwf	i1Matrix_update_dir@route_
  9689                           
  9690                           ;main.c: 245:     route_[1] = route[1] | route[5];
  9691     047E  0828               	movf	_route+1,w
  9692     047F  042C               	iorwf	_route+5,w
  9693     0480  00C0               	movwf	i1Matrix_update_dir@route_+1
  9694                           
  9695                           ;main.c: 246:     route_[2] = route[2] | route[4];
  9696     0481  0829               	movf	_route+2,w
  9697     0482  042B               	iorwf	_route+4,w
  9698     0483  00C1               	movwf	i1Matrix_update_dir@route_+2
  9699                           
  9700                           ;main.c: 247:     route_[3] = route[3];
  9701     0484  082A               	movf	_route+3,w
  9702     0485  00C2               	movwf	i1Matrix_update_dir@route_+3
  9703                           
  9704                           ;main.c: 249:     uint8_t mask = 0;
  9705     0486  01C3               	clrf	i1Matrix_update_dir@mask
  9706                           
  9707                           ;main.c: 251:     for (int i = 0; i < 4; i++) {
  9708     0487  01C8               	clrf	i1Matrix_update_dir@i
  9709     0488  01C9               	clrf	i1Matrix_update_dir@i+1
  9710     0489                     i1l4205:
  9711                           
  9712                           ;main.c: 252:         if (route_[i]) mask |= (1 << i);
  9713     0489  0020               	movlb	0	; select bank0
  9714     048A  0848               	movf	i1Matrix_update_dir@i,w
  9715     048B  3E3F               	addlw	(low (i1Matrix_update_dir@route_| 0))& (0+255)
  9716     048C  0086               	movwf	6
  9717     048D  0187               	clrf	7
  9718     048E  0801               	movf	1,w
  9719     048F  1903               	btfsc	3,2
  9720     0490  2C9A               	goto	i1l4209
  9721     0491  3001               	movlw	1
  9722     0492  00F7               	movwf	??i1_Matrix_update_dir
  9723     0493  0A48               	incf	i1Matrix_update_dir@i,w
  9724     0494  2C96               	goto	u307_24
  9725     0495                     u307_25:
  9726     0495  35F7               	lslf	??i1_Matrix_update_dir,f
  9727     0496                     u307_24:
  9728     0496  0B89               	decfsz	9,f
  9729     0497  2C95               	goto	u307_25
  9730     0498  0877               	movf	??i1_Matrix_update_dir,w
  9731     0499  04C3               	iorwf	i1Matrix_update_dir@mask,f
  9732     049A                     i1l4209:
  9733                           
  9734                           ;main.c: 253:     }
  9735     049A  3001               	movlw	1
  9736     049B  07C8               	addwf	i1Matrix_update_dir@i,f
  9737     049C  3000               	movlw	0
  9738     049D  3DC9               	addwfc	i1Matrix_update_dir@i+1,f
  9739     049E  0849               	movf	i1Matrix_update_dir@i+1,w
  9740     049F  3A80               	xorlw	128
  9741     04A0  00F7               	movwf	??i1_Matrix_update_dir
  9742     04A1  3080               	movlw	128
  9743     04A2  0277               	subwf	??i1_Matrix_update_dir,w
  9744     04A3  1D03               	skipz
  9745     04A4  2CA7               	goto	u308_25
  9746     04A5  3004               	movlw	4
  9747     04A6  0248               	subwf	i1Matrix_update_dir@i,w
  9748     04A7                     u308_25:
  9749     04A7  1C03               	skipc
  9750     04A8  2C89               	goto	i1l4205
  9751                           
  9752                           ;main.c: 255:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
  9753     04A9  0026               	movlb	6	; select bank6
  9754     04AA  0813               	movf	19,w	;volatile
  9755     04AB  390F               	andlw	15
  9756     04AC  3A00               	xorlw	0
  9757     04AD  1D03               	skipz
  9758     04AE  2CB1               	goto	i1l4217
  9759     04AF  3006               	movlw	6
  9760     04B0  2CBA               	goto	L5
  9761     04B1                     i1l4217:
  9762     04B1  3003               	movlw	3
  9763     04B2  00F0               	movwf	i1___bmul@multiplicand
  9764     04B3  0022               	movlb	2	; select bank2
  9765     04B4  0D0C               	rlf	12,w	;volatile
  9766     04B5  0D0C               	rlf	12,w	;volatile
  9767     04B6  3901               	andlw	1
  9768     04B7  318D  25AB  3184   	fcall	i1___bmul
  9769     04BA                     L5:
  9770     04BA  0020               	movlb	0	; select bank0
  9771     04BB  00C6               	movwf	i1Matrix_update_dir@display_dir
  9772                           
  9773                           ;main.c: 257:     data[0] = 1;
  9774     04BC  3001               	movlw	1
  9775     04BD  00C4               	movwf	i1Matrix_update_dir@data
  9776                           
  9777                           ;main.c: 258:     data[1] = MATRIX_DIR[display_dir] | mask;
  9778     04BE  0846               	movf	i1Matrix_update_dir@display_dir,w
  9779     04BF  3E19               	addlw	low (_MATRIX_DIR| (0+32768))
  9780     04C0  0084               	movwf	4
  9781     04C1  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  9782     04C2  1803               	skipnc
  9783     04C3  3E01               	addlw	1
  9784     04C4  0085               	movwf	5
  9785     04C5  0800               	movf	0,w	;code access
  9786     04C6  0443               	iorwf	i1Matrix_update_dir@mask,w
  9787     04C7  00C5               	movwf	i1Matrix_update_dir@data+1
  9788                           
  9789                           ;main.c: 259:     Tx_spi(data, 2);
  9790     04C8  3044               	movlw	(low (i1Matrix_update_dir@data| 0))& (0+255)
  9791     04C9  00F4               	movwf	i1Tx_spi@data
  9792     04CA  3002               	movlw	2
  9793     04CB  00F5               	movwf	i1Tx_spi@dataSize
  9794     04CC  3000               	movlw	0
  9795     04CD  00F6               	movwf	i1Tx_spi@dataSize+1
  9796     04CE  318D  259C  3184   	fcall	i1_Tx_spi
  9797                           
  9798                           ;main.c: 260:     display_dir++;
  9799     04D1  3001               	movlw	1
  9800     04D2  0020               	movlb	0	; select bank0
  9801     04D3  07C6               	addwf	i1Matrix_update_dir@display_dir,f
  9802                           
  9803                           ;main.c: 262:     for(uint8_t i=2;i<=3;i++){
  9804     04D4  3002               	movlw	2
  9805     04D5  00C7               	movwf	i1Matrix_update_dir@i_1802
  9806     04D6                     i1l4233:
  9807                           
  9808                           ;main.c: 263:         data[0] = i;
  9809     04D6  0847               	movf	i1Matrix_update_dir@i_1802,w
  9810     04D7  00C4               	movwf	i1Matrix_update_dir@data
  9811                           
  9812                           ;main.c: 264:         data[1] = MATRIX_DIR[display_dir];
  9813     04D8  0846               	movf	i1Matrix_update_dir@display_dir,w
  9814     04D9  3E19               	addlw	low (_MATRIX_DIR| (0+32768))
  9815     04DA  0084               	movwf	4
  9816     04DB  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  9817     04DC  1803               	skipnc
  9818     04DD  3E01               	addlw	1
  9819     04DE  0085               	movwf	5
  9820     04DF  0800               	movf	0,w	;code access
  9821     04E0  00C5               	movwf	i1Matrix_update_dir@data+1
  9822                           
  9823                           ;main.c: 265:         Tx_spi(data, 2);
  9824     04E1  3044               	movlw	(low (i1Matrix_update_dir@data| 0))& (0+255)
  9825     04E2  00F4               	movwf	i1Tx_spi@data
  9826     04E3  3002               	movlw	2
  9827     04E4  00F5               	movwf	i1Tx_spi@dataSize
  9828     04E5  3000               	movlw	0
  9829     04E6  00F6               	movwf	i1Tx_spi@dataSize+1
  9830     04E7  318D  259C  3184   	fcall	i1_Tx_spi
  9831                           
  9832                           ;main.c: 266:         display_dir++;
  9833     04EA  3001               	movlw	1
  9834     04EB  0020               	movlb	0	; select bank0
  9835     04EC  07C6               	addwf	i1Matrix_update_dir@display_dir,f
  9836                           
  9837                           ;main.c: 268:     }
  9838     04ED  3001               	movlw	1
  9839     04EE  07C7               	addwf	i1Matrix_update_dir@i_1802,f
  9840     04EF  3004               	movlw	4
  9841     04F0  0247               	subwf	i1Matrix_update_dir@i_1802,w
  9842     04F1  1803               	btfsc	3,0
  9843     04F2  0008               	return
  9844     04F3  2CD6               	goto	i1l4233
  9845     04F4                     __end_ofi1_Matrix_update_dir:
  9846                           
  9847                           	psect	text61
  9848     0DAB                     __ptext61:	
  9849 ;; *************** function i1___bmul *****************
  9850 ;; Defined at:
  9851 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;  multiplier      1    wreg     unsigned char 
  9854 ;;  multiplicand    1    0[COMMON] unsigned char 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;  multiplier      1    2[COMMON] unsigned char 
  9857 ;;  product         1    1[COMMON] unsigned char 
  9858 ;; Return value:  Size  Location     Type
  9859 ;;                  1    wreg      unsigned char 
  9860 ;; Registers used:
  9861 ;;		wreg, status,2, status,0
  9862 ;; Tracked objects:
  9863 ;;		On entry : 1F/2
  9864 ;;		On exit  : 1F/2
  9865 ;;		Unchanged: 1F/0
  9866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9867 ;;      Params:         1       0       0       0       0       0
  9868 ;;      Locals:         2       0       0       0       0       0
  9869 ;;      Temps:          0       0       0       0       0       0
  9870 ;;      Totals:         3       0       0       0       0       0
  9871 ;;Total ram usage:        3 bytes
  9872 ;; Hardware stack levels used: 1
  9873 ;; This function calls:
  9874 ;;		Nothing
  9875 ;; This function is called by:
  9876 ;;		i1_Matrix_update_dir
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880     0DAB                     i1___bmul:	
  9881                           ;psect for function i1___bmul
  9882                           
  9883                           
  9884                           ;incstack = 0
  9885                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9886                           ;i1___bmul@multiplier stored from wreg
  9887     0DAB  00F2               	movwf	i1___bmul@multiplier
  9888     0DAC  01F1               	clrf	i1___bmul@product
  9889     0DAD                     i1l3129:
  9890     0DAD  1C72               	btfss	i1___bmul@multiplier,0
  9891     0DAE  2DB1               	goto	i1l3133
  9892     0DAF  0870               	movf	i1___bmul@multiplicand,w
  9893     0DB0  07F1               	addwf	i1___bmul@product,f
  9894     0DB1                     i1l3133:
  9895     0DB1  1003               	clrc
  9896     0DB2  0DF0               	rlf	i1___bmul@multiplicand,f
  9897     0DB3  1003               	clrc
  9898     0DB4  0CF2               	rrf	i1___bmul@multiplier,f
  9899     0DB5  0872               	movf	i1___bmul@multiplier,w
  9900     0DB6  1D03               	btfss	3,2
  9901     0DB7  2DAD               	goto	i1l3129
  9902     0DB8  0871               	movf	i1___bmul@product,w
  9903     0DB9  0008               	return
  9904     0DBA                     __end_ofi1___bmul:
  9905                           
  9906                           	psect	text62
  9907     0C46                     __ptext62:	
  9908 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9909 ;; Defined at:
  9910 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;		None
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;		None
  9915 ;; Return value:  Size  Location     Type
  9916 ;;                  1    wreg      void 
  9917 ;; Registers used:
  9918 ;;		None
  9919 ;; Tracked objects:
  9920 ;;		On entry : 1F/1
  9921 ;;		On exit  : 1F/3
  9922 ;;		Unchanged: 0/0
  9923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9924 ;;      Params:         0       0       0       0       0       0
  9925 ;;      Locals:         0       0       0       0       0       0
  9926 ;;      Temps:          0       0       0       0       0       0
  9927 ;;      Totals:         0       0       0       0       0       0
  9928 ;;Total ram usage:        0 bytes
  9929 ;; Hardware stack levels used: 1
  9930 ;; This function calls:
  9931 ;;		Nothing
  9932 ;; This function is called by:
  9933 ;;		_EUSART_Initialize
  9934 ;;		_EUSART_Receive_ISR
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938     0C46                     _EUSART_DefaultOverrunErrorHandler:	
  9939                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9940                           
  9941                           
  9942                           ;mcc_generated_files/eusart.c: 212:     RCSTAbits.CREN = 0;
  9943                           
  9944                           ;incstack = 0
  9945                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9946     0C46  0023               	movlb	3	; select bank3
  9947     0C47  121D               	bcf	29,4	;volatile
  9948                           
  9949                           ;mcc_generated_files/eusart.c: 213:     RCSTAbits.CREN = 1;
  9950     0C48  161D               	bsf	29,4	;volatile
  9951     0C49  0008               	return
  9952     0C4A                     __end_of_EUSART_DefaultOverrunErrorHandler:
  9953                           
  9954                           	psect	text63
  9955     0002                     __ptext63:	
  9956 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9957 ;; Defined at:
  9958 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;		None
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;		None
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      void 
  9965 ;; Registers used:
  9966 ;;		None
  9967 ;; Tracked objects:
  9968 ;;		On entry : 1F/1
  9969 ;;		On exit  : 1F/1
  9970 ;;		Unchanged: 1F/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9972 ;;      Params:         0       0       0       0       0       0
  9973 ;;      Locals:         0       0       0       0       0       0
  9974 ;;      Temps:          0       0       0       0       0       0
  9975 ;;      Totals:         0       0       0       0       0       0
  9976 ;;Total ram usage:        0 bytes
  9977 ;; Hardware stack levels used: 1
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		_EUSART_Initialize
  9982 ;;		_EUSART_Receive_ISR
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986     0002                     _EUSART_DefaultFramingErrorHandler:	
  9987                           ;psect for function _EUSART_DefaultFramingErrorHandler
  9988                           
  9989                           
  9990                           ;incstack = 0
  9991                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  9992     0002  0008               	return
  9993     0003                     __end_of_EUSART_DefaultFramingErrorHandler:
  9994                           
  9995                           	psect	text64
  9996     0C3F                     __ptext64:	
  9997 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9998 ;; Defined at:
  9999 ;;		line 217 in file "mcc_generated_files/eusart.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      void 
 10006 ;; Registers used:
 10007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 1F/1
 10010 ;;		On exit  : 1F/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10013 ;;      Params:         0       0       0       0       0       0
 10014 ;;      Locals:         0       0       0       0       0       0
 10015 ;;      Temps:          0       0       0       0       0       0
 10016 ;;      Totals:         0       0       0       0       0       0
 10017 ;;Total ram usage:        0 bytes
 10018 ;; Hardware stack levels used: 1
 10019 ;; Hardware stack levels required when called: 1
 10020 ;; This function calls:
 10021 ;;		_EUSART_RxDataHandler
 10022 ;; This function is called by:
 10023 ;;		_EUSART_Initialize
 10024 ;;		_EUSART_Receive_ISR
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028     0C3F                     _EUSART_DefaultErrorHandler:	
 10029                           ;psect for function _EUSART_DefaultErrorHandler
 10030                           
 10031                           
 10032                           ;mcc_generated_files/eusart.c: 218:     EUSART_RxDataHandler();
 10033                           
 10034                           ;incstack = 0
 10035                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10036     0C3F  318D  25EA         	fcall	_EUSART_RxDataHandler
 10037     0C41  0008               	return
 10038     0C42                     __end_of_EUSART_DefaultErrorHandler:
 10039                           
 10040                           	psect	text65
 10041     0DEA                     __ptext65:	
 10042 ;; *************** function _EUSART_RxDataHandler *****************
 10043 ;; Defined at:
 10044 ;;		line 197 in file "mcc_generated_files/eusart.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;		None
 10049 ;; Return value:  Size  Location     Type
 10050 ;;                  1    wreg      void 
 10051 ;; Registers used:
 10052 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10053 ;; Tracked objects:
 10054 ;;		On entry : 1E/0
 10055 ;;		On exit  : 1F/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10058 ;;      Params:         0       0       0       0       0       0
 10059 ;;      Locals:         0       0       0       0       0       0
 10060 ;;      Temps:          0       0       0       0       0       0
 10061 ;;      Totals:         0       0       0       0       0       0
 10062 ;;Total ram usage:        0 bytes
 10063 ;; Hardware stack levels used: 1
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_EUSART_Receive_ISR
 10068 ;;		_EUSART_DefaultErrorHandler
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072     0DEA                     _EUSART_RxDataHandler:	
 10073                           ;psect for function _EUSART_RxDataHandler
 10074                           
 10075                           
 10076                           ;mcc_generated_files/eusart.c: 199:     eusartRxBuffer[eusartRxHead++] = RCREG;
 10077                           
 10078                           ;incstack = 0
 10079                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10080     0DEA  0020               	movlb	0	; select bank0
 10081     0DEB  0839               	movf	_eusartRxHead,w
 10082     0DEC  3EB2               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10083     0DED  0086               	movwf	6
 10084     0DEE  0187               	clrf	7
 10085     0DEF  0023               	movlb	3	; select bank3
 10086     0DF0  0819               	movf	25,w	;volatile
 10087     0DF1  0081               	movwf	1
 10088     0DF2  3001               	movlw	1
 10089     0DF3  0020               	movlb	0	; select bank0
 10090     0DF4  07B9               	addwf	_eusartRxHead,f	;volatile
 10091                           
 10092                           ;mcc_generated_files/eusart.c: 200:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10093     0DF5  3008               	movlw	8
 10094     0DF6  0239               	subwf	_eusartRxHead,w
 10095     0DF7  1803               	btfsc	3,0
 10096                           
 10097                           ;mcc_generated_files/eusart.c: 201:     {;mcc_generated_files/eusart.c: 202:         eus
      +                          artRxHead = 0;
 10098     0DF8  01B9               	clrf	_eusartRxHead	;volatile
 10099                           
 10100                           ;mcc_generated_files/eusart.c: 204:     eusartRxCount++;
 10101     0DF9  3001               	movlw	1
 10102     0DFA  07B7               	addwf	_eusartRxCount,f	;volatile
 10103     0DFB  0008               	return
 10104     0DFC                     __end_of_EUSART_RxDataHandler:
 10105                           
 10106                           	psect	text66
 10107     0EA9                     __ptext66:	
 10108 ;; *************** function _EUSART_Read *****************
 10109 ;; Defined at:
 10110 ;;		line 140 in file "mcc_generated_files/eusart.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;		None
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  readValue       1    0[COMMON] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      unsigned char 
 10117 ;; Registers used:
 10118 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/1
 10121 ;;		On exit  : 1F/1
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10124 ;;      Params:         0       0       0       0       0       0
 10125 ;;      Locals:         1       0       0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0
 10127 ;;      Totals:         1       0       0       0       0       0
 10128 ;;Total ram usage:        1 bytes
 10129 ;; Hardware stack levels used: 1
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_Read_UART
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137     0EA9                     _EUSART_Read:	
 10138                           ;psect for function _EUSART_Read
 10139                           
 10140     0EA9                     i1l3501:	
 10141                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
 10142                           
 10143                           ;incstack = 0
 10144                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10145                           
 10146                           
 10147                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
 10148     0EA9  0020               	movlb	0	; select bank0
 10149     0EAA  0837               	movf	_eusartRxCount,w	;volatile
 10150     0EAB  1903               	btfsc	3,2
 10151     0EAC  2EA9               	goto	i1l3501
 10152                           
 10153                           ;mcc_generated_files/eusart.c: 148:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 10154     0EAD  0838               	movf	_eusartRxTail,w	;volatile
 10155     0EAE  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10156     0EAF  0086               	movwf	6
 10157     0EB0  0187               	clrf	7
 10158     0EB1  0801               	movf	1,w
 10159     0EB2  00B6               	movwf	_eusartRxLastError	;volatile
 10160                           
 10161                           ;mcc_generated_files/eusart.c: 150:     readValue = eusartRxBuffer[eusartRxTail++];
 10162     0EB3  0838               	movf	_eusartRxTail,w
 10163     0EB4  3EB2               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10164     0EB5  0086               	movwf	6
 10165     0EB6  0187               	clrf	7
 10166     0EB7  0801               	movf	1,w
 10167     0EB8  00F0               	movwf	EUSART_Read@readValue
 10168     0EB9  3001               	movlw	1
 10169     0EBA  07B8               	addwf	_eusartRxTail,f	;volatile
 10170                           
 10171                           ;mcc_generated_files/eusart.c: 151:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10172     0EBB  3008               	movlw	8
 10173     0EBC  0238               	subwf	_eusartRxTail,w
 10174     0EBD  1803               	btfsc	3,0
 10175                           
 10176                           ;mcc_generated_files/eusart.c: 152:     {;mcc_generated_files/eusart.c: 153:         eus
      +                          artRxTail = 0;
 10177     0EBE  01B8               	clrf	_eusartRxTail	;volatile
 10178                           
 10179                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 0;
 10180     0EBF  0021               	movlb	1	; select bank1
 10181     0EC0  1291               	bcf	17,5	;volatile
 10182                           
 10183                           ;mcc_generated_files/eusart.c: 156:     eusartRxCount--;
 10184     0EC1  3001               	movlw	1
 10185     0EC2  0020               	movlb	0	; select bank0
 10186     0EC3  02B7               	subwf	_eusartRxCount,f	;volatile
 10187                           
 10188                           ;mcc_generated_files/eusart.c: 157:     PIE1bits.RCIE = 1;
 10189     0EC4  0021               	movlb	1	; select bank1
 10190     0EC5  1691               	bsf	17,5	;volatile
 10191                           
 10192                           ;mcc_generated_files/eusart.c: 159:     return readValue;
 10193     0EC6  0870               	movf	EUSART_Read@readValue,w
 10194     0EC7  0008               	return
 10195     0EC8                     __end_of_EUSART_Read:
 10196                           
 10197                           	psect	text67
 10198     0CE1                     __ptext67:	
 10199 ;; *************** function _PIN_MANAGER_IOC *****************
 10200 ;; Defined at:
 10201 ;;		line 119 in file "mcc_generated_files/pin_manager.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;                  1    wreg      void 
 10208 ;; Registers used:
 10209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 1F/7
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10215 ;;      Params:         0       0       0       0       0       0
 10216 ;;      Locals:         0       0       0       0       0       0
 10217 ;;      Temps:          0       0       0       0       0       0
 10218 ;;      Totals:         0       0       0       0       0       0
 10219 ;;Total ram usage:        0 bytes
 10220 ;; Hardware stack levels used: 1
 10221 ;; Hardware stack levels required when called: 5
 10222 ;; This function calls:
 10223 ;;		_IOCBF0_ISR
 10224 ;;		_IOCBF3_ISR
 10225 ;; This function is called by:
 10226 ;;		_INTERRUPT_InterruptManager
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230     0CE1                     _PIN_MANAGER_IOC:	
 10231                           ;psect for function _PIN_MANAGER_IOC
 10232                           
 10233                           
 10234                           ;mcc_generated_files/pin_manager.c: 122:     if(IOCBFbits.IOCBF0 == 1)
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10238     0CE1  0027               	movlb	7	; select bank7
 10239     0CE2  1C16               	btfss	22,0	;volatile
 10240     0CE3  2CE7               	goto	i1l4589
 10241                           
 10242                           ;mcc_generated_files/pin_manager.c: 123:     {;mcc_generated_files/pin_manager.c: 124:  
      +                                 IOCBF0_ISR();
 10243     0CE4  318D  253E  318C   	fcall	_IOCBF0_ISR
 10244     0CE7                     i1l4589:
 10245                           
 10246                           ;mcc_generated_files/pin_manager.c: 127:     if(IOCBFbits.IOCBF3 == 1)
 10247     0CE7  1D96               	btfss	22,3	;volatile
 10248     0CE8  0008               	return
 10249                           
 10250                           ;mcc_generated_files/pin_manager.c: 128:     {;mcc_generated_files/pin_manager.c: 129:  
      +                                 IOCBF3_ISR();
 10251     0CE9  318D  254B         	fcall	_IOCBF3_ISR
 10252     0CEB  0008               	return
 10253     0CEC                     __end_of_PIN_MANAGER_IOC:
 10254                           
 10255                           	psect	text68
 10256     0D4B                     __ptext68:	
 10257 ;; *************** function _IOCBF3_ISR *****************
 10258 ;; Defined at:
 10259 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;		None
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;		None
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  1    wreg      void 
 10266 ;; Registers used:
 10267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10268 ;; Tracked objects:
 10269 ;;		On entry : 1F/7
 10270 ;;		On exit  : 1F/7
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10273 ;;      Params:         0       0       0       0       0       0
 10274 ;;      Locals:         0       0       0       0       0       0
 10275 ;;      Temps:          0       0       0       0       0       0
 10276 ;;      Totals:         0       0       0       0       0       0
 10277 ;;Total ram usage:        0 bytes
 10278 ;; Hardware stack levels used: 1
 10279 ;; Hardware stack levels required when called: 4
 10280 ;; This function calls:
 10281 ;;		NULL
 10282 ;;		_IOCBF3_DefaultInterruptHandler
 10283 ;;		_ISR_Floor2
 10284 ;; This function is called by:
 10285 ;;		_PIN_MANAGER_IOC
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289     0D4B                     _IOCBF3_ISR:	
 10290                           ;psect for function _IOCBF3_ISR
 10291                           
 10292                           
 10293                           ;mcc_generated_files/pin_manager.c: 171:     if(IOCBF3_InterruptHandler)
 10294                           
 10295                           ;incstack = 0
 10296                           ; Regs used in _IOCBF3_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10297     0D4B  0021               	movlb	1	; select bank1
 10298     0D4C  0863               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10299     0D4D  0464               	iorwf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10300     0D4E  1903               	btfsc	3,2
 10301     0D4F  2D55               	goto	i1l4381
 10302                           
 10303                           ;mcc_generated_files/pin_manager.c: 172:     {;mcc_generated_files/pin_manager.c: 173:  
      +                                 IOCBF3_InterruptHandler();
 10304     0D50  0864               	movf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10305     0D51  008A               	movwf	10
 10306     0D52  0863               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10307     0D53  000A               	callw
 10308     0D54  318D               	pagesel	$
 10309     0D55                     i1l4381:
 10310                           
 10311                           ;mcc_generated_files/pin_manager.c: 175:     IOCBFbits.IOCBF3 = 0;
 10312     0D55  0027               	movlb	7	; select bank7
 10313     0D56  1196               	bcf	22,3	;volatile
 10314     0D57  0008               	return
 10315     0D58                     __end_of_IOCBF3_ISR:
 10316                           
 10317                           	psect	text69
 10318     0C3E                     __ptext69:	
 10319 ;; *************** function _IOCBF3_DefaultInterruptHandler *****************
 10320 ;; Defined at:
 10321 ;;		line 188 in file "mcc_generated_files/pin_manager.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		None
 10330 ;; Tracked objects:
 10331 ;;		On entry : 1F/1
 10332 ;;		On exit  : 1F/1
 10333 ;;		Unchanged: 1F/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10335 ;;      Params:         0       0       0       0       0       0
 10336 ;;      Locals:         0       0       0       0       0       0
 10337 ;;      Temps:          0       0       0       0       0       0
 10338 ;;      Totals:         0       0       0       0       0       0
 10339 ;;Total ram usage:        0 bytes
 10340 ;; Hardware stack levels used: 1
 10341 ;; This function calls:
 10342 ;;		Nothing
 10343 ;; This function is called by:
 10344 ;;		_PIN_MANAGER_Initialize
 10345 ;;		_IOCBF3_ISR
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349     0C3E                     _IOCBF3_DefaultInterruptHandler:	
 10350                           ;psect for function _IOCBF3_DefaultInterruptHandler
 10351                           
 10352                           
 10353                           ;incstack = 0
 10354                           ; Regs used in _IOCBF3_DefaultInterruptHandler: []
 10355     0C3E  0008               	return
 10356     0C3F                     __end_of_IOCBF3_DefaultInterruptHandler:
 10357                           
 10358                           	psect	text70
 10359     0D72                     __ptext70:	
 10360 ;; *************** function _ISR_Floor2 *****************
 10361 ;; Defined at:
 10362 ;;		line 284 in file "main.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;		None
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;		None
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  1    wreg      void 
 10369 ;; Registers used:
 10370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 1F/1
 10373 ;;		On exit  : 1F/7
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10376 ;;      Params:         0       0       0       0       0       0
 10377 ;;      Locals:         0       0       0       0       0       0
 10378 ;;      Temps:          0       0       0       0       0       0
 10379 ;;      Totals:         0       0       0       0       0       0
 10380 ;;Total ram usage:        0 bytes
 10381 ;; Hardware stack levels used: 1
 10382 ;; Hardware stack levels required when called: 3
 10383 ;; This function calls:
 10384 ;;		i1_Matrix_update_floor
 10385 ;; This function is called by:
 10386 ;;		_main
 10387 ;;		_IOCBF3_ISR
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391     0D72                     _ISR_Floor2:	
 10392                           ;psect for function _ISR_Floor2
 10393                           
 10394                           
 10395                           ;main.c: 285:     IOCBNbits.IOCBN3 = 0;
 10396                           
 10397                           ;incstack = 0
 10398                           ; Regs used in _ISR_Floor2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10399     0D72  0027               	movlb	7	; select bank7
 10400     0D73  1195               	bcf	21,3	;volatile
 10401                           
 10402                           ;main.c: 286:     IOCBFbits.IOCBF3 = 0;
 10403     0D74  1196               	bcf	22,3	;volatile
 10404                           
 10405                           ;main.c: 287:     current_floor = 1;
 10406     0D75  3001               	movlw	1
 10407     0D76  0020               	movlb	0	; select bank0
 10408     0D77  00BD               	movwf	_current_floor
 10409                           
 10410                           ;main.c: 288:     index++;
 10411     0D78  3001               	movlw	1
 10412     0D79  07BE               	addwf	_index,f
 10413                           
 10414                           ;main.c: 289:     Matrix_update_floor(current_floor);
 10415     0D7A  083D               	movf	_current_floor,w
 10416     0D7B  318F  272B         	fcall	i1_Matrix_update_floor
 10417                           
 10418                           ;main.c: 291:     IOCBNbits.IOCBN3 = 1;
 10419     0D7D  0027               	movlb	7	; select bank7
 10420     0D7E  1595               	bsf	21,3	;volatile
 10421     0D7F  0008               	return
 10422     0D80                     __end_of_ISR_Floor2:
 10423                           
 10424                           	psect	text71
 10425     0D3E                     __ptext71:	
 10426 ;; *************** function _IOCBF0_ISR *****************
 10427 ;; Defined at:
 10428 ;;		line 136 in file "mcc_generated_files/pin_manager.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;		None
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;		None
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  1    wreg      void 
 10435 ;; Registers used:
 10436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10437 ;; Tracked objects:
 10438 ;;		On entry : 1F/7
 10439 ;;		On exit  : 1F/7
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10442 ;;      Params:         0       0       0       0       0       0
 10443 ;;      Locals:         0       0       0       0       0       0
 10444 ;;      Temps:          0       0       0       0       0       0
 10445 ;;      Totals:         0       0       0       0       0       0
 10446 ;;Total ram usage:        0 bytes
 10447 ;; Hardware stack levels used: 1
 10448 ;; Hardware stack levels required when called: 4
 10449 ;; This function calls:
 10450 ;;		NULL
 10451 ;;		_IOCBF0_DefaultInterruptHandler
 10452 ;;		_ISR_Floor1
 10453 ;; This function is called by:
 10454 ;;		_PIN_MANAGER_IOC
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458     0D3E                     _IOCBF0_ISR:	
 10459                           ;psect for function _IOCBF0_ISR
 10460                           
 10461                           
 10462                           ;mcc_generated_files/pin_manager.c: 141:     if(IOCBF0_InterruptHandler)
 10463                           
 10464                           ;incstack = 0
 10465                           ; Regs used in _IOCBF0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10466     0D3E  0021               	movlb	1	; select bank1
 10467     0D3F  0865               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10468     0D40  0466               	iorwf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10469     0D41  1903               	btfsc	3,2
 10470     0D42  2D48               	goto	i1l4375
 10471                           
 10472                           ;mcc_generated_files/pin_manager.c: 142:     {;mcc_generated_files/pin_manager.c: 143:  
      +                                 IOCBF0_InterruptHandler();
 10473     0D43  0866               	movf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10474     0D44  008A               	movwf	10
 10475     0D45  0865               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10476     0D46  000A               	callw
 10477     0D47  318D               	pagesel	$
 10478     0D48                     i1l4375:
 10479                           
 10480                           ;mcc_generated_files/pin_manager.c: 145:     IOCBFbits.IOCBF0 = 0;
 10481     0D48  0027               	movlb	7	; select bank7
 10482     0D49  1016               	bcf	22,0	;volatile
 10483     0D4A  0008               	return
 10484     0D4B                     __end_of_IOCBF0_ISR:
 10485                           
 10486                           	psect	text72
 10487     0C3D                     __ptext72:	
 10488 ;; *************** function _IOCBF0_DefaultInterruptHandler *****************
 10489 ;; Defined at:
 10490 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 10491 ;; Parameters:    Size  Location     Type
 10492 ;;		None
 10493 ;; Auto vars:     Size  Location     Type
 10494 ;;		None
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  1    wreg      void 
 10497 ;; Registers used:
 10498 ;;		None
 10499 ;; Tracked objects:
 10500 ;;		On entry : 1F/1
 10501 ;;		On exit  : 1F/1
 10502 ;;		Unchanged: 1F/0
 10503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10504 ;;      Params:         0       0       0       0       0       0
 10505 ;;      Locals:         0       0       0       0       0       0
 10506 ;;      Temps:          0       0       0       0       0       0
 10507 ;;      Totals:         0       0       0       0       0       0
 10508 ;;Total ram usage:        0 bytes
 10509 ;; Hardware stack levels used: 1
 10510 ;; This function calls:
 10511 ;;		Nothing
 10512 ;; This function is called by:
 10513 ;;		_PIN_MANAGER_Initialize
 10514 ;;		_IOCBF0_ISR
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518     0C3D                     _IOCBF0_DefaultInterruptHandler:	
 10519                           ;psect for function _IOCBF0_DefaultInterruptHandler
 10520                           
 10521                           
 10522                           ;incstack = 0
 10523                           ; Regs used in _IOCBF0_DefaultInterruptHandler: []
 10524     0C3D  0008               	return
 10525     0C3E                     __end_of_IOCBF0_DefaultInterruptHandler:
 10526                           
 10527                           	psect	text73
 10528     0DBA                     __ptext73:	
 10529 ;; *************** function _ISR_Floor1 *****************
 10530 ;; Defined at:
 10531 ;;		line 294 in file "main.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;		None
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  1    wreg      void 
 10538 ;; Registers used:
 10539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10540 ;; Tracked objects:
 10541 ;;		On entry : 1F/1
 10542 ;;		On exit  : 1F/7
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10545 ;;      Params:         0       0       0       0       0       0
 10546 ;;      Locals:         0       0       0       0       0       0
 10547 ;;      Temps:          0       0       0       0       0       0
 10548 ;;      Totals:         0       0       0       0       0       0
 10549 ;;Total ram usage:        0 bytes
 10550 ;; Hardware stack levels used: 1
 10551 ;; Hardware stack levels required when called: 3
 10552 ;; This function calls:
 10553 ;;		i1_Matrix_update_floor
 10554 ;;		i1_TMR0_Reload
 10555 ;; This function is called by:
 10556 ;;		_main
 10557 ;;		_IOCBF0_ISR
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561     0DBA                     _ISR_Floor1:	
 10562                           ;psect for function _ISR_Floor1
 10563                           
 10564                           
 10565                           ;main.c: 295:     IOCBNbits.IOCBN0 = 0;
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _ISR_Floor1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10569     0DBA  0027               	movlb	7	; select bank7
 10570     0DBB  1015               	bcf	21,0	;volatile
 10571                           
 10572                           ;main.c: 296:     IOCBFbits.IOCBF0 = 0;
 10573     0DBC  1016               	bcf	22,0	;volatile
 10574                           
 10575                           ;main.c: 297:     current_floor = 0;
 10576     0DBD  0020               	movlb	0	; select bank0
 10577     0DBE  01BD               	clrf	_current_floor
 10578                           
 10579                           ;main.c: 298:     index=0;
 10580     0DBF  01BE               	clrf	_index
 10581                           
 10582                           ;main.c: 299:     Matrix_update_floor(current_floor);
 10583     0DC0  083D               	movf	_current_floor,w
 10584     0DC1  318F  272B  318D   	fcall	i1_Matrix_update_floor
 10585                           
 10586                           ;main.c: 300:     TMR0_Reload();
 10587     0DC4  318C  2442         	fcall	i1_TMR0_Reload
 10588                           
 10589                           ;main.c: 301:     var.HHH = 0;
 10590     0DC6  01A2               	clrf	_var+2
 10591                           
 10592                           ;main.c: 307:     IOCBNbits.IOCBN0 = 1;
 10593     0DC7  0027               	movlb	7	; select bank7
 10594     0DC8  1415               	bsf	21,0	;volatile
 10595     0DC9  0008               	return
 10596     0DCA                     __end_of_ISR_Floor1:
 10597                           
 10598                           	psect	text74
 10599     0CC4                     __ptext74:	
 10600 ;; *************** function _CMP2_ISR *****************
 10601 ;; Defined at:
 10602 ;;		line 86 in file "mcc_generated_files/cmp2.c"
 10603 ;; Parameters:    Size  Location     Type
 10604 ;;		None
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;		None
 10607 ;; Return value:  Size  Location     Type
 10608 ;;                  1    wreg      void 
 10609 ;; Registers used:
 10610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10611 ;; Tracked objects:
 10612 ;;		On entry : 1F/0
 10613 ;;		On exit  : 1F/1
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10616 ;;      Params:         0       0       0       0       0       0
 10617 ;;      Locals:         0       0       0       0       0       0
 10618 ;;      Temps:          0       0       0       0       0       0
 10619 ;;      Totals:         0       0       0       0       0       0
 10620 ;;Total ram usage:        0 bytes
 10621 ;; Hardware stack levels used: 1
 10622 ;; Hardware stack levels required when called: 4
 10623 ;; This function calls:
 10624 ;;		_ISR_Floor4
 10625 ;; This function is called by:
 10626 ;;		_INTERRUPT_InterruptManager
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630     0CC4                     _CMP2_ISR:	
 10631                           ;psect for function _CMP2_ISR
 10632                           
 10633                           
 10634                           ;mcc_generated_files/cmp2.c: 88:     PIE2bits.C2IE = 0;
 10635                           
 10636                           ;incstack = 0
 10637                           ; Regs used in _CMP2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10638     0CC4  0021               	movlb	1	; select bank1
 10639     0CC5  1312               	bcf	18,6	;volatile
 10640                           
 10641                           ;mcc_generated_files/cmp2.c: 89:     PIR2bits.C2IF = 0;
 10642     0CC6  0020               	movlb	0	; select bank0
 10643     0CC7  1312               	bcf	18,6	;volatile
 10644                           
 10645                           ;mcc_generated_files/cmp2.c: 90:     ISR_Floor4();
 10646     0CC8  318D  2531         	fcall	_ISR_Floor4
 10647                           
 10648                           ;mcc_generated_files/cmp2.c: 91:     PIE2bits.C2IE = 1;
 10649     0CCA  0021               	movlb	1	; select bank1
 10650     0CCB  1712               	bsf	18,6	;volatile
 10651     0CCC  0008               	return
 10652     0CCD                     __end_of_CMP2_ISR:
 10653                           
 10654                           	psect	text75
 10655     0D31                     __ptext75:	
 10656 ;; *************** function _ISR_Floor4 *****************
 10657 ;; Defined at:
 10658 ;;		line 270 in file "main.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;		None
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;                  1    wreg      void 
 10665 ;; Registers used:
 10666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 1F/0
 10669 ;;		On exit  : 1F/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10672 ;;      Params:         0       0       0       0       0       0
 10673 ;;      Locals:         0       0       0       0       0       0
 10674 ;;      Temps:          0       0       0       0       0       0
 10675 ;;      Totals:         0       0       0       0       0       0
 10676 ;;Total ram usage:        0 bytes
 10677 ;; Hardware stack levels used: 1
 10678 ;; Hardware stack levels required when called: 3
 10679 ;; This function calls:
 10680 ;;		i1_Matrix_update_floor
 10681 ;;		i1_TMR0_Reload
 10682 ;; This function is called by:
 10683 ;;		_CMP2_ISR
 10684 ;; This function uses a non-reentrant model
 10685 ;;
 10686                           
 10687     0D31                     _ISR_Floor4:	
 10688                           ;psect for function _ISR_Floor4
 10689                           
 10690                           
 10691                           ;main.c: 271:     current_floor = 3;
 10692                           
 10693                           ;incstack = 0
 10694                           ; Regs used in _ISR_Floor4: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10695     0D31  3003               	movlw	3
 10696     0D32  00BD               	movwf	_current_floor
 10697                           
 10698                           ;main.c: 272:     index = 3;
 10699     0D33  3003               	movlw	3
 10700     0D34  00BE               	movwf	_index
 10701                           
 10702                           ;main.c: 273:     Matrix_update_floor(current_floor);
 10703     0D35  083D               	movf	_current_floor,w
 10704     0D36  318F  272B  318D   	fcall	i1_Matrix_update_floor
 10705                           
 10706                           ;main.c: 274:     TMR0_Reload();
 10707     0D39  318C  2442         	fcall	i1_TMR0_Reload
 10708                           
 10709                           ;main.c: 275:     var.HHH = 180;
 10710     0D3B  30B4               	movlw	180
 10711     0D3C  00A2               	movwf	_var+2
 10712     0D3D  0008               	return
 10713     0D3E                     __end_of_ISR_Floor4:
 10714                           
 10715                           	psect	text76
 10716     0C42                     __ptext76:	
 10717 ;; *************** function i1_TMR0_Reload *****************
 10718 ;; Defined at:
 10719 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;		None
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      void 
 10726 ;; Registers used:
 10727 ;;		wreg
 10728 ;; Tracked objects:
 10729 ;;		On entry : 1D/0
 10730 ;;		On exit  : 1F/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10733 ;;      Params:         0       0       0       0       0       0
 10734 ;;      Locals:         0       0       0       0       0       0
 10735 ;;      Temps:          0       0       0       0       0       0
 10736 ;;      Totals:         0       0       0       0       0       0
 10737 ;;Total ram usage:        0 bytes
 10738 ;; Hardware stack levels used: 1
 10739 ;; This function calls:
 10740 ;;		Nothing
 10741 ;; This function is called by:
 10742 ;;		_Update_tx_buffer
 10743 ;;		_ISR_Floor4
 10744 ;;		_ISR_Floor1
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748     0C42                     i1_TMR0_Reload:	
 10749                           ;psect for function i1_TMR0_Reload
 10750                           
 10751                           
 10752                           ;mcc_generated_files/tmr0.c: 98:     TMR0 = timer0ReloadVal;
 10753                           
 10754                           ;incstack = 0
 10755                           ; Regs used in i1_TMR0_Reload: [wreg]
 10756     0C42  0020               	movlb	0	; select bank0
 10757     0C43  0835               	movf	_timer0ReloadVal,w	;volatile
 10758     0C44  0095               	movwf	21	;volatile
 10759     0C45  0008               	return
 10760     0C46                     __end_ofi1_TMR0_Reload:
 10761                           
 10762                           	psect	text77
 10763     0CBB                     __ptext77:	
 10764 ;; *************** function _CMP1_ISR *****************
 10765 ;; Defined at:
 10766 ;;		line 88 in file "mcc_generated_files/cmp1.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;		None
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;		None
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  1    wreg      void 
 10773 ;; Registers used:
 10774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 1F/0
 10777 ;;		On exit  : 1F/1
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10780 ;;      Params:         0       0       0       0       0       0
 10781 ;;      Locals:         0       0       0       0       0       0
 10782 ;;      Temps:          0       0       0       0       0       0
 10783 ;;      Totals:         0       0       0       0       0       0
 10784 ;;Total ram usage:        0 bytes
 10785 ;; Hardware stack levels used: 1
 10786 ;; Hardware stack levels required when called: 4
 10787 ;; This function calls:
 10788 ;;		_ISR_Floor3
 10789 ;; This function is called by:
 10790 ;;		_INTERRUPT_InterruptManager
 10791 ;; This function uses a non-reentrant model
 10792 ;;
 10793                           
 10794     0CBB                     _CMP1_ISR:	
 10795                           ;psect for function _CMP1_ISR
 10796                           
 10797                           
 10798                           ;mcc_generated_files/cmp1.c: 90:     PIE2bits.C1IE = 0;
 10799                           
 10800                           ;incstack = 0
 10801                           ; Regs used in _CMP1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10802     0CBB  0021               	movlb	1	; select bank1
 10803     0CBC  1292               	bcf	18,5	;volatile
 10804                           
 10805                           ;mcc_generated_files/cmp1.c: 91:     PIR2bits.C1IF = 0;
 10806     0CBD  0020               	movlb	0	; select bank0
 10807     0CBE  1292               	bcf	18,5	;volatile
 10808                           
 10809                           ;mcc_generated_files/cmp1.c: 92:     ISR_Floor3();
 10810     0CBF  318C  24A3         	fcall	_ISR_Floor3
 10811                           
 10812                           ;mcc_generated_files/cmp1.c: 93:     PIE2bits.C1IE = 1;
 10813     0CC1  0021               	movlb	1	; select bank1
 10814     0CC2  1692               	bsf	18,5	;volatile
 10815     0CC3  0008               	return
 10816     0CC4                     __end_of_CMP1_ISR:
 10817                           
 10818                           	psect	text78
 10819     0CA3                     __ptext78:	
 10820 ;; *************** function _ISR_Floor3 *****************
 10821 ;; Defined at:
 10822 ;;		line 278 in file "main.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;		None
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;		None
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  1    wreg      void 
 10829 ;; Registers used:
 10830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 1F/0
 10833 ;;		On exit  : 1F/2
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10836 ;;      Params:         0       0       0       0       0       0
 10837 ;;      Locals:         0       0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0
 10839 ;;      Totals:         0       0       0       0       0       0
 10840 ;;Total ram usage:        0 bytes
 10841 ;; Hardware stack levels used: 1
 10842 ;; Hardware stack levels required when called: 3
 10843 ;; This function calls:
 10844 ;;		i1_Matrix_update_floor
 10845 ;; This function is called by:
 10846 ;;		_CMP1_ISR
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850     0CA3                     _ISR_Floor3:	
 10851                           ;psect for function _ISR_Floor3
 10852                           
 10853                           
 10854                           ;main.c: 279:     current_floor = 2;
 10855                           
 10856                           ;incstack = 0
 10857                           ; Regs used in _ISR_Floor3: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10858     0CA3  3002               	movlw	2
 10859     0CA4  00BD               	movwf	_current_floor
 10860                           
 10861                           ;main.c: 280:     index++;
 10862     0CA5  3001               	movlw	1
 10863     0CA6  07BE               	addwf	_index,f
 10864                           
 10865                           ;main.c: 281:     Matrix_update_floor(current_floor);
 10866     0CA7  083D               	movf	_current_floor,w
 10867     0CA8  318F  272B         	fcall	i1_Matrix_update_floor
 10868     0CAA  0008               	return
 10869     0CAB                     __end_of_ISR_Floor3:
 10870                           
 10871                           	psect	text79
 10872     0F2B                     __ptext79:	
 10873 ;; *************** function i1_Matrix_update_floor *****************
 10874 ;; Defined at:
 10875 ;;		line 228 in file "main.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;  display_floo    1    wreg     unsigned char 
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;  display_floo    1   10[COMMON] unsigned char 
 10880 ;;  data            2    8[COMMON] unsigned char [2]
 10881 ;;  i               1   11[COMMON] unsigned char 
 10882 ;; Return value:  Size  Location     Type
 10883 ;;                  1    wreg      void 
 10884 ;; Registers used:
 10885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10886 ;; Tracked objects:
 10887 ;;		On entry : 1F/0
 10888 ;;		On exit  : 1F/2
 10889 ;;		Unchanged: 0/0
 10890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10891 ;;      Params:         0       0       0       0       0       0
 10892 ;;      Locals:         4       0       0       0       0       0
 10893 ;;      Temps:          1       0       0       0       0       0
 10894 ;;      Totals:         5       0       0       0       0       0
 10895 ;;Total ram usage:        5 bytes
 10896 ;; Hardware stack levels used: 1
 10897 ;; Hardware stack levels required when called: 2
 10898 ;; This function calls:
 10899 ;;		i1_Tx_spi
 10900 ;; This function is called by:
 10901 ;;		_ISR_Floor4
 10902 ;;		_ISR_Floor3
 10903 ;;		_ISR_Floor2
 10904 ;;		_ISR_Floor1
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908     0F2B                     i1_Matrix_update_floor:	
 10909                           ;psect for function i1_Matrix_update_floor
 10910                           
 10911                           
 10912                           ;incstack = 0
 10913                           ; Regs used in i1_Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10914                           ;i1Matrix_update_floor@display_floor stored from wreg
 10915     0F2B  00FA               	movwf	i1Matrix_update_floor@display_floor
 10916                           
 10917                           ;main.c: 229:     uint8_t data[2];;main.c: 230:     display_floor = display_floor*4;
 10918     0F2C  087A               	movf	i1Matrix_update_floor@display_floor,w
 10919     0F2D  00F7               	movwf	??i1_Matrix_update_floor
 10920     0F2E  3002               	movlw	2
 10921     0F2F                     u299_25:
 10922     0F2F  35F7               	lslf	??i1_Matrix_update_floor,f
 10923     0F30  0B89               	decfsz	9,f
 10924     0F31  2F2F               	goto	u299_25
 10925     0F32  0877               	movf	??i1_Matrix_update_floor,w
 10926     0F33  00FA               	movwf	i1Matrix_update_floor@display_floor
 10927                           
 10928                           ;main.c: 232:    for(uint8_t i=5;i<=8;i++){
 10929     0F34  3005               	movlw	5
 10930     0F35  00FB               	movwf	i1Matrix_update_floor@i
 10931     0F36                     i1l4089:
 10932                           
 10933                           ;main.c: 233:         data[0] = i;
 10934     0F36  087B               	movf	i1Matrix_update_floor@i,w
 10935     0F37  00F8               	movwf	i1Matrix_update_floor@data
 10936                           
 10937                           ;main.c: 234:         data[1] = MATRIX_FLOOR[display_floor];
 10938     0F38  087A               	movf	i1Matrix_update_floor@display_floor,w
 10939     0F39  3EFD               	addlw	low (_MATRIX_FLOOR| (0+32768))
 10940     0F3A  0084               	movwf	4
 10941     0F3B  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
 10942     0F3C  1803               	skipnc
 10943     0F3D  3E01               	addlw	1
 10944     0F3E  0085               	movwf	5
 10945     0F3F  0800               	movf	0,w	;code access
 10946     0F40  00F9               	movwf	i1Matrix_update_floor@data+1
 10947                           
 10948                           ;main.c: 235:         Tx_spi(data, 2);
 10949     0F41  3078               	movlw	(low (i1Matrix_update_floor@data| 0))& (0+255)
 10950     0F42  00F4               	movwf	i1Tx_spi@data
 10951     0F43  3002               	movlw	2
 10952     0F44  00F5               	movwf	i1Tx_spi@dataSize
 10953     0F45  3000               	movlw	0
 10954     0F46  00F6               	movwf	i1Tx_spi@dataSize+1
 10955     0F47  318D  259C  318F   	fcall	i1_Tx_spi
 10956                           
 10957                           ;main.c: 236:         display_floor++;
 10958     0F4A  3001               	movlw	1
 10959     0F4B  07FA               	addwf	i1Matrix_update_floor@display_floor,f
 10960                           
 10961                           ;main.c: 237:     }
 10962     0F4C  3001               	movlw	1
 10963     0F4D  07FB               	addwf	i1Matrix_update_floor@i,f
 10964     0F4E  3009               	movlw	9
 10965     0F4F  027B               	subwf	i1Matrix_update_floor@i,w
 10966     0F50  1803               	btfsc	3,0
 10967     0F51  0008               	return
 10968     0F52  2F36               	goto	i1l4089
 10969     0F53                     __end_ofi1_Matrix_update_floor:
 10970                           
 10971                           	psect	text80
 10972     0D9C                     __ptext80:	
 10973 ;; *************** function i1_Tx_spi *****************
 10974 ;; Defined at:
 10975 ;;		line 204 in file "main.c"
 10976 ;; Parameters:    Size  Location     Type
 10977 ;;  data            1    4[COMMON] PTR unsigned char 
 10978 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 10979 ;;		 -> Ini_matrix@data(2), 
 10980 ;;  dataSize        2    5[COMMON] unsigned int 
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10987 ;; Tracked objects:
 10988 ;;		On entry : 1D/0
 10989 ;;		On exit  : 1F/2
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10992 ;;      Params:         3       0       0       0       0       0
 10993 ;;      Locals:         0       0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0
 10995 ;;      Totals:         3       0       0       0       0       0
 10996 ;;Total ram usage:        3 bytes
 10997 ;; Hardware stack levels used: 1
 10998 ;; Hardware stack levels required when called: 1
 10999 ;; This function calls:
 11000 ;;		i1_SPI1_ExchangeBlock
 11001 ;; This function is called by:
 11002 ;;		i1_Matrix_update_floor
 11003 ;;		i1_Matrix_update_dir
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007     0D9C                     i1_Tx_spi:	
 11008                           ;psect for function i1_Tx_spi
 11009                           
 11010                           
 11011                           ;main.c: 205:     LATBbits.LATB1 = 0;
 11012                           
 11013                           ;incstack = 0
 11014                           ; Regs used in i1_Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11015     0D9C  0022               	movlb	2	; select bank2
 11016     0D9D  108D               	bcf	13,1	;volatile
 11017                           
 11018                           ;main.c: 206:     __nop();
 11019     0D9E  0000               	nop
 11020                           
 11021                           ;main.c: 207:     __nop();
 11022     0D9F  0000               	nop
 11023                           
 11024                           ;main.c: 208:     SPI1_ExchangeBlock(data,dataSize);
 11025     0DA0  0874               	movf	i1Tx_spi@data,w
 11026     0DA1  00F0               	movwf	i1SPI1_ExchangeBlock@block
 11027     0DA2  0876               	movf	i1Tx_spi@dataSize+1,w
 11028     0DA3  00F2               	movwf	i1SPI1_ExchangeBlock@blockSize+1
 11029     0DA4  0875               	movf	i1Tx_spi@dataSize,w
 11030     0DA5  00F1               	movwf	i1SPI1_ExchangeBlock@blockSize
 11031     0DA6  318E  26E7         	fcall	i1_SPI1_ExchangeBlock
 11032                           
 11033                           ;main.c: 209:     LATBbits.LATB1 = 1;
 11034     0DA8  0022               	movlb	2	; select bank2
 11035     0DA9  148D               	bsf	13,1	;volatile
 11036     0DAA  0008               	return
 11037     0DAB                     __end_ofi1_Tx_spi:
 11038                           
 11039                           	psect	text81
 11040     0EE7                     __ptext81:	
 11041 ;; *************** function i1_SPI1_ExchangeBlock *****************
 11042 ;; Defined at:
 11043 ;;		line 100 in file "mcc_generated_files/spi1.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;  block           1    0[COMMON] PTR void 
 11046 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 11047 ;;		 -> Ini_matrix@data(2), 
 11048 ;;  blockSize       2    1[COMMON] unsigned int 
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;  data            1    3[COMMON] PTR unsigned char 
 11051 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 11052 ;;		 -> Ini_matrix@data(2), 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      void 
 11055 ;; Registers used:
 11056 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11062 ;;      Params:         3       0       0       0       0       0
 11063 ;;      Locals:         1       0       0       0       0       0
 11064 ;;      Temps:          0       0       0       0       0       0
 11065 ;;      Totals:         4       0       0       0       0       0
 11066 ;;Total ram usage:        4 bytes
 11067 ;; Hardware stack levels used: 1
 11068 ;; This function calls:
 11069 ;;		Nothing
 11070 ;; This function is called by:
 11071 ;;		i1_Tx_spi
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075     0EE7                     i1_SPI1_ExchangeBlock:	
 11076                           ;psect for function i1_SPI1_ExchangeBlock
 11077                           
 11078                           
 11079                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
 11080                           
 11081                           ;incstack = 0
 11082                           ; Regs used in i1_SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
 11083     0EE7  0870               	movf	i1SPI1_ExchangeBlock@block,w
 11084     0EE8  00F3               	movwf	i1SPI1_ExchangeBlock@data
 11085     0EE9                     i1l4043:	
 11086                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11087                           
 11088                           
 11089                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11090     0EE9  3001               	movlw	1
 11091     0EEA  02F1               	subwf	i1SPI1_ExchangeBlock@blockSize,f
 11092     0EEB  3000               	movlw	0
 11093     0EEC  3BF2               	subwfb	i1SPI1_ExchangeBlock@blockSize+1,f
 11094     0EED  0A71               	incf	i1SPI1_ExchangeBlock@blockSize,w
 11095     0EEE  1903               	btfsc	3,2
 11096     0EEF  0A72               	incf	i1SPI1_ExchangeBlock@blockSize+1,w
 11097     0EF0  1903               	btfsc	3,2
 11098     0EF1  0008               	return
 11099                           
 11100                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
 11101     0EF2  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11102     0EF3  0086               	movwf	6
 11103     0EF4  0187               	clrf	7
 11104     0EF5  0801               	movf	1,w
 11105     0EF6  0024               	movlb	4	; select bank4
 11106     0EF7  0091               	movwf	17	;volatile
 11107     0EF8                     i1l484:	
 11108                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
 11109                           
 11110     0EF8  0020               	movlb	0	; select bank0
 11111     0EF9  1991               	btfsc	17,3	;volatile
 11112     0EFA  2EFE               	goto	i1l486
 11113     0EFB  0022               	movlb	2	; select bank2
 11114     0EFC  108D               	bcf	13,1	;volatile
 11115     0EFD  2EF8               	goto	i1l484
 11116     0EFE                     i1l486:
 11117                           
 11118                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
 11119     0EFE  1191               	bcf	17,3	;volatile
 11120                           
 11121                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
 11122     0EFF  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11123     0F00  0086               	movwf	6
 11124     0F01  0187               	clrf	7
 11125     0F02  0024               	movlb	4	; select bank4
 11126     0F03  0811               	movf	17,w	;volatile
 11127     0F04  0081               	movwf	1
 11128     0F05  3001               	movlw	1
 11129     0F06  07F3               	addwf	i1SPI1_ExchangeBlock@data,f
 11130     0F07  2EE9               	goto	i1l4043
 11131     0F08                     __end_ofi1_SPI1_ExchangeBlock:
 11132                           
 11133                           	psect	text82
 11134     0D0D                     __ptext82:	
 11135 ;; *************** function _ADC_ISR *****************
 11136 ;; Defined at:
 11137 ;;		line 145 in file "mcc_generated_files/adc.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;		None
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  1    wreg      void 
 11144 ;; Registers used:
 11145 ;;		wreg, status,2, status,0, pclath, cstack
 11146 ;; Tracked objects:
 11147 ;;		On entry : 1F/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11151 ;;      Params:         0       0       0       0       0       0
 11152 ;;      Locals:         0       0       0       0       0       0
 11153 ;;      Temps:          0       0       0       0       0       0
 11154 ;;      Totals:         0       0       0       0       0       0
 11155 ;;Total ram usage:        0 bytes
 11156 ;; Hardware stack levels used: 1
 11157 ;; Hardware stack levels required when called: 1
 11158 ;; This function calls:
 11159 ;;		NULL
 11160 ;;		_ADC_DefaultInterruptHandler
 11161 ;; This function is called by:
 11162 ;;		_INTERRUPT_InterruptManager
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166     0D0D                     _ADC_ISR:	
 11167                           ;psect for function _ADC_ISR
 11168                           
 11169                           
 11170                           ;mcc_generated_files/adc.c: 148:     PIR1bits.ADIF = 0;
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
 11174     0D0D  1311               	bcf	17,6	;volatile
 11175                           
 11176                           ;mcc_generated_files/adc.c: 150:  if(ADC_InterruptHandler)
 11177     0D0E  0021               	movlb	1	; select bank1
 11178     0D0F  0857               	movf	_ADC_InterruptHandler^(0+128),w
 11179     0D10  0458               	iorwf	(_ADC_InterruptHandler+1)^(0+128),w
 11180     0D11  1903               	btfsc	3,2
 11181     0D12  0008               	return
 11182                           
 11183                           ;mcc_generated_files/adc.c: 151:     {;mcc_generated_files/adc.c: 152:         ADC_Inter
      +                          ruptHandler();
 11184     0D13  0858               	movf	(_ADC_InterruptHandler+1)^(0+128),w
 11185     0D14  008A               	movwf	10
 11186     0D15  0857               	movf	_ADC_InterruptHandler^(0+128),w
 11187     0D16  000A               	callw
 11188     0D17  318D               	pagesel	$
 11189     0D18  0008               	return
 11190     0D19                     __end_of_ADC_ISR:
 11191                           
 11192                           	psect	text83
 11193     0C3C                     __ptext83:	
 11194 ;; *************** function _ADC_DefaultInterruptHandler *****************
 11195 ;; Defined at:
 11196 ;;		line 160 in file "mcc_generated_files/adc.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;		None
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      void 
 11203 ;; Registers used:
 11204 ;;		None
 11205 ;; Tracked objects:
 11206 ;;		On entry : 1F/1
 11207 ;;		On exit  : 1F/1
 11208 ;;		Unchanged: 1F/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11210 ;;      Params:         0       0       0       0       0       0
 11211 ;;      Locals:         0       0       0       0       0       0
 11212 ;;      Temps:          0       0       0       0       0       0
 11213 ;;      Totals:         0       0       0       0       0       0
 11214 ;;Total ram usage:        0 bytes
 11215 ;; Hardware stack levels used: 1
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_ADC_Initialize
 11220 ;;		_ADC_ISR
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224     0C3C                     _ADC_DefaultInterruptHandler:	
 11225                           ;psect for function _ADC_DefaultInterruptHandler
 11226                           
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _ADC_DefaultInterruptHandler: []
 11230     0C3C  0008               	return
 11231     0C3D                     __end_of_ADC_DefaultInterruptHandler:
 11232     0001                     ___latbits      equ	1
 11233     007E                     btemp           set	126	;btemp
 11234     007E                     int$flags       set	126
 11235     007E                     wtemp0          set	126
 11236                           
 11237                           	psect	config
 11238                           
 11239                           ;Config register CONFIG1 @ 0x8007
 11240                           ;	Oscillator Selection
 11241                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 11242                           ;	Watchdog Timer Enable
 11243                           ;	WDTE = OFF, WDT disabled
 11244                           ;	Power-up Timer Enable
 11245                           ;	PWRTE = OFF, PWRT disabled
 11246                           ;	MCLR Pin Function Select
 11247                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 11248                           ;	Flash Program Memory Code Protection
 11249                           ;	CP = OFF, Program memory code protection is disabled
 11250                           ;	Data Memory Code Protection
 11251                           ;	CPD = OFF, Data memory code protection is disabled
 11252                           ;	Brown-out Reset Enable
 11253                           ;	BOREN = ON, Brown-out Reset enabled
 11254                           ;	Clock Out Enable
 11255                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 11256                           ;	Internal/External Switchover
 11257                           ;	IESO = ON, Internal/External Switchover mode is enabled
 11258                           ;	Fail-Safe Clock Monitor Enable
 11259                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 11260     8007                     	org	32775
 11261     8007  3FE4               	dw	16356
 11262                           
 11263                           ;Config register CONFIG2 @ 0x8008
 11264                           ;	Flash Memory Self-Write Protection
 11265                           ;	WRT = OFF, Write protection off
 11266                           ;	PLL Enable
 11267                           ;	PLLEN = OFF, 4x PLL disabled
 11268                           ;	Stack Overflow/Underflow Reset Enable
 11269                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 11270                           ;	Brown-out Reset Voltage Selection
 11271                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 11272                           ;	In-Circuit Debugger Mode
 11273                           ;	DEBUG = 0x1, unprogrammed default
 11274                           ;	Low-Voltage Programming Enable
 11275                           ;	LVP = ON, Low-voltage programming enabled
 11276     8008                     	org	32776
 11277     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    47
    Data        29
    BSS         63
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      61
    BANK1            80     23      79
    BANK2            80      3      24
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), NULL(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), 

    IOCBF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), NULL(), 

    IOCBF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), 

    IOCBF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), NULL(), 

    IOCBF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), 

    SPI1_ExchangeBlock@block	PTR void  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    SPI1_ExchangeBlock@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), 

    Tx_spi@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _Update_tx_buffer->___lwdiv
    ___wmul->_TMR0_ReadTimer
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    ___lbmod->___lbdiv
    ___awdiv->___wmul
    _Read_UART->_New_request
    _New_request->i1_Matrix_update_dir
    i1_Matrix_update_dir->i1_Tx_spi
    _ISR_Floor2->i1_Matrix_update_floor
    _ISR_Floor1->i1_Matrix_update_floor
    _ISR_Floor4->i1_Matrix_update_floor
    _ISR_Floor3->i1_Matrix_update_floor
    i1_Matrix_update_floor->i1_Tx_spi
    i1_Tx_spi->i1_SPI1_ExchangeBlock

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_Read_UART
    _TMR1_CallBack->_Write_UART
    _Write_UART->_Update_tx_buffer
    _Update_tx_buffer->___lwmod
    _Read_UART->_New_request
    _New_request->i1_Matrix_update_dir

Critical Paths under _main in BANK1

    _main->_Start
    _Matrix_update_floor->_Tx_spi
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF3_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _ADC_Initialize->_ADC_SetInterruptHandler
    _Next_index->___awmod
    _Next_floor->___awmod
    _Ini_matrix->_Tx_spi
    _Motor_Turn_On->_Matrix_update_dir
    _Motor_Turn_Off->_Matrix_update_dir
    _Matrix_update_dir->_Tx_spi
    _Tx_spi->_SPI1_ExchangeBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    9515
                                             21 BANK1      2     2      0
                                              0 BANK2      3     3      0
       _EUSART_SetRxInterruptHandler
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
                               _Idle
                         _Ini_matrix
                     _Motor_Turn_Off
                      _Motor_Turn_On
                         _Next_floor
                         _Next_index
                        _Route_empty
                          _SPI1_Open
                  _SYSTEM_Initialize
                              _Start
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _Start                                                2     2      0    2622
                                             19 BANK1      2     2      0
                _Matrix_update_floor
                     _Motor_Turn_Off
                      _Motor_Turn_On
                        _TMR0_Reload
 ---------------------------------------------------------------------------------
 (2) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Matrix_update_floor                                  5     5      0     522
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     284
                     _ADC_Initialize
                    _CMP1_Initialize
                    _CMP2_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR6_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      37
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      74
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF3_SetInterruptHandler                           2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCBF0_SetInterruptHandler                           2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     139
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CMP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0      34
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC_SetInterruptHandler                              2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _SPI1_Open                                            4     4      0     188
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Route_empty                                          3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Next_index                                           5     5      0     643
                                              6 BANK1      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Next_floor                                           5     5      0     609
                                              6 BANK1      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     445
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Ini_matrix                                           5     5      0     654
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _Idle                                                 0     0      0    2100
                     _Motor_Turn_Off
                      _Motor_Turn_On
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_On                                        0     0      0    1050
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_Off                                       0     0      0    1050
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (3) _Matrix_update_dir                                   12    12      0    1050
                                              7 BANK1     12    12      0
                             _Tx_spi
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     174
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Tx_spi                                               3     0      3     228
                                              4 BANK1      3     0      3
                 _SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (5) _SPI1_ExchangeBlock                                   4     1      3     136
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0    5768
                                NULL *
                            _ADC_ISR
                           _CMP1_ISR
                           _CMP2_ISR
                 _EUSART_Receive_ISR *
                    _PIN_MANAGER_IOC
                          _Read_UART *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0    1310
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (8) _TMR1_WriteTimer                                      2     0      2      91
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0    1219
                                NULL *
       _TMR1_DefaultInterruptHandler *
                         _Write_UART *
 ---------------------------------------------------------------------------------
 (9) _Write_UART                                           3     3      0    1219
                                              7 BANK0      3     3      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
                   _Update_tx_buffer
 ---------------------------------------------------------------------------------
 (10) _Update_tx_buffer                                    2     2      0    1114
                                              5 BANK0      2     2      0
                     _TMR0_ReadTimer
                            ___awdiv
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             ___wmul
                      i1_TMR0_Reload
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     100
                                              1 COMMON     6     2      4
                     _TMR0_ReadTimer (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     171
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     174
                                              7 COMMON     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             5     4      1     170
                                              4 COMMON     5     4      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lbdiv                                             4     3      1     172
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             8     4      4     304
                                              7 COMMON     4     0      4
                                              0 BANK0      4     4      0
                     _TMR0_ReadTimer (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) _TMR0_ReadTimer                                      1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_is_tx_ready                                  1     1      0       8
 ---------------------------------------------------------------------------------
 (10) _EUSART_Write                                        1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Read_UART                                            5     5      0    2454
                                             12 COMMON     1     1      0
                                             26 BANK0      4     4      0
                        _EUSART_Read
                 _EUSART_Receive_ISR
                        _New_request
 ---------------------------------------------------------------------------------
 (8) _New_request                                         19    15      4    2356
                                              8 COMMON     4     0      4
                                             11 BANK0     15    15      0
                i1_Matrix_update_dir
                          i1___awmod
 ---------------------------------------------------------------------------------
 (9) i1___awmod                                            6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_Matrix_update_dir                                 12    12      0     963
                                              7 COMMON     1     1      0
                                              0 BANK0     11    11      0
                           i1_Tx_spi
                           i1___bmul
 ---------------------------------------------------------------------------------
 (10) i1___bmul                                            3     2      1     108
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_RxDataHandler                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Read                                          1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0    1002
                         _IOCBF0_ISR
                         _IOCBF3_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCBF3_ISR                                           0     0      0     501
                                NULL *
     _IOCBF3_DefaultInterruptHandler *
                         _ISR_Floor2 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor2                                           0     0      0     501
              i1_Matrix_update_floor
 ---------------------------------------------------------------------------------
 (9) _IOCBF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCBF0_ISR                                           0     0      0     501
                                NULL *
     _IOCBF0_DefaultInterruptHandler *
                         _ISR_Floor1 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor1                                           0     0      0     501
              i1_Matrix_update_floor
                      i1_TMR0_Reload
 ---------------------------------------------------------------------------------
 (9) _IOCBF0_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CMP2_ISR                                             0     0      0     501
                         _ISR_Floor4
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor4                                           0     0      0     501
              i1_Matrix_update_floor
                      i1_TMR0_Reload
 ---------------------------------------------------------------------------------
 (11) i1_TMR0_Reload                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CMP1_ISR                                             0     0      0     501
                         _ISR_Floor3
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor3                                           0     0      0     501
              i1_Matrix_update_floor
 ---------------------------------------------------------------------------------
 (10) i1_Matrix_update_floor                               5     5      0     501
                                              7 COMMON     5     5      0
                           i1_Tx_spi
 ---------------------------------------------------------------------------------
 (10) i1_Tx_spi                                            3     0      3     216
                                              4 COMMON     3     0      3
               i1_SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (11) i1_SPI1_ExchangeBlock                                4     1      3     136
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
                                NULL *
        _ADC_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _ADC_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _IOCBF0_SetInterruptHandler
   _IOCBF3_SetInterruptHandler
   _Idle
     _Motor_Turn_Off
       _Matrix_update_dir
         _Tx_spi
           _SPI1_ExchangeBlock
         ___bmul
     _Motor_Turn_On
       _Matrix_update_dir
   _Ini_matrix
     _Tx_spi
   _Motor_Turn_Off
   _Motor_Turn_On
   _Next_floor
     ___awmod
   _Next_index
     ___awmod
   _Route_empty
   _SPI1_Open
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _CMP1_Initialize
     _CMP2_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF0_SetInterruptHandler
       _IOCBF3_SetInterruptHandler
     _PWM3_Initialize
     _SPI1_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR6_Initialize
     _WDT_Initialize
   _Start
     _Matrix_update_floor
       _Tx_spi
     _Motor_Turn_Off
     _Motor_Turn_On
     _TMR0_Reload
   _TMR1_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _ADC_ISR *
     NULL(Fake) *
     _ADC_DefaultInterruptHandler *
   _CMP1_ISR *
     _ISR_Floor3
       i1_Matrix_update_floor
         i1_Tx_spi
           i1_SPI1_ExchangeBlock
   _CMP2_ISR *
     _ISR_Floor4
       i1_Matrix_update_floor
       i1_TMR0_Reload
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _PIN_MANAGER_IOC *
     _IOCBF0_ISR
       NULL(Fake) *
       _IOCBF0_DefaultInterruptHandler *
       _ISR_Floor1 *
         i1_Matrix_update_floor
         i1_TMR0_Reload
     _IOCBF3_ISR
       NULL(Fake) *
       _IOCBF3_DefaultInterruptHandler *
       _ISR_Floor2 *
         i1_Matrix_update_floor
   _Read_UART *
     _EUSART_Read
     _EUSART_Receive_ISR
     _New_request
       i1_Matrix_update_dir
         i1_Tx_spi
         i1___bmul
       i1___awmod
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Write_UART *
         _EUSART_Write
         _EUSART_is_tx_ready
         _Update_tx_buffer
           _TMR0_ReadTimer
           ___awdiv
             _TMR0_ReadTimer (ARG)
             ___wmul (ARG)
               _TMR0_ReadTimer (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           i1_TMR0_Reload
     _TMR1_WriteTimer

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            48      0       0      0.0%
BIGRAM             368      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     30      61     76.2%
BANK1               80     23      79     98.8%
BANK2               80      3      24     30.0%
BANK3               80      0       0      0.0%
BANK4               48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     178      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Jul 14 20:19:29 2025

                ?_EUSART_SetRxInterruptHandler 00C0                          __end_ofi1_TMR0_Reload 0C46  
             ??_IOCBF3_DefaultInterruptHandler 0070                ?_IOCBF3_DefaultInterruptHandler 0070  
                           _SPI1_ExchangeBlock 0F08                                 ___bmul@product 00C1  
                            ??_CMP1_Initialize 00C0                                   ___awdiv@sign 0040  
                       __end_of_FVR_Initialize 0C4E                            ___wmul@multiplicand 0073  
                              _timer0ReloadVal 0035                                            l484 0F19  
                                          l486 0F1F                                            l948 0E0B  
                                          l997 03CA                                            _PR2 001B  
                                          _PR6 041D                            ?_SPI1_ExchangeBlock 00C0  
                              _timer1ReloadVal 002F                         ??_EUSART_RxDataHandler 0070  
                              __end_of_ADC_ISR 0D19                                            _var 0020  
               ?_EUSART_SetFramingErrorHandler 00C0                __end_of_ADC_SetInterruptHandler 0C60  
                                 ___awmod@sign 00C5                                _TMR2_Initialize 0CAB  
                                          wreg 0009                        SPI1_ExchangeBlock@block 00C0  
                 ?_ADC_DefaultInterruptHandler 0070                       __end_of_Update_tx_buffer 01F2  
                                 ?_EUSART_Read 0070                                           l4053 0F0A  
                                         l4141 0438                                           l4133 0420  
                                         l4073 0DE1                                           l4129 040F  
                                         l4069 0DDD                                           l4157 045D  
                                         l4541 05A8                                           l4517 0FB3  
                                         l4551 05B8                                           l4537 05A1  
                                         l4563 05D5                                           l4555 05C4  
                                         l4651 0E98                                           l4549 05AE  
                                         l4645 0E8E                                           l4559 05CD  
                                         l4831 03EE                                           l4753 06A1  
                                         l4673 0736                                           l4665 0717  
                                         l4771 06C9                                           l4683 0664  
                                         l4851 03CC                                           l4843 03A2  
                                         l4835 038D                                           l4693 068C  
                                         l4669 0733                                           l4853 03CF  
                                         l4689 068A                                           _LATA 010C  
                                         _LATB 010D                                           u3024 041C  
                                         u3025 041B                                           u3035 042D  
                                         u3305 0FAC                                           u3505 0699  
                            ??_CMP2_Initialize 00C0                                           u3355 05B1  
                                         u3375 05BE                                           u3385 05C5  
                                         u3465 0EA5                                           u3485 0743  
                                         u3717 039B                                           u3727 03E7  
                                         u3737 078B                                           _TMR0 0015  
                                         _TMR2 001A                                           _TMR6 041C  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _Idle 0DFC                                           _idle 003A  
                                         _main 035F                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                         ??_SPI1_ExchangeBlock 00C3                      i1SPI1_ExchangeBlock@block 0070  
                                         start 003F                               __end_of_CMP1_ISR 0CC4  
                             __end_of_CMP2_ISR 0CCD                     ??_TMR1_SetInterruptHandler 00C2  
                            ___bmul@multiplier 00C2                                  _MATRIX_CONFIG 080D  
                                 i1Tx_spi@data 0074                   Matrix_update_dir@display_dir 00CD  
                                  Ini_matrix@i 00C7                                    Ini_matrix@k 00CA  
                                  ?_ISR_Floor1 0070                                    ?_ISR_Floor2 0070  
                                  ?_ISR_Floor3 0070                                    ?_ISR_Floor4 0070  
                      __end_of_TMR0_Initialize 0CD7                                ?_FVR_Initialize 0070  
                                ?_EUSART_Write 0070                                          ?_Idle 0070  
                __end_of_OSCILLATOR_Initialize 0C89                                          ?_main 0070  
                              __end_of___awdiv 0597                                __end_of___lbdiv 0EE7  
                              __end_of___awmod 05DA                                __end_of___lbmod 0E70  
             SPI1_Open@spi1UniqueConfiguration 00C3                                ___awdiv@divisor 0077  
                                        _T1CON 0018                                          _T2CON 001C  
                                        _T6CON 041E                                __end_of___lwdiv 0778  
                              __end_of___lwmod 0F7D                                          i1l279 003D  
                                        i1l484 0EF8                                          i1l486 0EFE  
                                        i1l593 0C96                                          i1l913 00EB  
                                        i1l916 0124                                ___awdiv@counter 003F  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _TRISA 008C                                          _TRISB 008D  
                                 main@is_empty 0137                                          _TXREG 019A  
                                        _TXSTA 019E                               __end_of_TMR1_ISR 0E55  
                                        _Start 0778                                 i1___awmod@sign 0075  
                             i1Tx_spi@dataSize 0075                        __end_of_PIN_MANAGER_IOC 0CEC  
                               _WDT_Initialize 0C4E                                          _index 003E  
                                        _route 0027                    __end_ofi1_Matrix_update_dir 04F4  
                             __end_ofi1___bmul 0DBA                               __end_ofi1_Tx_spi 0DAB  
                      __end_of_PWM3_Initialize 0D72                        __end_of_TMR1_Initialize 0E3C  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                ___lbdiv@divisor 0070  
                                 Route_empty@i 00C1                                _TMR1_WriteTimer 0D80  
                              ___lbdiv@counter 0072                                  ??_New_request 004A  
                                   _Ini_matrix 069E                                   __end_of_Idle 0E10  
                              __initialization 0041                                   __end_of_main 03FA  
                               ??_EUSART_Write 0070                        __end_of_TMR2_Initialize 0CB3  
                                    ??_ADC_ISR 0070                    ?_INTERRUPT_InterruptManager 0070  
                                       ??_Idle 00D3                 ??_EUSART_SetRxInterruptHandler 00C2  
                                       ??_main 00D5                          __end_of_Motor_Turn_On 0D65  
                      _IOCBF0_InterruptHandler 00E5                         __end_of_WDT_Initialize 0C52  
                              _TMR6_Initialize 0CD7                                         ?_Start 0070  
                      ??i1_Matrix_update_floor 0077      __end_of_EUSART_DefaultFramingErrorHandler 0003  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0002                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 00DD  
                                       _ADRESH 009C                                         _ADRESL 009B  
                                       _CCPR3H 0312                                         _CCPR3L 0311  
                             ___awdiv@dividend 0079                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                                     _Next_floor 065F  
                                   _Next_index 0712                                         _FLOORS 0822  
                      TMR1_WriteTimer@timerVal 0070                                         i1l1155 0E78  
                                       i1l3031 0089                                         i1l3043 00A4  
                                       i1l3133 0DB1                                         i1l1373 0E6A  
                                       i1l3037 0096                                         i1l3221 07DF  
                                       i1l3039 0099                                         i1l3129 0DAD  
                                       i1l3313 05E4                                         i1l3057 0104  
                                       i1l3049 00CB                                         i1l4043 0EE9  
                                       i1l3331 0607                                         i1l3501 0EA9  
                                       i1l4205 0489                                         i1l3325 05F1  
                                       i1l3317 05EB                                         i1l3327 05FB  
                                       i1l3335 0610                                         i1l4233 04D6  
                                       i1l4217 04B1                                         i1l4209 049A  
                                       i1l3339 0618                                         i1l2901 0592  
                                       i1l3535 0700                                         i1l4089 0F36  
                                       i1l4441 023D                                         i1l4433 0210  
                                       i1l3529 06F1                                         i1l4443 0250  
                                       i1l3539 070F                                         i1l2915 0ECF  
                                       i1l4381 0D55                                         i1l2917 0ED6  
                                       i1l3549 0D89                                         i1l4375 0D48  
                                       i1l2927 0EE5                                         i1l2935 0E59  
                                       i1l4481 02EA                                         i1l4473 02AE  
                                       i1l4465 02A8                                         i1l4457 0280  
                                       i1l4449 0253                                         i1l2849 0E72  
                                       i1l4459 028F                                         i1l4635 065A  
                                       i1l2875 055D                                         i1l4811 0035  
                                       u220_25 0601                                         i1l2893 0581  
                                       i1l2885 0565                                         i1l2869 0554  
                                       i1l2965 076A                                         i1l2957 074E  
                                       i1l2981 0F59                                         i1l4805 002C  
                                       i1l4495 031A                                         i1l4487 02ED  
                                       i1l4479 02D7                                         i1l2887 056F  
                                       i1l2959 0758                                         i1l2983 0F63  
                                       i1l2991 0F78                                         i1l4497 0329  
                                       i1l2897 058A                                         i1l2969 0773  
                                       i1l2987 0F6F                                         i1l4589 0CE7  
                                       u221_25 0608                                         i1l4793 0017  
                                       i1l4785 000C                                         i1l4799 0023  
                                       u320_25 028D                                         u160_25 0570  
                                       u152_25 0E79                                         u321_25 029A  
                                       u161_25 057A                                         u153_25 0E7E  
                                       u209_25 07FA                                         u218_25 05F4  
                                       u162_25 0582                                         _FVRCON 0117  
                                       u307_24 0496                                         u307_25 0495  
                                       u323_25 02CE                                         u315_25 01F8  
                                       u308_25 04A7                                         u324_25 02E8  
                                       u316_25 0204                                         u180_25 0F5C  
                   __end_of_EUSART_is_tx_ready 0CA3                                         u325_25 0311  
                                       u317_25 0230                                         u173_25 0751  
                                       u326_25 0327                                         u318_25 024E  
                                       u158_25 0568                                         u182_25 0F69  
                                       u327_20 0334                                         u327_22 0335  
                                       u319_25 0277                                         u175_25 0759  
                                       u183_25 0F70                                         u328_20 0344  
                                       u328_22 0345                                         u328_25 0340  
                                       u176_25 0763                                         u169_25 0E5C  
                                       u177_25 076B                                         u196_25 00F5  
                                       u374_27 034F                                         _OSCCON 0099  
                                       u299_25 0F2F                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                            __end_of_SPI1_Open 054A                                   Read_UART@ori 0059  
         __end_of_TMR1_DefaultInterruptHandler 0004                   _TMR1_DefaultInterruptHandler 0003  
                                 _CCPTMRS0bits 029E                                   ?_TMR0_Reload 0070  
                                       ___bmul 0DDA                                         _Tx_spi 0DCA  
                                       ___wmul 0E70                                      ??___awdiv 007B  
                                    ??___lbdiv 0071                                      ??___awmod 00C4  
                                    ??___lbmod 0075                                      ??___lwdiv 007B  
                                    ??___lwmod 007E                            __end_of_New_request 035F  
                             ?_TMR0_Initialize 0070                               ___awdiv@quotient 0041  
                              ___awmod@divisor 00C0                                ___awmod@counter 00C4  
                            __end_ofi1___awmod 061D                                ?_WDT_Initialize 0070  
                     i1SPI1_ExchangeBlock@data 0073                                      ?_CMP1_ISR 0070  
                                    ?_CMP2_ISR 0070        ADC_SetInterruptHandler@InterruptHandler 00C0  
     TMR1_SetInterruptHandler@InterruptHandler 00C0     IOCBF3_SetInterruptHandler@InterruptHandler 00C0  
   IOCBF0_SetInterruptHandler@InterruptHandler 00C0                               ?_PIN_MANAGER_IOC 0070  
                      __end_of_TMR1_WriteTimer 0D8E                               ___lbdiv@dividend 0071  
                                 ??_IOCBF0_ISR 007C                                   ??_IOCBF3_ISR 007C  
                        __end_of_TMR1_CallBack 0CF7                               ?_TMR1_Initialize 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 0F7D  
                              ___lbmod@divisor 0074                        __end_of__initialization 0068  
                              ___lbmod@counter 0077                                _CMP1_Initialize 0D19  
                           ?_SYSTEM_Initialize 0070                                    ?_Ini_matrix 0070  
                               _Motor_Turn_Off 0CF7                            ___bmul@multiplicand 00C0  
                               __pcstackCOMMON 0070                                  __end_of_Start 07A9  
                                   _Write_UART 07D9                                   __pidataBANK1 0CB3  
                                 __pidataBANK2 0E10                            ??_SYSTEM_Initialize 00C2  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                            ??_SPI1_Initialize 00C0         __end_of_IOCBF0_DefaultInterruptHandler 0C3E  
               _IOCBF0_DefaultInterruptHandler 0C3D                                    Next_floor@i 00C9  
                                  Next_index@i 00C9                               ?_TMR2_Initialize 0070  
                      __end_of_TMR6_Initialize 0CE1                               ___lbdiv@quotient 0073  
                                    ?i1___bmul 0070                                      ?i1_Tx_spi 0074  
                           __end_of_IOCBF0_ISR 0D4B                             __end_of_IOCBF3_ISR 0D58  
                            __end_of_Read_UART 065F                                _CMP2_Initialize 0D02  
                           _spi1_configuration 0828                                 _OPTION_REGbits 0095  
                                ??_Route_empty 00C0                           _eusartRxStatusBuffer 00AA  
                            _velocidade_string 00E7                           __end_of_MATRIX_FLOOR 080D  
                                   Tx_spi@data 00C4                                        ??_Start 00D3  
              ??_EUSART_SetOverrunErrorHandler 00C2         __end_of_IOCBF3_DefaultInterruptHandler 0C3F  
               _IOCBF3_DefaultInterruptHandler 0C3E                                     ??_CMP1_ISR 007C  
                                   ??_CMP2_ISR 007C                               i1___bmul@product 0071  
                            ?_Update_tx_buffer 0070                      __end_of_SYSTEM_Initialize 0FA7  
           i1Matrix_update_floor@display_floor 007A               Matrix_update_floor@display_floor 00CA  
                                  ?_Next_floor 0070                                    ?_Next_index 0070  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                                _current_floor 003D                           __end_of_EUSART_Write 0C9C  
                           ??_Update_tx_buffer 0044                         __end_of_Motor_Turn_Off 0D02  
                          _Matrix_update_floor 0FA7                             __end_of_MATRIX_DIR 0822  
                                  _New_request 01F2                              _Matrix_update_dir 03FA  
                             ??_FVR_Initialize 00C0                                     __pmaintext 035F  
                                      ?___bmul 00C0                                        ?_Tx_spi 00C4  
                           ?_Matrix_update_dir 0070                                        ?___wmul 0071  
                                   ??_TMR1_ISR 007E                                     __pintentry 0004  
                                 ??_ISR_Floor1 007C                                   ??_ISR_Floor2 007C  
                                 ??_ISR_Floor3 007C                                   ??_ISR_Floor4 007C  
                                      _CM1CON0 0111                                        _CM1CON1 0112  
                                      _CM2CON0 0113                                        _CM2CON1 0114  
                                      _CCP3CON 0313                                        _ADC_ISR 0D0D  
                                      _BAUDCON 019F                                        _APFCON0 011D  
                                      _APFCON1 011E                   ??_EUSART_DefaultErrorHandler 0070  
                                   ??i1___bmul 0071                                     ??i1_Tx_spi 0077  
                          ??_Matrix_update_dir 00C7                           ?_Matrix_update_floor 0070  
                                _eusartRxCount 0037                                        _OSCTUNE 0098  
                                      _SSP1ADD 0212                                        _SSP1BUF 0211  
                      __end_of_CMP1_Initialize 0D25                       ??_EUSART_SetErrorHandler 00C2  
                             ?_TMR1_WriteTimer 0070                            __end_of_Route_empty 0EA9  
                           __end_of_ISR_Floor1 0DCA                             __end_of_ISR_Floor2 0D80  
                           __end_of_ISR_Floor3 0CAB                             __end_of_ISR_Floor4 0D3E  
                              ?_Motor_Turn_Off 0070                      __end_of_Matrix_update_dir 047B  
                         _ADC_InterruptHandler 00D7                                  Read_UART@dest 005B  
                      _ADC_SetInterruptHandler 0C5B                         _uart_read_buffer_count 0033  
                                  ?_Write_UART 0070                        __end_of_CMP2_Initialize 0D0D  
                                      ___awdiv 054A                                        ___lbdiv 0EC8  
                                      ___awmod 0597                                        ___lbmod 0E55  
                                      ___lwdiv 0746                                        ___lwmod 0F53  
                               main@next_index 0135                               ?_TMR6_Initialize 0070  
                        ??_Matrix_update_floor 00C7                                        __ptext1 0778  
                                      __ptext2 0C52                                        __ptext3 0FA7  
                                      __ptext4 0F7D                                        __ptext5 0C4E  
                                      __ptext6 0CD7                                        __ptext7 0CAB  
                                      __ptext8 0E25                                        __ptext9 0C7E  
               ??_TMR1_DefaultInterruptHandler 0070                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 0C83                               Ini_matrix@i_1791 00CB  
                             ___awmod@dividend 00C2                       ??_PIN_MANAGER_Initialize 00C2  
                    ?_TMR1_SetInterruptHandler 00C0                                      _IOCBFbits 0396  
                          i1___bmul@multiplier 0072                                      _IOCBNbits 0395  
                                    _IOCBPbits 0394                                        _stop_2s 003B  
                                      clrloop0 0C8A                           end_of_initialization 0068  
                __end_ofi1_Matrix_update_floor 0F53                              New_request@i_1746 0051  
                            New_request@i_1747 0053                              New_request@i_1748 0055  
                                   _next_floor 003C          __end_of_EUSART_SetOverrunErrorHandler 0C6F  
                _EUSART_SetOverrunErrorHandler 0C6A                                        init_ram 0C8F  
                                 New_request@i 004F                                        initloop 0C90  
                            _EUSART_Initialize 07A9                              New_request@index_ 0057  
                           ?_EUSART_Initialize 0070                          TMR0_ReadTimer@readVal 0070  
                            New_request@origin 0078                                      _RCSTAbits 019D  
                           _EUSART_is_tx_ready 0C9C                                  i1_TMR0_Reload 0C42  
                                    _SPI1_Open 04F4                                 _TMR0_ReadTimer 0C56  
                          ??_EUSART_Initialize 00C2                               ??_WDT_Initialize 00C0  
                                   _velocidade 00BA                            ?_EUSART_is_tx_ready 0070  
                             ___lbmod@dividend 0076            __end_of_ADC_DefaultInterruptHandler 0C3D  
                  _ADC_DefaultInterruptHandler 0C3C                                    _Route_empty 0E8B  
                                    _TRISBbits 008D                                      i1___awmod 05DA  
                 ??_IOCBF0_SetInterruptHandler 00C2                   ??_IOCBF3_SetInterruptHandler 00C2  
                             ?_CMP1_Initialize 0070                         SPI1_ExchangeBlock@data 00C3  
                                  ___lbmod@rem 0078                      __end_of_EUSART_Initialize 07D9  
                ??_ADC_DefaultInterruptHandler 0070                                 __end_of_FLOORS 0828  
                    ??_ADC_SetInterruptHandler 00C2                                _SPI1_Initialize 0D25  
                         ??_EUSART_is_tx_ready 0070                                      _TXSTAbits 019E  
                                  _CCP3CONbits 0313                                   ??_Ini_matrix 00C7  
                                 _MATRIX_FLOOR 07FD                         __end_of_TMR0_ReadTimer 0C5B  
                               ?i1_TMR0_Reload 0070                               ?_CMP2_Initialize 0070  
                               __end_of___bmul 0DEA                                     ?_SPI1_Open 0070  
                               __end_of_Tx_spi 0DDA             __end_of_EUSART_DefaultErrorHandler 0C42  
                   _EUSART_DefaultErrorHandler 0C3F                                 __end_of___wmul 0E8B  
                                 _EUSART_Write 0C95                                 _ADC_Initialize 0D8E  
                       ?_OSCILLATOR_Initialize 0070                        i1Matrix_update_dir@data 0044  
                      i1Matrix_update_dir@mask 0043                            start_initialization 0041  
                                    _Read_UART 061D                             __end_of_Ini_matrix 06DC  
                 __end_ofi1_SPI1_ExchangeBlock 0F08                                     ?i1___awmod 0070  
                                ??_EUSART_Read 0070   EUSART_SetRxInterruptHandler@interruptHandler 00C0  
                                 ??_Next_floor 00C6                                   ??_Next_index 00C6  
                                 ?_New_request 0078                          __end_of_MATRIX_CONFIG 0819  
               ?_EUSART_SetOverrunErrorHandler 00C0                     _EUSART_FramingErrorHandler 00DF  
                                     ??___bmul 00C1                                       ??_Tx_spi 00C7  
                              ?_TMR0_ReadTimer 0070                                       ??___wmul 0075  
                       _EUSART_SetErrorHandler 0C60                         __end_of_ADC_Initialize 0D9C  
                               Ini_matrix@data 00C8                                    __pdataBANK1 00E7  
                                  __pdataBANK2 0120                             i1___awmod@dividend 0072  
                                     ?_ADC_ISR 0070                                New_request@dest 007A  
                           __end_of_Next_floor 069E                             __end_of_Next_index 0746  
                        TMR1_ISR@CountCallBack 002D                                      ___latbits 0001  
                                _Motor_Turn_On 0D58                                  __pcstackBANK0 003F  
                                __pcstackBANK1 00C0                                  __pcstackBANK2 0135  
                                   ?_Read_UART 0070                        __end_of_SPI1_Initialize 0D31  
                             ??_Motor_Turn_Off 00D3                     __end_of_EUSART_Receive_ISR 0712  
                                  Write_UART@i 0047               _EUSART_RxDefaultInterruptHandler 00E1  
                          __end_of_EUSART_Read 0EC8                                      __pnvBANK1 00D7  
                      _IOCBF3_InterruptHandler 00E3                   __end_of_EUSART_RxDataHandler 0DFC  
                              ??i1_TMR0_Reload 0070                               ___lwdiv@dividend 0079  
                       _PIN_MANAGER_Initialize 0FD1                           EUSART_Read@readValue 0070  
                                 ??_Write_UART 0046               __end_of_TMR1_SetInterruptHandler 0C83  
                                     ?___awdiv 0077                                       ?___lbdiv 0070  
                                     ?___awmod 00C0                                       ?___lbmod 0074  
                                     ?___lwdiv 0077                                    ??_SPI1_Open 00C0  
                                     ?___lwmod 003F                                ?_ADC_Initialize 0070  
                                 _eusartRxHead 0039                                   _eusartRxTail 0038  
                 ??_INTERRUPT_InterruptManager 007E                               _uart_read_buffer 00A0  
                               ?_Motor_Turn_On 0070                           i1Matrix_update_dir@i 0048  
                          i1_Matrix_update_dir 047B             __end_of_IOCBF0_SetInterruptHandler 0C79  
                   _IOCBF0_SetInterruptHandler 0C74                          Matrix_update_dir@data 00CE  
                        Matrix_update_dir@mask 00CC             __end_of_IOCBF3_SetInterruptHandler 0C7E  
                   _IOCBF3_SetInterruptHandler 0C79                                    ??i1___awmod 0074  
                                     _CMP1_ISR 0CBB                                       _CMP2_ISR 0CC4  
                             ___lwdiv@quotient 007B                             __end_of_Write_UART 07FD  
                               _eusartRxBuffer 00B2                     __end_of_SPI1_ExchangeBlock 0F2B  
                         New_request@index_ori 004D                                  _TMR1_CallBack 0CEC  
                            ??_TMR0_Initialize 00C0                                 ___wmul@product 0075  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 00C0  
                                     _LATBbits 010D                                      clear_ram0 0C89  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0036                          i1___bmul@multiplicand 0070  
                         ?i1_Matrix_update_dir 0070                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00C2                                       _PIR2bits 0012  
                                     _PIR3bits 0013                                  ??_TMR0_Reload 00C0  
                  __end_of_Matrix_update_floor 0FD1                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216                           i1_SPI1_ExchangeBlock 0EE7  
    __end_of_EUSART_DefaultOverrunErrorHandler 0C4A            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0C46  
                                     _TMR1_ISR 0E3C                                       _SSP1STAT 0214  
                            ??_PIN_MANAGER_IOC 007C                                      _position0 0031  
                                    _positionf 00BC                              ??_TMR1_Initialize 00C2  
                            ??_PWM3_Initialize 00C0                                       i1___bmul 0DAB  
                                     i1_Tx_spi 0D9C                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0071                                   ?_Route_empty 0070  
                                  ??_Read_UART 007C                                    _EUSART_Read 0EA9  
                             ?_SPI1_Initialize 0070                                 ?_TMR1_CallBack 0070  
                      Matrix_update_dir@i_1802 00D0                              ??_TMR2_Initialize 00C0  
                        i1_Matrix_update_floor 0F2B                         i1Matrix_update_floor@i 007B  
                        ??i1_Matrix_update_dir 0077                               _Update_tx_buffer 006C  
                        ?i1_SPI1_ExchangeBlock 0070                              i1___awmod@divisor 0070  
                    i1Matrix_update_dir@i_1802 0047                        Matrix_update_dir@route_ 00C8  
                      ??_OSCILLATOR_Initialize 00C0                                 Tx_spi@dataSize 00C5  
                          _EUSART_ErrorHandler 00DB                              i1___awmod@counter 0074  
                  ?_EUSART_DefaultErrorHandler 0070                       _TMR1_SetInterruptHandler 0C7E  
                          __end_of_TMR0_Reload 0C56                                ??_Motor_Turn_On 00D3  
                        _TMR1_InterruptHandler 00D9                      i1Matrix_update_dir@route_ 003F  
                              ___lwdiv@divisor 0077                           _EUSART_RxDataHandler 0DEA  
                              ___lwdiv@counter 007D                                       __ptext10 0CCD  
                                     __ptext11 0D25                                       __ptext20 0C6A  
                                     __ptext12 0D65                                       __ptext21 0C65  
                                     __ptext13 0FD1                                       __ptext30 065F  
                                     __ptext22 0C60                                       __ptext14 0C79  
                                     __ptext31 0597                                       __ptext23 0D02  
                                     __ptext15 0C74                                       __ptext32 069E  
                                     __ptext24 0D19                                       __ptext16 0C83  
                                     __ptext41 0E3C                                       __ptext33 0DFC  
                                     __ptext25 0D8E                                       __ptext17 0C4A  
                                     __ptext50 0E55                                       __ptext42 0D80  
                                     __ptext34 0D58                                       __ptext26 0C5B  
                                     __ptext18 07A9                                       __ptext51 0EC8  
                                     __ptext43 0CEC                                       __ptext35 0CF7  
                                     __ptext27 04F4                                       __ptext19 0C6F  
                                     __ptext60 047B                                       __ptext52 054A  
                                     __ptext44 0003                                       __ptext36 03FA  
                                     __ptext28 0E8B                                       __ptext61 0DAB  
                                     __ptext53 0C56                                       __ptext45 07D9  
                                     __ptext37 0DDA                                       __ptext29 0712  
                                     __ptext70 0D72                                       __ptext62 0C46  
                                     __ptext54 0C9C                                       __ptext46 006C  
                                     __ptext38 0DCA                                       __ptext71 0D3E  
                                     __ptext63 0002                                       __ptext55 0C95  
                                     __ptext47 0E70                                       __ptext39 0F08  
                                     __ptext80 0D9C                                       __ptext72 0C3D  
                                     __ptext64 0C3F                                       __ptext56 06DC  
                                     __ptext48 0F53                                       __ptext81 0EE7  
                                     __ptext73 0DBA                                       __ptext65 0DEA  
                                     __ptext57 061D                                       __ptext49 0746  
                                     __ptext82 0D0D                                       __ptext74 0CC4  
                                     __ptext66 0EA9                                       __ptext58 01F2  
                                     __ptext83 0C3C                                       __ptext75 0D31  
                                     __ptext67 0CE1                                       __ptext59 05DA  
                                     __ptext76 0C42                                       __ptext68 0D4B  
                                     __ptext77 0CBB                                       __ptext69 0C3E  
                                     __ptext78 0CA3                                       __ptext79 0F2B  
                                 _SSP1CON1bits 0215                                     _IOCBF0_ISR 0D3E  
                                   _IOCBF3_ISR 0D4B                 i1Matrix_update_dir@display_dir 0046  
                             ??_TMR0_ReadTimer 0070                           Matrix_update_floor@i 00CB  
                      ?_EUSART_SetErrorHandler 00C0                  i1SPI1_ExchangeBlock@blockSize 0071  
                      Matrix_update_floor@data 00C8  EUSART_SetOverrunErrorHandler@interruptHandler 00C0  
                                     int$flags 007E                                       _position 00BE  
           __end_of_INTERRUPT_InterruptManager 003F                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0C6A                  _EUSART_SetFramingErrorHandler 0C65  
                            ??_TMR1_WriteTimer 0072                                     _MATRIX_DIR 0819  
                  SPI1_ExchangeBlock@blockSize 00C1                      i1Matrix_update_floor@data 0078  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
                              ??_TMR1_CallBack 007E                       ?_ADC_SetInterruptHandler 00C0  
                                     intlevel1 0000                         ?i1_Matrix_update_floor 0070  
                            _uart_write_buffer 0120                               ___lwmod@dividend 0041  
                      ?_PIN_MANAGER_Initialize 0070                              ??_TMR6_Initialize 00C0  
               __end_of_EUSART_SetErrorHandler 0C65                               ??_ADC_Initialize 00C2  
         __end_of_EUSART_SetRxInterruptHandler 0C74                   _EUSART_SetRxInterruptHandler 0C6F  
                       ??i1_SPI1_ExchangeBlock 0073                                    _TMR0_Reload 0C52  
                           _EUSART_Receive_ISR 06DC  EUSART_SetFramingErrorHandler@interruptHandler 00C0  
                              _position_string 00EB                                     _ISR_Floor1 0DBA  
                                   _ISR_Floor2 0D72                                     _ISR_Floor3 0CA3  
                                   _ISR_Floor4 0D31                                  __pstringtext1 07FD  
                                __pstringtext2 080D                                  __pstringtext3 0819  
                                __pstringtext4 0822                                  __pstringtext5 0828  
                               _FVR_Initialize 0C4A                                     _OPTION_REG 0095  
                          ?_EUSART_Receive_ISR 0070                                ___lwmod@divisor 003F  
                              _TMR0_Initialize 0CCD                             Matrix_update_dir@i 00D1  
                              ___lwmod@counter 0043                               Next_floor@index_ 00C7  
                  ?_IOCBF0_SetInterruptHandler 00C0                    ?_IOCBF3_SetInterruptHandler 00C0  
                                  ?_IOCBF0_ISR 0070                             EUSART_Write@txData 0070  
                                  ?_IOCBF3_ISR 0070                               Next_index@index_ 00C7  
               __end_of_PIN_MANAGER_Initialize 1000               ??_IOCBF0_DefaultInterruptHandler 0070  
              ?_IOCBF0_DefaultInterruptHandler 0070                                _PIN_MANAGER_IOC 0CE1  
                         ??_EUSART_Receive_ISR 0070                                _TMR1_Initialize 0E25  
                              _PWM3_Initialize 0D65                     __end_of_spi1_configuration 082C  
