

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Jul 15 08:32:08 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK2,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	inittext,global,class=CODE,space=0,delta=2
    18                           	psect	clrtext,global,class=CODE,space=0,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=1
    55                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2,group=1
    61                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,space=0,delta=2
    64                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2,group=1
    71                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2,group=1
    72                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2,group=1
    73                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2,group=1
    74                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2,group=1
    75                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2,group=1
    76                           	psect	text53,local,class=CODE,space=0,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,space=0,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,space=0,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,space=0,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,space=0,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,space=0,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,space=0,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,space=0,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,space=0,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,space=0,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,space=0,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,space=0,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,space=0,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,space=0,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,space=0,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,space=0,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,space=0,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,space=0,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,space=0,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,space=0,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,space=0,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,space=0,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,space=0,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,space=0,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,space=0,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,space=0,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,space=0,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,space=0,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,space=0,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,space=0,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,space=0,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,space=0,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,space=0,merge=1,delta=2
   109                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   110                           	dabs	1,0x7E,2
   111     0000                     
   112                           ; Generated 27/03/2025 GMT
   113                           ; 
   114                           ; Copyright © 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution. Publication is not required when
   128                           ;        this file is used in an embedded application.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC16F1827 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146     0008                     bsr             equ	8
   147     0005                     fsr0h           equ	5
   148     0004                     fsr0l           equ	4
   149     0007                     fsr1h           equ	7
   150     0006                     fsr1l           equ	6
   151     0000                     indf            equ	0
   152     0000                     indf0           equ	0
   153     0001                     indf1           equ	1
   154     000B                     intcon          equ	11
   155     0002                     pc              equ	2
   156     0002                     pcl             equ	2
   157     000A                     pclath          equ	10
   158     0003                     status          equ	3
   159     0009                     wreg            equ	9
   160     0000                     INDF0           equ	0	;# 
   161     0001                     INDF1           equ	1	;# 
   162     0002                     PCL             equ	2	;# 
   163     0003                     STATUS          equ	3	;# 
   164     0004                     FSR0L           equ	4	;# 
   165     0005                     FSR0H           equ	5	;# 
   166     0006                     FSR1L           equ	6	;# 
   167     0007                     FSR1H           equ	7	;# 
   168     0008                     BSR             equ	8	;# 
   169     0009                     WREG            equ	9	;# 
   170     000A                     PCLATH          equ	10	;# 
   171     000B                     INTCON          equ	11	;# 
   172     000C                     PORTA           equ	12	;# 
   173     000D                     PORTB           equ	13	;# 
   174     0011                     PIR1            equ	17	;# 
   175     0012                     PIR2            equ	18	;# 
   176     0013                     PIR3            equ	19	;# 
   177     0014                     PIR4            equ	20	;# 
   178     0015                     TMR0            equ	21	;# 
   179     0016                     TMR1            equ	22	;# 
   180     0016                     TMR1L           equ	22	;# 
   181     0017                     TMR1H           equ	23	;# 
   182     0018                     T1CON           equ	24	;# 
   183     0019                     T1GCON          equ	25	;# 
   184     001A                     TMR2            equ	26	;# 
   185     001B                     PR2             equ	27	;# 
   186     001C                     T2CON           equ	28	;# 
   187     001E                     CPSCON0         equ	30	;# 
   188     001F                     CPSCON1         equ	31	;# 
   189     008C                     TRISA           equ	140	;# 
   190     008D                     TRISB           equ	141	;# 
   191     0091                     PIE1            equ	145	;# 
   192     0092                     PIE2            equ	146	;# 
   193     0093                     PIE3            equ	147	;# 
   194     0094                     PIE4            equ	148	;# 
   195     0095                     OPTION_REG      equ	149	;# 
   196     0096                     PCON            equ	150	;# 
   197     0097                     WDTCON          equ	151	;# 
   198     0098                     OSCTUNE         equ	152	;# 
   199     0099                     OSCCON          equ	153	;# 
   200     009A                     OSCSTAT         equ	154	;# 
   201     009B                     ADRES           equ	155	;# 
   202     009B                     ADRESL          equ	155	;# 
   203     009C                     ADRESH          equ	156	;# 
   204     009D                     ADCON0          equ	157	;# 
   205     009E                     ADCON1          equ	158	;# 
   206     010C                     LATA            equ	268	;# 
   207     010D                     LATB            equ	269	;# 
   208     0111                     CM1CON0         equ	273	;# 
   209     0112                     CM1CON1         equ	274	;# 
   210     0113                     CM2CON0         equ	275	;# 
   211     0114                     CM2CON1         equ	276	;# 
   212     0115                     CMOUT           equ	277	;# 
   213     0116                     BORCON          equ	278	;# 
   214     0117                     FVRCON          equ	279	;# 
   215     0118                     DACCON0         equ	280	;# 
   216     0119                     DACCON1         equ	281	;# 
   217     011A                     SRCON0          equ	282	;# 
   218     011B                     SRCON1          equ	283	;# 
   219     011D                     APFCON0         equ	285	;# 
   220     011E                     APFCON1         equ	286	;# 
   221     018C                     ANSELA          equ	396	;# 
   222     018D                     ANSELB          equ	397	;# 
   223     0191                     EEADR           equ	401	;# 
   224     0191                     EEADRL          equ	401	;# 
   225     0192                     EEADRH          equ	402	;# 
   226     0193                     EEDAT           equ	403	;# 
   227     0193                     EEDATL          equ	403	;# 
   228     0193                     EEDATA          equ	403	;# 
   229     0194                     EEDATH          equ	404	;# 
   230     0195                     EECON1          equ	405	;# 
   231     0196                     EECON2          equ	406	;# 
   232     0199                     RCREG           equ	409	;# 
   233     019A                     TXREG           equ	410	;# 
   234     019B                     SP1BRG          equ	411	;# 
   235     019B                     SP1BRGL         equ	411	;# 
   236     019B                     SPBRG           equ	411	;# 
   237     019B                     SPBRGL          equ	411	;# 
   238     019C                     SP1BRGH         equ	412	;# 
   239     019C                     SPBRGH          equ	412	;# 
   240     019D                     RCSTA           equ	413	;# 
   241     019E                     TXSTA           equ	414	;# 
   242     019F                     BAUDCON         equ	415	;# 
   243     020C                     WPUA            equ	524	;# 
   244     020D                     WPUB            equ	525	;# 
   245     0211                     SSP1BUF         equ	529	;# 
   246     0211                     SSPBUF          equ	529	;# 
   247     0212                     SSP1ADD         equ	530	;# 
   248     0212                     SSPADD          equ	530	;# 
   249     0213                     SSP1MSK         equ	531	;# 
   250     0213                     SSPMSK          equ	531	;# 
   251     0214                     SSP1STAT        equ	532	;# 
   252     0214                     SSPSTAT         equ	532	;# 
   253     0215                     SSP1CON1        equ	533	;# 
   254     0215                     SSPCON1         equ	533	;# 
   255     0215                     SSPCON          equ	533	;# 
   256     0216                     SSP1CON2        equ	534	;# 
   257     0216                     SSPCON2         equ	534	;# 
   258     0217                     SSP1CON3        equ	535	;# 
   259     0217                     SSPCON3         equ	535	;# 
   260     0219                     SSP2BUF         equ	537	;# 
   261     021A                     SSP2ADD         equ	538	;# 
   262     021B                     SSP2MSK         equ	539	;# 
   263     021C                     SSP2STAT        equ	540	;# 
   264     021D                     SSP2CON1        equ	541	;# 
   265     021E                     SSP2CON2        equ	542	;# 
   266     021F                     SSP2CON3        equ	543	;# 
   267     0291                     CCPR1           equ	657	;# 
   268     0291                     CCPR1L          equ	657	;# 
   269     0292                     CCPR1H          equ	658	;# 
   270     0293                     CCP1CON         equ	659	;# 
   271     0294                     PWM1CON         equ	660	;# 
   272     0295                     CCP1AS          equ	661	;# 
   273     0295                     ECCP1AS         equ	661	;# 
   274     0296                     PSTR1CON        equ	662	;# 
   275     0298                     CCPR2           equ	664	;# 
   276     0298                     CCPR2L          equ	664	;# 
   277     0299                     CCPR2H          equ	665	;# 
   278     029A                     CCP2CON         equ	666	;# 
   279     029B                     PWM2CON         equ	667	;# 
   280     029C                     CCP2AS          equ	668	;# 
   281     029C                     ECCP2AS         equ	668	;# 
   282     029D                     PSTR2CON        equ	669	;# 
   283     029E                     CCPTMRS         equ	670	;# 
   284     029E                     CCPTMRS0        equ	670	;# 
   285     0311                     CCPR3           equ	785	;# 
   286     0311                     CCPR3L          equ	785	;# 
   287     0312                     CCPR3H          equ	786	;# 
   288     0313                     CCP3CON         equ	787	;# 
   289     0318                     CCPR4           equ	792	;# 
   290     0318                     CCPR4L          equ	792	;# 
   291     0319                     CCPR4H          equ	793	;# 
   292     031A                     CCP4CON         equ	794	;# 
   293     0394                     IOCBP           equ	916	;# 
   294     0395                     IOCBN           equ	917	;# 
   295     0396                     IOCBF           equ	918	;# 
   296     039A                     CLKRCON         equ	922	;# 
   297     039C                     MDCON           equ	924	;# 
   298     039D                     MDSRC           equ	925	;# 
   299     039E                     MDCARL          equ	926	;# 
   300     039F                     MDCARH          equ	927	;# 
   301     0415                     TMR4            equ	1045	;# 
   302     0416                     PR4             equ	1046	;# 
   303     0417                     T4CON           equ	1047	;# 
   304     041C                     TMR6            equ	1052	;# 
   305     041D                     PR6             equ	1053	;# 
   306     041E                     T6CON           equ	1054	;# 
   307     0FE4                     STATUS_SHAD     equ	4068	;# 
   308     0FE5                     WREG_SHAD       equ	4069	;# 
   309     0FE6                     BSR_SHAD        equ	4070	;# 
   310     0FE7                     PCLATH_SHAD     equ	4071	;# 
   311     0FE8                     FSR0L_SHAD      equ	4072	;# 
   312     0FE9                     FSR0H_SHAD      equ	4073	;# 
   313     0FEA                     FSR1L_SHAD      equ	4074	;# 
   314     0FEB                     FSR1H_SHAD      equ	4075	;# 
   315     0FED                     STKPTR          equ	4077	;# 
   316     0FEE                     TOSL            equ	4078	;# 
   317     0FEF                     TOSH            equ	4079	;# 
   318     0000                     INDF0           equ	0	;# 
   319     0001                     INDF1           equ	1	;# 
   320     0002                     PCL             equ	2	;# 
   321     0003                     STATUS          equ	3	;# 
   322     0004                     FSR0L           equ	4	;# 
   323     0005                     FSR0H           equ	5	;# 
   324     0006                     FSR1L           equ	6	;# 
   325     0007                     FSR1H           equ	7	;# 
   326     0008                     BSR             equ	8	;# 
   327     0009                     WREG            equ	9	;# 
   328     000A                     PCLATH          equ	10	;# 
   329     000B                     INTCON          equ	11	;# 
   330     000C                     PORTA           equ	12	;# 
   331     000D                     PORTB           equ	13	;# 
   332     0011                     PIR1            equ	17	;# 
   333     0012                     PIR2            equ	18	;# 
   334     0013                     PIR3            equ	19	;# 
   335     0014                     PIR4            equ	20	;# 
   336     0015                     TMR0            equ	21	;# 
   337     0016                     TMR1            equ	22	;# 
   338     0016                     TMR1L           equ	22	;# 
   339     0017                     TMR1H           equ	23	;# 
   340     0018                     T1CON           equ	24	;# 
   341     0019                     T1GCON          equ	25	;# 
   342     001A                     TMR2            equ	26	;# 
   343     001B                     PR2             equ	27	;# 
   344     001C                     T2CON           equ	28	;# 
   345     001E                     CPSCON0         equ	30	;# 
   346     001F                     CPSCON1         equ	31	;# 
   347     008C                     TRISA           equ	140	;# 
   348     008D                     TRISB           equ	141	;# 
   349     0091                     PIE1            equ	145	;# 
   350     0092                     PIE2            equ	146	;# 
   351     0093                     PIE3            equ	147	;# 
   352     0094                     PIE4            equ	148	;# 
   353     0095                     OPTION_REG      equ	149	;# 
   354     0096                     PCON            equ	150	;# 
   355     0097                     WDTCON          equ	151	;# 
   356     0098                     OSCTUNE         equ	152	;# 
   357     0099                     OSCCON          equ	153	;# 
   358     009A                     OSCSTAT         equ	154	;# 
   359     009B                     ADRES           equ	155	;# 
   360     009B                     ADRESL          equ	155	;# 
   361     009C                     ADRESH          equ	156	;# 
   362     009D                     ADCON0          equ	157	;# 
   363     009E                     ADCON1          equ	158	;# 
   364     010C                     LATA            equ	268	;# 
   365     010D                     LATB            equ	269	;# 
   366     0111                     CM1CON0         equ	273	;# 
   367     0112                     CM1CON1         equ	274	;# 
   368     0113                     CM2CON0         equ	275	;# 
   369     0114                     CM2CON1         equ	276	;# 
   370     0115                     CMOUT           equ	277	;# 
   371     0116                     BORCON          equ	278	;# 
   372     0117                     FVRCON          equ	279	;# 
   373     0118                     DACCON0         equ	280	;# 
   374     0119                     DACCON1         equ	281	;# 
   375     011A                     SRCON0          equ	282	;# 
   376     011B                     SRCON1          equ	283	;# 
   377     011D                     APFCON0         equ	285	;# 
   378     011E                     APFCON1         equ	286	;# 
   379     018C                     ANSELA          equ	396	;# 
   380     018D                     ANSELB          equ	397	;# 
   381     0191                     EEADR           equ	401	;# 
   382     0191                     EEADRL          equ	401	;# 
   383     0192                     EEADRH          equ	402	;# 
   384     0193                     EEDAT           equ	403	;# 
   385     0193                     EEDATL          equ	403	;# 
   386     0193                     EEDATA          equ	403	;# 
   387     0194                     EEDATH          equ	404	;# 
   388     0195                     EECON1          equ	405	;# 
   389     0196                     EECON2          equ	406	;# 
   390     0199                     RCREG           equ	409	;# 
   391     019A                     TXREG           equ	410	;# 
   392     019B                     SP1BRG          equ	411	;# 
   393     019B                     SP1BRGL         equ	411	;# 
   394     019B                     SPBRG           equ	411	;# 
   395     019B                     SPBRGL          equ	411	;# 
   396     019C                     SP1BRGH         equ	412	;# 
   397     019C                     SPBRGH          equ	412	;# 
   398     019D                     RCSTA           equ	413	;# 
   399     019E                     TXSTA           equ	414	;# 
   400     019F                     BAUDCON         equ	415	;# 
   401     020C                     WPUA            equ	524	;# 
   402     020D                     WPUB            equ	525	;# 
   403     0211                     SSP1BUF         equ	529	;# 
   404     0211                     SSPBUF          equ	529	;# 
   405     0212                     SSP1ADD         equ	530	;# 
   406     0212                     SSPADD          equ	530	;# 
   407     0213                     SSP1MSK         equ	531	;# 
   408     0213                     SSPMSK          equ	531	;# 
   409     0214                     SSP1STAT        equ	532	;# 
   410     0214                     SSPSTAT         equ	532	;# 
   411     0215                     SSP1CON1        equ	533	;# 
   412     0215                     SSPCON1         equ	533	;# 
   413     0215                     SSPCON          equ	533	;# 
   414     0216                     SSP1CON2        equ	534	;# 
   415     0216                     SSPCON2         equ	534	;# 
   416     0217                     SSP1CON3        equ	535	;# 
   417     0217                     SSPCON3         equ	535	;# 
   418     0219                     SSP2BUF         equ	537	;# 
   419     021A                     SSP2ADD         equ	538	;# 
   420     021B                     SSP2MSK         equ	539	;# 
   421     021C                     SSP2STAT        equ	540	;# 
   422     021D                     SSP2CON1        equ	541	;# 
   423     021E                     SSP2CON2        equ	542	;# 
   424     021F                     SSP2CON3        equ	543	;# 
   425     0291                     CCPR1           equ	657	;# 
   426     0291                     CCPR1L          equ	657	;# 
   427     0292                     CCPR1H          equ	658	;# 
   428     0293                     CCP1CON         equ	659	;# 
   429     0294                     PWM1CON         equ	660	;# 
   430     0295                     CCP1AS          equ	661	;# 
   431     0295                     ECCP1AS         equ	661	;# 
   432     0296                     PSTR1CON        equ	662	;# 
   433     0298                     CCPR2           equ	664	;# 
   434     0298                     CCPR2L          equ	664	;# 
   435     0299                     CCPR2H          equ	665	;# 
   436     029A                     CCP2CON         equ	666	;# 
   437     029B                     PWM2CON         equ	667	;# 
   438     029C                     CCP2AS          equ	668	;# 
   439     029C                     ECCP2AS         equ	668	;# 
   440     029D                     PSTR2CON        equ	669	;# 
   441     029E                     CCPTMRS         equ	670	;# 
   442     029E                     CCPTMRS0        equ	670	;# 
   443     0311                     CCPR3           equ	785	;# 
   444     0311                     CCPR3L          equ	785	;# 
   445     0312                     CCPR3H          equ	786	;# 
   446     0313                     CCP3CON         equ	787	;# 
   447     0318                     CCPR4           equ	792	;# 
   448     0318                     CCPR4L          equ	792	;# 
   449     0319                     CCPR4H          equ	793	;# 
   450     031A                     CCP4CON         equ	794	;# 
   451     0394                     IOCBP           equ	916	;# 
   452     0395                     IOCBN           equ	917	;# 
   453     0396                     IOCBF           equ	918	;# 
   454     039A                     CLKRCON         equ	922	;# 
   455     039C                     MDCON           equ	924	;# 
   456     039D                     MDSRC           equ	925	;# 
   457     039E                     MDCARL          equ	926	;# 
   458     039F                     MDCARH          equ	927	;# 
   459     0415                     TMR4            equ	1045	;# 
   460     0416                     PR4             equ	1046	;# 
   461     0417                     T4CON           equ	1047	;# 
   462     041C                     TMR6            equ	1052	;# 
   463     041D                     PR6             equ	1053	;# 
   464     041E                     T6CON           equ	1054	;# 
   465     0FE4                     STATUS_SHAD     equ	4068	;# 
   466     0FE5                     WREG_SHAD       equ	4069	;# 
   467     0FE6                     BSR_SHAD        equ	4070	;# 
   468     0FE7                     PCLATH_SHAD     equ	4071	;# 
   469     0FE8                     FSR0L_SHAD      equ	4072	;# 
   470     0FE9                     FSR0H_SHAD      equ	4073	;# 
   471     0FEA                     FSR1L_SHAD      equ	4074	;# 
   472     0FEB                     FSR1H_SHAD      equ	4075	;# 
   473     0FED                     STKPTR          equ	4077	;# 
   474     0FEE                     TOSL            equ	4078	;# 
   475     0FEF                     TOSH            equ	4079	;# 
   476     0000                     INDF0           equ	0	;# 
   477     0001                     INDF1           equ	1	;# 
   478     0002                     PCL             equ	2	;# 
   479     0003                     STATUS          equ	3	;# 
   480     0004                     FSR0L           equ	4	;# 
   481     0005                     FSR0H           equ	5	;# 
   482     0006                     FSR1L           equ	6	;# 
   483     0007                     FSR1H           equ	7	;# 
   484     0008                     BSR             equ	8	;# 
   485     0009                     WREG            equ	9	;# 
   486     000A                     PCLATH          equ	10	;# 
   487     000B                     INTCON          equ	11	;# 
   488     000C                     PORTA           equ	12	;# 
   489     000D                     PORTB           equ	13	;# 
   490     0011                     PIR1            equ	17	;# 
   491     0012                     PIR2            equ	18	;# 
   492     0013                     PIR3            equ	19	;# 
   493     0014                     PIR4            equ	20	;# 
   494     0015                     TMR0            equ	21	;# 
   495     0016                     TMR1            equ	22	;# 
   496     0016                     TMR1L           equ	22	;# 
   497     0017                     TMR1H           equ	23	;# 
   498     0018                     T1CON           equ	24	;# 
   499     0019                     T1GCON          equ	25	;# 
   500     001A                     TMR2            equ	26	;# 
   501     001B                     PR2             equ	27	;# 
   502     001C                     T2CON           equ	28	;# 
   503     001E                     CPSCON0         equ	30	;# 
   504     001F                     CPSCON1         equ	31	;# 
   505     008C                     TRISA           equ	140	;# 
   506     008D                     TRISB           equ	141	;# 
   507     0091                     PIE1            equ	145	;# 
   508     0092                     PIE2            equ	146	;# 
   509     0093                     PIE3            equ	147	;# 
   510     0094                     PIE4            equ	148	;# 
   511     0095                     OPTION_REG      equ	149	;# 
   512     0096                     PCON            equ	150	;# 
   513     0097                     WDTCON          equ	151	;# 
   514     0098                     OSCTUNE         equ	152	;# 
   515     0099                     OSCCON          equ	153	;# 
   516     009A                     OSCSTAT         equ	154	;# 
   517     009B                     ADRES           equ	155	;# 
   518     009B                     ADRESL          equ	155	;# 
   519     009C                     ADRESH          equ	156	;# 
   520     009D                     ADCON0          equ	157	;# 
   521     009E                     ADCON1          equ	158	;# 
   522     010C                     LATA            equ	268	;# 
   523     010D                     LATB            equ	269	;# 
   524     0111                     CM1CON0         equ	273	;# 
   525     0112                     CM1CON1         equ	274	;# 
   526     0113                     CM2CON0         equ	275	;# 
   527     0114                     CM2CON1         equ	276	;# 
   528     0115                     CMOUT           equ	277	;# 
   529     0116                     BORCON          equ	278	;# 
   530     0117                     FVRCON          equ	279	;# 
   531     0118                     DACCON0         equ	280	;# 
   532     0119                     DACCON1         equ	281	;# 
   533     011A                     SRCON0          equ	282	;# 
   534     011B                     SRCON1          equ	283	;# 
   535     011D                     APFCON0         equ	285	;# 
   536     011E                     APFCON1         equ	286	;# 
   537     018C                     ANSELA          equ	396	;# 
   538     018D                     ANSELB          equ	397	;# 
   539     0191                     EEADR           equ	401	;# 
   540     0191                     EEADRL          equ	401	;# 
   541     0192                     EEADRH          equ	402	;# 
   542     0193                     EEDAT           equ	403	;# 
   543     0193                     EEDATL          equ	403	;# 
   544     0193                     EEDATA          equ	403	;# 
   545     0194                     EEDATH          equ	404	;# 
   546     0195                     EECON1          equ	405	;# 
   547     0196                     EECON2          equ	406	;# 
   548     0199                     RCREG           equ	409	;# 
   549     019A                     TXREG           equ	410	;# 
   550     019B                     SP1BRG          equ	411	;# 
   551     019B                     SP1BRGL         equ	411	;# 
   552     019B                     SPBRG           equ	411	;# 
   553     019B                     SPBRGL          equ	411	;# 
   554     019C                     SP1BRGH         equ	412	;# 
   555     019C                     SPBRGH          equ	412	;# 
   556     019D                     RCSTA           equ	413	;# 
   557     019E                     TXSTA           equ	414	;# 
   558     019F                     BAUDCON         equ	415	;# 
   559     020C                     WPUA            equ	524	;# 
   560     020D                     WPUB            equ	525	;# 
   561     0211                     SSP1BUF         equ	529	;# 
   562     0211                     SSPBUF          equ	529	;# 
   563     0212                     SSP1ADD         equ	530	;# 
   564     0212                     SSPADD          equ	530	;# 
   565     0213                     SSP1MSK         equ	531	;# 
   566     0213                     SSPMSK          equ	531	;# 
   567     0214                     SSP1STAT        equ	532	;# 
   568     0214                     SSPSTAT         equ	532	;# 
   569     0215                     SSP1CON1        equ	533	;# 
   570     0215                     SSPCON1         equ	533	;# 
   571     0215                     SSPCON          equ	533	;# 
   572     0216                     SSP1CON2        equ	534	;# 
   573     0216                     SSPCON2         equ	534	;# 
   574     0217                     SSP1CON3        equ	535	;# 
   575     0217                     SSPCON3         equ	535	;# 
   576     0219                     SSP2BUF         equ	537	;# 
   577     021A                     SSP2ADD         equ	538	;# 
   578     021B                     SSP2MSK         equ	539	;# 
   579     021C                     SSP2STAT        equ	540	;# 
   580     021D                     SSP2CON1        equ	541	;# 
   581     021E                     SSP2CON2        equ	542	;# 
   582     021F                     SSP2CON3        equ	543	;# 
   583     0291                     CCPR1           equ	657	;# 
   584     0291                     CCPR1L          equ	657	;# 
   585     0292                     CCPR1H          equ	658	;# 
   586     0293                     CCP1CON         equ	659	;# 
   587     0294                     PWM1CON         equ	660	;# 
   588     0295                     CCP1AS          equ	661	;# 
   589     0295                     ECCP1AS         equ	661	;# 
   590     0296                     PSTR1CON        equ	662	;# 
   591     0298                     CCPR2           equ	664	;# 
   592     0298                     CCPR2L          equ	664	;# 
   593     0299                     CCPR2H          equ	665	;# 
   594     029A                     CCP2CON         equ	666	;# 
   595     029B                     PWM2CON         equ	667	;# 
   596     029C                     CCP2AS          equ	668	;# 
   597     029C                     ECCP2AS         equ	668	;# 
   598     029D                     PSTR2CON        equ	669	;# 
   599     029E                     CCPTMRS         equ	670	;# 
   600     029E                     CCPTMRS0        equ	670	;# 
   601     0311                     CCPR3           equ	785	;# 
   602     0311                     CCPR3L          equ	785	;# 
   603     0312                     CCPR3H          equ	786	;# 
   604     0313                     CCP3CON         equ	787	;# 
   605     0318                     CCPR4           equ	792	;# 
   606     0318                     CCPR4L          equ	792	;# 
   607     0319                     CCPR4H          equ	793	;# 
   608     031A                     CCP4CON         equ	794	;# 
   609     0394                     IOCBP           equ	916	;# 
   610     0395                     IOCBN           equ	917	;# 
   611     0396                     IOCBF           equ	918	;# 
   612     039A                     CLKRCON         equ	922	;# 
   613     039C                     MDCON           equ	924	;# 
   614     039D                     MDSRC           equ	925	;# 
   615     039E                     MDCARL          equ	926	;# 
   616     039F                     MDCARH          equ	927	;# 
   617     0415                     TMR4            equ	1045	;# 
   618     0416                     PR4             equ	1046	;# 
   619     0417                     T4CON           equ	1047	;# 
   620     041C                     TMR6            equ	1052	;# 
   621     041D                     PR6             equ	1053	;# 
   622     041E                     T6CON           equ	1054	;# 
   623     0FE4                     STATUS_SHAD     equ	4068	;# 
   624     0FE5                     WREG_SHAD       equ	4069	;# 
   625     0FE6                     BSR_SHAD        equ	4070	;# 
   626     0FE7                     PCLATH_SHAD     equ	4071	;# 
   627     0FE8                     FSR0L_SHAD      equ	4072	;# 
   628     0FE9                     FSR0H_SHAD      equ	4073	;# 
   629     0FEA                     FSR1L_SHAD      equ	4074	;# 
   630     0FEB                     FSR1H_SHAD      equ	4075	;# 
   631     0FED                     STKPTR          equ	4077	;# 
   632     0FEE                     TOSL            equ	4078	;# 
   633     0FEF                     TOSH            equ	4079	;# 
   634     0000                     INDF0           equ	0	;# 
   635     0001                     INDF1           equ	1	;# 
   636     0002                     PCL             equ	2	;# 
   637     0003                     STATUS          equ	3	;# 
   638     0004                     FSR0L           equ	4	;# 
   639     0005                     FSR0H           equ	5	;# 
   640     0006                     FSR1L           equ	6	;# 
   641     0007                     FSR1H           equ	7	;# 
   642     0008                     BSR             equ	8	;# 
   643     0009                     WREG            equ	9	;# 
   644     000A                     PCLATH          equ	10	;# 
   645     000B                     INTCON          equ	11	;# 
   646     000C                     PORTA           equ	12	;# 
   647     000D                     PORTB           equ	13	;# 
   648     0011                     PIR1            equ	17	;# 
   649     0012                     PIR2            equ	18	;# 
   650     0013                     PIR3            equ	19	;# 
   651     0014                     PIR4            equ	20	;# 
   652     0015                     TMR0            equ	21	;# 
   653     0016                     TMR1            equ	22	;# 
   654     0016                     TMR1L           equ	22	;# 
   655     0017                     TMR1H           equ	23	;# 
   656     0018                     T1CON           equ	24	;# 
   657     0019                     T1GCON          equ	25	;# 
   658     001A                     TMR2            equ	26	;# 
   659     001B                     PR2             equ	27	;# 
   660     001C                     T2CON           equ	28	;# 
   661     001E                     CPSCON0         equ	30	;# 
   662     001F                     CPSCON1         equ	31	;# 
   663     008C                     TRISA           equ	140	;# 
   664     008D                     TRISB           equ	141	;# 
   665     0091                     PIE1            equ	145	;# 
   666     0092                     PIE2            equ	146	;# 
   667     0093                     PIE3            equ	147	;# 
   668     0094                     PIE4            equ	148	;# 
   669     0095                     OPTION_REG      equ	149	;# 
   670     0096                     PCON            equ	150	;# 
   671     0097                     WDTCON          equ	151	;# 
   672     0098                     OSCTUNE         equ	152	;# 
   673     0099                     OSCCON          equ	153	;# 
   674     009A                     OSCSTAT         equ	154	;# 
   675     009B                     ADRES           equ	155	;# 
   676     009B                     ADRESL          equ	155	;# 
   677     009C                     ADRESH          equ	156	;# 
   678     009D                     ADCON0          equ	157	;# 
   679     009E                     ADCON1          equ	158	;# 
   680     010C                     LATA            equ	268	;# 
   681     010D                     LATB            equ	269	;# 
   682     0111                     CM1CON0         equ	273	;# 
   683     0112                     CM1CON1         equ	274	;# 
   684     0113                     CM2CON0         equ	275	;# 
   685     0114                     CM2CON1         equ	276	;# 
   686     0115                     CMOUT           equ	277	;# 
   687     0116                     BORCON          equ	278	;# 
   688     0117                     FVRCON          equ	279	;# 
   689     0118                     DACCON0         equ	280	;# 
   690     0119                     DACCON1         equ	281	;# 
   691     011A                     SRCON0          equ	282	;# 
   692     011B                     SRCON1          equ	283	;# 
   693     011D                     APFCON0         equ	285	;# 
   694     011E                     APFCON1         equ	286	;# 
   695     018C                     ANSELA          equ	396	;# 
   696     018D                     ANSELB          equ	397	;# 
   697     0191                     EEADR           equ	401	;# 
   698     0191                     EEADRL          equ	401	;# 
   699     0192                     EEADRH          equ	402	;# 
   700     0193                     EEDAT           equ	403	;# 
   701     0193                     EEDATL          equ	403	;# 
   702     0193                     EEDATA          equ	403	;# 
   703     0194                     EEDATH          equ	404	;# 
   704     0195                     EECON1          equ	405	;# 
   705     0196                     EECON2          equ	406	;# 
   706     0199                     RCREG           equ	409	;# 
   707     019A                     TXREG           equ	410	;# 
   708     019B                     SP1BRG          equ	411	;# 
   709     019B                     SP1BRGL         equ	411	;# 
   710     019B                     SPBRG           equ	411	;# 
   711     019B                     SPBRGL          equ	411	;# 
   712     019C                     SP1BRGH         equ	412	;# 
   713     019C                     SPBRGH          equ	412	;# 
   714     019D                     RCSTA           equ	413	;# 
   715     019E                     TXSTA           equ	414	;# 
   716     019F                     BAUDCON         equ	415	;# 
   717     020C                     WPUA            equ	524	;# 
   718     020D                     WPUB            equ	525	;# 
   719     0211                     SSP1BUF         equ	529	;# 
   720     0211                     SSPBUF          equ	529	;# 
   721     0212                     SSP1ADD         equ	530	;# 
   722     0212                     SSPADD          equ	530	;# 
   723     0213                     SSP1MSK         equ	531	;# 
   724     0213                     SSPMSK          equ	531	;# 
   725     0214                     SSP1STAT        equ	532	;# 
   726     0214                     SSPSTAT         equ	532	;# 
   727     0215                     SSP1CON1        equ	533	;# 
   728     0215                     SSPCON1         equ	533	;# 
   729     0215                     SSPCON          equ	533	;# 
   730     0216                     SSP1CON2        equ	534	;# 
   731     0216                     SSPCON2         equ	534	;# 
   732     0217                     SSP1CON3        equ	535	;# 
   733     0217                     SSPCON3         equ	535	;# 
   734     0219                     SSP2BUF         equ	537	;# 
   735     021A                     SSP2ADD         equ	538	;# 
   736     021B                     SSP2MSK         equ	539	;# 
   737     021C                     SSP2STAT        equ	540	;# 
   738     021D                     SSP2CON1        equ	541	;# 
   739     021E                     SSP2CON2        equ	542	;# 
   740     021F                     SSP2CON3        equ	543	;# 
   741     0291                     CCPR1           equ	657	;# 
   742     0291                     CCPR1L          equ	657	;# 
   743     0292                     CCPR1H          equ	658	;# 
   744     0293                     CCP1CON         equ	659	;# 
   745     0294                     PWM1CON         equ	660	;# 
   746     0295                     CCP1AS          equ	661	;# 
   747     0295                     ECCP1AS         equ	661	;# 
   748     0296                     PSTR1CON        equ	662	;# 
   749     0298                     CCPR2           equ	664	;# 
   750     0298                     CCPR2L          equ	664	;# 
   751     0299                     CCPR2H          equ	665	;# 
   752     029A                     CCP2CON         equ	666	;# 
   753     029B                     PWM2CON         equ	667	;# 
   754     029C                     CCP2AS          equ	668	;# 
   755     029C                     ECCP2AS         equ	668	;# 
   756     029D                     PSTR2CON        equ	669	;# 
   757     029E                     CCPTMRS         equ	670	;# 
   758     029E                     CCPTMRS0        equ	670	;# 
   759     0311                     CCPR3           equ	785	;# 
   760     0311                     CCPR3L          equ	785	;# 
   761     0312                     CCPR3H          equ	786	;# 
   762     0313                     CCP3CON         equ	787	;# 
   763     0318                     CCPR4           equ	792	;# 
   764     0318                     CCPR4L          equ	792	;# 
   765     0319                     CCPR4H          equ	793	;# 
   766     031A                     CCP4CON         equ	794	;# 
   767     0394                     IOCBP           equ	916	;# 
   768     0395                     IOCBN           equ	917	;# 
   769     0396                     IOCBF           equ	918	;# 
   770     039A                     CLKRCON         equ	922	;# 
   771     039C                     MDCON           equ	924	;# 
   772     039D                     MDSRC           equ	925	;# 
   773     039E                     MDCARL          equ	926	;# 
   774     039F                     MDCARH          equ	927	;# 
   775     0415                     TMR4            equ	1045	;# 
   776     0416                     PR4             equ	1046	;# 
   777     0417                     T4CON           equ	1047	;# 
   778     041C                     TMR6            equ	1052	;# 
   779     041D                     PR6             equ	1053	;# 
   780     041E                     T6CON           equ	1054	;# 
   781     0FE4                     STATUS_SHAD     equ	4068	;# 
   782     0FE5                     WREG_SHAD       equ	4069	;# 
   783     0FE6                     BSR_SHAD        equ	4070	;# 
   784     0FE7                     PCLATH_SHAD     equ	4071	;# 
   785     0FE8                     FSR0L_SHAD      equ	4072	;# 
   786     0FE9                     FSR0H_SHAD      equ	4073	;# 
   787     0FEA                     FSR1L_SHAD      equ	4074	;# 
   788     0FEB                     FSR1H_SHAD      equ	4075	;# 
   789     0FED                     STKPTR          equ	4077	;# 
   790     0FEE                     TOSL            equ	4078	;# 
   791     0FEF                     TOSH            equ	4079	;# 
   792     0000                     INDF0           equ	0	;# 
   793     0001                     INDF1           equ	1	;# 
   794     0002                     PCL             equ	2	;# 
   795     0003                     STATUS          equ	3	;# 
   796     0004                     FSR0L           equ	4	;# 
   797     0005                     FSR0H           equ	5	;# 
   798     0006                     FSR1L           equ	6	;# 
   799     0007                     FSR1H           equ	7	;# 
   800     0008                     BSR             equ	8	;# 
   801     0009                     WREG            equ	9	;# 
   802     000A                     PCLATH          equ	10	;# 
   803     000B                     INTCON          equ	11	;# 
   804     000C                     PORTA           equ	12	;# 
   805     000D                     PORTB           equ	13	;# 
   806     0011                     PIR1            equ	17	;# 
   807     0012                     PIR2            equ	18	;# 
   808     0013                     PIR3            equ	19	;# 
   809     0014                     PIR4            equ	20	;# 
   810     0015                     TMR0            equ	21	;# 
   811     0016                     TMR1            equ	22	;# 
   812     0016                     TMR1L           equ	22	;# 
   813     0017                     TMR1H           equ	23	;# 
   814     0018                     T1CON           equ	24	;# 
   815     0019                     T1GCON          equ	25	;# 
   816     001A                     TMR2            equ	26	;# 
   817     001B                     PR2             equ	27	;# 
   818     001C                     T2CON           equ	28	;# 
   819     001E                     CPSCON0         equ	30	;# 
   820     001F                     CPSCON1         equ	31	;# 
   821     008C                     TRISA           equ	140	;# 
   822     008D                     TRISB           equ	141	;# 
   823     0091                     PIE1            equ	145	;# 
   824     0092                     PIE2            equ	146	;# 
   825     0093                     PIE3            equ	147	;# 
   826     0094                     PIE4            equ	148	;# 
   827     0095                     OPTION_REG      equ	149	;# 
   828     0096                     PCON            equ	150	;# 
   829     0097                     WDTCON          equ	151	;# 
   830     0098                     OSCTUNE         equ	152	;# 
   831     0099                     OSCCON          equ	153	;# 
   832     009A                     OSCSTAT         equ	154	;# 
   833     009B                     ADRES           equ	155	;# 
   834     009B                     ADRESL          equ	155	;# 
   835     009C                     ADRESH          equ	156	;# 
   836     009D                     ADCON0          equ	157	;# 
   837     009E                     ADCON1          equ	158	;# 
   838     010C                     LATA            equ	268	;# 
   839     010D                     LATB            equ	269	;# 
   840     0111                     CM1CON0         equ	273	;# 
   841     0112                     CM1CON1         equ	274	;# 
   842     0113                     CM2CON0         equ	275	;# 
   843     0114                     CM2CON1         equ	276	;# 
   844     0115                     CMOUT           equ	277	;# 
   845     0116                     BORCON          equ	278	;# 
   846     0117                     FVRCON          equ	279	;# 
   847     0118                     DACCON0         equ	280	;# 
   848     0119                     DACCON1         equ	281	;# 
   849     011A                     SRCON0          equ	282	;# 
   850     011B                     SRCON1          equ	283	;# 
   851     011D                     APFCON0         equ	285	;# 
   852     011E                     APFCON1         equ	286	;# 
   853     018C                     ANSELA          equ	396	;# 
   854     018D                     ANSELB          equ	397	;# 
   855     0191                     EEADR           equ	401	;# 
   856     0191                     EEADRL          equ	401	;# 
   857     0192                     EEADRH          equ	402	;# 
   858     0193                     EEDAT           equ	403	;# 
   859     0193                     EEDATL          equ	403	;# 
   860     0193                     EEDATA          equ	403	;# 
   861     0194                     EEDATH          equ	404	;# 
   862     0195                     EECON1          equ	405	;# 
   863     0196                     EECON2          equ	406	;# 
   864     0199                     RCREG           equ	409	;# 
   865     019A                     TXREG           equ	410	;# 
   866     019B                     SP1BRG          equ	411	;# 
   867     019B                     SP1BRGL         equ	411	;# 
   868     019B                     SPBRG           equ	411	;# 
   869     019B                     SPBRGL          equ	411	;# 
   870     019C                     SP1BRGH         equ	412	;# 
   871     019C                     SPBRGH          equ	412	;# 
   872     019D                     RCSTA           equ	413	;# 
   873     019E                     TXSTA           equ	414	;# 
   874     019F                     BAUDCON         equ	415	;# 
   875     020C                     WPUA            equ	524	;# 
   876     020D                     WPUB            equ	525	;# 
   877     0211                     SSP1BUF         equ	529	;# 
   878     0211                     SSPBUF          equ	529	;# 
   879     0212                     SSP1ADD         equ	530	;# 
   880     0212                     SSPADD          equ	530	;# 
   881     0213                     SSP1MSK         equ	531	;# 
   882     0213                     SSPMSK          equ	531	;# 
   883     0214                     SSP1STAT        equ	532	;# 
   884     0214                     SSPSTAT         equ	532	;# 
   885     0215                     SSP1CON1        equ	533	;# 
   886     0215                     SSPCON1         equ	533	;# 
   887     0215                     SSPCON          equ	533	;# 
   888     0216                     SSP1CON2        equ	534	;# 
   889     0216                     SSPCON2         equ	534	;# 
   890     0217                     SSP1CON3        equ	535	;# 
   891     0217                     SSPCON3         equ	535	;# 
   892     0219                     SSP2BUF         equ	537	;# 
   893     021A                     SSP2ADD         equ	538	;# 
   894     021B                     SSP2MSK         equ	539	;# 
   895     021C                     SSP2STAT        equ	540	;# 
   896     021D                     SSP2CON1        equ	541	;# 
   897     021E                     SSP2CON2        equ	542	;# 
   898     021F                     SSP2CON3        equ	543	;# 
   899     0291                     CCPR1           equ	657	;# 
   900     0291                     CCPR1L          equ	657	;# 
   901     0292                     CCPR1H          equ	658	;# 
   902     0293                     CCP1CON         equ	659	;# 
   903     0294                     PWM1CON         equ	660	;# 
   904     0295                     CCP1AS          equ	661	;# 
   905     0295                     ECCP1AS         equ	661	;# 
   906     0296                     PSTR1CON        equ	662	;# 
   907     0298                     CCPR2           equ	664	;# 
   908     0298                     CCPR2L          equ	664	;# 
   909     0299                     CCPR2H          equ	665	;# 
   910     029A                     CCP2CON         equ	666	;# 
   911     029B                     PWM2CON         equ	667	;# 
   912     029C                     CCP2AS          equ	668	;# 
   913     029C                     ECCP2AS         equ	668	;# 
   914     029D                     PSTR2CON        equ	669	;# 
   915     029E                     CCPTMRS         equ	670	;# 
   916     029E                     CCPTMRS0        equ	670	;# 
   917     0311                     CCPR3           equ	785	;# 
   918     0311                     CCPR3L          equ	785	;# 
   919     0312                     CCPR3H          equ	786	;# 
   920     0313                     CCP3CON         equ	787	;# 
   921     0318                     CCPR4           equ	792	;# 
   922     0318                     CCPR4L          equ	792	;# 
   923     0319                     CCPR4H          equ	793	;# 
   924     031A                     CCP4CON         equ	794	;# 
   925     0394                     IOCBP           equ	916	;# 
   926     0395                     IOCBN           equ	917	;# 
   927     0396                     IOCBF           equ	918	;# 
   928     039A                     CLKRCON         equ	922	;# 
   929     039C                     MDCON           equ	924	;# 
   930     039D                     MDSRC           equ	925	;# 
   931     039E                     MDCARL          equ	926	;# 
   932     039F                     MDCARH          equ	927	;# 
   933     0415                     TMR4            equ	1045	;# 
   934     0416                     PR4             equ	1046	;# 
   935     0417                     T4CON           equ	1047	;# 
   936     041C                     TMR6            equ	1052	;# 
   937     041D                     PR6             equ	1053	;# 
   938     041E                     T6CON           equ	1054	;# 
   939     0FE4                     STATUS_SHAD     equ	4068	;# 
   940     0FE5                     WREG_SHAD       equ	4069	;# 
   941     0FE6                     BSR_SHAD        equ	4070	;# 
   942     0FE7                     PCLATH_SHAD     equ	4071	;# 
   943     0FE8                     FSR0L_SHAD      equ	4072	;# 
   944     0FE9                     FSR0H_SHAD      equ	4073	;# 
   945     0FEA                     FSR1L_SHAD      equ	4074	;# 
   946     0FEB                     FSR1H_SHAD      equ	4075	;# 
   947     0FED                     STKPTR          equ	4077	;# 
   948     0FEE                     TOSL            equ	4078	;# 
   949     0FEF                     TOSH            equ	4079	;# 
   950     0000                     INDF0           equ	0	;# 
   951     0001                     INDF1           equ	1	;# 
   952     0002                     PCL             equ	2	;# 
   953     0003                     STATUS          equ	3	;# 
   954     0004                     FSR0L           equ	4	;# 
   955     0005                     FSR0H           equ	5	;# 
   956     0006                     FSR1L           equ	6	;# 
   957     0007                     FSR1H           equ	7	;# 
   958     0008                     BSR             equ	8	;# 
   959     0009                     WREG            equ	9	;# 
   960     000A                     PCLATH          equ	10	;# 
   961     000B                     INTCON          equ	11	;# 
   962     000C                     PORTA           equ	12	;# 
   963     000D                     PORTB           equ	13	;# 
   964     0011                     PIR1            equ	17	;# 
   965     0012                     PIR2            equ	18	;# 
   966     0013                     PIR3            equ	19	;# 
   967     0014                     PIR4            equ	20	;# 
   968     0015                     TMR0            equ	21	;# 
   969     0016                     TMR1            equ	22	;# 
   970     0016                     TMR1L           equ	22	;# 
   971     0017                     TMR1H           equ	23	;# 
   972     0018                     T1CON           equ	24	;# 
   973     0019                     T1GCON          equ	25	;# 
   974     001A                     TMR2            equ	26	;# 
   975     001B                     PR2             equ	27	;# 
   976     001C                     T2CON           equ	28	;# 
   977     001E                     CPSCON0         equ	30	;# 
   978     001F                     CPSCON1         equ	31	;# 
   979     008C                     TRISA           equ	140	;# 
   980     008D                     TRISB           equ	141	;# 
   981     0091                     PIE1            equ	145	;# 
   982     0092                     PIE2            equ	146	;# 
   983     0093                     PIE3            equ	147	;# 
   984     0094                     PIE4            equ	148	;# 
   985     0095                     OPTION_REG      equ	149	;# 
   986     0096                     PCON            equ	150	;# 
   987     0097                     WDTCON          equ	151	;# 
   988     0098                     OSCTUNE         equ	152	;# 
   989     0099                     OSCCON          equ	153	;# 
   990     009A                     OSCSTAT         equ	154	;# 
   991     009B                     ADRES           equ	155	;# 
   992     009B                     ADRESL          equ	155	;# 
   993     009C                     ADRESH          equ	156	;# 
   994     009D                     ADCON0          equ	157	;# 
   995     009E                     ADCON1          equ	158	;# 
   996     010C                     LATA            equ	268	;# 
   997     010D                     LATB            equ	269	;# 
   998     0111                     CM1CON0         equ	273	;# 
   999     0112                     CM1CON1         equ	274	;# 
  1000     0113                     CM2CON0         equ	275	;# 
  1001     0114                     CM2CON1         equ	276	;# 
  1002     0115                     CMOUT           equ	277	;# 
  1003     0116                     BORCON          equ	278	;# 
  1004     0117                     FVRCON          equ	279	;# 
  1005     0118                     DACCON0         equ	280	;# 
  1006     0119                     DACCON1         equ	281	;# 
  1007     011A                     SRCON0          equ	282	;# 
  1008     011B                     SRCON1          equ	283	;# 
  1009     011D                     APFCON0         equ	285	;# 
  1010     011E                     APFCON1         equ	286	;# 
  1011     018C                     ANSELA          equ	396	;# 
  1012     018D                     ANSELB          equ	397	;# 
  1013     0191                     EEADR           equ	401	;# 
  1014     0191                     EEADRL          equ	401	;# 
  1015     0192                     EEADRH          equ	402	;# 
  1016     0193                     EEDAT           equ	403	;# 
  1017     0193                     EEDATL          equ	403	;# 
  1018     0193                     EEDATA          equ	403	;# 
  1019     0194                     EEDATH          equ	404	;# 
  1020     0195                     EECON1          equ	405	;# 
  1021     0196                     EECON2          equ	406	;# 
  1022     0199                     RCREG           equ	409	;# 
  1023     019A                     TXREG           equ	410	;# 
  1024     019B                     SP1BRG          equ	411	;# 
  1025     019B                     SP1BRGL         equ	411	;# 
  1026     019B                     SPBRG           equ	411	;# 
  1027     019B                     SPBRGL          equ	411	;# 
  1028     019C                     SP1BRGH         equ	412	;# 
  1029     019C                     SPBRGH          equ	412	;# 
  1030     019D                     RCSTA           equ	413	;# 
  1031     019E                     TXSTA           equ	414	;# 
  1032     019F                     BAUDCON         equ	415	;# 
  1033     020C                     WPUA            equ	524	;# 
  1034     020D                     WPUB            equ	525	;# 
  1035     0211                     SSP1BUF         equ	529	;# 
  1036     0211                     SSPBUF          equ	529	;# 
  1037     0212                     SSP1ADD         equ	530	;# 
  1038     0212                     SSPADD          equ	530	;# 
  1039     0213                     SSP1MSK         equ	531	;# 
  1040     0213                     SSPMSK          equ	531	;# 
  1041     0214                     SSP1STAT        equ	532	;# 
  1042     0214                     SSPSTAT         equ	532	;# 
  1043     0215                     SSP1CON1        equ	533	;# 
  1044     0215                     SSPCON1         equ	533	;# 
  1045     0215                     SSPCON          equ	533	;# 
  1046     0216                     SSP1CON2        equ	534	;# 
  1047     0216                     SSPCON2         equ	534	;# 
  1048     0217                     SSP1CON3        equ	535	;# 
  1049     0217                     SSPCON3         equ	535	;# 
  1050     0219                     SSP2BUF         equ	537	;# 
  1051     021A                     SSP2ADD         equ	538	;# 
  1052     021B                     SSP2MSK         equ	539	;# 
  1053     021C                     SSP2STAT        equ	540	;# 
  1054     021D                     SSP2CON1        equ	541	;# 
  1055     021E                     SSP2CON2        equ	542	;# 
  1056     021F                     SSP2CON3        equ	543	;# 
  1057     0291                     CCPR1           equ	657	;# 
  1058     0291                     CCPR1L          equ	657	;# 
  1059     0292                     CCPR1H          equ	658	;# 
  1060     0293                     CCP1CON         equ	659	;# 
  1061     0294                     PWM1CON         equ	660	;# 
  1062     0295                     CCP1AS          equ	661	;# 
  1063     0295                     ECCP1AS         equ	661	;# 
  1064     0296                     PSTR1CON        equ	662	;# 
  1065     0298                     CCPR2           equ	664	;# 
  1066     0298                     CCPR2L          equ	664	;# 
  1067     0299                     CCPR2H          equ	665	;# 
  1068     029A                     CCP2CON         equ	666	;# 
  1069     029B                     PWM2CON         equ	667	;# 
  1070     029C                     CCP2AS          equ	668	;# 
  1071     029C                     ECCP2AS         equ	668	;# 
  1072     029D                     PSTR2CON        equ	669	;# 
  1073     029E                     CCPTMRS         equ	670	;# 
  1074     029E                     CCPTMRS0        equ	670	;# 
  1075     0311                     CCPR3           equ	785	;# 
  1076     0311                     CCPR3L          equ	785	;# 
  1077     0312                     CCPR3H          equ	786	;# 
  1078     0313                     CCP3CON         equ	787	;# 
  1079     0318                     CCPR4           equ	792	;# 
  1080     0318                     CCPR4L          equ	792	;# 
  1081     0319                     CCPR4H          equ	793	;# 
  1082     031A                     CCP4CON         equ	794	;# 
  1083     0394                     IOCBP           equ	916	;# 
  1084     0395                     IOCBN           equ	917	;# 
  1085     0396                     IOCBF           equ	918	;# 
  1086     039A                     CLKRCON         equ	922	;# 
  1087     039C                     MDCON           equ	924	;# 
  1088     039D                     MDSRC           equ	925	;# 
  1089     039E                     MDCARL          equ	926	;# 
  1090     039F                     MDCARH          equ	927	;# 
  1091     0415                     TMR4            equ	1045	;# 
  1092     0416                     PR4             equ	1046	;# 
  1093     0417                     T4CON           equ	1047	;# 
  1094     041C                     TMR6            equ	1052	;# 
  1095     041D                     PR6             equ	1053	;# 
  1096     041E                     T6CON           equ	1054	;# 
  1097     0FE4                     STATUS_SHAD     equ	4068	;# 
  1098     0FE5                     WREG_SHAD       equ	4069	;# 
  1099     0FE6                     BSR_SHAD        equ	4070	;# 
  1100     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1101     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1102     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1103     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1104     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1105     0FED                     STKPTR          equ	4077	;# 
  1106     0FEE                     TOSL            equ	4078	;# 
  1107     0FEF                     TOSH            equ	4079	;# 
  1108     0000                     INDF0           equ	0	;# 
  1109     0001                     INDF1           equ	1	;# 
  1110     0002                     PCL             equ	2	;# 
  1111     0003                     STATUS          equ	3	;# 
  1112     0004                     FSR0L           equ	4	;# 
  1113     0005                     FSR0H           equ	5	;# 
  1114     0006                     FSR1L           equ	6	;# 
  1115     0007                     FSR1H           equ	7	;# 
  1116     0008                     BSR             equ	8	;# 
  1117     0009                     WREG            equ	9	;# 
  1118     000A                     PCLATH          equ	10	;# 
  1119     000B                     INTCON          equ	11	;# 
  1120     000C                     PORTA           equ	12	;# 
  1121     000D                     PORTB           equ	13	;# 
  1122     0011                     PIR1            equ	17	;# 
  1123     0012                     PIR2            equ	18	;# 
  1124     0013                     PIR3            equ	19	;# 
  1125     0014                     PIR4            equ	20	;# 
  1126     0015                     TMR0            equ	21	;# 
  1127     0016                     TMR1            equ	22	;# 
  1128     0016                     TMR1L           equ	22	;# 
  1129     0017                     TMR1H           equ	23	;# 
  1130     0018                     T1CON           equ	24	;# 
  1131     0019                     T1GCON          equ	25	;# 
  1132     001A                     TMR2            equ	26	;# 
  1133     001B                     PR2             equ	27	;# 
  1134     001C                     T2CON           equ	28	;# 
  1135     001E                     CPSCON0         equ	30	;# 
  1136     001F                     CPSCON1         equ	31	;# 
  1137     008C                     TRISA           equ	140	;# 
  1138     008D                     TRISB           equ	141	;# 
  1139     0091                     PIE1            equ	145	;# 
  1140     0092                     PIE2            equ	146	;# 
  1141     0093                     PIE3            equ	147	;# 
  1142     0094                     PIE4            equ	148	;# 
  1143     0095                     OPTION_REG      equ	149	;# 
  1144     0096                     PCON            equ	150	;# 
  1145     0097                     WDTCON          equ	151	;# 
  1146     0098                     OSCTUNE         equ	152	;# 
  1147     0099                     OSCCON          equ	153	;# 
  1148     009A                     OSCSTAT         equ	154	;# 
  1149     009B                     ADRES           equ	155	;# 
  1150     009B                     ADRESL          equ	155	;# 
  1151     009C                     ADRESH          equ	156	;# 
  1152     009D                     ADCON0          equ	157	;# 
  1153     009E                     ADCON1          equ	158	;# 
  1154     010C                     LATA            equ	268	;# 
  1155     010D                     LATB            equ	269	;# 
  1156     0111                     CM1CON0         equ	273	;# 
  1157     0112                     CM1CON1         equ	274	;# 
  1158     0113                     CM2CON0         equ	275	;# 
  1159     0114                     CM2CON1         equ	276	;# 
  1160     0115                     CMOUT           equ	277	;# 
  1161     0116                     BORCON          equ	278	;# 
  1162     0117                     FVRCON          equ	279	;# 
  1163     0118                     DACCON0         equ	280	;# 
  1164     0119                     DACCON1         equ	281	;# 
  1165     011A                     SRCON0          equ	282	;# 
  1166     011B                     SRCON1          equ	283	;# 
  1167     011D                     APFCON0         equ	285	;# 
  1168     011E                     APFCON1         equ	286	;# 
  1169     018C                     ANSELA          equ	396	;# 
  1170     018D                     ANSELB          equ	397	;# 
  1171     0191                     EEADR           equ	401	;# 
  1172     0191                     EEADRL          equ	401	;# 
  1173     0192                     EEADRH          equ	402	;# 
  1174     0193                     EEDAT           equ	403	;# 
  1175     0193                     EEDATL          equ	403	;# 
  1176     0193                     EEDATA          equ	403	;# 
  1177     0194                     EEDATH          equ	404	;# 
  1178     0195                     EECON1          equ	405	;# 
  1179     0196                     EECON2          equ	406	;# 
  1180     0199                     RCREG           equ	409	;# 
  1181     019A                     TXREG           equ	410	;# 
  1182     019B                     SP1BRG          equ	411	;# 
  1183     019B                     SP1BRGL         equ	411	;# 
  1184     019B                     SPBRG           equ	411	;# 
  1185     019B                     SPBRGL          equ	411	;# 
  1186     019C                     SP1BRGH         equ	412	;# 
  1187     019C                     SPBRGH          equ	412	;# 
  1188     019D                     RCSTA           equ	413	;# 
  1189     019E                     TXSTA           equ	414	;# 
  1190     019F                     BAUDCON         equ	415	;# 
  1191     020C                     WPUA            equ	524	;# 
  1192     020D                     WPUB            equ	525	;# 
  1193     0211                     SSP1BUF         equ	529	;# 
  1194     0211                     SSPBUF          equ	529	;# 
  1195     0212                     SSP1ADD         equ	530	;# 
  1196     0212                     SSPADD          equ	530	;# 
  1197     0213                     SSP1MSK         equ	531	;# 
  1198     0213                     SSPMSK          equ	531	;# 
  1199     0214                     SSP1STAT        equ	532	;# 
  1200     0214                     SSPSTAT         equ	532	;# 
  1201     0215                     SSP1CON1        equ	533	;# 
  1202     0215                     SSPCON1         equ	533	;# 
  1203     0215                     SSPCON          equ	533	;# 
  1204     0216                     SSP1CON2        equ	534	;# 
  1205     0216                     SSPCON2         equ	534	;# 
  1206     0217                     SSP1CON3        equ	535	;# 
  1207     0217                     SSPCON3         equ	535	;# 
  1208     0219                     SSP2BUF         equ	537	;# 
  1209     021A                     SSP2ADD         equ	538	;# 
  1210     021B                     SSP2MSK         equ	539	;# 
  1211     021C                     SSP2STAT        equ	540	;# 
  1212     021D                     SSP2CON1        equ	541	;# 
  1213     021E                     SSP2CON2        equ	542	;# 
  1214     021F                     SSP2CON3        equ	543	;# 
  1215     0291                     CCPR1           equ	657	;# 
  1216     0291                     CCPR1L          equ	657	;# 
  1217     0292                     CCPR1H          equ	658	;# 
  1218     0293                     CCP1CON         equ	659	;# 
  1219     0294                     PWM1CON         equ	660	;# 
  1220     0295                     CCP1AS          equ	661	;# 
  1221     0295                     ECCP1AS         equ	661	;# 
  1222     0296                     PSTR1CON        equ	662	;# 
  1223     0298                     CCPR2           equ	664	;# 
  1224     0298                     CCPR2L          equ	664	;# 
  1225     0299                     CCPR2H          equ	665	;# 
  1226     029A                     CCP2CON         equ	666	;# 
  1227     029B                     PWM2CON         equ	667	;# 
  1228     029C                     CCP2AS          equ	668	;# 
  1229     029C                     ECCP2AS         equ	668	;# 
  1230     029D                     PSTR2CON        equ	669	;# 
  1231     029E                     CCPTMRS         equ	670	;# 
  1232     029E                     CCPTMRS0        equ	670	;# 
  1233     0311                     CCPR3           equ	785	;# 
  1234     0311                     CCPR3L          equ	785	;# 
  1235     0312                     CCPR3H          equ	786	;# 
  1236     0313                     CCP3CON         equ	787	;# 
  1237     0318                     CCPR4           equ	792	;# 
  1238     0318                     CCPR4L          equ	792	;# 
  1239     0319                     CCPR4H          equ	793	;# 
  1240     031A                     CCP4CON         equ	794	;# 
  1241     0394                     IOCBP           equ	916	;# 
  1242     0395                     IOCBN           equ	917	;# 
  1243     0396                     IOCBF           equ	918	;# 
  1244     039A                     CLKRCON         equ	922	;# 
  1245     039C                     MDCON           equ	924	;# 
  1246     039D                     MDSRC           equ	925	;# 
  1247     039E                     MDCARL          equ	926	;# 
  1248     039F                     MDCARH          equ	927	;# 
  1249     0415                     TMR4            equ	1045	;# 
  1250     0416                     PR4             equ	1046	;# 
  1251     0417                     T4CON           equ	1047	;# 
  1252     041C                     TMR6            equ	1052	;# 
  1253     041D                     PR6             equ	1053	;# 
  1254     041E                     T6CON           equ	1054	;# 
  1255     0FE4                     STATUS_SHAD     equ	4068	;# 
  1256     0FE5                     WREG_SHAD       equ	4069	;# 
  1257     0FE6                     BSR_SHAD        equ	4070	;# 
  1258     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1259     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1260     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1261     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1262     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1263     0FED                     STKPTR          equ	4077	;# 
  1264     0FEE                     TOSL            equ	4078	;# 
  1265     0FEF                     TOSH            equ	4079	;# 
  1266     0000                     INDF0           equ	0	;# 
  1267     0001                     INDF1           equ	1	;# 
  1268     0002                     PCL             equ	2	;# 
  1269     0003                     STATUS          equ	3	;# 
  1270     0004                     FSR0L           equ	4	;# 
  1271     0005                     FSR0H           equ	5	;# 
  1272     0006                     FSR1L           equ	6	;# 
  1273     0007                     FSR1H           equ	7	;# 
  1274     0008                     BSR             equ	8	;# 
  1275     0009                     WREG            equ	9	;# 
  1276     000A                     PCLATH          equ	10	;# 
  1277     000B                     INTCON          equ	11	;# 
  1278     000C                     PORTA           equ	12	;# 
  1279     000D                     PORTB           equ	13	;# 
  1280     0011                     PIR1            equ	17	;# 
  1281     0012                     PIR2            equ	18	;# 
  1282     0013                     PIR3            equ	19	;# 
  1283     0014                     PIR4            equ	20	;# 
  1284     0015                     TMR0            equ	21	;# 
  1285     0016                     TMR1            equ	22	;# 
  1286     0016                     TMR1L           equ	22	;# 
  1287     0017                     TMR1H           equ	23	;# 
  1288     0018                     T1CON           equ	24	;# 
  1289     0019                     T1GCON          equ	25	;# 
  1290     001A                     TMR2            equ	26	;# 
  1291     001B                     PR2             equ	27	;# 
  1292     001C                     T2CON           equ	28	;# 
  1293     001E                     CPSCON0         equ	30	;# 
  1294     001F                     CPSCON1         equ	31	;# 
  1295     008C                     TRISA           equ	140	;# 
  1296     008D                     TRISB           equ	141	;# 
  1297     0091                     PIE1            equ	145	;# 
  1298     0092                     PIE2            equ	146	;# 
  1299     0093                     PIE3            equ	147	;# 
  1300     0094                     PIE4            equ	148	;# 
  1301     0095                     OPTION_REG      equ	149	;# 
  1302     0096                     PCON            equ	150	;# 
  1303     0097                     WDTCON          equ	151	;# 
  1304     0098                     OSCTUNE         equ	152	;# 
  1305     0099                     OSCCON          equ	153	;# 
  1306     009A                     OSCSTAT         equ	154	;# 
  1307     009B                     ADRES           equ	155	;# 
  1308     009B                     ADRESL          equ	155	;# 
  1309     009C                     ADRESH          equ	156	;# 
  1310     009D                     ADCON0          equ	157	;# 
  1311     009E                     ADCON1          equ	158	;# 
  1312     010C                     LATA            equ	268	;# 
  1313     010D                     LATB            equ	269	;# 
  1314     0111                     CM1CON0         equ	273	;# 
  1315     0112                     CM1CON1         equ	274	;# 
  1316     0113                     CM2CON0         equ	275	;# 
  1317     0114                     CM2CON1         equ	276	;# 
  1318     0115                     CMOUT           equ	277	;# 
  1319     0116                     BORCON          equ	278	;# 
  1320     0117                     FVRCON          equ	279	;# 
  1321     0118                     DACCON0         equ	280	;# 
  1322     0119                     DACCON1         equ	281	;# 
  1323     011A                     SRCON0          equ	282	;# 
  1324     011B                     SRCON1          equ	283	;# 
  1325     011D                     APFCON0         equ	285	;# 
  1326     011E                     APFCON1         equ	286	;# 
  1327     018C                     ANSELA          equ	396	;# 
  1328     018D                     ANSELB          equ	397	;# 
  1329     0191                     EEADR           equ	401	;# 
  1330     0191                     EEADRL          equ	401	;# 
  1331     0192                     EEADRH          equ	402	;# 
  1332     0193                     EEDAT           equ	403	;# 
  1333     0193                     EEDATL          equ	403	;# 
  1334     0193                     EEDATA          equ	403	;# 
  1335     0194                     EEDATH          equ	404	;# 
  1336     0195                     EECON1          equ	405	;# 
  1337     0196                     EECON2          equ	406	;# 
  1338     0199                     RCREG           equ	409	;# 
  1339     019A                     TXREG           equ	410	;# 
  1340     019B                     SP1BRG          equ	411	;# 
  1341     019B                     SP1BRGL         equ	411	;# 
  1342     019B                     SPBRG           equ	411	;# 
  1343     019B                     SPBRGL          equ	411	;# 
  1344     019C                     SP1BRGH         equ	412	;# 
  1345     019C                     SPBRGH          equ	412	;# 
  1346     019D                     RCSTA           equ	413	;# 
  1347     019E                     TXSTA           equ	414	;# 
  1348     019F                     BAUDCON         equ	415	;# 
  1349     020C                     WPUA            equ	524	;# 
  1350     020D                     WPUB            equ	525	;# 
  1351     0211                     SSP1BUF         equ	529	;# 
  1352     0211                     SSPBUF          equ	529	;# 
  1353     0212                     SSP1ADD         equ	530	;# 
  1354     0212                     SSPADD          equ	530	;# 
  1355     0213                     SSP1MSK         equ	531	;# 
  1356     0213                     SSPMSK          equ	531	;# 
  1357     0214                     SSP1STAT        equ	532	;# 
  1358     0214                     SSPSTAT         equ	532	;# 
  1359     0215                     SSP1CON1        equ	533	;# 
  1360     0215                     SSPCON1         equ	533	;# 
  1361     0215                     SSPCON          equ	533	;# 
  1362     0216                     SSP1CON2        equ	534	;# 
  1363     0216                     SSPCON2         equ	534	;# 
  1364     0217                     SSP1CON3        equ	535	;# 
  1365     0217                     SSPCON3         equ	535	;# 
  1366     0219                     SSP2BUF         equ	537	;# 
  1367     021A                     SSP2ADD         equ	538	;# 
  1368     021B                     SSP2MSK         equ	539	;# 
  1369     021C                     SSP2STAT        equ	540	;# 
  1370     021D                     SSP2CON1        equ	541	;# 
  1371     021E                     SSP2CON2        equ	542	;# 
  1372     021F                     SSP2CON3        equ	543	;# 
  1373     0291                     CCPR1           equ	657	;# 
  1374     0291                     CCPR1L          equ	657	;# 
  1375     0292                     CCPR1H          equ	658	;# 
  1376     0293                     CCP1CON         equ	659	;# 
  1377     0294                     PWM1CON         equ	660	;# 
  1378     0295                     CCP1AS          equ	661	;# 
  1379     0295                     ECCP1AS         equ	661	;# 
  1380     0296                     PSTR1CON        equ	662	;# 
  1381     0298                     CCPR2           equ	664	;# 
  1382     0298                     CCPR2L          equ	664	;# 
  1383     0299                     CCPR2H          equ	665	;# 
  1384     029A                     CCP2CON         equ	666	;# 
  1385     029B                     PWM2CON         equ	667	;# 
  1386     029C                     CCP2AS          equ	668	;# 
  1387     029C                     ECCP2AS         equ	668	;# 
  1388     029D                     PSTR2CON        equ	669	;# 
  1389     029E                     CCPTMRS         equ	670	;# 
  1390     029E                     CCPTMRS0        equ	670	;# 
  1391     0311                     CCPR3           equ	785	;# 
  1392     0311                     CCPR3L          equ	785	;# 
  1393     0312                     CCPR3H          equ	786	;# 
  1394     0313                     CCP3CON         equ	787	;# 
  1395     0318                     CCPR4           equ	792	;# 
  1396     0318                     CCPR4L          equ	792	;# 
  1397     0319                     CCPR4H          equ	793	;# 
  1398     031A                     CCP4CON         equ	794	;# 
  1399     0394                     IOCBP           equ	916	;# 
  1400     0395                     IOCBN           equ	917	;# 
  1401     0396                     IOCBF           equ	918	;# 
  1402     039A                     CLKRCON         equ	922	;# 
  1403     039C                     MDCON           equ	924	;# 
  1404     039D                     MDSRC           equ	925	;# 
  1405     039E                     MDCARL          equ	926	;# 
  1406     039F                     MDCARH          equ	927	;# 
  1407     0415                     TMR4            equ	1045	;# 
  1408     0416                     PR4             equ	1046	;# 
  1409     0417                     T4CON           equ	1047	;# 
  1410     041C                     TMR6            equ	1052	;# 
  1411     041D                     PR6             equ	1053	;# 
  1412     041E                     T6CON           equ	1054	;# 
  1413     0FE4                     STATUS_SHAD     equ	4068	;# 
  1414     0FE5                     WREG_SHAD       equ	4069	;# 
  1415     0FE6                     BSR_SHAD        equ	4070	;# 
  1416     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1417     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1418     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1419     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1420     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1421     0FED                     STKPTR          equ	4077	;# 
  1422     0FEE                     TOSL            equ	4078	;# 
  1423     0FEF                     TOSH            equ	4079	;# 
  1424     0000                     INDF0           equ	0	;# 
  1425     0001                     INDF1           equ	1	;# 
  1426     0002                     PCL             equ	2	;# 
  1427     0003                     STATUS          equ	3	;# 
  1428     0004                     FSR0L           equ	4	;# 
  1429     0005                     FSR0H           equ	5	;# 
  1430     0006                     FSR1L           equ	6	;# 
  1431     0007                     FSR1H           equ	7	;# 
  1432     0008                     BSR             equ	8	;# 
  1433     0009                     WREG            equ	9	;# 
  1434     000A                     PCLATH          equ	10	;# 
  1435     000B                     INTCON          equ	11	;# 
  1436     000C                     PORTA           equ	12	;# 
  1437     000D                     PORTB           equ	13	;# 
  1438     0011                     PIR1            equ	17	;# 
  1439     0012                     PIR2            equ	18	;# 
  1440     0013                     PIR3            equ	19	;# 
  1441     0014                     PIR4            equ	20	;# 
  1442     0015                     TMR0            equ	21	;# 
  1443     0016                     TMR1            equ	22	;# 
  1444     0016                     TMR1L           equ	22	;# 
  1445     0017                     TMR1H           equ	23	;# 
  1446     0018                     T1CON           equ	24	;# 
  1447     0019                     T1GCON          equ	25	;# 
  1448     001A                     TMR2            equ	26	;# 
  1449     001B                     PR2             equ	27	;# 
  1450     001C                     T2CON           equ	28	;# 
  1451     001E                     CPSCON0         equ	30	;# 
  1452     001F                     CPSCON1         equ	31	;# 
  1453     008C                     TRISA           equ	140	;# 
  1454     008D                     TRISB           equ	141	;# 
  1455     0091                     PIE1            equ	145	;# 
  1456     0092                     PIE2            equ	146	;# 
  1457     0093                     PIE3            equ	147	;# 
  1458     0094                     PIE4            equ	148	;# 
  1459     0095                     OPTION_REG      equ	149	;# 
  1460     0096                     PCON            equ	150	;# 
  1461     0097                     WDTCON          equ	151	;# 
  1462     0098                     OSCTUNE         equ	152	;# 
  1463     0099                     OSCCON          equ	153	;# 
  1464     009A                     OSCSTAT         equ	154	;# 
  1465     009B                     ADRES           equ	155	;# 
  1466     009B                     ADRESL          equ	155	;# 
  1467     009C                     ADRESH          equ	156	;# 
  1468     009D                     ADCON0          equ	157	;# 
  1469     009E                     ADCON1          equ	158	;# 
  1470     010C                     LATA            equ	268	;# 
  1471     010D                     LATB            equ	269	;# 
  1472     0111                     CM1CON0         equ	273	;# 
  1473     0112                     CM1CON1         equ	274	;# 
  1474     0113                     CM2CON0         equ	275	;# 
  1475     0114                     CM2CON1         equ	276	;# 
  1476     0115                     CMOUT           equ	277	;# 
  1477     0116                     BORCON          equ	278	;# 
  1478     0117                     FVRCON          equ	279	;# 
  1479     0118                     DACCON0         equ	280	;# 
  1480     0119                     DACCON1         equ	281	;# 
  1481     011A                     SRCON0          equ	282	;# 
  1482     011B                     SRCON1          equ	283	;# 
  1483     011D                     APFCON0         equ	285	;# 
  1484     011E                     APFCON1         equ	286	;# 
  1485     018C                     ANSELA          equ	396	;# 
  1486     018D                     ANSELB          equ	397	;# 
  1487     0191                     EEADR           equ	401	;# 
  1488     0191                     EEADRL          equ	401	;# 
  1489     0192                     EEADRH          equ	402	;# 
  1490     0193                     EEDAT           equ	403	;# 
  1491     0193                     EEDATL          equ	403	;# 
  1492     0193                     EEDATA          equ	403	;# 
  1493     0194                     EEDATH          equ	404	;# 
  1494     0195                     EECON1          equ	405	;# 
  1495     0196                     EECON2          equ	406	;# 
  1496     0199                     RCREG           equ	409	;# 
  1497     019A                     TXREG           equ	410	;# 
  1498     019B                     SP1BRG          equ	411	;# 
  1499     019B                     SP1BRGL         equ	411	;# 
  1500     019B                     SPBRG           equ	411	;# 
  1501     019B                     SPBRGL          equ	411	;# 
  1502     019C                     SP1BRGH         equ	412	;# 
  1503     019C                     SPBRGH          equ	412	;# 
  1504     019D                     RCSTA           equ	413	;# 
  1505     019E                     TXSTA           equ	414	;# 
  1506     019F                     BAUDCON         equ	415	;# 
  1507     020C                     WPUA            equ	524	;# 
  1508     020D                     WPUB            equ	525	;# 
  1509     0211                     SSP1BUF         equ	529	;# 
  1510     0211                     SSPBUF          equ	529	;# 
  1511     0212                     SSP1ADD         equ	530	;# 
  1512     0212                     SSPADD          equ	530	;# 
  1513     0213                     SSP1MSK         equ	531	;# 
  1514     0213                     SSPMSK          equ	531	;# 
  1515     0214                     SSP1STAT        equ	532	;# 
  1516     0214                     SSPSTAT         equ	532	;# 
  1517     0215                     SSP1CON1        equ	533	;# 
  1518     0215                     SSPCON1         equ	533	;# 
  1519     0215                     SSPCON          equ	533	;# 
  1520     0216                     SSP1CON2        equ	534	;# 
  1521     0216                     SSPCON2         equ	534	;# 
  1522     0217                     SSP1CON3        equ	535	;# 
  1523     0217                     SSPCON3         equ	535	;# 
  1524     0219                     SSP2BUF         equ	537	;# 
  1525     021A                     SSP2ADD         equ	538	;# 
  1526     021B                     SSP2MSK         equ	539	;# 
  1527     021C                     SSP2STAT        equ	540	;# 
  1528     021D                     SSP2CON1        equ	541	;# 
  1529     021E                     SSP2CON2        equ	542	;# 
  1530     021F                     SSP2CON3        equ	543	;# 
  1531     0291                     CCPR1           equ	657	;# 
  1532     0291                     CCPR1L          equ	657	;# 
  1533     0292                     CCPR1H          equ	658	;# 
  1534     0293                     CCP1CON         equ	659	;# 
  1535     0294                     PWM1CON         equ	660	;# 
  1536     0295                     CCP1AS          equ	661	;# 
  1537     0295                     ECCP1AS         equ	661	;# 
  1538     0296                     PSTR1CON        equ	662	;# 
  1539     0298                     CCPR2           equ	664	;# 
  1540     0298                     CCPR2L          equ	664	;# 
  1541     0299                     CCPR2H          equ	665	;# 
  1542     029A                     CCP2CON         equ	666	;# 
  1543     029B                     PWM2CON         equ	667	;# 
  1544     029C                     CCP2AS          equ	668	;# 
  1545     029C                     ECCP2AS         equ	668	;# 
  1546     029D                     PSTR2CON        equ	669	;# 
  1547     029E                     CCPTMRS         equ	670	;# 
  1548     029E                     CCPTMRS0        equ	670	;# 
  1549     0311                     CCPR3           equ	785	;# 
  1550     0311                     CCPR3L          equ	785	;# 
  1551     0312                     CCPR3H          equ	786	;# 
  1552     0313                     CCP3CON         equ	787	;# 
  1553     0318                     CCPR4           equ	792	;# 
  1554     0318                     CCPR4L          equ	792	;# 
  1555     0319                     CCPR4H          equ	793	;# 
  1556     031A                     CCP4CON         equ	794	;# 
  1557     0394                     IOCBP           equ	916	;# 
  1558     0395                     IOCBN           equ	917	;# 
  1559     0396                     IOCBF           equ	918	;# 
  1560     039A                     CLKRCON         equ	922	;# 
  1561     039C                     MDCON           equ	924	;# 
  1562     039D                     MDSRC           equ	925	;# 
  1563     039E                     MDCARL          equ	926	;# 
  1564     039F                     MDCARH          equ	927	;# 
  1565     0415                     TMR4            equ	1045	;# 
  1566     0416                     PR4             equ	1046	;# 
  1567     0417                     T4CON           equ	1047	;# 
  1568     041C                     TMR6            equ	1052	;# 
  1569     041D                     PR6             equ	1053	;# 
  1570     041E                     T6CON           equ	1054	;# 
  1571     0FE4                     STATUS_SHAD     equ	4068	;# 
  1572     0FE5                     WREG_SHAD       equ	4069	;# 
  1573     0FE6                     BSR_SHAD        equ	4070	;# 
  1574     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1575     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1576     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1577     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1578     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1579     0FED                     STKPTR          equ	4077	;# 
  1580     0FEE                     TOSL            equ	4078	;# 
  1581     0FEF                     TOSH            equ	4079	;# 
  1582     0000                     INDF0           equ	0	;# 
  1583     0001                     INDF1           equ	1	;# 
  1584     0002                     PCL             equ	2	;# 
  1585     0003                     STATUS          equ	3	;# 
  1586     0004                     FSR0L           equ	4	;# 
  1587     0005                     FSR0H           equ	5	;# 
  1588     0006                     FSR1L           equ	6	;# 
  1589     0007                     FSR1H           equ	7	;# 
  1590     0008                     BSR             equ	8	;# 
  1591     0009                     WREG            equ	9	;# 
  1592     000A                     PCLATH          equ	10	;# 
  1593     000B                     INTCON          equ	11	;# 
  1594     000C                     PORTA           equ	12	;# 
  1595     000D                     PORTB           equ	13	;# 
  1596     0011                     PIR1            equ	17	;# 
  1597     0012                     PIR2            equ	18	;# 
  1598     0013                     PIR3            equ	19	;# 
  1599     0014                     PIR4            equ	20	;# 
  1600     0015                     TMR0            equ	21	;# 
  1601     0016                     TMR1            equ	22	;# 
  1602     0016                     TMR1L           equ	22	;# 
  1603     0017                     TMR1H           equ	23	;# 
  1604     0018                     T1CON           equ	24	;# 
  1605     0019                     T1GCON          equ	25	;# 
  1606     001A                     TMR2            equ	26	;# 
  1607     001B                     PR2             equ	27	;# 
  1608     001C                     T2CON           equ	28	;# 
  1609     001E                     CPSCON0         equ	30	;# 
  1610     001F                     CPSCON1         equ	31	;# 
  1611     008C                     TRISA           equ	140	;# 
  1612     008D                     TRISB           equ	141	;# 
  1613     0091                     PIE1            equ	145	;# 
  1614     0092                     PIE2            equ	146	;# 
  1615     0093                     PIE3            equ	147	;# 
  1616     0094                     PIE4            equ	148	;# 
  1617     0095                     OPTION_REG      equ	149	;# 
  1618     0096                     PCON            equ	150	;# 
  1619     0097                     WDTCON          equ	151	;# 
  1620     0098                     OSCTUNE         equ	152	;# 
  1621     0099                     OSCCON          equ	153	;# 
  1622     009A                     OSCSTAT         equ	154	;# 
  1623     009B                     ADRES           equ	155	;# 
  1624     009B                     ADRESL          equ	155	;# 
  1625     009C                     ADRESH          equ	156	;# 
  1626     009D                     ADCON0          equ	157	;# 
  1627     009E                     ADCON1          equ	158	;# 
  1628     010C                     LATA            equ	268	;# 
  1629     010D                     LATB            equ	269	;# 
  1630     0111                     CM1CON0         equ	273	;# 
  1631     0112                     CM1CON1         equ	274	;# 
  1632     0113                     CM2CON0         equ	275	;# 
  1633     0114                     CM2CON1         equ	276	;# 
  1634     0115                     CMOUT           equ	277	;# 
  1635     0116                     BORCON          equ	278	;# 
  1636     0117                     FVRCON          equ	279	;# 
  1637     0118                     DACCON0         equ	280	;# 
  1638     0119                     DACCON1         equ	281	;# 
  1639     011A                     SRCON0          equ	282	;# 
  1640     011B                     SRCON1          equ	283	;# 
  1641     011D                     APFCON0         equ	285	;# 
  1642     011E                     APFCON1         equ	286	;# 
  1643     018C                     ANSELA          equ	396	;# 
  1644     018D                     ANSELB          equ	397	;# 
  1645     0191                     EEADR           equ	401	;# 
  1646     0191                     EEADRL          equ	401	;# 
  1647     0192                     EEADRH          equ	402	;# 
  1648     0193                     EEDAT           equ	403	;# 
  1649     0193                     EEDATL          equ	403	;# 
  1650     0193                     EEDATA          equ	403	;# 
  1651     0194                     EEDATH          equ	404	;# 
  1652     0195                     EECON1          equ	405	;# 
  1653     0196                     EECON2          equ	406	;# 
  1654     0199                     RCREG           equ	409	;# 
  1655     019A                     TXREG           equ	410	;# 
  1656     019B                     SP1BRG          equ	411	;# 
  1657     019B                     SP1BRGL         equ	411	;# 
  1658     019B                     SPBRG           equ	411	;# 
  1659     019B                     SPBRGL          equ	411	;# 
  1660     019C                     SP1BRGH         equ	412	;# 
  1661     019C                     SPBRGH          equ	412	;# 
  1662     019D                     RCSTA           equ	413	;# 
  1663     019E                     TXSTA           equ	414	;# 
  1664     019F                     BAUDCON         equ	415	;# 
  1665     020C                     WPUA            equ	524	;# 
  1666     020D                     WPUB            equ	525	;# 
  1667     0211                     SSP1BUF         equ	529	;# 
  1668     0211                     SSPBUF          equ	529	;# 
  1669     0212                     SSP1ADD         equ	530	;# 
  1670     0212                     SSPADD          equ	530	;# 
  1671     0213                     SSP1MSK         equ	531	;# 
  1672     0213                     SSPMSK          equ	531	;# 
  1673     0214                     SSP1STAT        equ	532	;# 
  1674     0214                     SSPSTAT         equ	532	;# 
  1675     0215                     SSP1CON1        equ	533	;# 
  1676     0215                     SSPCON1         equ	533	;# 
  1677     0215                     SSPCON          equ	533	;# 
  1678     0216                     SSP1CON2        equ	534	;# 
  1679     0216                     SSPCON2         equ	534	;# 
  1680     0217                     SSP1CON3        equ	535	;# 
  1681     0217                     SSPCON3         equ	535	;# 
  1682     0219                     SSP2BUF         equ	537	;# 
  1683     021A                     SSP2ADD         equ	538	;# 
  1684     021B                     SSP2MSK         equ	539	;# 
  1685     021C                     SSP2STAT        equ	540	;# 
  1686     021D                     SSP2CON1        equ	541	;# 
  1687     021E                     SSP2CON2        equ	542	;# 
  1688     021F                     SSP2CON3        equ	543	;# 
  1689     0291                     CCPR1           equ	657	;# 
  1690     0291                     CCPR1L          equ	657	;# 
  1691     0292                     CCPR1H          equ	658	;# 
  1692     0293                     CCP1CON         equ	659	;# 
  1693     0294                     PWM1CON         equ	660	;# 
  1694     0295                     CCP1AS          equ	661	;# 
  1695     0295                     ECCP1AS         equ	661	;# 
  1696     0296                     PSTR1CON        equ	662	;# 
  1697     0298                     CCPR2           equ	664	;# 
  1698     0298                     CCPR2L          equ	664	;# 
  1699     0299                     CCPR2H          equ	665	;# 
  1700     029A                     CCP2CON         equ	666	;# 
  1701     029B                     PWM2CON         equ	667	;# 
  1702     029C                     CCP2AS          equ	668	;# 
  1703     029C                     ECCP2AS         equ	668	;# 
  1704     029D                     PSTR2CON        equ	669	;# 
  1705     029E                     CCPTMRS         equ	670	;# 
  1706     029E                     CCPTMRS0        equ	670	;# 
  1707     0311                     CCPR3           equ	785	;# 
  1708     0311                     CCPR3L          equ	785	;# 
  1709     0312                     CCPR3H          equ	786	;# 
  1710     0313                     CCP3CON         equ	787	;# 
  1711     0318                     CCPR4           equ	792	;# 
  1712     0318                     CCPR4L          equ	792	;# 
  1713     0319                     CCPR4H          equ	793	;# 
  1714     031A                     CCP4CON         equ	794	;# 
  1715     0394                     IOCBP           equ	916	;# 
  1716     0395                     IOCBN           equ	917	;# 
  1717     0396                     IOCBF           equ	918	;# 
  1718     039A                     CLKRCON         equ	922	;# 
  1719     039C                     MDCON           equ	924	;# 
  1720     039D                     MDSRC           equ	925	;# 
  1721     039E                     MDCARL          equ	926	;# 
  1722     039F                     MDCARH          equ	927	;# 
  1723     0415                     TMR4            equ	1045	;# 
  1724     0416                     PR4             equ	1046	;# 
  1725     0417                     T4CON           equ	1047	;# 
  1726     041C                     TMR6            equ	1052	;# 
  1727     041D                     PR6             equ	1053	;# 
  1728     041E                     T6CON           equ	1054	;# 
  1729     0FE4                     STATUS_SHAD     equ	4068	;# 
  1730     0FE5                     WREG_SHAD       equ	4069	;# 
  1731     0FE6                     BSR_SHAD        equ	4070	;# 
  1732     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1733     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1734     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1735     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1736     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1737     0FED                     STKPTR          equ	4077	;# 
  1738     0FEE                     TOSL            equ	4078	;# 
  1739     0FEF                     TOSH            equ	4079	;# 
  1740     0000                     INDF0           equ	0	;# 
  1741     0001                     INDF1           equ	1	;# 
  1742     0002                     PCL             equ	2	;# 
  1743     0003                     STATUS          equ	3	;# 
  1744     0004                     FSR0L           equ	4	;# 
  1745     0005                     FSR0H           equ	5	;# 
  1746     0006                     FSR1L           equ	6	;# 
  1747     0007                     FSR1H           equ	7	;# 
  1748     0008                     BSR             equ	8	;# 
  1749     0009                     WREG            equ	9	;# 
  1750     000A                     PCLATH          equ	10	;# 
  1751     000B                     INTCON          equ	11	;# 
  1752     000C                     PORTA           equ	12	;# 
  1753     000D                     PORTB           equ	13	;# 
  1754     0011                     PIR1            equ	17	;# 
  1755     0012                     PIR2            equ	18	;# 
  1756     0013                     PIR3            equ	19	;# 
  1757     0014                     PIR4            equ	20	;# 
  1758     0015                     TMR0            equ	21	;# 
  1759     0016                     TMR1            equ	22	;# 
  1760     0016                     TMR1L           equ	22	;# 
  1761     0017                     TMR1H           equ	23	;# 
  1762     0018                     T1CON           equ	24	;# 
  1763     0019                     T1GCON          equ	25	;# 
  1764     001A                     TMR2            equ	26	;# 
  1765     001B                     PR2             equ	27	;# 
  1766     001C                     T2CON           equ	28	;# 
  1767     001E                     CPSCON0         equ	30	;# 
  1768     001F                     CPSCON1         equ	31	;# 
  1769     008C                     TRISA           equ	140	;# 
  1770     008D                     TRISB           equ	141	;# 
  1771     0091                     PIE1            equ	145	;# 
  1772     0092                     PIE2            equ	146	;# 
  1773     0093                     PIE3            equ	147	;# 
  1774     0094                     PIE4            equ	148	;# 
  1775     0095                     OPTION_REG      equ	149	;# 
  1776     0096                     PCON            equ	150	;# 
  1777     0097                     WDTCON          equ	151	;# 
  1778     0098                     OSCTUNE         equ	152	;# 
  1779     0099                     OSCCON          equ	153	;# 
  1780     009A                     OSCSTAT         equ	154	;# 
  1781     009B                     ADRES           equ	155	;# 
  1782     009B                     ADRESL          equ	155	;# 
  1783     009C                     ADRESH          equ	156	;# 
  1784     009D                     ADCON0          equ	157	;# 
  1785     009E                     ADCON1          equ	158	;# 
  1786     010C                     LATA            equ	268	;# 
  1787     010D                     LATB            equ	269	;# 
  1788     0111                     CM1CON0         equ	273	;# 
  1789     0112                     CM1CON1         equ	274	;# 
  1790     0113                     CM2CON0         equ	275	;# 
  1791     0114                     CM2CON1         equ	276	;# 
  1792     0115                     CMOUT           equ	277	;# 
  1793     0116                     BORCON          equ	278	;# 
  1794     0117                     FVRCON          equ	279	;# 
  1795     0118                     DACCON0         equ	280	;# 
  1796     0119                     DACCON1         equ	281	;# 
  1797     011A                     SRCON0          equ	282	;# 
  1798     011B                     SRCON1          equ	283	;# 
  1799     011D                     APFCON0         equ	285	;# 
  1800     011E                     APFCON1         equ	286	;# 
  1801     018C                     ANSELA          equ	396	;# 
  1802     018D                     ANSELB          equ	397	;# 
  1803     0191                     EEADR           equ	401	;# 
  1804     0191                     EEADRL          equ	401	;# 
  1805     0192                     EEADRH          equ	402	;# 
  1806     0193                     EEDAT           equ	403	;# 
  1807     0193                     EEDATL          equ	403	;# 
  1808     0193                     EEDATA          equ	403	;# 
  1809     0194                     EEDATH          equ	404	;# 
  1810     0195                     EECON1          equ	405	;# 
  1811     0196                     EECON2          equ	406	;# 
  1812     0199                     RCREG           equ	409	;# 
  1813     019A                     TXREG           equ	410	;# 
  1814     019B                     SP1BRG          equ	411	;# 
  1815     019B                     SP1BRGL         equ	411	;# 
  1816     019B                     SPBRG           equ	411	;# 
  1817     019B                     SPBRGL          equ	411	;# 
  1818     019C                     SP1BRGH         equ	412	;# 
  1819     019C                     SPBRGH          equ	412	;# 
  1820     019D                     RCSTA           equ	413	;# 
  1821     019E                     TXSTA           equ	414	;# 
  1822     019F                     BAUDCON         equ	415	;# 
  1823     020C                     WPUA            equ	524	;# 
  1824     020D                     WPUB            equ	525	;# 
  1825     0211                     SSP1BUF         equ	529	;# 
  1826     0211                     SSPBUF          equ	529	;# 
  1827     0212                     SSP1ADD         equ	530	;# 
  1828     0212                     SSPADD          equ	530	;# 
  1829     0213                     SSP1MSK         equ	531	;# 
  1830     0213                     SSPMSK          equ	531	;# 
  1831     0214                     SSP1STAT        equ	532	;# 
  1832     0214                     SSPSTAT         equ	532	;# 
  1833     0215                     SSP1CON1        equ	533	;# 
  1834     0215                     SSPCON1         equ	533	;# 
  1835     0215                     SSPCON          equ	533	;# 
  1836     0216                     SSP1CON2        equ	534	;# 
  1837     0216                     SSPCON2         equ	534	;# 
  1838     0217                     SSP1CON3        equ	535	;# 
  1839     0217                     SSPCON3         equ	535	;# 
  1840     0219                     SSP2BUF         equ	537	;# 
  1841     021A                     SSP2ADD         equ	538	;# 
  1842     021B                     SSP2MSK         equ	539	;# 
  1843     021C                     SSP2STAT        equ	540	;# 
  1844     021D                     SSP2CON1        equ	541	;# 
  1845     021E                     SSP2CON2        equ	542	;# 
  1846     021F                     SSP2CON3        equ	543	;# 
  1847     0291                     CCPR1           equ	657	;# 
  1848     0291                     CCPR1L          equ	657	;# 
  1849     0292                     CCPR1H          equ	658	;# 
  1850     0293                     CCP1CON         equ	659	;# 
  1851     0294                     PWM1CON         equ	660	;# 
  1852     0295                     CCP1AS          equ	661	;# 
  1853     0295                     ECCP1AS         equ	661	;# 
  1854     0296                     PSTR1CON        equ	662	;# 
  1855     0298                     CCPR2           equ	664	;# 
  1856     0298                     CCPR2L          equ	664	;# 
  1857     0299                     CCPR2H          equ	665	;# 
  1858     029A                     CCP2CON         equ	666	;# 
  1859     029B                     PWM2CON         equ	667	;# 
  1860     029C                     CCP2AS          equ	668	;# 
  1861     029C                     ECCP2AS         equ	668	;# 
  1862     029D                     PSTR2CON        equ	669	;# 
  1863     029E                     CCPTMRS         equ	670	;# 
  1864     029E                     CCPTMRS0        equ	670	;# 
  1865     0311                     CCPR3           equ	785	;# 
  1866     0311                     CCPR3L          equ	785	;# 
  1867     0312                     CCPR3H          equ	786	;# 
  1868     0313                     CCP3CON         equ	787	;# 
  1869     0318                     CCPR4           equ	792	;# 
  1870     0318                     CCPR4L          equ	792	;# 
  1871     0319                     CCPR4H          equ	793	;# 
  1872     031A                     CCP4CON         equ	794	;# 
  1873     0394                     IOCBP           equ	916	;# 
  1874     0395                     IOCBN           equ	917	;# 
  1875     0396                     IOCBF           equ	918	;# 
  1876     039A                     CLKRCON         equ	922	;# 
  1877     039C                     MDCON           equ	924	;# 
  1878     039D                     MDSRC           equ	925	;# 
  1879     039E                     MDCARL          equ	926	;# 
  1880     039F                     MDCARH          equ	927	;# 
  1881     0415                     TMR4            equ	1045	;# 
  1882     0416                     PR4             equ	1046	;# 
  1883     0417                     T4CON           equ	1047	;# 
  1884     041C                     TMR6            equ	1052	;# 
  1885     041D                     PR6             equ	1053	;# 
  1886     041E                     T6CON           equ	1054	;# 
  1887     0FE4                     STATUS_SHAD     equ	4068	;# 
  1888     0FE5                     WREG_SHAD       equ	4069	;# 
  1889     0FE6                     BSR_SHAD        equ	4070	;# 
  1890     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1891     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1892     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1893     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1894     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1895     0FED                     STKPTR          equ	4077	;# 
  1896     0FEE                     TOSL            equ	4078	;# 
  1897     0FEF                     TOSH            equ	4079	;# 
  1898     0000                     INDF0           equ	0	;# 
  1899     0001                     INDF1           equ	1	;# 
  1900     0002                     PCL             equ	2	;# 
  1901     0003                     STATUS          equ	3	;# 
  1902     0004                     FSR0L           equ	4	;# 
  1903     0005                     FSR0H           equ	5	;# 
  1904     0006                     FSR1L           equ	6	;# 
  1905     0007                     FSR1H           equ	7	;# 
  1906     0008                     BSR             equ	8	;# 
  1907     0009                     WREG            equ	9	;# 
  1908     000A                     PCLATH          equ	10	;# 
  1909     000B                     INTCON          equ	11	;# 
  1910     000C                     PORTA           equ	12	;# 
  1911     000D                     PORTB           equ	13	;# 
  1912     0011                     PIR1            equ	17	;# 
  1913     0012                     PIR2            equ	18	;# 
  1914     0013                     PIR3            equ	19	;# 
  1915     0014                     PIR4            equ	20	;# 
  1916     0015                     TMR0            equ	21	;# 
  1917     0016                     TMR1            equ	22	;# 
  1918     0016                     TMR1L           equ	22	;# 
  1919     0017                     TMR1H           equ	23	;# 
  1920     0018                     T1CON           equ	24	;# 
  1921     0019                     T1GCON          equ	25	;# 
  1922     001A                     TMR2            equ	26	;# 
  1923     001B                     PR2             equ	27	;# 
  1924     001C                     T2CON           equ	28	;# 
  1925     001E                     CPSCON0         equ	30	;# 
  1926     001F                     CPSCON1         equ	31	;# 
  1927     008C                     TRISA           equ	140	;# 
  1928     008D                     TRISB           equ	141	;# 
  1929     0091                     PIE1            equ	145	;# 
  1930     0092                     PIE2            equ	146	;# 
  1931     0093                     PIE3            equ	147	;# 
  1932     0094                     PIE4            equ	148	;# 
  1933     0095                     OPTION_REG      equ	149	;# 
  1934     0096                     PCON            equ	150	;# 
  1935     0097                     WDTCON          equ	151	;# 
  1936     0098                     OSCTUNE         equ	152	;# 
  1937     0099                     OSCCON          equ	153	;# 
  1938     009A                     OSCSTAT         equ	154	;# 
  1939     009B                     ADRES           equ	155	;# 
  1940     009B                     ADRESL          equ	155	;# 
  1941     009C                     ADRESH          equ	156	;# 
  1942     009D                     ADCON0          equ	157	;# 
  1943     009E                     ADCON1          equ	158	;# 
  1944     010C                     LATA            equ	268	;# 
  1945     010D                     LATB            equ	269	;# 
  1946     0111                     CM1CON0         equ	273	;# 
  1947     0112                     CM1CON1         equ	274	;# 
  1948     0113                     CM2CON0         equ	275	;# 
  1949     0114                     CM2CON1         equ	276	;# 
  1950     0115                     CMOUT           equ	277	;# 
  1951     0116                     BORCON          equ	278	;# 
  1952     0117                     FVRCON          equ	279	;# 
  1953     0118                     DACCON0         equ	280	;# 
  1954     0119                     DACCON1         equ	281	;# 
  1955     011A                     SRCON0          equ	282	;# 
  1956     011B                     SRCON1          equ	283	;# 
  1957     011D                     APFCON0         equ	285	;# 
  1958     011E                     APFCON1         equ	286	;# 
  1959     018C                     ANSELA          equ	396	;# 
  1960     018D                     ANSELB          equ	397	;# 
  1961     0191                     EEADR           equ	401	;# 
  1962     0191                     EEADRL          equ	401	;# 
  1963     0192                     EEADRH          equ	402	;# 
  1964     0193                     EEDAT           equ	403	;# 
  1965     0193                     EEDATL          equ	403	;# 
  1966     0193                     EEDATA          equ	403	;# 
  1967     0194                     EEDATH          equ	404	;# 
  1968     0195                     EECON1          equ	405	;# 
  1969     0196                     EECON2          equ	406	;# 
  1970     0199                     RCREG           equ	409	;# 
  1971     019A                     TXREG           equ	410	;# 
  1972     019B                     SP1BRG          equ	411	;# 
  1973     019B                     SP1BRGL         equ	411	;# 
  1974     019B                     SPBRG           equ	411	;# 
  1975     019B                     SPBRGL          equ	411	;# 
  1976     019C                     SP1BRGH         equ	412	;# 
  1977     019C                     SPBRGH          equ	412	;# 
  1978     019D                     RCSTA           equ	413	;# 
  1979     019E                     TXSTA           equ	414	;# 
  1980     019F                     BAUDCON         equ	415	;# 
  1981     020C                     WPUA            equ	524	;# 
  1982     020D                     WPUB            equ	525	;# 
  1983     0211                     SSP1BUF         equ	529	;# 
  1984     0211                     SSPBUF          equ	529	;# 
  1985     0212                     SSP1ADD         equ	530	;# 
  1986     0212                     SSPADD          equ	530	;# 
  1987     0213                     SSP1MSK         equ	531	;# 
  1988     0213                     SSPMSK          equ	531	;# 
  1989     0214                     SSP1STAT        equ	532	;# 
  1990     0214                     SSPSTAT         equ	532	;# 
  1991     0215                     SSP1CON1        equ	533	;# 
  1992     0215                     SSPCON1         equ	533	;# 
  1993     0215                     SSPCON          equ	533	;# 
  1994     0216                     SSP1CON2        equ	534	;# 
  1995     0216                     SSPCON2         equ	534	;# 
  1996     0217                     SSP1CON3        equ	535	;# 
  1997     0217                     SSPCON3         equ	535	;# 
  1998     0219                     SSP2BUF         equ	537	;# 
  1999     021A                     SSP2ADD         equ	538	;# 
  2000     021B                     SSP2MSK         equ	539	;# 
  2001     021C                     SSP2STAT        equ	540	;# 
  2002     021D                     SSP2CON1        equ	541	;# 
  2003     021E                     SSP2CON2        equ	542	;# 
  2004     021F                     SSP2CON3        equ	543	;# 
  2005     0291                     CCPR1           equ	657	;# 
  2006     0291                     CCPR1L          equ	657	;# 
  2007     0292                     CCPR1H          equ	658	;# 
  2008     0293                     CCP1CON         equ	659	;# 
  2009     0294                     PWM1CON         equ	660	;# 
  2010     0295                     CCP1AS          equ	661	;# 
  2011     0295                     ECCP1AS         equ	661	;# 
  2012     0296                     PSTR1CON        equ	662	;# 
  2013     0298                     CCPR2           equ	664	;# 
  2014     0298                     CCPR2L          equ	664	;# 
  2015     0299                     CCPR2H          equ	665	;# 
  2016     029A                     CCP2CON         equ	666	;# 
  2017     029B                     PWM2CON         equ	667	;# 
  2018     029C                     CCP2AS          equ	668	;# 
  2019     029C                     ECCP2AS         equ	668	;# 
  2020     029D                     PSTR2CON        equ	669	;# 
  2021     029E                     CCPTMRS         equ	670	;# 
  2022     029E                     CCPTMRS0        equ	670	;# 
  2023     0311                     CCPR3           equ	785	;# 
  2024     0311                     CCPR3L          equ	785	;# 
  2025     0312                     CCPR3H          equ	786	;# 
  2026     0313                     CCP3CON         equ	787	;# 
  2027     0318                     CCPR4           equ	792	;# 
  2028     0318                     CCPR4L          equ	792	;# 
  2029     0319                     CCPR4H          equ	793	;# 
  2030     031A                     CCP4CON         equ	794	;# 
  2031     0394                     IOCBP           equ	916	;# 
  2032     0395                     IOCBN           equ	917	;# 
  2033     0396                     IOCBF           equ	918	;# 
  2034     039A                     CLKRCON         equ	922	;# 
  2035     039C                     MDCON           equ	924	;# 
  2036     039D                     MDSRC           equ	925	;# 
  2037     039E                     MDCARL          equ	926	;# 
  2038     039F                     MDCARH          equ	927	;# 
  2039     0415                     TMR4            equ	1045	;# 
  2040     0416                     PR4             equ	1046	;# 
  2041     0417                     T4CON           equ	1047	;# 
  2042     041C                     TMR6            equ	1052	;# 
  2043     041D                     PR6             equ	1053	;# 
  2044     041E                     T6CON           equ	1054	;# 
  2045     0FE4                     STATUS_SHAD     equ	4068	;# 
  2046     0FE5                     WREG_SHAD       equ	4069	;# 
  2047     0FE6                     BSR_SHAD        equ	4070	;# 
  2048     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2049     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2050     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2051     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2052     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2053     0FED                     STKPTR          equ	4077	;# 
  2054     0FEE                     TOSL            equ	4078	;# 
  2055     0FEF                     TOSH            equ	4079	;# 
  2056     0000                     INDF0           equ	0	;# 
  2057     0001                     INDF1           equ	1	;# 
  2058     0002                     PCL             equ	2	;# 
  2059     0003                     STATUS          equ	3	;# 
  2060     0004                     FSR0L           equ	4	;# 
  2061     0005                     FSR0H           equ	5	;# 
  2062     0006                     FSR1L           equ	6	;# 
  2063     0007                     FSR1H           equ	7	;# 
  2064     0008                     BSR             equ	8	;# 
  2065     0009                     WREG            equ	9	;# 
  2066     000A                     PCLATH          equ	10	;# 
  2067     000B                     INTCON          equ	11	;# 
  2068     000C                     PORTA           equ	12	;# 
  2069     000D                     PORTB           equ	13	;# 
  2070     0011                     PIR1            equ	17	;# 
  2071     0012                     PIR2            equ	18	;# 
  2072     0013                     PIR3            equ	19	;# 
  2073     0014                     PIR4            equ	20	;# 
  2074     0015                     TMR0            equ	21	;# 
  2075     0016                     TMR1            equ	22	;# 
  2076     0016                     TMR1L           equ	22	;# 
  2077     0017                     TMR1H           equ	23	;# 
  2078     0018                     T1CON           equ	24	;# 
  2079     0019                     T1GCON          equ	25	;# 
  2080     001A                     TMR2            equ	26	;# 
  2081     001B                     PR2             equ	27	;# 
  2082     001C                     T2CON           equ	28	;# 
  2083     001E                     CPSCON0         equ	30	;# 
  2084     001F                     CPSCON1         equ	31	;# 
  2085     008C                     TRISA           equ	140	;# 
  2086     008D                     TRISB           equ	141	;# 
  2087     0091                     PIE1            equ	145	;# 
  2088     0092                     PIE2            equ	146	;# 
  2089     0093                     PIE3            equ	147	;# 
  2090     0094                     PIE4            equ	148	;# 
  2091     0095                     OPTION_REG      equ	149	;# 
  2092     0096                     PCON            equ	150	;# 
  2093     0097                     WDTCON          equ	151	;# 
  2094     0098                     OSCTUNE         equ	152	;# 
  2095     0099                     OSCCON          equ	153	;# 
  2096     009A                     OSCSTAT         equ	154	;# 
  2097     009B                     ADRES           equ	155	;# 
  2098     009B                     ADRESL          equ	155	;# 
  2099     009C                     ADRESH          equ	156	;# 
  2100     009D                     ADCON0          equ	157	;# 
  2101     009E                     ADCON1          equ	158	;# 
  2102     010C                     LATA            equ	268	;# 
  2103     010D                     LATB            equ	269	;# 
  2104     0111                     CM1CON0         equ	273	;# 
  2105     0112                     CM1CON1         equ	274	;# 
  2106     0113                     CM2CON0         equ	275	;# 
  2107     0114                     CM2CON1         equ	276	;# 
  2108     0115                     CMOUT           equ	277	;# 
  2109     0116                     BORCON          equ	278	;# 
  2110     0117                     FVRCON          equ	279	;# 
  2111     0118                     DACCON0         equ	280	;# 
  2112     0119                     DACCON1         equ	281	;# 
  2113     011A                     SRCON0          equ	282	;# 
  2114     011B                     SRCON1          equ	283	;# 
  2115     011D                     APFCON0         equ	285	;# 
  2116     011E                     APFCON1         equ	286	;# 
  2117     018C                     ANSELA          equ	396	;# 
  2118     018D                     ANSELB          equ	397	;# 
  2119     0191                     EEADR           equ	401	;# 
  2120     0191                     EEADRL          equ	401	;# 
  2121     0192                     EEADRH          equ	402	;# 
  2122     0193                     EEDAT           equ	403	;# 
  2123     0193                     EEDATL          equ	403	;# 
  2124     0193                     EEDATA          equ	403	;# 
  2125     0194                     EEDATH          equ	404	;# 
  2126     0195                     EECON1          equ	405	;# 
  2127     0196                     EECON2          equ	406	;# 
  2128     0199                     RCREG           equ	409	;# 
  2129     019A                     TXREG           equ	410	;# 
  2130     019B                     SP1BRG          equ	411	;# 
  2131     019B                     SP1BRGL         equ	411	;# 
  2132     019B                     SPBRG           equ	411	;# 
  2133     019B                     SPBRGL          equ	411	;# 
  2134     019C                     SP1BRGH         equ	412	;# 
  2135     019C                     SPBRGH          equ	412	;# 
  2136     019D                     RCSTA           equ	413	;# 
  2137     019E                     TXSTA           equ	414	;# 
  2138     019F                     BAUDCON         equ	415	;# 
  2139     020C                     WPUA            equ	524	;# 
  2140     020D                     WPUB            equ	525	;# 
  2141     0211                     SSP1BUF         equ	529	;# 
  2142     0211                     SSPBUF          equ	529	;# 
  2143     0212                     SSP1ADD         equ	530	;# 
  2144     0212                     SSPADD          equ	530	;# 
  2145     0213                     SSP1MSK         equ	531	;# 
  2146     0213                     SSPMSK          equ	531	;# 
  2147     0214                     SSP1STAT        equ	532	;# 
  2148     0214                     SSPSTAT         equ	532	;# 
  2149     0215                     SSP1CON1        equ	533	;# 
  2150     0215                     SSPCON1         equ	533	;# 
  2151     0215                     SSPCON          equ	533	;# 
  2152     0216                     SSP1CON2        equ	534	;# 
  2153     0216                     SSPCON2         equ	534	;# 
  2154     0217                     SSP1CON3        equ	535	;# 
  2155     0217                     SSPCON3         equ	535	;# 
  2156     0219                     SSP2BUF         equ	537	;# 
  2157     021A                     SSP2ADD         equ	538	;# 
  2158     021B                     SSP2MSK         equ	539	;# 
  2159     021C                     SSP2STAT        equ	540	;# 
  2160     021D                     SSP2CON1        equ	541	;# 
  2161     021E                     SSP2CON2        equ	542	;# 
  2162     021F                     SSP2CON3        equ	543	;# 
  2163     0291                     CCPR1           equ	657	;# 
  2164     0291                     CCPR1L          equ	657	;# 
  2165     0292                     CCPR1H          equ	658	;# 
  2166     0293                     CCP1CON         equ	659	;# 
  2167     0294                     PWM1CON         equ	660	;# 
  2168     0295                     CCP1AS          equ	661	;# 
  2169     0295                     ECCP1AS         equ	661	;# 
  2170     0296                     PSTR1CON        equ	662	;# 
  2171     0298                     CCPR2           equ	664	;# 
  2172     0298                     CCPR2L          equ	664	;# 
  2173     0299                     CCPR2H          equ	665	;# 
  2174     029A                     CCP2CON         equ	666	;# 
  2175     029B                     PWM2CON         equ	667	;# 
  2176     029C                     CCP2AS          equ	668	;# 
  2177     029C                     ECCP2AS         equ	668	;# 
  2178     029D                     PSTR2CON        equ	669	;# 
  2179     029E                     CCPTMRS         equ	670	;# 
  2180     029E                     CCPTMRS0        equ	670	;# 
  2181     0311                     CCPR3           equ	785	;# 
  2182     0311                     CCPR3L          equ	785	;# 
  2183     0312                     CCPR3H          equ	786	;# 
  2184     0313                     CCP3CON         equ	787	;# 
  2185     0318                     CCPR4           equ	792	;# 
  2186     0318                     CCPR4L          equ	792	;# 
  2187     0319                     CCPR4H          equ	793	;# 
  2188     031A                     CCP4CON         equ	794	;# 
  2189     0394                     IOCBP           equ	916	;# 
  2190     0395                     IOCBN           equ	917	;# 
  2191     0396                     IOCBF           equ	918	;# 
  2192     039A                     CLKRCON         equ	922	;# 
  2193     039C                     MDCON           equ	924	;# 
  2194     039D                     MDSRC           equ	925	;# 
  2195     039E                     MDCARL          equ	926	;# 
  2196     039F                     MDCARH          equ	927	;# 
  2197     0415                     TMR4            equ	1045	;# 
  2198     0416                     PR4             equ	1046	;# 
  2199     0417                     T4CON           equ	1047	;# 
  2200     041C                     TMR6            equ	1052	;# 
  2201     041D                     PR6             equ	1053	;# 
  2202     041E                     T6CON           equ	1054	;# 
  2203     0FE4                     STATUS_SHAD     equ	4068	;# 
  2204     0FE5                     WREG_SHAD       equ	4069	;# 
  2205     0FE6                     BSR_SHAD        equ	4070	;# 
  2206     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2207     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2208     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2209     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2210     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2211     0FED                     STKPTR          equ	4077	;# 
  2212     0FEE                     TOSL            equ	4078	;# 
  2213     0FEF                     TOSH            equ	4079	;# 
  2214     0000                     INDF0           equ	0	;# 
  2215     0001                     INDF1           equ	1	;# 
  2216     0002                     PCL             equ	2	;# 
  2217     0003                     STATUS          equ	3	;# 
  2218     0004                     FSR0L           equ	4	;# 
  2219     0005                     FSR0H           equ	5	;# 
  2220     0006                     FSR1L           equ	6	;# 
  2221     0007                     FSR1H           equ	7	;# 
  2222     0008                     BSR             equ	8	;# 
  2223     0009                     WREG            equ	9	;# 
  2224     000A                     PCLATH          equ	10	;# 
  2225     000B                     INTCON          equ	11	;# 
  2226     000C                     PORTA           equ	12	;# 
  2227     000D                     PORTB           equ	13	;# 
  2228     0011                     PIR1            equ	17	;# 
  2229     0012                     PIR2            equ	18	;# 
  2230     0013                     PIR3            equ	19	;# 
  2231     0014                     PIR4            equ	20	;# 
  2232     0015                     TMR0            equ	21	;# 
  2233     0016                     TMR1            equ	22	;# 
  2234     0016                     TMR1L           equ	22	;# 
  2235     0017                     TMR1H           equ	23	;# 
  2236     0018                     T1CON           equ	24	;# 
  2237     0019                     T1GCON          equ	25	;# 
  2238     001A                     TMR2            equ	26	;# 
  2239     001B                     PR2             equ	27	;# 
  2240     001C                     T2CON           equ	28	;# 
  2241     001E                     CPSCON0         equ	30	;# 
  2242     001F                     CPSCON1         equ	31	;# 
  2243     008C                     TRISA           equ	140	;# 
  2244     008D                     TRISB           equ	141	;# 
  2245     0091                     PIE1            equ	145	;# 
  2246     0092                     PIE2            equ	146	;# 
  2247     0093                     PIE3            equ	147	;# 
  2248     0094                     PIE4            equ	148	;# 
  2249     0095                     OPTION_REG      equ	149	;# 
  2250     0096                     PCON            equ	150	;# 
  2251     0097                     WDTCON          equ	151	;# 
  2252     0098                     OSCTUNE         equ	152	;# 
  2253     0099                     OSCCON          equ	153	;# 
  2254     009A                     OSCSTAT         equ	154	;# 
  2255     009B                     ADRES           equ	155	;# 
  2256     009B                     ADRESL          equ	155	;# 
  2257     009C                     ADRESH          equ	156	;# 
  2258     009D                     ADCON0          equ	157	;# 
  2259     009E                     ADCON1          equ	158	;# 
  2260     010C                     LATA            equ	268	;# 
  2261     010D                     LATB            equ	269	;# 
  2262     0111                     CM1CON0         equ	273	;# 
  2263     0112                     CM1CON1         equ	274	;# 
  2264     0113                     CM2CON0         equ	275	;# 
  2265     0114                     CM2CON1         equ	276	;# 
  2266     0115                     CMOUT           equ	277	;# 
  2267     0116                     BORCON          equ	278	;# 
  2268     0117                     FVRCON          equ	279	;# 
  2269     0118                     DACCON0         equ	280	;# 
  2270     0119                     DACCON1         equ	281	;# 
  2271     011A                     SRCON0          equ	282	;# 
  2272     011B                     SRCON1          equ	283	;# 
  2273     011D                     APFCON0         equ	285	;# 
  2274     011E                     APFCON1         equ	286	;# 
  2275     018C                     ANSELA          equ	396	;# 
  2276     018D                     ANSELB          equ	397	;# 
  2277     0191                     EEADR           equ	401	;# 
  2278     0191                     EEADRL          equ	401	;# 
  2279     0192                     EEADRH          equ	402	;# 
  2280     0193                     EEDAT           equ	403	;# 
  2281     0193                     EEDATL          equ	403	;# 
  2282     0193                     EEDATA          equ	403	;# 
  2283     0194                     EEDATH          equ	404	;# 
  2284     0195                     EECON1          equ	405	;# 
  2285     0196                     EECON2          equ	406	;# 
  2286     0199                     RCREG           equ	409	;# 
  2287     019A                     TXREG           equ	410	;# 
  2288     019B                     SP1BRG          equ	411	;# 
  2289     019B                     SP1BRGL         equ	411	;# 
  2290     019B                     SPBRG           equ	411	;# 
  2291     019B                     SPBRGL          equ	411	;# 
  2292     019C                     SP1BRGH         equ	412	;# 
  2293     019C                     SPBRGH          equ	412	;# 
  2294     019D                     RCSTA           equ	413	;# 
  2295     019E                     TXSTA           equ	414	;# 
  2296     019F                     BAUDCON         equ	415	;# 
  2297     020C                     WPUA            equ	524	;# 
  2298     020D                     WPUB            equ	525	;# 
  2299     0211                     SSP1BUF         equ	529	;# 
  2300     0211                     SSPBUF          equ	529	;# 
  2301     0212                     SSP1ADD         equ	530	;# 
  2302     0212                     SSPADD          equ	530	;# 
  2303     0213                     SSP1MSK         equ	531	;# 
  2304     0213                     SSPMSK          equ	531	;# 
  2305     0214                     SSP1STAT        equ	532	;# 
  2306     0214                     SSPSTAT         equ	532	;# 
  2307     0215                     SSP1CON1        equ	533	;# 
  2308     0215                     SSPCON1         equ	533	;# 
  2309     0215                     SSPCON          equ	533	;# 
  2310     0216                     SSP1CON2        equ	534	;# 
  2311     0216                     SSPCON2         equ	534	;# 
  2312     0217                     SSP1CON3        equ	535	;# 
  2313     0217                     SSPCON3         equ	535	;# 
  2314     0219                     SSP2BUF         equ	537	;# 
  2315     021A                     SSP2ADD         equ	538	;# 
  2316     021B                     SSP2MSK         equ	539	;# 
  2317     021C                     SSP2STAT        equ	540	;# 
  2318     021D                     SSP2CON1        equ	541	;# 
  2319     021E                     SSP2CON2        equ	542	;# 
  2320     021F                     SSP2CON3        equ	543	;# 
  2321     0291                     CCPR1           equ	657	;# 
  2322     0291                     CCPR1L          equ	657	;# 
  2323     0292                     CCPR1H          equ	658	;# 
  2324     0293                     CCP1CON         equ	659	;# 
  2325     0294                     PWM1CON         equ	660	;# 
  2326     0295                     CCP1AS          equ	661	;# 
  2327     0295                     ECCP1AS         equ	661	;# 
  2328     0296                     PSTR1CON        equ	662	;# 
  2329     0298                     CCPR2           equ	664	;# 
  2330     0298                     CCPR2L          equ	664	;# 
  2331     0299                     CCPR2H          equ	665	;# 
  2332     029A                     CCP2CON         equ	666	;# 
  2333     029B                     PWM2CON         equ	667	;# 
  2334     029C                     CCP2AS          equ	668	;# 
  2335     029C                     ECCP2AS         equ	668	;# 
  2336     029D                     PSTR2CON        equ	669	;# 
  2337     029E                     CCPTMRS         equ	670	;# 
  2338     029E                     CCPTMRS0        equ	670	;# 
  2339     0311                     CCPR3           equ	785	;# 
  2340     0311                     CCPR3L          equ	785	;# 
  2341     0312                     CCPR3H          equ	786	;# 
  2342     0313                     CCP3CON         equ	787	;# 
  2343     0318                     CCPR4           equ	792	;# 
  2344     0318                     CCPR4L          equ	792	;# 
  2345     0319                     CCPR4H          equ	793	;# 
  2346     031A                     CCP4CON         equ	794	;# 
  2347     0394                     IOCBP           equ	916	;# 
  2348     0395                     IOCBN           equ	917	;# 
  2349     0396                     IOCBF           equ	918	;# 
  2350     039A                     CLKRCON         equ	922	;# 
  2351     039C                     MDCON           equ	924	;# 
  2352     039D                     MDSRC           equ	925	;# 
  2353     039E                     MDCARL          equ	926	;# 
  2354     039F                     MDCARH          equ	927	;# 
  2355     0415                     TMR4            equ	1045	;# 
  2356     0416                     PR4             equ	1046	;# 
  2357     0417                     T4CON           equ	1047	;# 
  2358     041C                     TMR6            equ	1052	;# 
  2359     041D                     PR6             equ	1053	;# 
  2360     041E                     T6CON           equ	1054	;# 
  2361     0FE4                     STATUS_SHAD     equ	4068	;# 
  2362     0FE5                     WREG_SHAD       equ	4069	;# 
  2363     0FE6                     BSR_SHAD        equ	4070	;# 
  2364     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2365     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2366     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2367     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2368     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2369     0FED                     STKPTR          equ	4077	;# 
  2370     0FEE                     TOSL            equ	4078	;# 
  2371     0FEF                     TOSH            equ	4079	;# 
  2372     0000                     INDF0           equ	0	;# 
  2373     0001                     INDF1           equ	1	;# 
  2374     0002                     PCL             equ	2	;# 
  2375     0003                     STATUS          equ	3	;# 
  2376     0004                     FSR0L           equ	4	;# 
  2377     0005                     FSR0H           equ	5	;# 
  2378     0006                     FSR1L           equ	6	;# 
  2379     0007                     FSR1H           equ	7	;# 
  2380     0008                     BSR             equ	8	;# 
  2381     0009                     WREG            equ	9	;# 
  2382     000A                     PCLATH          equ	10	;# 
  2383     000B                     INTCON          equ	11	;# 
  2384     000C                     PORTA           equ	12	;# 
  2385     000D                     PORTB           equ	13	;# 
  2386     0011                     PIR1            equ	17	;# 
  2387     0012                     PIR2            equ	18	;# 
  2388     0013                     PIR3            equ	19	;# 
  2389     0014                     PIR4            equ	20	;# 
  2390     0015                     TMR0            equ	21	;# 
  2391     0016                     TMR1            equ	22	;# 
  2392     0016                     TMR1L           equ	22	;# 
  2393     0017                     TMR1H           equ	23	;# 
  2394     0018                     T1CON           equ	24	;# 
  2395     0019                     T1GCON          equ	25	;# 
  2396     001A                     TMR2            equ	26	;# 
  2397     001B                     PR2             equ	27	;# 
  2398     001C                     T2CON           equ	28	;# 
  2399     001E                     CPSCON0         equ	30	;# 
  2400     001F                     CPSCON1         equ	31	;# 
  2401     008C                     TRISA           equ	140	;# 
  2402     008D                     TRISB           equ	141	;# 
  2403     0091                     PIE1            equ	145	;# 
  2404     0092                     PIE2            equ	146	;# 
  2405     0093                     PIE3            equ	147	;# 
  2406     0094                     PIE4            equ	148	;# 
  2407     0095                     OPTION_REG      equ	149	;# 
  2408     0096                     PCON            equ	150	;# 
  2409     0097                     WDTCON          equ	151	;# 
  2410     0098                     OSCTUNE         equ	152	;# 
  2411     0099                     OSCCON          equ	153	;# 
  2412     009A                     OSCSTAT         equ	154	;# 
  2413     009B                     ADRES           equ	155	;# 
  2414     009B                     ADRESL          equ	155	;# 
  2415     009C                     ADRESH          equ	156	;# 
  2416     009D                     ADCON0          equ	157	;# 
  2417     009E                     ADCON1          equ	158	;# 
  2418     010C                     LATA            equ	268	;# 
  2419     010D                     LATB            equ	269	;# 
  2420     0111                     CM1CON0         equ	273	;# 
  2421     0112                     CM1CON1         equ	274	;# 
  2422     0113                     CM2CON0         equ	275	;# 
  2423     0114                     CM2CON1         equ	276	;# 
  2424     0115                     CMOUT           equ	277	;# 
  2425     0116                     BORCON          equ	278	;# 
  2426     0117                     FVRCON          equ	279	;# 
  2427     0118                     DACCON0         equ	280	;# 
  2428     0119                     DACCON1         equ	281	;# 
  2429     011A                     SRCON0          equ	282	;# 
  2430     011B                     SRCON1          equ	283	;# 
  2431     011D                     APFCON0         equ	285	;# 
  2432     011E                     APFCON1         equ	286	;# 
  2433     018C                     ANSELA          equ	396	;# 
  2434     018D                     ANSELB          equ	397	;# 
  2435     0191                     EEADR           equ	401	;# 
  2436     0191                     EEADRL          equ	401	;# 
  2437     0192                     EEADRH          equ	402	;# 
  2438     0193                     EEDAT           equ	403	;# 
  2439     0193                     EEDATL          equ	403	;# 
  2440     0193                     EEDATA          equ	403	;# 
  2441     0194                     EEDATH          equ	404	;# 
  2442     0195                     EECON1          equ	405	;# 
  2443     0196                     EECON2          equ	406	;# 
  2444     0199                     RCREG           equ	409	;# 
  2445     019A                     TXREG           equ	410	;# 
  2446     019B                     SP1BRG          equ	411	;# 
  2447     019B                     SP1BRGL         equ	411	;# 
  2448     019B                     SPBRG           equ	411	;# 
  2449     019B                     SPBRGL          equ	411	;# 
  2450     019C                     SP1BRGH         equ	412	;# 
  2451     019C                     SPBRGH          equ	412	;# 
  2452     019D                     RCSTA           equ	413	;# 
  2453     019E                     TXSTA           equ	414	;# 
  2454     019F                     BAUDCON         equ	415	;# 
  2455     020C                     WPUA            equ	524	;# 
  2456     020D                     WPUB            equ	525	;# 
  2457     0211                     SSP1BUF         equ	529	;# 
  2458     0211                     SSPBUF          equ	529	;# 
  2459     0212                     SSP1ADD         equ	530	;# 
  2460     0212                     SSPADD          equ	530	;# 
  2461     0213                     SSP1MSK         equ	531	;# 
  2462     0213                     SSPMSK          equ	531	;# 
  2463     0214                     SSP1STAT        equ	532	;# 
  2464     0214                     SSPSTAT         equ	532	;# 
  2465     0215                     SSP1CON1        equ	533	;# 
  2466     0215                     SSPCON1         equ	533	;# 
  2467     0215                     SSPCON          equ	533	;# 
  2468     0216                     SSP1CON2        equ	534	;# 
  2469     0216                     SSPCON2         equ	534	;# 
  2470     0217                     SSP1CON3        equ	535	;# 
  2471     0217                     SSPCON3         equ	535	;# 
  2472     0219                     SSP2BUF         equ	537	;# 
  2473     021A                     SSP2ADD         equ	538	;# 
  2474     021B                     SSP2MSK         equ	539	;# 
  2475     021C                     SSP2STAT        equ	540	;# 
  2476     021D                     SSP2CON1        equ	541	;# 
  2477     021E                     SSP2CON2        equ	542	;# 
  2478     021F                     SSP2CON3        equ	543	;# 
  2479     0291                     CCPR1           equ	657	;# 
  2480     0291                     CCPR1L          equ	657	;# 
  2481     0292                     CCPR1H          equ	658	;# 
  2482     0293                     CCP1CON         equ	659	;# 
  2483     0294                     PWM1CON         equ	660	;# 
  2484     0295                     CCP1AS          equ	661	;# 
  2485     0295                     ECCP1AS         equ	661	;# 
  2486     0296                     PSTR1CON        equ	662	;# 
  2487     0298                     CCPR2           equ	664	;# 
  2488     0298                     CCPR2L          equ	664	;# 
  2489     0299                     CCPR2H          equ	665	;# 
  2490     029A                     CCP2CON         equ	666	;# 
  2491     029B                     PWM2CON         equ	667	;# 
  2492     029C                     CCP2AS          equ	668	;# 
  2493     029C                     ECCP2AS         equ	668	;# 
  2494     029D                     PSTR2CON        equ	669	;# 
  2495     029E                     CCPTMRS         equ	670	;# 
  2496     029E                     CCPTMRS0        equ	670	;# 
  2497     0311                     CCPR3           equ	785	;# 
  2498     0311                     CCPR3L          equ	785	;# 
  2499     0312                     CCPR3H          equ	786	;# 
  2500     0313                     CCP3CON         equ	787	;# 
  2501     0318                     CCPR4           equ	792	;# 
  2502     0318                     CCPR4L          equ	792	;# 
  2503     0319                     CCPR4H          equ	793	;# 
  2504     031A                     CCP4CON         equ	794	;# 
  2505     0394                     IOCBP           equ	916	;# 
  2506     0395                     IOCBN           equ	917	;# 
  2507     0396                     IOCBF           equ	918	;# 
  2508     039A                     CLKRCON         equ	922	;# 
  2509     039C                     MDCON           equ	924	;# 
  2510     039D                     MDSRC           equ	925	;# 
  2511     039E                     MDCARL          equ	926	;# 
  2512     039F                     MDCARH          equ	927	;# 
  2513     0415                     TMR4            equ	1045	;# 
  2514     0416                     PR4             equ	1046	;# 
  2515     0417                     T4CON           equ	1047	;# 
  2516     041C                     TMR6            equ	1052	;# 
  2517     041D                     PR6             equ	1053	;# 
  2518     041E                     T6CON           equ	1054	;# 
  2519     0FE4                     STATUS_SHAD     equ	4068	;# 
  2520     0FE5                     WREG_SHAD       equ	4069	;# 
  2521     0FE6                     BSR_SHAD        equ	4070	;# 
  2522     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2523     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2524     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2525     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2526     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2527     0FED                     STKPTR          equ	4077	;# 
  2528     0FEE                     TOSL            equ	4078	;# 
  2529     0FEF                     TOSH            equ	4079	;# 
  2530     0000                     INDF0           equ	0	;# 
  2531     0001                     INDF1           equ	1	;# 
  2532     0002                     PCL             equ	2	;# 
  2533     0003                     STATUS          equ	3	;# 
  2534     0004                     FSR0L           equ	4	;# 
  2535     0005                     FSR0H           equ	5	;# 
  2536     0006                     FSR1L           equ	6	;# 
  2537     0007                     FSR1H           equ	7	;# 
  2538     0008                     BSR             equ	8	;# 
  2539     0009                     WREG            equ	9	;# 
  2540     000A                     PCLATH          equ	10	;# 
  2541     000B                     INTCON          equ	11	;# 
  2542     000C                     PORTA           equ	12	;# 
  2543     000D                     PORTB           equ	13	;# 
  2544     0011                     PIR1            equ	17	;# 
  2545     0012                     PIR2            equ	18	;# 
  2546     0013                     PIR3            equ	19	;# 
  2547     0014                     PIR4            equ	20	;# 
  2548     0015                     TMR0            equ	21	;# 
  2549     0016                     TMR1            equ	22	;# 
  2550     0016                     TMR1L           equ	22	;# 
  2551     0017                     TMR1H           equ	23	;# 
  2552     0018                     T1CON           equ	24	;# 
  2553     0019                     T1GCON          equ	25	;# 
  2554     001A                     TMR2            equ	26	;# 
  2555     001B                     PR2             equ	27	;# 
  2556     001C                     T2CON           equ	28	;# 
  2557     001E                     CPSCON0         equ	30	;# 
  2558     001F                     CPSCON1         equ	31	;# 
  2559     008C                     TRISA           equ	140	;# 
  2560     008D                     TRISB           equ	141	;# 
  2561     0091                     PIE1            equ	145	;# 
  2562     0092                     PIE2            equ	146	;# 
  2563     0093                     PIE3            equ	147	;# 
  2564     0094                     PIE4            equ	148	;# 
  2565     0095                     OPTION_REG      equ	149	;# 
  2566     0096                     PCON            equ	150	;# 
  2567     0097                     WDTCON          equ	151	;# 
  2568     0098                     OSCTUNE         equ	152	;# 
  2569     0099                     OSCCON          equ	153	;# 
  2570     009A                     OSCSTAT         equ	154	;# 
  2571     009B                     ADRES           equ	155	;# 
  2572     009B                     ADRESL          equ	155	;# 
  2573     009C                     ADRESH          equ	156	;# 
  2574     009D                     ADCON0          equ	157	;# 
  2575     009E                     ADCON1          equ	158	;# 
  2576     010C                     LATA            equ	268	;# 
  2577     010D                     LATB            equ	269	;# 
  2578     0111                     CM1CON0         equ	273	;# 
  2579     0112                     CM1CON1         equ	274	;# 
  2580     0113                     CM2CON0         equ	275	;# 
  2581     0114                     CM2CON1         equ	276	;# 
  2582     0115                     CMOUT           equ	277	;# 
  2583     0116                     BORCON          equ	278	;# 
  2584     0117                     FVRCON          equ	279	;# 
  2585     0118                     DACCON0         equ	280	;# 
  2586     0119                     DACCON1         equ	281	;# 
  2587     011A                     SRCON0          equ	282	;# 
  2588     011B                     SRCON1          equ	283	;# 
  2589     011D                     APFCON0         equ	285	;# 
  2590     011E                     APFCON1         equ	286	;# 
  2591     018C                     ANSELA          equ	396	;# 
  2592     018D                     ANSELB          equ	397	;# 
  2593     0191                     EEADR           equ	401	;# 
  2594     0191                     EEADRL          equ	401	;# 
  2595     0192                     EEADRH          equ	402	;# 
  2596     0193                     EEDAT           equ	403	;# 
  2597     0193                     EEDATL          equ	403	;# 
  2598     0193                     EEDATA          equ	403	;# 
  2599     0194                     EEDATH          equ	404	;# 
  2600     0195                     EECON1          equ	405	;# 
  2601     0196                     EECON2          equ	406	;# 
  2602     0199                     RCREG           equ	409	;# 
  2603     019A                     TXREG           equ	410	;# 
  2604     019B                     SP1BRG          equ	411	;# 
  2605     019B                     SP1BRGL         equ	411	;# 
  2606     019B                     SPBRG           equ	411	;# 
  2607     019B                     SPBRGL          equ	411	;# 
  2608     019C                     SP1BRGH         equ	412	;# 
  2609     019C                     SPBRGH          equ	412	;# 
  2610     019D                     RCSTA           equ	413	;# 
  2611     019E                     TXSTA           equ	414	;# 
  2612     019F                     BAUDCON         equ	415	;# 
  2613     020C                     WPUA            equ	524	;# 
  2614     020D                     WPUB            equ	525	;# 
  2615     0211                     SSP1BUF         equ	529	;# 
  2616     0211                     SSPBUF          equ	529	;# 
  2617     0212                     SSP1ADD         equ	530	;# 
  2618     0212                     SSPADD          equ	530	;# 
  2619     0213                     SSP1MSK         equ	531	;# 
  2620     0213                     SSPMSK          equ	531	;# 
  2621     0214                     SSP1STAT        equ	532	;# 
  2622     0214                     SSPSTAT         equ	532	;# 
  2623     0215                     SSP1CON1        equ	533	;# 
  2624     0215                     SSPCON1         equ	533	;# 
  2625     0215                     SSPCON          equ	533	;# 
  2626     0216                     SSP1CON2        equ	534	;# 
  2627     0216                     SSPCON2         equ	534	;# 
  2628     0217                     SSP1CON3        equ	535	;# 
  2629     0217                     SSPCON3         equ	535	;# 
  2630     0219                     SSP2BUF         equ	537	;# 
  2631     021A                     SSP2ADD         equ	538	;# 
  2632     021B                     SSP2MSK         equ	539	;# 
  2633     021C                     SSP2STAT        equ	540	;# 
  2634     021D                     SSP2CON1        equ	541	;# 
  2635     021E                     SSP2CON2        equ	542	;# 
  2636     021F                     SSP2CON3        equ	543	;# 
  2637     0291                     CCPR1           equ	657	;# 
  2638     0291                     CCPR1L          equ	657	;# 
  2639     0292                     CCPR1H          equ	658	;# 
  2640     0293                     CCP1CON         equ	659	;# 
  2641     0294                     PWM1CON         equ	660	;# 
  2642     0295                     CCP1AS          equ	661	;# 
  2643     0295                     ECCP1AS         equ	661	;# 
  2644     0296                     PSTR1CON        equ	662	;# 
  2645     0298                     CCPR2           equ	664	;# 
  2646     0298                     CCPR2L          equ	664	;# 
  2647     0299                     CCPR2H          equ	665	;# 
  2648     029A                     CCP2CON         equ	666	;# 
  2649     029B                     PWM2CON         equ	667	;# 
  2650     029C                     CCP2AS          equ	668	;# 
  2651     029C                     ECCP2AS         equ	668	;# 
  2652     029D                     PSTR2CON        equ	669	;# 
  2653     029E                     CCPTMRS         equ	670	;# 
  2654     029E                     CCPTMRS0        equ	670	;# 
  2655     0311                     CCPR3           equ	785	;# 
  2656     0311                     CCPR3L          equ	785	;# 
  2657     0312                     CCPR3H          equ	786	;# 
  2658     0313                     CCP3CON         equ	787	;# 
  2659     0318                     CCPR4           equ	792	;# 
  2660     0318                     CCPR4L          equ	792	;# 
  2661     0319                     CCPR4H          equ	793	;# 
  2662     031A                     CCP4CON         equ	794	;# 
  2663     0394                     IOCBP           equ	916	;# 
  2664     0395                     IOCBN           equ	917	;# 
  2665     0396                     IOCBF           equ	918	;# 
  2666     039A                     CLKRCON         equ	922	;# 
  2667     039C                     MDCON           equ	924	;# 
  2668     039D                     MDSRC           equ	925	;# 
  2669     039E                     MDCARL          equ	926	;# 
  2670     039F                     MDCARH          equ	927	;# 
  2671     0415                     TMR4            equ	1045	;# 
  2672     0416                     PR4             equ	1046	;# 
  2673     0417                     T4CON           equ	1047	;# 
  2674     041C                     TMR6            equ	1052	;# 
  2675     041D                     PR6             equ	1053	;# 
  2676     041E                     T6CON           equ	1054	;# 
  2677     0FE4                     STATUS_SHAD     equ	4068	;# 
  2678     0FE5                     WREG_SHAD       equ	4069	;# 
  2679     0FE6                     BSR_SHAD        equ	4070	;# 
  2680     0FE7                     PCLATH_SHAD     equ	4071	;# 
  2681     0FE8                     FSR0L_SHAD      equ	4072	;# 
  2682     0FE9                     FSR0H_SHAD      equ	4073	;# 
  2683     0FEA                     FSR1L_SHAD      equ	4074	;# 
  2684     0FEB                     FSR1H_SHAD      equ	4075	;# 
  2685     0FED                     STKPTR          equ	4077	;# 
  2686     0FEE                     TOSL            equ	4078	;# 
  2687     0FEF                     TOSH            equ	4079	;# 
  2688                           
  2689                           	psect	idataBANK1
  2690     0C79                     __pidataBANK1:
  2691                           
  2692                           ;initializer for _velocidade_string
  2693     0C79  3430               	retlw	48
  2694     0C7A  3430               	retlw	48
  2695     0C7B  3430               	retlw	48
  2696     0C7C  3400               	retlw	0
  2697                           
  2698                           ;initializer for _position_string
  2699     0C7D  3430               	retlw	48
  2700     0C7E  3430               	retlw	48
  2701     0C7F  3430               	retlw	48
  2702     0C80  3400               	retlw	0
  2703                           
  2704                           	psect	idataBANK2
  2705     0DE8                     __pidataBANK2:
  2706                           
  2707                           ;initializer for _uart_write_buffer
  2708     0DE8  3424               	retlw	36
  2709     0DE9  3431               	retlw	49
  2710     0DEA  342C               	retlw	44
  2711     0DEB  3431               	retlw	49
  2712     0DEC  342C               	retlw	44
  2713     0DED  3430               	retlw	48
  2714     0DEE  342C               	retlw	44
  2715     0DEF  3430               	retlw	48
  2716     0DF0  3430               	retlw	48
  2717     0DF1  3430               	retlw	48
  2718     0DF2  342C               	retlw	44
  2719     0DF3  3479               	retlw	121
  2720     0DF4  3430               	retlw	48
  2721     0DF5  342E               	retlw	46
  2722     0DF6  3430               	retlw	48
  2723     0DF7  342C               	retlw	44
  2724     0DF8  3454               	retlw	84
  2725     0DF9  3454               	retlw	84
  2726     0DFA  342E               	retlw	46
  2727     0DFB  3454               	retlw	84
  2728     0DFC  340D               	retlw	13
  2729                           
  2730                           	psect	stringtext1
  2731     07FC                     __pstringtext1:
  2732     07FC                     _MATRIX_FLOOR:
  2733     07FC  3400               	retlw	0
  2734     07FD  3401               	retlw	1
  2735     07FE  34FF               	retlw	255
  2736     07FF  3441               	retlw	65
  2737     0800  3471               	retlw	113
  2738     0801  3489               	retlw	137
  2739     0802  3485               	retlw	133
  2740     0803  3443               	retlw	67
  2741     0804  347E               	retlw	126
  2742     0805  3489               	retlw	137
  2743     0806  3489               	retlw	137
  2744     0807  3442               	retlw	66
  2745     0808  3408               	retlw	8
  2746     0809  34FF               	retlw	255
  2747     080A  3448               	retlw	72
  2748     080B  3438               	retlw	56
  2749     080C                     __end_of_MATRIX_FLOOR:
  2750                           
  2751                           	psect	stringtext2
  2752     080C                     __pstringtext2:
  2753     080C                     _MATRIX_CONFIG:
  2754     080C  3409               	retlw	9
  2755     080D  3400               	retlw	0
  2756     080E  340A               	retlw	10
  2757     080F  3400               	retlw	0
  2758     0810  340B               	retlw	11
  2759     0811  3407               	retlw	7
  2760     0812  340C               	retlw	12
  2761     0813  3401               	retlw	1
  2762     0814  340F               	retlw	15
  2763     0815  3401               	retlw	1
  2764     0816  340F               	retlw	15
  2765     0817  3400               	retlw	0
  2766     0818                     __end_of_MATRIX_CONFIG:
  2767                           
  2768                           	psect	stringtext3
  2769     0818                     __pstringtext3:
  2770     0818                     _MATRIX_DIR:
  2771     0818  3440               	retlw	64
  2772     0819  3420               	retlw	32
  2773     081A  3440               	retlw	64
  2774     081B  3440               	retlw	64
  2775     081C  3480               	retlw	128
  2776     081D  3440               	retlw	64
  2777     081E  3440               	retlw	64
  2778     081F  3440               	retlw	64
  2779     0820  3440               	retlw	64
  2780     0821                     __end_of_MATRIX_DIR:
  2781                           
  2782                           	psect	stringtext4
  2783     0821                     __pstringtext4:
  2784     0821                     _FLOORS:
  2785     0821  3400               	retlw	0
  2786     0822  3401               	retlw	1
  2787     0823  3402               	retlw	2
  2788     0824  3403               	retlw	3
  2789     0825  3402               	retlw	2
  2790     0826  3401               	retlw	1
  2791     0827                     __end_of_FLOORS:
  2792                           
  2793                           	psect	stringtext5
  2794     0827                     __pstringtext5:
  2795     0827                     _spi1_configuration:
  2796     0827  3403               	retlw	3
  2797     0828  3440               	retlw	64
  2798     0829  3413               	retlw	19
  2799     082A  3400               	retlw	0
  2800     082B                     __end_of_spi1_configuration:
  2801                           
  2802                           	psect	nvBANK1
  2803     00D7                     __pnvBANK1:
  2804     00D7                     _ADC_InterruptHandler:
  2805     00D7                     	ds	2
  2806     00D9                     _TMR1_InterruptHandler:
  2807     00D9                     	ds	2
  2808     00DB                     _EUSART_ErrorHandler:
  2809     00DB                     	ds	2
  2810     00DD                     _EUSART_OverrunErrorHandler:
  2811     00DD                     	ds	2
  2812     00DF                     _EUSART_FramingErrorHandler:
  2813     00DF                     	ds	2
  2814     00E1                     _EUSART_RxDefaultInterruptHandler:
  2815     00E1                     	ds	2
  2816     00E3                     _IOCBF3_InterruptHandler:
  2817     00E3                     	ds	2
  2818     00E5                     _IOCBF0_InterruptHandler:
  2819     00E5                     	ds	2
  2820     0015                     _TMR0           set	21
  2821     0018                     _T1CONbits      set	24
  2822     0018                     _T1CON          set	24
  2823     0016                     _TMR1L          set	22
  2824     0017                     _TMR1H          set	23
  2825     0019                     _T1GCON         set	25
  2826     001C                     _T2CON          set	28
  2827     001A                     _TMR2           set	26
  2828     001B                     _PR2            set	27
  2829     0012                     _PIR2bits       set	18
  2830     0011                     _PIR1bits       set	17
  2831     000B                     _INTCONbits     set	11
  2832     0013                     _PIR3bits       set	19
  2833     009D                     _ADCON0bits     set	157
  2834     009D                     _ADCON0         set	157
  2835     009C                     _ADRESH         set	156
  2836     009B                     _ADRESL         set	155
  2837     009E                     _ADCON1         set	158
  2838     0095                     _OPTION_REG     set	149
  2839     008D                     _TRISBbits      set	141
  2840     0092                     _PIE2bits       set	146
  2841     0091                     _PIE1bits       set	145
  2842     0095                     _OPTION_REGbits set	149
  2843     008D                     _TRISB          set	141
  2844     008C                     _TRISA          set	140
  2845     0097                     _WDTCON         set	151
  2846     0098                     _OSCTUNE        set	152
  2847     0099                     _OSCCON         set	153
  2848     010D                     _LATBbits       set	269
  2849     0114                     _CM2CON1        set	276
  2850     0113                     _CM2CON0        set	275
  2851     0117                     _FVRCON         set	279
  2852     0112                     _CM1CON1        set	274
  2853     0111                     _CM1CON0        set	273
  2854     011E                     _APFCON1        set	286
  2855     011D                     _APFCON0        set	285
  2856     010D                     _LATB           set	269
  2857     010C                     _LATA           set	268
  2858     0116                     _BORCON         set	278
  2859     010C                     _LATAbits       set	268
  2860     0199                     _RCREG          set	409
  2861     019D                     _RCSTAbits      set	413
  2862     019A                     _TXREG          set	410
  2863     019E                     _TXSTAbits      set	414
  2864     019C                     _SPBRGH         set	412
  2865     019B                     _SPBRGL         set	411
  2866     019E                     _TXSTA          set	414
  2867     019D                     _RCSTA          set	413
  2868     019F                     _BAUDCON        set	415
  2869     018C                     _ANSELA         set	396
  2870     018D                     _ANSELB         set	397
  2871     0211                     _SSP1BUF        set	529
  2872     0216                     _SSP1CON2       set	534
  2873     0215                     _SSP1CON1bits   set	533
  2874     0212                     _SSP1ADD        set	530
  2875     0215                     _SSP1CON1       set	533
  2876     0214                     _SSP1STAT       set	532
  2877     020C                     _WPUA           set	524
  2878     020D                     _WPUB           set	525
  2879     029E                     _CCPTMRS0bits   set	670
  2880     0313                     _CCP3CONbits    set	787
  2881     0312                     _CCPR3H         set	786
  2882     0311                     _CCPR3L         set	785
  2883     0313                     _CCP3CON        set	787
  2884     0394                     _IOCBPbits      set	916
  2885     0395                     _IOCBNbits      set	917
  2886     0396                     _IOCBFbits      set	918
  2887     041E                     _T6CON          set	1054
  2888     041C                     _TMR6           set	1052
  2889     041D                     _PR6            set	1053
  2890                           
  2891                           	psect	cinit
  2892     0041                     start_initialization:	
  2893                           ; #config settings
  2894                           
  2895     0041                     __initialization:
  2896                           
  2897                           ; Initialize objects allocated to BANK1
  2898     0041  3079               	movlw	low __pidataBANK1
  2899     0042  0084               	movwf	4
  2900     0043  308C               	movlw	(high __pidataBANK1)| (0+128)
  2901     0044  0085               	movwf	5
  2902     0045  30E7               	movlw	low __pdataBANK1
  2903     0046  0086               	movwf	6
  2904     0047  3000               	movlw	high __pdataBANK1
  2905     0048  0087               	movwf	7
  2906     0049  3008               	movlw	8
  2907     004A  318C  245D  3180   	fcall	init_ram
  2908                           
  2909                           ; Initialize objects allocated to BANK2
  2910     004D  30E8               	movlw	low __pidataBANK2
  2911     004E  0084               	movwf	4
  2912     004F  308D               	movlw	(high __pidataBANK2)| (0+128)
  2913     0050  0085               	movwf	5
  2914     0051  3020               	movlw	low __pdataBANK2
  2915     0052  0086               	movwf	6
  2916     0053  3001               	movlw	high __pdataBANK2
  2917     0054  0087               	movwf	7
  2918     0055  3015               	movlw	21
  2919     0056  318C  245D  3180   	fcall	init_ram
  2920                           
  2921                           ; Clear objects allocated to BANK0
  2922     0059  3020               	movlw	low __pbssBANK0
  2923     005A  0084               	movwf	4
  2924     005B  3000               	movlw	high __pbssBANK0
  2925     005C  0085               	movwf	5
  2926     005D  301F               	movlw	31
  2927     005E  318C  2457  3180   	fcall	clear_ram0
  2928                           
  2929                           ; Clear objects allocated to BANK1
  2930     0061  30A0               	movlw	low __pbssBANK1
  2931     0062  0084               	movwf	4
  2932     0063  3000               	movlw	high __pbssBANK1
  2933     0064  0085               	movwf	5
  2934     0065  3020               	movlw	32
  2935     0066  318C  2457         	fcall	clear_ram0
  2936     0068                     end_of_initialization:	
  2937                           ;End of C runtime variable initialization code
  2938                           
  2939     0068                     __end_of__initialization:
  2940     0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2941     0069  0020               	movlb	0
  2942     006A  3183  2B57         	ljmp	_main	;jump to C main() function
  2943                           
  2944                           	psect	bssBANK0
  2945     0020                     __pbssBANK0:
  2946     0020                     _var:
  2947     0020                     	ds	7
  2948     0027                     _route:
  2949     0027                     	ds	6
  2950     002D                     TMR1_ISR@CountCallBack:
  2951     002D                     	ds	2
  2952     002F                     _timer1ReloadVal:
  2953     002F                     	ds	2
  2954     0031                     _position0:
  2955     0031                     	ds	2
  2956     0033                     _uart_read_buffer_count:
  2957     0033                     	ds	2
  2958     0035                     _timer0ReloadVal:
  2959     0035                     	ds	1
  2960     0036                     _eusartRxLastError:
  2961     0036                     	ds	1
  2962     0037                     _eusartRxCount:
  2963     0037                     	ds	1
  2964     0038                     _eusartRxTail:
  2965     0038                     	ds	1
  2966     0039                     _eusartRxHead:
  2967     0039                     	ds	1
  2968     003A                     _idle:
  2969     003A                     	ds	1
  2970     003B                     _stop_2s:
  2971     003B                     	ds	1
  2972     003C                     _next_floor:
  2973     003C                     	ds	1
  2974     003D                     _current_floor:
  2975     003D                     	ds	1
  2976     003E                     _index:
  2977     003E                     	ds	1
  2978                           
  2979                           	psect	bssBANK1
  2980     00A0                     __pbssBANK1:
  2981     00A0                     _uart_read_buffer:
  2982     00A0                     	ds	10
  2983     00AA                     _eusartRxStatusBuffer:
  2984     00AA                     	ds	8
  2985     00B2                     _eusartRxBuffer:
  2986     00B2                     	ds	8
  2987     00BA                     _velocidade:
  2988     00BA                     	ds	2
  2989     00BC                     _positionf:
  2990     00BC                     	ds	2
  2991     00BE                     _position:
  2992     00BE                     	ds	2
  2993                           
  2994                           	psect	dataBANK1
  2995     00E7                     __pdataBANK1:
  2996     00E7                     _velocidade_string:
  2997     00E7                     	ds	4
  2998     00EB                     _position_string:
  2999     00EB                     	ds	4
  3000                           
  3001                           	psect	dataBANK2
  3002     0120                     __pdataBANK2:
  3003     0120                     _uart_write_buffer:
  3004     0120                     	ds	21
  3005                           
  3006                           	psect	inittext
  3007     0C5D                     init_ram:
  3008     0C5D  00FE               	movwf	126
  3009     0C5E                     initloop:
  3010     0C5E  0012               	moviw fsr0++
  3011     0C5F  001E               	movwi fsr1++
  3012     0C60  0BFE               	decfsz	126,f
  3013     0C61  2C5E               	goto	initloop
  3014     0C62  3400               	retlw	0
  3015                           
  3016                           	psect	clrtext
  3017     0C57                     clear_ram0:	
  3018                           ;	Called with FSR0 containing the base address, and
  3019                           ;	WREG with the size to clear
  3020                           
  3021     0C57  0064               	clrwdt	;clear the watchdog before getting into this loop
  3022     0C58                     clrloop0:
  3023     0C58  0180               	clrf	0	;clear RAM location pointed to by FSR
  3024     0C59  3101               	addfsr 0,1
  3025     0C5A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3026     0C5B  2C58               	goto	clrloop0	;have we reached the end yet?
  3027     0C5C  3400               	retlw	0	;all done for this memory range, return
  3028                           
  3029                           	psect	cstackBANK2
  3030     0135                     __pcstackBANK2:
  3031     0135                     main@next_index:
  3032                           
  3033                           ; 2 bytes @ 0x0
  3034     0135                     	ds	2
  3035     0137                     main@is_empty:
  3036                           
  3037                           ; 1 bytes @ 0x2
  3038     0137                     	ds	1
  3039                           
  3040                           	psect	cstackBANK1
  3041     00C0                     __pcstackBANK1:
  3042     00C0                     ?_IOCBF0_SetInterruptHandler:
  3043     00C0                     ?_IOCBF3_SetInterruptHandler:	
  3044                           ; 1 bytes @ 0x0
  3045                           
  3046     00C0                     ?_EUSART_SetRxInterruptHandler:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049     00C0                     ?_EUSART_SetFramingErrorHandler:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052     00C0                     ?_EUSART_SetOverrunErrorHandler:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055     00C0                     ?_EUSART_SetErrorHandler:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058     00C0                     ?_TMR1_SetInterruptHandler:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061     00C0                     ?_ADC_SetInterruptHandler:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064     00C0                     ?_SPI1_ExchangeBlock:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067     00C0                     ?___bmul:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070     00C0                     ?___awmod:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073     00C0                     SPI1_ExchangeBlock@block:	
  3074                           ; 2 bytes @ 0x0
  3075                           
  3076     00C0                     ___bmul@multiplicand:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079     00C0                     IOCBF0_SetInterruptHandler@InterruptHandler:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082     00C0                     IOCBF3_SetInterruptHandler@InterruptHandler:	
  3083                           ; 2 bytes @ 0x0
  3084                           
  3085     00C0                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3086                           ; 2 bytes @ 0x0
  3087                           
  3088     00C0                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3089                           ; 2 bytes @ 0x0
  3090                           
  3091     00C0                     EUSART_SetErrorHandler@interruptHandler:	
  3092                           ; 2 bytes @ 0x0
  3093                           
  3094     00C0                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097     00C0                     TMR1_SetInterruptHandler@InterruptHandler:	
  3098                           ; 2 bytes @ 0x0
  3099                           
  3100     00C0                     ADC_SetInterruptHandler@InterruptHandler:	
  3101                           ; 2 bytes @ 0x0
  3102                           
  3103     00C0                     ___awmod@divisor:	
  3104                           ; 2 bytes @ 0x0
  3105                           
  3106     00C0                     ??_SPI1_Initialize:	
  3107                           ; 2 bytes @ 0x0
  3108                           
  3109     00C0                     ??_OSCILLATOR_Initialize:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112     00C0                     ??_WDT_Initialize:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115     00C0                     ??_CMP2_Initialize:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118     00C0                     ??_FVR_Initialize:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121     00C0                     ??_TMR2_Initialize:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124     00C0                     ??_TMR0_Initialize:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127     00C0                     ??_TMR6_Initialize:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130     00C0                     ??_CMP1_Initialize:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133     00C0                     ??_PWM3_Initialize:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136     00C0                     ??_SPI1_Open:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139     00C0                     ??_TMR0_Reload:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142     00C0                     ??_Route_empty:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145                           
  3146                           ; 1 bytes @ 0x0
  3147     00C0                     	ds	1
  3148     00C1                     ___bmul@product:
  3149     00C1                     SPI1_ExchangeBlock@blockSize:	
  3150                           ; 1 bytes @ 0x1
  3151                           
  3152     00C1                     Route_empty@i:	
  3153                           ; 2 bytes @ 0x1
  3154                           
  3155     00C1                     ??___bmul:	
  3156                           ; 2 bytes @ 0x1
  3157                           
  3158                           
  3159                           ; 1 bytes @ 0x1
  3160     00C1                     	ds	1
  3161     00C2                     ___bmul@multiplier:
  3162     00C2                     ___awmod@dividend:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165     00C2                     ??_PIN_MANAGER_Initialize:	
  3166                           ; 2 bytes @ 0x2
  3167                           
  3168     00C2                     ??_ADC_Initialize:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171     00C2                     ??_TMR1_Initialize:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174     00C2                     ??_EUSART_Initialize:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177     00C2                     ??_IOCBF0_SetInterruptHandler:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180     00C2                     ??_IOCBF3_SetInterruptHandler:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183     00C2                     ??_EUSART_SetRxInterruptHandler:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186     00C2                     ??_EUSART_SetFramingErrorHandler:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189     00C2                     ??_EUSART_SetOverrunErrorHandler:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192     00C2                     ??_EUSART_SetErrorHandler:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195     00C2                     ??_TMR1_SetInterruptHandler:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198     00C2                     ??_ADC_SetInterruptHandler:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201     00C2                     ??_SYSTEM_Initialize:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204                           
  3205                           ; 1 bytes @ 0x2
  3206     00C2                     	ds	1
  3207     00C3                     SPI1_Open@spi1UniqueConfiguration:
  3208     00C3                     SPI1_ExchangeBlock@data:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211     00C3                     ??_SPI1_ExchangeBlock:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214                           
  3215                           ; 1 bytes @ 0x3
  3216     00C3                     	ds	1
  3217     00C4                     ?_Tx_spi:
  3218     00C4                     Tx_spi@data:	
  3219                           ; 1 bytes @ 0x4
  3220                           
  3221     00C4                     ___awmod@counter:	
  3222                           ; 1 bytes @ 0x4
  3223                           
  3224     00C4                     ??___awmod:	
  3225                           ; 1 bytes @ 0x4
  3226                           
  3227                           
  3228                           ; 1 bytes @ 0x4
  3229     00C4                     	ds	1
  3230     00C5                     ___awmod@sign:
  3231     00C5                     Tx_spi@dataSize:	
  3232                           ; 1 bytes @ 0x5
  3233                           
  3234                           
  3235                           ; 2 bytes @ 0x5
  3236     00C5                     	ds	1
  3237     00C6                     ??_Next_index:
  3238     00C6                     ??_Next_floor:	
  3239                           ; 1 bytes @ 0x6
  3240                           
  3241                           
  3242                           ; 1 bytes @ 0x6
  3243     00C6                     	ds	1
  3244     00C7                     Ini_matrix@i:
  3245     00C7                     Next_index@index_:	
  3246                           ; 1 bytes @ 0x7
  3247                           
  3248     00C7                     Next_floor@index_:	
  3249                           ; 2 bytes @ 0x7
  3250                           
  3251     00C7                     ??_Matrix_update_dir:	
  3252                           ; 2 bytes @ 0x7
  3253                           
  3254     00C7                     ??_Matrix_update_floor:	
  3255                           ; 1 bytes @ 0x7
  3256                           
  3257     00C7                     ??_Tx_spi:	
  3258                           ; 1 bytes @ 0x7
  3259                           
  3260     00C7                     ??_Ini_matrix:	
  3261                           ; 1 bytes @ 0x7
  3262                           
  3263                           
  3264                           ; 1 bytes @ 0x7
  3265     00C7                     	ds	1
  3266     00C8                     Ini_matrix@data:
  3267     00C8                     Matrix_update_floor@data:	
  3268                           ; 2 bytes @ 0x8
  3269                           
  3270     00C8                     Matrix_update_dir@route_:	
  3271                           ; 2 bytes @ 0x8
  3272                           
  3273                           
  3274                           ; 4 bytes @ 0x8
  3275     00C8                     	ds	1
  3276     00C9                     Next_index@i:
  3277     00C9                     Next_floor@i:	
  3278                           ; 2 bytes @ 0x9
  3279                           
  3280                           
  3281                           ; 2 bytes @ 0x9
  3282     00C9                     	ds	1
  3283     00CA                     Ini_matrix@k:
  3284     00CA                     Matrix_update_floor@display_floor:	
  3285                           ; 1 bytes @ 0xA
  3286                           
  3287                           
  3288                           ; 1 bytes @ 0xA
  3289     00CA                     	ds	1
  3290     00CB                     Ini_matrix@i_1791:
  3291     00CB                     Matrix_update_floor@i:	
  3292                           ; 1 bytes @ 0xB
  3293                           
  3294                           
  3295                           ; 1 bytes @ 0xB
  3296     00CB                     	ds	1
  3297     00CC                     Matrix_update_dir@route_leds:
  3298                           
  3299                           ; 1 bytes @ 0xC
  3300     00CC                     	ds	1
  3301     00CD                     Matrix_update_dir@display_dir:
  3302                           
  3303                           ; 1 bytes @ 0xD
  3304     00CD                     	ds	1
  3305     00CE                     Matrix_update_dir@data:
  3306                           
  3307                           ; 2 bytes @ 0xE
  3308     00CE                     	ds	2
  3309     00D0                     Matrix_update_dir@i_1802:
  3310                           
  3311                           ; 1 bytes @ 0x10
  3312     00D0                     	ds	1
  3313     00D1                     Matrix_update_dir@i:
  3314                           
  3315                           ; 2 bytes @ 0x11
  3316     00D1                     	ds	2
  3317     00D3                     ??_Motor_Turn_Off:
  3318     00D3                     ??_Motor_Turn_On:	
  3319                           ; 1 bytes @ 0x13
  3320                           
  3321     00D3                     ??_Start:	
  3322                           ; 1 bytes @ 0x13
  3323                           
  3324     00D3                     ??_Idle:	
  3325                           ; 1 bytes @ 0x13
  3326                           
  3327                           
  3328                           ; 1 bytes @ 0x13
  3329     00D3                     	ds	2
  3330     00D5                     ??_main:
  3331                           
  3332                           ; 1 bytes @ 0x15
  3333     00D5                     	ds	2
  3334                           
  3335                           	psect	cstackCOMMON
  3336     0070                     __pcstackCOMMON:
  3337     0070                     ?_SPI1_Initialize:
  3338     0070                     ?_PIN_MANAGER_Initialize:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341     0070                     ?_OSCILLATOR_Initialize:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344     0070                     ?_WDT_Initialize:	
  3345                           ; 1 bytes @ 0x0
  3346                           
  3347     0070                     ?_CMP2_Initialize:	
  3348                           ; 1 bytes @ 0x0
  3349                           
  3350     0070                     ?_FVR_Initialize:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353     0070                     ?_TMR2_Initialize:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356     0070                     ?_TMR0_Initialize:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359     0070                     ?_TMR6_Initialize:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362     0070                     ?_CMP1_Initialize:	
  3363                           ; 1 bytes @ 0x0
  3364                           
  3365     0070                     ?_ADC_Initialize:	
  3366                           ; 1 bytes @ 0x0
  3367                           
  3368     0070                     ?_PWM3_Initialize:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371     0070                     ?_TMR1_Initialize:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374     0070                     ?_EUSART_Initialize:	
  3375                           ; 1 bytes @ 0x0
  3376                           
  3377     0070                     ?_IOCBF0_DefaultInterruptHandler:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380     0070                     ?_IOCBF3_DefaultInterruptHandler:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383     0070                     ?_IOCBF0_ISR:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386     0070                     ?_IOCBF3_ISR:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389     0070                     ?_ADC_ISR:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392     0070                     ?_CMP1_ISR:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395     0070                     ?_CMP2_ISR:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398     0070                     ?_TMR1_ISR:	
  3399                           ; 1 bytes @ 0x0
  3400                           
  3401     0070                     ?_ISR_Floor3:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404     0070                     ?_ISR_Floor4:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407     0070                     ?_EUSART_Receive_ISR:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416     0070                     ?_EUSART_DefaultErrorHandler:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419     0070                     ?_EUSART_RxDataHandler:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422     0070                     ?_TMR1_DefaultInterruptHandler:	
  3423                           ; 1 bytes @ 0x0
  3424                           
  3425     0070                     ?_TMR1_CallBack:	
  3426                           ; 1 bytes @ 0x0
  3427                           
  3428     0070                     ?_ADC_DefaultInterruptHandler:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431     0070                     ?_Matrix_update_dir:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434     0070                     ?_Matrix_update_floor:	
  3435                           ; 1 bytes @ 0x0
  3436                           
  3437     0070                     ?_SYSTEM_Initialize:	
  3438                           ; 1 bytes @ 0x0
  3439                           
  3440     0070                     ?_PIN_MANAGER_IOC:	
  3441                           ; 1 bytes @ 0x0
  3442                           
  3443     0070                     ?_INTERRUPT_InterruptManager:	
  3444                           ; 1 bytes @ 0x0
  3445                           
  3446     0070                     ?_SPI1_Open:	
  3447                           ; 1 bytes @ 0x0
  3448                           
  3449     0070                     ?_EUSART_is_tx_ready:	
  3450                           ; 1 bytes @ 0x0
  3451                           
  3452     0070                     ?_EUSART_Read:	
  3453                           ; 1 bytes @ 0x0
  3454                           
  3455     0070                     ?_EUSART_Write:	
  3456                           ; 1 bytes @ 0x0
  3457                           
  3458     0070                     ?_TMR1_WriteTimer:	
  3459                           ; 1 bytes @ 0x0
  3460                           
  3461     0070                     ?_TMR0_ReadTimer:	
  3462                           ; 1 bytes @ 0x0
  3463                           
  3464     0070                     ?_TMR0_Reload:	
  3465                           ; 1 bytes @ 0x0
  3466                           
  3467     0070                     ?_Motor_Turn_Off:	
  3468                           ; 1 bytes @ 0x0
  3469                           
  3470     0070                     ?_Motor_Turn_On:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473     0070                     ?_Read_UART:	
  3474                           ; 1 bytes @ 0x0
  3475                           
  3476     0070                     ?_Update_tx_buffer:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479     0070                     ?_Write_UART:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482     0070                     ?_Route_empty:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485     0070                     ?_Next_index:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488     0070                     ?_Next_floor:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491     0070                     ?_Start:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494     0070                     ?_Idle:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497     0070                     ?_Ini_matrix:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500     0070                     ?_ISR_Floor2:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503     0070                     ?_ISR_Floor1:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506     0070                     ?_main:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509     0070                     ?___lbdiv:	
  3510                           ; 1 bytes @ 0x0
  3511                           
  3512     0070                     ?i1_SPI1_ExchangeBlock:	
  3513                           ; 1 bytes @ 0x0
  3514                           
  3515     0070                     ?i1_TMR0_Reload:	
  3516                           ; 1 bytes @ 0x0
  3517                           
  3518     0070                     ?i1_Motor_Turn_Off:	
  3519                           ; 1 bytes @ 0x0
  3520                           
  3521     0070                     ?i1_Motor_Turn_On:	
  3522                           ; 1 bytes @ 0x0
  3523                           
  3524     0070                     ?i1_Matrix_update_floor:	
  3525                           ; 1 bytes @ 0x0
  3526                           
  3527     0070                     ?i1_Matrix_update_dir:	
  3528                           ; 1 bytes @ 0x0
  3529                           
  3530     0070                     ?i1___bmul:	
  3531                           ; 1 bytes @ 0x0
  3532                           
  3533     0070                     ?i1___awmod:	
  3534                           ; 1 bytes @ 0x0
  3535                           
  3536     0070                     EUSART_Read@readValue:	
  3537                           ; 2 bytes @ 0x0
  3538                           
  3539     0070                     EUSART_Write@txData:	
  3540                           ; 1 bytes @ 0x0
  3541                           
  3542     0070                     TMR0_ReadTimer@readVal:	
  3543                           ; 1 bytes @ 0x0
  3544                           
  3545     0070                     ___lbdiv@divisor:	
  3546                           ; 1 bytes @ 0x0
  3547                           
  3548     0070                     i1SPI1_ExchangeBlock@block:	
  3549                           ; 1 bytes @ 0x0
  3550                           
  3551     0070                     i1___bmul@multiplicand:	
  3552                           ; 1 bytes @ 0x0
  3553                           
  3554     0070                     TMR1_WriteTimer@timerVal:	
  3555                           ; 1 bytes @ 0x0
  3556                           
  3557     0070                     i1___awmod@divisor:	
  3558                           ; 2 bytes @ 0x0
  3559                           
  3560     0070                     ??_IOCBF0_DefaultInterruptHandler:	
  3561                           ; 2 bytes @ 0x0
  3562                           
  3563     0070                     ??_IOCBF3_DefaultInterruptHandler:	
  3564                           ; 1 bytes @ 0x0
  3565                           
  3566     0070                     ??_ADC_ISR:	
  3567                           ; 1 bytes @ 0x0
  3568                           
  3569     0070                     ??_EUSART_Receive_ISR:	
  3570                           ; 1 bytes @ 0x0
  3571                           
  3572     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3573                           ; 1 bytes @ 0x0
  3574                           
  3575     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3576                           ; 1 bytes @ 0x0
  3577                           
  3578     0070                     ??_EUSART_DefaultErrorHandler:	
  3579                           ; 1 bytes @ 0x0
  3580                           
  3581     0070                     ??_EUSART_RxDataHandler:	
  3582                           ; 1 bytes @ 0x0
  3583                           
  3584     0070                     ??_TMR1_DefaultInterruptHandler:	
  3585                           ; 1 bytes @ 0x0
  3586                           
  3587     0070                     ??_ADC_DefaultInterruptHandler:	
  3588                           ; 1 bytes @ 0x0
  3589                           
  3590     0070                     ??_EUSART_is_tx_ready:	
  3591                           ; 1 bytes @ 0x0
  3592                           
  3593     0070                     ??_EUSART_Read:	
  3594                           ; 1 bytes @ 0x0
  3595                           
  3596     0070                     ??_EUSART_Write:	
  3597                           ; 1 bytes @ 0x0
  3598                           
  3599     0070                     ??_TMR0_ReadTimer:	
  3600                           ; 1 bytes @ 0x0
  3601                           
  3602     0070                     ??i1_TMR0_Reload:	
  3603                           ; 1 bytes @ 0x0
  3604                           
  3605                           
  3606                           ; 1 bytes @ 0x0
  3607     0070                     	ds	1
  3608     0071                     ?___wmul:
  3609     0071                     ___lbdiv@dividend:	
  3610                           ; 2 bytes @ 0x1
  3611                           
  3612     0071                     i1___bmul@product:	
  3613                           ; 1 bytes @ 0x1
  3614                           
  3615     0071                     ___wmul@multiplier:	
  3616                           ; 1 bytes @ 0x1
  3617                           
  3618     0071                     i1SPI1_ExchangeBlock@blockSize:	
  3619                           ; 2 bytes @ 0x1
  3620                           
  3621     0071                     ??___lbdiv:	
  3622                           ; 2 bytes @ 0x1
  3623                           
  3624     0071                     ??i1___bmul:	
  3625                           ; 1 bytes @ 0x1
  3626                           
  3627                           
  3628                           ; 1 bytes @ 0x1
  3629     0071                     	ds	1
  3630     0072                     ___lbdiv@counter:
  3631     0072                     i1___bmul@multiplier:	
  3632                           ; 1 bytes @ 0x2
  3633                           
  3634     0072                     i1___awmod@dividend:	
  3635                           ; 1 bytes @ 0x2
  3636                           
  3637     0072                     ??_TMR1_WriteTimer:	
  3638                           ; 2 bytes @ 0x2
  3639                           
  3640                           
  3641                           ; 1 bytes @ 0x2
  3642     0072                     	ds	1
  3643     0073                     ___lbdiv@quotient:
  3644     0073                     i1SPI1_ExchangeBlock@data:	
  3645                           ; 1 bytes @ 0x3
  3646                           
  3647     0073                     ___wmul@multiplicand:	
  3648                           ; 1 bytes @ 0x3
  3649                           
  3650     0073                     ??i1_SPI1_ExchangeBlock:	
  3651                           ; 2 bytes @ 0x3
  3652                           
  3653                           
  3654                           ; 1 bytes @ 0x3
  3655     0073                     	ds	1
  3656     0074                     ?___lbmod:
  3657     0074                     ?i1_Tx_spi:	
  3658                           ; 1 bytes @ 0x4
  3659                           
  3660     0074                     ___lbmod@divisor:	
  3661                           ; 1 bytes @ 0x4
  3662                           
  3663     0074                     i1Tx_spi@data:	
  3664                           ; 1 bytes @ 0x4
  3665                           
  3666     0074                     i1___awmod@counter:	
  3667                           ; 1 bytes @ 0x4
  3668                           
  3669     0074                     ??i1___awmod:	
  3670                           ; 1 bytes @ 0x4
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x4
  3674     0074                     	ds	1
  3675     0075                     i1___awmod@sign:
  3676     0075                     ___wmul@product:	
  3677                           ; 1 bytes @ 0x5
  3678                           
  3679     0075                     i1Tx_spi@dataSize:	
  3680                           ; 2 bytes @ 0x5
  3681                           
  3682     0075                     ??___wmul:	
  3683                           ; 2 bytes @ 0x5
  3684                           
  3685     0075                     ??___lbmod:	
  3686                           ; 1 bytes @ 0x5
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x5
  3690     0075                     	ds	1
  3691     0076                     ___lbmod@dividend:
  3692                           
  3693                           ; 1 bytes @ 0x6
  3694     0076                     	ds	1
  3695     0077                     ?___awdiv:
  3696     0077                     ?___lwdiv:	
  3697                           ; 2 bytes @ 0x7
  3698                           
  3699     0077                     ___lbmod@counter:	
  3700                           ; 2 bytes @ 0x7
  3701                           
  3702     0077                     ___awdiv@divisor:	
  3703                           ; 1 bytes @ 0x7
  3704                           
  3705     0077                     ___lwdiv@divisor:	
  3706                           ; 2 bytes @ 0x7
  3707                           
  3708     0077                     ??i1_Tx_spi:	
  3709                           ; 2 bytes @ 0x7
  3710                           
  3711     0077                     ??i1_Matrix_update_floor:	
  3712                           ; 1 bytes @ 0x7
  3713                           
  3714     0077                     ??i1_Matrix_update_dir:	
  3715                           ; 1 bytes @ 0x7
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x7
  3719     0077                     	ds	1
  3720     0078                     ?_New_request:
  3721     0078                     ___lbmod@rem:	
  3722                           ; 1 bytes @ 0x8
  3723                           
  3724     0078                     New_request@origin:	
  3725                           ; 1 bytes @ 0x8
  3726                           
  3727     0078                     i1Matrix_update_floor@data:	
  3728                           ; 2 bytes @ 0x8
  3729                           
  3730     0078                     ??i1_Motor_Turn_Off:	
  3731                           ; 2 bytes @ 0x8
  3732                           
  3733     0078                     ??i1_Motor_Turn_On:	
  3734                           ; 1 bytes @ 0x8
  3735                           
  3736                           
  3737                           ; 1 bytes @ 0x8
  3738     0078                     	ds	1
  3739     0079                     ___awdiv@dividend:
  3740     0079                     ___lwdiv@dividend:	
  3741                           ; 2 bytes @ 0x9
  3742                           
  3743                           
  3744                           ; 2 bytes @ 0x9
  3745     0079                     	ds	1
  3746     007A                     i1Matrix_update_floor@display_floor:
  3747     007A                     New_request@dest:	
  3748                           ; 1 bytes @ 0xA
  3749                           
  3750                           
  3751                           ; 2 bytes @ 0xA
  3752     007A                     	ds	1
  3753     007B                     i1Matrix_update_floor@i:
  3754     007B                     ___lwdiv@quotient:	
  3755                           ; 1 bytes @ 0xB
  3756                           
  3757     007B                     ??___awdiv:	
  3758                           ; 2 bytes @ 0xB
  3759                           
  3760     007B                     ??___lwdiv:	
  3761                           ; 1 bytes @ 0xB
  3762                           
  3763                           
  3764                           ; 1 bytes @ 0xB
  3765     007B                     	ds	1
  3766     007C                     ??_IOCBF0_ISR:
  3767     007C                     ??_IOCBF3_ISR:	
  3768                           ; 1 bytes @ 0xC
  3769                           
  3770     007C                     ??_CMP1_ISR:	
  3771                           ; 1 bytes @ 0xC
  3772                           
  3773     007C                     ??_CMP2_ISR:	
  3774                           ; 1 bytes @ 0xC
  3775                           
  3776     007C                     ??_ISR_Floor3:	
  3777                           ; 1 bytes @ 0xC
  3778                           
  3779     007C                     ??_ISR_Floor4:	
  3780                           ; 1 bytes @ 0xC
  3781                           
  3782     007C                     ??_PIN_MANAGER_IOC:	
  3783                           ; 1 bytes @ 0xC
  3784                           
  3785     007C                     ??_Read_UART:	
  3786                           ; 1 bytes @ 0xC
  3787                           
  3788     007C                     ??_ISR_Floor2:	
  3789                           ; 1 bytes @ 0xC
  3790                           
  3791     007C                     ??_ISR_Floor1:	
  3792                           ; 1 bytes @ 0xC
  3793                           
  3794                           
  3795                           ; 1 bytes @ 0xC
  3796     007C                     	ds	1
  3797     007D                     ___lwdiv@counter:
  3798                           
  3799                           ; 1 bytes @ 0xD
  3800     007D                     	ds	1
  3801     007E                     ??_TMR1_ISR:
  3802     007E                     ??_TMR1_CallBack:	
  3803                           ; 1 bytes @ 0xE
  3804                           
  3805     007E                     ??_INTERRUPT_InterruptManager:	
  3806                           ; 1 bytes @ 0xE
  3807                           
  3808     007E                     ??___lwmod:	
  3809                           ; 1 bytes @ 0xE
  3810                           
  3811                           
  3812                           	psect	cstackBANK0
  3813     003F                     __pcstackBANK0:	
  3814                           ; 1 bytes @ 0xE
  3815                           
  3816     003F                     ?___lwmod:
  3817     003F                     ___awdiv@counter:	
  3818                           ; 2 bytes @ 0x0
  3819                           
  3820     003F                     ___lwmod@divisor:	
  3821                           ; 1 bytes @ 0x0
  3822                           
  3823     003F                     i1Matrix_update_dir@route_:	
  3824                           ; 2 bytes @ 0x0
  3825                           
  3826                           
  3827                           ; 4 bytes @ 0x0
  3828     003F                     	ds	1
  3829     0040                     ___awdiv@sign:
  3830                           
  3831                           ; 1 bytes @ 0x1
  3832     0040                     	ds	1
  3833     0041                     ___awdiv@quotient:
  3834     0041                     ___lwmod@dividend:	
  3835                           ; 2 bytes @ 0x2
  3836                           
  3837                           
  3838                           ; 2 bytes @ 0x2
  3839     0041                     	ds	2
  3840     0043                     ___lwmod@counter:
  3841     0043                     i1Matrix_update_dir@route_leds:	
  3842                           ; 1 bytes @ 0x4
  3843                           
  3844                           
  3845                           ; 1 bytes @ 0x4
  3846     0043                     	ds	1
  3847     0044                     i1Matrix_update_dir@data:
  3848     0044                     ??_Update_tx_buffer:	
  3849                           ; 2 bytes @ 0x5
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x5
  3853     0044                     	ds	2
  3854     0046                     i1Matrix_update_dir@display_dir:
  3855     0046                     ??_Write_UART:	
  3856                           ; 1 bytes @ 0x7
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x7
  3860     0046                     	ds	1
  3861     0047                     i1Matrix_update_dir@i_1802:
  3862     0047                     Write_UART@i:	
  3863                           ; 1 bytes @ 0x8
  3864                           
  3865                           
  3866                           ; 2 bytes @ 0x8
  3867     0047                     	ds	1
  3868     0048                     i1Matrix_update_dir@i:
  3869                           
  3870                           ; 2 bytes @ 0x9
  3871     0048                     	ds	2
  3872     004A                     ??_New_request:
  3873                           
  3874                           ; 1 bytes @ 0xB
  3875     004A                     	ds	3
  3876     004D                     New_request@index_ori:
  3877                           
  3878                           ; 2 bytes @ 0xE
  3879     004D                     	ds	2
  3880     004F                     New_request@i:
  3881                           
  3882                           ; 2 bytes @ 0x10
  3883     004F                     	ds	2
  3884     0051                     New_request@i_1746:
  3885                           
  3886                           ; 2 bytes @ 0x12
  3887     0051                     	ds	2
  3888     0053                     New_request@i_1747:
  3889                           
  3890                           ; 2 bytes @ 0x14
  3891     0053                     	ds	2
  3892     0055                     New_request@i_1748:
  3893                           
  3894                           ; 2 bytes @ 0x16
  3895     0055                     	ds	2
  3896     0057                     New_request@index_:
  3897                           
  3898                           ; 2 bytes @ 0x18
  3899     0057                     	ds	2
  3900     0059                     Read_UART@ori:
  3901                           
  3902                           ; 2 bytes @ 0x1A
  3903     0059                     	ds	2
  3904     005B                     Read_UART@dest:
  3905                           
  3906                           ; 2 bytes @ 0x1C
  3907     005B                     	ds	2
  3908                           
  3909                           	psect	maintext
  3910     0357                     __pmaintext:	
  3911 ;;
  3912 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3913 ;;
  3914 ;; *************** function _main *****************
  3915 ;; Defined at:
  3916 ;;		line 328 in file "main.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  is_empty        1    2[BANK2 ] _Bool 
  3921 ;;  next_index      2    0[BANK2 ] int 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : B1F/0
  3928 ;;		On exit  : 18/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3931 ;;      Params:         0       0       0       0       0       0
  3932 ;;      Locals:         0       0       0       3       0       0
  3933 ;;      Temps:          0       0       2       0       0       0
  3934 ;;      Totals:         0       0       2       3       0       0
  3935 ;;Total ram usage:        5 bytes
  3936 ;; Hardware stack levels required when called: 13
  3937 ;; This function calls:
  3938 ;;		_EUSART_SetRxInterruptHandler
  3939 ;;		_IOCBF0_SetInterruptHandler
  3940 ;;		_IOCBF3_SetInterruptHandler
  3941 ;;		_Idle
  3942 ;;		_Ini_matrix
  3943 ;;		_Motor_Turn_Off
  3944 ;;		_Motor_Turn_On
  3945 ;;		_Next_floor
  3946 ;;		_Next_index
  3947 ;;		_Route_empty
  3948 ;;		_SPI1_Open
  3949 ;;		_SYSTEM_Initialize
  3950 ;;		_Start
  3951 ;;		_TMR1_SetInterruptHandler
  3952 ;; This function is called by:
  3953 ;;		Startup code after reset
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957     0357                     _main:	
  3958                           ;psect for function _main
  3959                           
  3960                           
  3961                           ;main.c: 330:     SYSTEM_Initialize();
  3962                           
  3963                           ;incstack = 0
  3964                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3965     0357  318F  27A7  3183   	fcall	_SYSTEM_Initialize
  3966                           
  3967                           ;main.c: 332:     IOCBF0_SetInterruptHandler(ISR_Floor1);
  3968     035A  302A               	movlw	low _ISR_Floor1
  3969     035B  00C0               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  3970     035C  300E               	movlw	high _ISR_Floor1
  3971     035D  00C1               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3972     035E  318C  2442  3183   	fcall	_IOCBF0_SetInterruptHandler
  3973                           
  3974                           ;main.c: 333:     IOCBF3_SetInterruptHandler(ISR_Floor2);
  3975     0361  30FD               	movlw	low _ISR_Floor2
  3976     0362  00C0               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  3977     0363  300D               	movlw	high _ISR_Floor2
  3978     0364  00C1               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3979     0365  318C  2447  3183   	fcall	_IOCBF3_SetInterruptHandler
  3980                           
  3981                           ;main.c: 334:     EUSART_SetRxInterruptHandler(Read_UART);
  3982     0368  3015               	movlw	low _Read_UART
  3983     0369  00C0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  3984     036A  3006               	movlw	high _Read_UART
  3985     036B  00C1               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  3986     036C  318C  243D  3183   	fcall	_EUSART_SetRxInterruptHandler
  3987                           
  3988                           ;main.c: 335:     TMR1_SetInterruptHandler(Write_UART);
  3989     036F  3031               	movlw	low _Write_UART
  3990     0370  00C0               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  3991     0371  300F               	movlw	high _Write_UART
  3992     0372  00C1               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  3993     0373  318C  244C  3183   	fcall	_TMR1_SetInterruptHandler
  3994     0376  0022               	movlb	2	; select bank2
  3995     0377  148D               	bsf	13,1	;volatile
  3996                           
  3997                           ;main.c: 337:     SPI1_Open(SPI1_DEFAULT);
  3998     0378  3000               	movlw	0
  3999     0379  3184  24EC  3183   	fcall	_SPI1_Open
  4000                           
  4001                           ;main.c: 338:     Ini_matrix();
  4002     037C  3186  2697  3183   	fcall	_Ini_matrix
  4003                           
  4004                           ;main.c: 341:     Start();
  4005     037F  3187  2771  3183   	fcall	_Start
  4006                           
  4007                           ;main.c: 343:     (INTCONbits.GIE = 1);
  4008     0382  178B               	bsf	11,7	;volatile
  4009                           
  4010                           ;main.c: 344:     (INTCONbits.PEIE = 1);
  4011     0383  170B               	bsf	11,6	;volatile
  4012     0384  2BE6               	goto	l4939
  4013     0385                     l4943:
  4014                           
  4015                           ;main.c: 350:             if(idle){
  4016     0385  0020               	movlb	0	; select bank0
  4017     0386  083A               	movf	_idle,w
  4018     0387  1903               	btfsc	3,2
  4019     0388  2B9A               	goto	l4951
  4020                           
  4021                           ;main.c: 351:                 idle = 0;
  4022     0389  01BA               	clrf	_idle
  4023                           
  4024                           ;main.c: 352:                 Motor_Turn_Off ();
  4025     038A  318C  24C8  3183   	fcall	_Motor_Turn_Off
  4026                           
  4027                           ;main.c: 353:                 _delay((unsigned long)((500)*(8000000/4000.0)));
  4028     038D  3006               	movlw	6
  4029     038E  0021               	movlb	1	; select bank1
  4030     038F  00D6               	movwf	(??_main^(0+128)+1)
  4031     0390  3013               	movlw	19
  4032     0391  00D5               	movwf	??_main^(0+128)
  4033     0392  30AD               	movlw	173
  4034     0393                     u3777:
  4035     0393  0B89               	decfsz	9,f
  4036     0394  2B93               	goto	u3777
  4037     0395  0BD5               	decfsz	??_main^(0+128),f
  4038     0396  2B93               	goto	u3777
  4039     0397  0BD6               	decfsz	(??_main^(0+128)+1),f
  4040     0398  2B93               	goto	u3777
  4041     0399  3200               	nop2
  4042     039A                     l4951:
  4043                           
  4044                           ;main.c: 355:             var.D = Next_floor();
  4045     039A  3186  2657  3183   	fcall	_Next_floor
  4046     039D  0021               	movlb	1	; select bank1
  4047     039E  00D5               	movwf	??_main^(0+128)
  4048     039F  0ED5               	swapf	??_main^(0+128),f
  4049     03A0  0020               	movlb	0	; select bank0
  4050     03A1  0820               	movf	_var,w
  4051     03A2  0021               	movlb	1	; select bank1
  4052     03A3  0655               	xorwf	??_main^(0+128),w
  4053     03A4  390F               	andlw	-241
  4054     03A5  0655               	xorwf	??_main^(0+128),w
  4055     03A6  0020               	movlb	0	; select bank0
  4056     03A7  00A0               	movwf	_var
  4057                           
  4058                           ;main.c: 356:             next_index = Next_index();
  4059     03A8  3187  270B  3183   	fcall	_Next_index
  4060     03AB  00D5               	movwf	??_main^(0+128)
  4061     03AC  01D6               	clrf	(??_main^(0+128)+1)
  4062     03AD  0855               	movf	??_main^(0+128),w
  4063     03AE  0022               	movlb	2	; select bank2
  4064     03AF  00B5               	movwf	main@next_index^(0+256)
  4065     03B0  0021               	movlb	1	; select bank1
  4066     03B1  0856               	movf	(??_main+1)^(0+128),w
  4067     03B2  0022               	movlb	2	; select bank2
  4068     03B3  00B6               	movwf	(main@next_index+1)^(0+256)
  4069                           
  4070                           ;main.c: 357:             if(current_floor <= var.D) LATAbits.LATA7 = 1;
  4071     03B4  0020               	movlb	0	; select bank0
  4072     03B5  0E20               	swapf	_var,w
  4073     03B6  390F               	andlw	15
  4074     03B7  0021               	movlb	1	; select bank1
  4075     03B8  00D5               	movwf	??_main^(0+128)
  4076     03B9  0020               	movlb	0	; select bank0
  4077     03BA  083D               	movf	_current_floor,w
  4078     03BB  0021               	movlb	1	; select bank1
  4079     03BC  0255               	subwf	??_main^(0+128),w
  4080     03BD  1C03               	skipc
  4081     03BE  2BC2               	goto	l997
  4082     03BF  0022               	movlb	2	; select bank2
  4083     03C0  178C               	bsf	12,7	;volatile
  4084     03C1  2BC4               	goto	l4959
  4085     03C2                     l997:	
  4086                           ;main.c: 358:             else LATAbits.LATA7=0;
  4087                           
  4088     03C2  0022               	movlb	2	; select bank2
  4089     03C3  138C               	bcf	12,7	;volatile
  4090     03C4                     l4959:
  4091                           
  4092                           ;main.c: 360:             Motor_Turn_On();
  4093     03C4  318D  2529  3183   	fcall	_Motor_Turn_On
  4094     03C7                     l4961:	
  4095                           ;main.c: 362:             while(current_floor != var.D);
  4096                           
  4097     03C7  0020               	movlb	0	; select bank0
  4098     03C8  0E20               	swapf	_var,w
  4099     03C9  390F               	andlw	15
  4100     03CA  063D               	xorwf	_current_floor,w
  4101     03CB  1D03               	skipz
  4102     03CC  2BC7               	goto	l4961
  4103                           
  4104                           ;main.c: 363:             index = next_index;
  4105     03CD  0022               	movlb	2	; select bank2
  4106     03CE  0835               	movf	main@next_index^(0+256),w
  4107     03CF  0020               	movlb	0	; select bank0
  4108     03D0  00BE               	movwf	_index
  4109                           
  4110                           ;main.c: 364:             route[index] = 0;
  4111     03D1  083E               	movf	_index,w
  4112     03D2  3E27               	addlw	(low (_route| 0))& (0+255)
  4113     03D3  0086               	movwf	6
  4114     03D4  0187               	clrf	7
  4115     03D5  0181               	clrf	1
  4116                           
  4117                           ;main.c: 366:             Motor_Turn_Off();
  4118     03D6  318C  24C8  3183   	fcall	_Motor_Turn_Off
  4119                           
  4120                           ;main.c: 367:             _delay((unsigned long)((2000)*(8000000/4000.0)));
  4121     03D9  3015               	movlw	21
  4122     03DA  0021               	movlb	1	; select bank1
  4123     03DB  00D6               	movwf	(??_main^(0+128)+1)
  4124     03DC  304B               	movlw	75
  4125     03DD  00D5               	movwf	??_main^(0+128)
  4126     03DE  30BE               	movlw	190
  4127     03DF                     u3787:
  4128     03DF  0B89               	decfsz	9,f
  4129     03E0  2BDF               	goto	u3787
  4130     03E1  0BD5               	decfsz	??_main^(0+128),f
  4131     03E2  2BDF               	goto	u3787
  4132     03E3  0BD6               	decfsz	(??_main^(0+128)+1),f
  4133     03E4  2BDF               	goto	u3787
  4134     03E5  0000               	nop
  4135     03E6                     l4939:	
  4136                           ;main.c: 372:           }
  4137                           
  4138                           
  4139                           ;main.c: 347:     {;main.c: 348:         _Bool is_empty = Route_empty();
  4140     03E6  318E  2691  3183   	fcall	_Route_empty
  4141     03E9  0022               	movlb	2	; select bank2
  4142     03EA  00B7               	movwf	main@is_empty^(0+256)
  4143                           
  4144                           ;main.c: 349:         if(is_empty==0){
  4145     03EB  0837               	movf	main@is_empty^(0+256),w
  4146     03EC  1903               	btfsc	3,2
  4147     03ED  2B85               	goto	l4943
  4148     03EE  318D  25BF  3183   	fcall	_Idle
  4149     03F1  2BE6               	goto	l4939
  4150     03F2                     __end_of_main:
  4151                           
  4152                           	psect	text1
  4153     0771                     __ptext1:	
  4154 ;; *************** function _Start *****************
  4155 ;; Defined at:
  4156 ;;		line 161 in file "main.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;		None
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;		None
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 1F/1
  4167 ;;		On exit  : 1F/1
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4170 ;;      Params:         0       0       0       0       0       0
  4171 ;;      Locals:         0       0       0       0       0       0
  4172 ;;      Temps:          0       0       2       0       0       0
  4173 ;;      Totals:         0       0       2       0       0       0
  4174 ;;Total ram usage:        2 bytes
  4175 ;; Hardware stack levels used: 1
  4176 ;; Hardware stack levels required when called: 12
  4177 ;; This function calls:
  4178 ;;		_Matrix_update_floor
  4179 ;;		_Motor_Turn_Off
  4180 ;;		_Motor_Turn_On
  4181 ;;		_TMR0_Reload
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187     0771                     _Start:	
  4188                           ;psect for function _Start
  4189                           
  4190                           
  4191                           ;main.c: 162:     (INTCONbits.GIE = 0);
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _Start: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4195     0771  138B               	bcf	11,7	;volatile
  4196                           
  4197                           ;main.c: 163:     (INTCONbits.PEIE = 0);
  4198     0772  130B               	bcf	11,6	;volatile
  4199                           
  4200                           ;main.c: 164:     INTCONbits.IOCIE = 0;
  4201     0773  118B               	bcf	11,3	;volatile
  4202                           
  4203                           ;main.c: 165:     INTCONbits.PEIE = 0;
  4204     0774  130B               	bcf	11,6	;volatile
  4205                           
  4206                           ;main.c: 166:     PIE1bits.ADIE = 0;
  4207     0775  1311               	bcf	17,6	;volatile
  4208                           
  4209                           ;main.c: 167:     PIE1bits.RCIE = 0;
  4210     0776  1291               	bcf	17,5	;volatile
  4211                           
  4212                           ;main.c: 168:     PIE2bits.C2IE = 0;
  4213     0777  1312               	bcf	18,6	;volatile
  4214                           
  4215                           ;main.c: 169:     PIE1bits.TMR1IE = 0;
  4216     0778  1011               	bcf	17,0	;volatile
  4217                           
  4218                           ;main.c: 170:     LATAbits.LATA7 = 0;
  4219     0779  0022               	movlb	2	; select bank2
  4220     077A  138C               	bcf	12,7	;volatile
  4221                           
  4222                           ;main.c: 171:     Motor_Turn_On();
  4223     077B  318D  2529  3187   	fcall	_Motor_Turn_On
  4224                           
  4225                           ;main.c: 172:     _delay((unsigned long)((7000)*(8000000/4000.0)));
  4226     077E  3048               	movlw	72
  4227     077F  0021               	movlb	1	; select bank1
  4228     0780  00D4               	movwf	(??_Start^(0+128)+1)
  4229     0781  3006               	movlw	6
  4230     0782  00D3               	movwf	??_Start^(0+128)
  4231     0783  309F               	movlw	159
  4232     0784                     u3797:
  4233     0784  0B89               	decfsz	9,f
  4234     0785  2F84               	goto	u3797
  4235     0786  0BD3               	decfsz	??_Start^(0+128),f
  4236     0787  2F84               	goto	u3797
  4237     0788  0BD4               	decfsz	(??_Start^(0+128)+1),f
  4238     0789  2F84               	goto	u3797
  4239     078A  3200               	nop2
  4240                           
  4241                           ;main.c: 173:     Motor_Turn_Off();
  4242     078B  318C  24C8  3187   	fcall	_Motor_Turn_Off
  4243                           
  4244                           ;main.c: 174:     Matrix_update_floor(0);
  4245     078E  3000               	movlw	0
  4246     078F  3187  27D2  3187   	fcall	_Matrix_update_floor
  4247                           
  4248                           ;main.c: 175:     index = 0;
  4249     0792  0020               	movlb	0	; select bank0
  4250     0793  01BE               	clrf	_index
  4251                           
  4252                           ;main.c: 176:     LATAbits.LATA7 = 1;
  4253     0794  0022               	movlb	2	; select bank2
  4254     0795  178C               	bsf	12,7	;volatile
  4255                           
  4256                           ;main.c: 177:     TMR0_Reload();
  4257     0796  318C  2420         	fcall	_TMR0_Reload
  4258                           
  4259                           ;main.c: 178:     position = 0;
  4260     0798  0021               	movlb	1	; select bank1
  4261     0799  01BE               	clrf	_position^(0+128)
  4262     079A  01BF               	clrf	(_position+1)^(0+128)
  4263                           
  4264                           ;main.c: 180:     INTCONbits.IOCIE = 1;
  4265     079B  158B               	bsf	11,3	;volatile
  4266                           
  4267                           ;main.c: 181:     INTCONbits.PEIE = 1;
  4268     079C  170B               	bsf	11,6	;volatile
  4269                           
  4270                           ;main.c: 182:     PIE1bits.ADIE = 1;
  4271     079D  1711               	bsf	17,6	;volatile
  4272                           
  4273                           ;main.c: 183:     PIE1bits.RCIE = 1;
  4274     079E  1691               	bsf	17,5	;volatile
  4275                           
  4276                           ;main.c: 184:     PIE2bits.C2IE = 1;
  4277     079F  1712               	bsf	18,6	;volatile
  4278                           
  4279                           ;main.c: 185:     PIE1bits.TMR1IE = 1;
  4280     07A0  1411               	bsf	17,0	;volatile
  4281     07A1  0008               	return
  4282     07A2                     __end_of_Start:
  4283                           
  4284                           	psect	text2
  4285     0C20                     __ptext2:	
  4286 ;; *************** function _TMR0_Reload *****************
  4287 ;; Defined at:
  4288 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;		None
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg
  4297 ;; Tracked objects:
  4298 ;;		On entry : 1F/2
  4299 ;;		On exit  : 1F/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4302 ;;      Params:         0       0       0       0       0       0
  4303 ;;      Locals:         0       0       0       0       0       0
  4304 ;;      Temps:          0       0       0       0       0       0
  4305 ;;      Totals:         0       0       0       0       0       0
  4306 ;;Total ram usage:        0 bytes
  4307 ;; Hardware stack levels used: 1
  4308 ;; Hardware stack levels required when called: 8
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_Start
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316     0C20                     _TMR0_Reload:	
  4317                           ;psect for function _TMR0_Reload
  4318                           
  4319                           
  4320                           ;mcc_generated_files/tmr0.c: 98:     TMR0 = timer0ReloadVal;
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in _TMR0_Reload: [wreg]
  4324     0C20  0020               	movlb	0	; select bank0
  4325     0C21  0835               	movf	_timer0ReloadVal,w	;volatile
  4326     0C22  0095               	movwf	21	;volatile
  4327     0C23  0008               	return
  4328     0C24                     __end_of_TMR0_Reload:
  4329                           
  4330                           	psect	text3
  4331     07D2                     __ptext3:	
  4332 ;; *************** function _Matrix_update_floor *****************
  4333 ;; Defined at:
  4334 ;;		line 227 in file "main.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  display_floo    1    wreg     unsigned char 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  display_floo    1   10[BANK1 ] unsigned char 
  4339 ;;  i               1   11[BANK1 ] unsigned char 
  4340 ;;  data            2    8[BANK1 ] unsigned char [2]
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 18/2
  4347 ;;		On exit  : 1F/1
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4350 ;;      Params:         0       0       0       0       0       0
  4351 ;;      Locals:         0       0       4       0       0       0
  4352 ;;      Temps:          0       0       1       0       0       0
  4353 ;;      Totals:         0       0       5       0       0       0
  4354 ;;Total ram usage:        5 bytes
  4355 ;; Hardware stack levels used: 1
  4356 ;; Hardware stack levels required when called: 10
  4357 ;; This function calls:
  4358 ;;		_Tx_spi
  4359 ;; This function is called by:
  4360 ;;		_Start
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364     07D2                     _Matrix_update_floor:	
  4365                           ;psect for function _Matrix_update_floor
  4366                           
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4370                           ;Matrix_update_floor@display_floor stored from wreg
  4371     07D2  0021               	movlb	1	; select bank1
  4372     07D3  00CA               	movwf	Matrix_update_floor@display_floor^(0+128)
  4373                           
  4374                           ;main.c: 228:     uint8_t data[2];;main.c: 229:     display_floor = display_floor*4;
  4375     07D4  084A               	movf	Matrix_update_floor@display_floor^(0+128),w
  4376     07D5  00C7               	movwf	??_Matrix_update_floor^(0+128)
  4377     07D6  3002               	movlw	2
  4378     07D7                     u3365:
  4379     07D7  35C7               	lslf	??_Matrix_update_floor^(0+128),f
  4380     07D8  0B89               	decfsz	9,f
  4381     07D9  2FD7               	goto	u3365
  4382     07DA  0847               	movf	??_Matrix_update_floor^(0+128),w
  4383     07DB  00CA               	movwf	Matrix_update_floor@display_floor^(0+128)
  4384                           
  4385                           ;main.c: 231:    for(uint8_t i=5;i<=8;i++){
  4386     07DC  3005               	movlw	5
  4387     07DD  00CB               	movwf	Matrix_update_floor@i^(0+128)
  4388     07DE                     l4625:
  4389                           
  4390                           ;main.c: 232:         data[0] = i;
  4391     07DE  084B               	movf	Matrix_update_floor@i^(0+128),w
  4392     07DF  00C8               	movwf	Matrix_update_floor@data^(0+128)
  4393                           
  4394                           ;main.c: 233:         data[1] = MATRIX_FLOOR[display_floor];
  4395     07E0  084A               	movf	Matrix_update_floor@display_floor^(0+128),w
  4396     07E1  3EFC               	addlw	low (_MATRIX_FLOOR| (0+32768))
  4397     07E2  0084               	movwf	4
  4398     07E3  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
  4399     07E4  1803               	skipnc
  4400     07E5  3E01               	addlw	1
  4401     07E6  0085               	movwf	5
  4402     07E7  0800               	movf	0,w	;code access
  4403     07E8  00C9               	movwf	(Matrix_update_floor@data^(0+128)+1)
  4404                           
  4405                           ;main.c: 234:         Tx_spi(data, 2);
  4406     07E9  30C8               	movlw	(low (Matrix_update_floor@data| 0))& (0+255)
  4407     07EA  00C4               	movwf	Tx_spi@data^(0+128)
  4408     07EB  3002               	movlw	2
  4409     07EC  00C5               	movwf	Tx_spi@dataSize^(0+128)
  4410     07ED  3000               	movlw	0
  4411     07EE  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  4412     07EF  318D  258D  3187   	fcall	_Tx_spi
  4413                           
  4414                           ;main.c: 235:         display_floor++;
  4415     07F2  3001               	movlw	1
  4416     07F3  0021               	movlb	1	; select bank1
  4417     07F4  07CA               	addwf	Matrix_update_floor@display_floor^(0+128),f
  4418                           
  4419                           ;main.c: 236:     }
  4420     07F5  3001               	movlw	1
  4421     07F6  07CB               	addwf	Matrix_update_floor@i^(0+128),f
  4422     07F7  3009               	movlw	9
  4423     07F8  024B               	subwf	Matrix_update_floor@i^(0+128),w
  4424     07F9  1803               	btfsc	3,0
  4425     07FA  0008               	return
  4426     07FB  2FDE               	goto	l4625
  4427     07FC                     __end_of_Matrix_update_floor:
  4428                           
  4429                           	psect	text4
  4430     0FA7                     __ptext4:	
  4431 ;; *************** function _SYSTEM_Initialize *****************
  4432 ;; Defined at:
  4433 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0, pclath, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : B1F/0
  4444 ;;		On exit  : 1F/1
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4447 ;;      Params:         0       0       0       0       0       0
  4448 ;;      Locals:         0       0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0
  4450 ;;      Totals:         0       0       0       0       0       0
  4451 ;;Total ram usage:        0 bytes
  4452 ;; Hardware stack levels used: 1
  4453 ;; Hardware stack levels required when called: 10
  4454 ;; This function calls:
  4455 ;;		_ADC_Initialize
  4456 ;;		_CMP1_Initialize
  4457 ;;		_CMP2_Initialize
  4458 ;;		_EUSART_Initialize
  4459 ;;		_FVR_Initialize
  4460 ;;		_OSCILLATOR_Initialize
  4461 ;;		_PIN_MANAGER_Initialize
  4462 ;;		_PWM3_Initialize
  4463 ;;		_SPI1_Initialize
  4464 ;;		_TMR0_Initialize
  4465 ;;		_TMR1_Initialize
  4466 ;;		_TMR2_Initialize
  4467 ;;		_TMR6_Initialize
  4468 ;;		_WDT_Initialize
  4469 ;; This function is called by:
  4470 ;;		_main
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474     0FA7                     _SYSTEM_Initialize:	
  4475                           ;psect for function _SYSTEM_Initialize
  4476                           
  4477                           
  4478                           ;mcc_generated_files/mcc.c: 53:     SPI1_Initialize();
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4482     0FA7  318C  24F6  318F   	fcall	_SPI1_Initialize
  4483                           
  4484                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  4485     0FAA  318F  27D1  318F   	fcall	_PIN_MANAGER_Initialize
  4486                           
  4487                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4488     0FAD  318C  2451  318F   	fcall	_OSCILLATOR_Initialize
  4489                           
  4490                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4491     0FB0  318C  241C  318F   	fcall	_WDT_Initialize
  4492                           
  4493                           ;mcc_generated_files/mcc.c: 57:     CMP2_Initialize();
  4494     0FB3  318C  24D3  318F   	fcall	_CMP2_Initialize
  4495                           
  4496                           ;mcc_generated_files/mcc.c: 58:     FVR_Initialize();
  4497     0FB6  318C  2418  318F   	fcall	_FVR_Initialize
  4498                           
  4499                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
  4500     0FB9  318C  2471  318F   	fcall	_TMR2_Initialize
  4501                           
  4502                           ;mcc_generated_files/mcc.c: 60:     TMR0_Initialize();
  4503     0FBC  318C  2493  318F   	fcall	_TMR0_Initialize
  4504                           
  4505                           ;mcc_generated_files/mcc.c: 61:     TMR6_Initialize();
  4506     0FBF  318C  249D  318F   	fcall	_TMR6_Initialize
  4507                           
  4508                           ;mcc_generated_files/mcc.c: 62:     CMP1_Initialize();
  4509     0FC2  318C  24EA  318F   	fcall	_CMP1_Initialize
  4510                           
  4511                           ;mcc_generated_files/mcc.c: 63:     ADC_Initialize();
  4512     0FC5  318D  2551  318F   	fcall	_ADC_Initialize
  4513                           
  4514                           ;mcc_generated_files/mcc.c: 64:     PWM3_Initialize();
  4515     0FC8  318D  2536  318F   	fcall	_PWM3_Initialize
  4516                           
  4517                           ;mcc_generated_files/mcc.c: 65:     TMR1_Initialize();
  4518     0FCB  318E  2613  318F   	fcall	_TMR1_Initialize
  4519                           
  4520                           ;mcc_generated_files/mcc.c: 66:     EUSART_Initialize();
  4521     0FCE  3187  27A2         	fcall	_EUSART_Initialize
  4522     0FD0  0008               	return
  4523     0FD1                     __end_of_SYSTEM_Initialize:
  4524                           
  4525                           	psect	text5
  4526     0C1C                     __ptext5:	
  4527 ;; *************** function _WDT_Initialize *****************
  4528 ;; Defined at:
  4529 ;;		line 79 in file "mcc_generated_files/mcc.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;		None
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;		None
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      void 
  4536 ;; Registers used:
  4537 ;;		None
  4538 ;; Tracked objects:
  4539 ;;		On entry : 1F/2
  4540 ;;		On exit  : 1F/1
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4543 ;;      Params:         0       0       0       0       0       0
  4544 ;;      Locals:         0       0       0       0       0       0
  4545 ;;      Temps:          0       0       0       0       0       0
  4546 ;;      Totals:         0       0       0       0       0       0
  4547 ;;Total ram usage:        0 bytes
  4548 ;; Hardware stack levels used: 1
  4549 ;; Hardware stack levels required when called: 8
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_SYSTEM_Initialize
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557     0C1C                     _WDT_Initialize:	
  4558                           ;psect for function _WDT_Initialize
  4559                           
  4560                           
  4561                           ;mcc_generated_files/mcc.c: 82:     WDTCON = 0x16;
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _WDT_Initialize: []
  4565     0C1C  3016               	movlw	22
  4566     0C1D  0021               	movlb	1	; select bank1
  4567     0C1E  0097               	movwf	23	;volatile
  4568     0C1F  0008               	return
  4569     0C20                     __end_of_WDT_Initialize:
  4570                           
  4571                           	psect	text6
  4572     0C9D                     __ptext6:	
  4573 ;; *************** function _TMR6_Initialize *****************
  4574 ;; Defined at:
  4575 ;;		line 62 in file "mcc_generated_files/tmr6.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		status,2
  4584 ;; Tracked objects:
  4585 ;;		On entry : 1F/0
  4586 ;;		On exit  : 1F/8
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4589 ;;      Params:         0       0       0       0       0       0
  4590 ;;      Locals:         0       0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0
  4592 ;;      Totals:         0       0       0       0       0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 8
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_SYSTEM_Initialize
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603     0C9D                     _TMR6_Initialize:	
  4604                           ;psect for function _TMR6_Initialize
  4605                           
  4606                           
  4607                           ;mcc_generated_files/tmr6.c: 67:     PR6 = 0xFF;
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _TMR6_Initialize: [status,2]
  4611     0C9D  30FF               	movlw	255
  4612     0C9E  0028               	movlb	8	; select bank8
  4613     0C9F  009D               	movwf	29	;volatile
  4614                           
  4615                           ;mcc_generated_files/tmr6.c: 70:     TMR6 = 0x00;
  4616     0CA0  019C               	clrf	28	;volatile
  4617                           
  4618                           ;mcc_generated_files/tmr6.c: 73:     PIR3bits.TMR6IF = 0;
  4619     0CA1  0020               	movlb	0	; select bank0
  4620     0CA2  1193               	bcf	19,3	;volatile
  4621                           
  4622                           ;mcc_generated_files/tmr6.c: 76:     T6CON = 0x06;
  4623     0CA3  3006               	movlw	6
  4624     0CA4  0028               	movlb	8	; select bank8
  4625     0CA5  009E               	movwf	30	;volatile
  4626     0CA6  0008               	return
  4627     0CA7                     __end_of_TMR6_Initialize:
  4628                           
  4629                           	psect	text7
  4630     0C71                     __ptext7:	
  4631 ;; *************** function _TMR2_Initialize *****************
  4632 ;; Defined at:
  4633 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		status,2
  4642 ;; Tracked objects:
  4643 ;;		On entry : 1F/2
  4644 ;;		On exit  : 1F/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4647 ;;      Params:         0       0       0       0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0
  4650 ;;      Totals:         0       0       0       0       0       0
  4651 ;;Total ram usage:        0 bytes
  4652 ;; Hardware stack levels used: 1
  4653 ;; Hardware stack levels required when called: 8
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_SYSTEM_Initialize
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661     0C71                     _TMR2_Initialize:	
  4662                           ;psect for function _TMR2_Initialize
  4663                           
  4664                           
  4665                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0x01;
  4666                           
  4667                           ;incstack = 0
  4668                           ; Regs used in _TMR2_Initialize: [status,2]
  4669     0C71  3001               	movlw	1
  4670     0C72  0020               	movlb	0	; select bank0
  4671     0C73  009B               	movwf	27	;volatile
  4672                           
  4673                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4674     0C74  019A               	clrf	26	;volatile
  4675                           
  4676                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4677     0C75  1091               	bcf	17,1	;volatile
  4678                           
  4679                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4680     0C76  3004               	movlw	4
  4681     0C77  009C               	movwf	28	;volatile
  4682     0C78  0008               	return
  4683     0C79                     __end_of_TMR2_Initialize:
  4684                           
  4685                           	psect	text8
  4686     0E13                     __ptext8:	
  4687 ;; *************** function _TMR1_Initialize *****************
  4688 ;; Defined at:
  4689 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2, status,0, pclath, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 1F/5
  4700 ;;		On exit  : 1F/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4703 ;;      Params:         0       0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used: 1
  4709 ;; Hardware stack levels required when called: 9
  4710 ;; This function calls:
  4711 ;;		_TMR1_SetInterruptHandler
  4712 ;; This function is called by:
  4713 ;;		_SYSTEM_Initialize
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717     0E13                     _TMR1_Initialize:	
  4718                           ;psect for function _TMR1_Initialize
  4719                           
  4720                           
  4721                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4725     0E13  0020               	movlb	0	; select bank0
  4726     0E14  0199               	clrf	25	;volatile
  4727                           
  4728                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x15;
  4729     0E15  3015               	movlw	21
  4730     0E16  0097               	movwf	23	;volatile
  4731                           
  4732                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xA0;
  4733     0E17  30A0               	movlw	160
  4734     0E18  0096               	movwf	22	;volatile
  4735                           
  4736                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4737     0E19  1011               	bcf	17,0	;volatile
  4738                           
  4739                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4740     0E1A  0817               	movf	23,w	;volatile
  4741     0E1B  00B0               	movwf	_timer1ReloadVal+1	;volatile
  4742     0E1C  0816               	movf	22,w	;volatile
  4743     0E1D  00AF               	movwf	_timer1ReloadVal	;volatile
  4744                           
  4745                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4746     0E1E  0021               	movlb	1	; select bank1
  4747     0E1F  1411               	bsf	17,0	;volatile
  4748                           
  4749                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4750     0E20  3003               	movlw	low _TMR1_DefaultInterruptHandler
  4751     0E21  00C0               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  4752     0E22  3000               	movlw	high _TMR1_DefaultInterruptHandler
  4753     0E23  00C1               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4754     0E24  318C  244C         	fcall	_TMR1_SetInterruptHandler
  4755                           
  4756                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x01;
  4757     0E26  3001               	movlw	1
  4758     0E27  0020               	movlb	0	; select bank0
  4759     0E28  0098               	movwf	24	;volatile
  4760     0E29  0008               	return
  4761     0E2A                     __end_of_TMR1_Initialize:
  4762                           
  4763                           	psect	text9
  4764     0C4C                     __ptext9:	
  4765 ;; *************** function _TMR1_SetInterruptHandler *****************
  4766 ;; Defined at:
  4767 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4770 ;;		 -> Write_UART(1), TMR1_DefaultInterruptHandler(1), 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg
  4777 ;; Tracked objects:
  4778 ;;		On entry : 1F/1
  4779 ;;		On exit  : 1F/1
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4782 ;;      Params:         0       0       2       0       0       0
  4783 ;;      Locals:         0       0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0
  4785 ;;      Totals:         0       0       2       0       0       0
  4786 ;;Total ram usage:        2 bytes
  4787 ;; Hardware stack levels used: 1
  4788 ;; Hardware stack levels required when called: 8
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_TMR1_Initialize
  4793 ;;		_main
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797     0C4C                     _TMR1_SetInterruptHandler:	
  4798                           ;psect for function _TMR1_SetInterruptHandler
  4799                           
  4800                           
  4801                           ;mcc_generated_files/tmr1.c: 186:     TMR1_InterruptHandler = InterruptHandler;
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4805     0C4C  0841               	movf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  4806     0C4D  00DA               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  4807     0C4E  0840               	movf	TMR1_SetInterruptHandler@InterruptHandler^(0+128),w
  4808     0C4F  00D9               	movwf	_TMR1_InterruptHandler^(0+128)
  4809     0C50  0008               	return
  4810     0C51                     __end_of_TMR1_SetInterruptHandler:
  4811                           
  4812                           	psect	text10
  4813     0C93                     __ptext10:	
  4814 ;; *************** function _TMR0_Initialize *****************
  4815 ;; Defined at:
  4816 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2
  4825 ;; Tracked objects:
  4826 ;;		On entry : 1F/0
  4827 ;;		On exit  : 1F/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4830 ;;      Params:         0       0       0       0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0
  4833 ;;      Totals:         0       0       0       0       0       0
  4834 ;;Total ram usage:        0 bytes
  4835 ;; Hardware stack levels used: 1
  4836 ;; Hardware stack levels required when called: 8
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_SYSTEM_Initialize
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844     0C93                     _TMR0_Initialize:	
  4845                           ;psect for function _TMR0_Initialize
  4846                           
  4847                           
  4848                           ;mcc_generated_files/tmr0.c: 68:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xE8 
      +                          & 0x3F));
  4849                           
  4850                           ;incstack = 0
  4851                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4852     0C93  0021               	movlb	1	; select bank1
  4853     0C94  0815               	movf	21,w	;volatile
  4854     0C95  39C0               	andlw	192
  4855     0C96  3828               	iorlw	40
  4856     0C97  0095               	movwf	21	;volatile
  4857                           
  4858                           ;mcc_generated_files/tmr0.c: 71:     TMR0 = 0x00;
  4859     0C98  0020               	movlb	0	; select bank0
  4860     0C99  0195               	clrf	21	;volatile
  4861                           
  4862                           ;mcc_generated_files/tmr0.c: 74:     timer0ReloadVal= 0;
  4863     0C9A  01B5               	clrf	_timer0ReloadVal	;volatile
  4864                           
  4865                           ;mcc_generated_files/tmr0.c: 77:     INTCONbits.TMR0IF = 0;
  4866     0C9B  110B               	bcf	11,2	;volatile
  4867     0C9C  0008               	return
  4868     0C9D                     __end_of_TMR0_Initialize:
  4869                           
  4870                           	psect	text11
  4871     0CF6                     __ptext11:	
  4872 ;; *************** function _SPI1_Initialize *****************
  4873 ;; Defined at:
  4874 ;;		line 62 in file "mcc_generated_files/spi1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      void 
  4881 ;; Registers used:
  4882 ;;		None
  4883 ;; Tracked objects:
  4884 ;;		On entry : B1F/0
  4885 ;;		On exit  : B1F/4
  4886 ;;		Unchanged: B00/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4888 ;;      Params:         0       0       0       0       0       0
  4889 ;;      Locals:         0       0       0       0       0       0
  4890 ;;      Temps:          0       0       0       0       0       0
  4891 ;;      Totals:         0       0       0       0       0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used: 1
  4894 ;; Hardware stack levels required when called: 8
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_SYSTEM_Initialize
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902     0CF6                     _SPI1_Initialize:	
  4903                           ;psect for function _SPI1_Initialize
  4904                           
  4905                           
  4906                           ;mcc_generated_files/spi1.c: 65:     SSP1STAT = 0x40;
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _SPI1_Initialize: []
  4910     0CF6  3040               	movlw	64
  4911     0CF7  0024               	movlb	4	; select bank4
  4912     0CF8  0094               	movwf	20	;volatile
  4913                           
  4914                           ;mcc_generated_files/spi1.c: 66:     SSP1CON1 = 0x03;
  4915     0CF9  3003               	movlw	3
  4916     0CFA  0095               	movwf	21	;volatile
  4917                           
  4918                           ;mcc_generated_files/spi1.c: 67:     SSP1ADD = 0x13;
  4919     0CFB  3013               	movlw	19
  4920     0CFC  0092               	movwf	18	;volatile
  4921                           
  4922                           ;mcc_generated_files/spi1.c: 68:     TRISBbits.TRISB4 = 0;
  4923     0CFD  0021               	movlb	1	; select bank1
  4924     0CFE  120D               	bcf	13,4	;volatile
  4925                           
  4926                           ;mcc_generated_files/spi1.c: 69:     SSP1CON1bits.SSPEN = 0;
  4927     0CFF  0024               	movlb	4	; select bank4
  4928     0D00  1295               	bcf	21,5	;volatile
  4929     0D01  0008               	return
  4930     0D02                     __end_of_SPI1_Initialize:
  4931                           
  4932                           	psect	text12
  4933     0D36                     __ptext12:	
  4934 ;; *************** function _PWM3_Initialize *****************
  4935 ;; Defined at:
  4936 ;;		line 64 in file "mcc_generated_files/pwm3.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0
  4945 ;; Tracked objects:
  4946 ;;		On entry : 1F/1
  4947 ;;		On exit  : 1F/5
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4950 ;;      Params:         0       0       0       0       0       0
  4951 ;;      Locals:         0       0       0       0       0       0
  4952 ;;      Temps:          0       0       0       0       0       0
  4953 ;;      Totals:         0       0       0       0       0       0
  4954 ;;Total ram usage:        0 bytes
  4955 ;; Hardware stack levels used: 1
  4956 ;; Hardware stack levels required when called: 8
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_SYSTEM_Initialize
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964     0D36                     _PWM3_Initialize:	
  4965                           ;psect for function _PWM3_Initialize
  4966                           
  4967                           
  4968                           ;mcc_generated_files/pwm3.c: 69:  CCP3CON = 0x1C;
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  4972     0D36  301C               	movlw	28
  4973     0D37  0026               	movlb	6	; select bank6
  4974     0D38  0093               	movwf	19	;volatile
  4975                           
  4976                           ;mcc_generated_files/pwm3.c: 72:  CCPR3L = 0x7F;
  4977     0D39  307F               	movlw	127
  4978     0D3A  0091               	movwf	17	;volatile
  4979                           
  4980                           ;mcc_generated_files/pwm3.c: 75:  CCPR3H = 0x01;
  4981     0D3B  3001               	movlw	1
  4982     0D3C  0092               	movwf	18	;volatile
  4983                           
  4984                           ;mcc_generated_files/pwm3.c: 78:  CCPTMRS0bits.C3TSEL = 0x2;
  4985     0D3D  0025               	movlb	5	; select bank5
  4986     0D3E  081E               	movf	30,w	;volatile
  4987     0D3F  39CF               	andlw	-49
  4988     0D40  3820               	iorlw	32
  4989     0D41  009E               	movwf	30	;volatile
  4990     0D42  0008               	return
  4991     0D43                     __end_of_PWM3_Initialize:
  4992                           
  4993                           	psect	text13
  4994     0FD1                     __ptext13:	
  4995 ;; *************** function _PIN_MANAGER_Initialize *****************
  4996 ;; Defined at:
  4997 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : B1F/4
  5008 ;;		On exit  : 1F/1
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5011 ;;      Params:         0       0       0       0       0       0
  5012 ;;      Locals:         0       0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0       0
  5014 ;;      Totals:         0       0       0       0       0       0
  5015 ;;Total ram usage:        0 bytes
  5016 ;; Hardware stack levels used: 1
  5017 ;; Hardware stack levels required when called: 9
  5018 ;; This function calls:
  5019 ;;		_IOCBF0_SetInterruptHandler
  5020 ;;		_IOCBF3_SetInterruptHandler
  5021 ;; This function is called by:
  5022 ;;		_SYSTEM_Initialize
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026     0FD1                     _PIN_MANAGER_Initialize:	
  5027                           ;psect for function _PIN_MANAGER_Initialize
  5028                           
  5029                           
  5030                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5034     0FD1  0022               	movlb	2	; select bank2
  5035     0FD2  018C               	clrf	12	;volatile
  5036                           
  5037                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  5038     0FD3  018D               	clrf	13	;volatile
  5039                           
  5040                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x37;
  5041     0FD4  3037               	movlw	55
  5042     0FD5  0021               	movlb	1	; select bank1
  5043     0FD6  008C               	movwf	12	;volatile
  5044                           
  5045                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x2D;
  5046     0FD7  302D               	movlw	45
  5047     0FD8  008D               	movwf	13	;volatile
  5048                           
  5049                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0xC0;
  5050     0FD9  30C0               	movlw	192
  5051     0FDA  0023               	movlb	3	; select bank3
  5052     0FDB  008D               	movwf	13	;volatile
  5053                           
  5054                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x07;
  5055     0FDC  3007               	movlw	7
  5056     0FDD  008C               	movwf	12	;volatile
  5057                           
  5058                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x09;
  5059     0FDE  3009               	movlw	9
  5060     0FDF  0024               	movlb	4	; select bank4
  5061     0FE0  008D               	movwf	13	;volatile
  5062                           
  5063                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  5064     0FE1  018C               	clrf	12	;volatile
  5065                           
  5066                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 0;
  5067     0FE2  0021               	movlb	1	; select bank1
  5068     0FE3  1395               	bcf	21,7	;volatile
  5069                           
  5070                           ;mcc_generated_files/pin_manager.c: 89:     APFCON0 = 0xC9;
  5071     0FE4  30C9               	movlw	201
  5072     0FE5  0022               	movlb	2	; select bank2
  5073     0FE6  009D               	movwf	29	;volatile
  5074                           
  5075                           ;mcc_generated_files/pin_manager.c: 90:     APFCON1 = 0x01;
  5076     0FE7  3001               	movlw	1
  5077     0FE8  009E               	movwf	30	;volatile
  5078                           
  5079                           ;mcc_generated_files/pin_manager.c: 96:     IOCBFbits.IOCBF0 = 0;
  5080     0FE9  0027               	movlb	7	; select bank7
  5081     0FEA  1016               	bcf	22,0	;volatile
  5082                           
  5083                           ;mcc_generated_files/pin_manager.c: 98:     IOCBFbits.IOCBF3 = 0;
  5084     0FEB  1196               	bcf	22,3	;volatile
  5085                           
  5086                           ;mcc_generated_files/pin_manager.c: 100:     IOCBNbits.IOCBN0 = 1;
  5087     0FEC  1415               	bsf	21,0	;volatile
  5088                           
  5089                           ;mcc_generated_files/pin_manager.c: 102:     IOCBNbits.IOCBN3 = 1;
  5090     0FED  1595               	bsf	21,3	;volatile
  5091                           
  5092                           ;mcc_generated_files/pin_manager.c: 104:     IOCBPbits.IOCBP0 = 0;
  5093     0FEE  1014               	bcf	20,0	;volatile
  5094                           
  5095                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP3 = 0;
  5096     0FEF  1194               	bcf	20,3	;volatile
  5097                           
  5098                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF0_SetInterruptHandler(IOCBF0_DefaultIn
      +                          terruptHandler);
  5099     0FF0  300A               	movlw	low _IOCBF0_DefaultInterruptHandler
  5100     0FF1  0021               	movlb	1	; select bank1
  5101     0FF2  00C0               	movwf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)
  5102     0FF3  300C               	movlw	high _IOCBF0_DefaultInterruptHandler
  5103     0FF4  00C1               	movwf	(IOCBF0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5104     0FF5  318C  2442  318F   	fcall	_IOCBF0_SetInterruptHandler
  5105                           
  5106                           ;mcc_generated_files/pin_manager.c: 112:     IOCBF3_SetInterruptHandler(IOCBF3_DefaultIn
      +                          terruptHandler);
  5107     0FF8  300B               	movlw	low _IOCBF3_DefaultInterruptHandler
  5108     0FF9  00C0               	movwf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)
  5109     0FFA  300C               	movlw	high _IOCBF3_DefaultInterruptHandler
  5110     0FFB  00C1               	movwf	(IOCBF3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5111     0FFC  318C  2447         	fcall	_IOCBF3_SetInterruptHandler
  5112                           
  5113                           ;mcc_generated_files/pin_manager.c: 115:     INTCONbits.IOCIE = 1;
  5114     0FFE  158B               	bsf	11,3	;volatile
  5115     0FFF  0008               	return
  5116     1000                     __end_of_PIN_MANAGER_Initialize:
  5117                           
  5118                           	psect	text14
  5119     0C47                     __ptext14:	
  5120 ;; *************** function _IOCBF3_SetInterruptHandler *****************
  5121 ;; Defined at:
  5122 ;;		line 181 in file "mcc_generated_files/pin_manager.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5125 ;;		 -> ISR_Floor2(1), IOCBF3_DefaultInterruptHandler(1), 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg
  5132 ;; Tracked objects:
  5133 ;;		On entry : 1F/1
  5134 ;;		On exit  : 1F/1
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5137 ;;      Params:         0       0       2       0       0       0
  5138 ;;      Locals:         0       0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0       0
  5140 ;;      Totals:         0       0       2       0       0       0
  5141 ;;Total ram usage:        2 bytes
  5142 ;; Hardware stack levels used: 1
  5143 ;; Hardware stack levels required when called: 8
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_PIN_MANAGER_Initialize
  5148 ;;		_main
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152     0C47                     _IOCBF3_SetInterruptHandler:	
  5153                           ;psect for function _IOCBF3_SetInterruptHandler
  5154                           
  5155                           
  5156                           ;mcc_generated_files/pin_manager.c: 182:     IOCBF3_InterruptHandler = InterruptHandler;
  5157                           
  5158                           ;incstack = 0
  5159                           ; Regs used in _IOCBF3_SetInterruptHandler: [wreg]
  5160     0C47  0841               	movf	(IOCBF3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5161     0C48  00E4               	movwf	(_IOCBF3_InterruptHandler+1)^(0+128)
  5162     0C49  0840               	movf	IOCBF3_SetInterruptHandler@InterruptHandler^(0+128),w
  5163     0C4A  00E3               	movwf	_IOCBF3_InterruptHandler^(0+128)
  5164     0C4B  0008               	return
  5165     0C4C                     __end_of_IOCBF3_SetInterruptHandler:
  5166                           
  5167                           	psect	text15
  5168     0C42                     __ptext15:	
  5169 ;; *************** function _IOCBF0_SetInterruptHandler *****************
  5170 ;; Defined at:
  5171 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5174 ;;		 -> ISR_Floor1(1), IOCBF0_DefaultInterruptHandler(1), 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;		None
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg
  5181 ;; Tracked objects:
  5182 ;;		On entry : 1F/1
  5183 ;;		On exit  : 1F/1
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5186 ;;      Params:         0       0       2       0       0       0
  5187 ;;      Locals:         0       0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0
  5189 ;;      Totals:         0       0       2       0       0       0
  5190 ;;Total ram usage:        2 bytes
  5191 ;; Hardware stack levels used: 1
  5192 ;; Hardware stack levels required when called: 8
  5193 ;; This function calls:
  5194 ;;		Nothing
  5195 ;; This function is called by:
  5196 ;;		_PIN_MANAGER_Initialize
  5197 ;;		_main
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201     0C42                     _IOCBF0_SetInterruptHandler:	
  5202                           ;psect for function _IOCBF0_SetInterruptHandler
  5203                           
  5204                           
  5205                           ;mcc_generated_files/pin_manager.c: 152:     IOCBF0_InterruptHandler = InterruptHandler;
  5206                           
  5207                           ;incstack = 0
  5208                           ; Regs used in _IOCBF0_SetInterruptHandler: [wreg]
  5209     0C42  0841               	movf	(IOCBF0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5210     0C43  00E6               	movwf	(_IOCBF0_InterruptHandler+1)^(0+128)
  5211     0C44  0840               	movf	IOCBF0_SetInterruptHandler@InterruptHandler^(0+128),w
  5212     0C45  00E5               	movwf	_IOCBF0_InterruptHandler^(0+128)
  5213     0C46  0008               	return
  5214     0C47                     __end_of_IOCBF0_SetInterruptHandler:
  5215                           
  5216                           	psect	text16
  5217     0C51                     __ptext16:	
  5218 ;; *************** function _OSCILLATOR_Initialize *****************
  5219 ;; Defined at:
  5220 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		status,2
  5229 ;; Tracked objects:
  5230 ;;		On entry : 1F/1
  5231 ;;		On exit  : 1F/2
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5234 ;;      Params:         0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0       0
  5238 ;;Total ram usage:        0 bytes
  5239 ;; Hardware stack levels used: 1
  5240 ;; Hardware stack levels required when called: 8
  5241 ;; This function calls:
  5242 ;;		Nothing
  5243 ;; This function is called by:
  5244 ;;		_SYSTEM_Initialize
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248     0C51                     _OSCILLATOR_Initialize:	
  5249                           ;psect for function _OSCILLATOR_Initialize
  5250                           
  5251                           
  5252                           ;mcc_generated_files/mcc.c: 72:     OSCCON = 0x70;
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
  5256     0C51  3070               	movlw	112
  5257     0C52  0099               	movwf	25	;volatile
  5258                           
  5259                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
  5260     0C53  0198               	clrf	24	;volatile
  5261                           
  5262                           ;mcc_generated_files/mcc.c: 76:     BORCON = 0x00;
  5263     0C54  0022               	movlb	2	; select bank2
  5264     0C55  0196               	clrf	22	;volatile
  5265     0C56  0008               	return
  5266     0C57                     __end_of_OSCILLATOR_Initialize:
  5267                           
  5268                           	psect	text17
  5269     0C18                     __ptext17:	
  5270 ;; *************** function _FVR_Initialize *****************
  5271 ;; Defined at:
  5272 ;;		line 58 in file "mcc_generated_files/fvr.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;		None
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		None
  5281 ;; Tracked objects:
  5282 ;;		On entry : 1F/1
  5283 ;;		On exit  : 1F/2
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5286 ;;      Params:         0       0       0       0       0       0
  5287 ;;      Locals:         0       0       0       0       0       0
  5288 ;;      Temps:          0       0       0       0       0       0
  5289 ;;      Totals:         0       0       0       0       0       0
  5290 ;;Total ram usage:        0 bytes
  5291 ;; Hardware stack levels used: 1
  5292 ;; Hardware stack levels required when called: 8
  5293 ;; This function calls:
  5294 ;;		Nothing
  5295 ;; This function is called by:
  5296 ;;		_SYSTEM_Initialize
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300     0C18                     _FVR_Initialize:	
  5301                           ;psect for function _FVR_Initialize
  5302                           
  5303                           
  5304                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x85;
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _FVR_Initialize: []
  5308     0C18  3085               	movlw	133
  5309     0C19  0022               	movlb	2	; select bank2
  5310     0C1A  0097               	movwf	23	;volatile
  5311     0C1B  0008               	return
  5312     0C1C                     __end_of_FVR_Initialize:
  5313                           
  5314                           	psect	text18
  5315     07A2                     __ptext18:	
  5316 ;; *************** function _EUSART_Initialize *****************
  5317 ;; Defined at:
  5318 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;		None
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, pclath, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 1F/0
  5329 ;;		On exit  : 1F/1
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5332 ;;      Params:         0       0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0
  5335 ;;      Totals:         0       0       0       0       0       0
  5336 ;;Total ram usage:        0 bytes
  5337 ;; Hardware stack levels used: 1
  5338 ;; Hardware stack levels required when called: 9
  5339 ;; This function calls:
  5340 ;;		_EUSART_SetErrorHandler
  5341 ;;		_EUSART_SetFramingErrorHandler
  5342 ;;		_EUSART_SetOverrunErrorHandler
  5343 ;;		_EUSART_SetRxInterruptHandler
  5344 ;; This function is called by:
  5345 ;;		_SYSTEM_Initialize
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349     07A2                     _EUSART_Initialize:	
  5350                           ;psect for function _EUSART_Initialize
  5351                           
  5352                           
  5353                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5357     07A2  0021               	movlb	1	; select bank1
  5358     07A3  1291               	bcf	17,5	;volatile
  5359                           
  5360                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5361     07A4  30D5               	movlw	low _EUSART_Receive_ISR
  5362     07A5  00C0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5363     07A6  3006               	movlw	high _EUSART_Receive_ISR
  5364     07A7  00C1               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5365     07A8  318C  243D  3187   	fcall	_EUSART_SetRxInterruptHandler
  5366                           
  5367                           ;mcc_generated_files/eusart.c: 91:     BAUDCON = 0x08;
  5368     07AB  3008               	movlw	8
  5369     07AC  0023               	movlb	3	; select bank3
  5370     07AD  009F               	movwf	31	;volatile
  5371                           
  5372                           ;mcc_generated_files/eusart.c: 94:     RCSTA = 0x90;
  5373     07AE  3090               	movlw	144
  5374     07AF  009D               	movwf	29	;volatile
  5375                           
  5376                           ;mcc_generated_files/eusart.c: 97:     TXSTA = 0xA4;
  5377     07B0  30A4               	movlw	164
  5378     07B1  009E               	movwf	30	;volatile
  5379                           
  5380                           ;mcc_generated_files/eusart.c: 100:     SPBRGL = 0x67;
  5381     07B2  3067               	movlw	103
  5382     07B3  009B               	movwf	27	;volatile
  5383                           
  5384                           ;mcc_generated_files/eusart.c: 103:     SPBRGH = 0x00;
  5385     07B4  019C               	clrf	28	;volatile
  5386                           
  5387                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5388     07B5  300C               	movlw	low _EUSART_DefaultFramingErrorHandler
  5389     07B6  0021               	movlb	1	; select bank1
  5390     07B7  00C0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5391     07B8  300C               	movlw	high _EUSART_DefaultFramingErrorHandler
  5392     07B9  00C1               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5393     07BA  318C  2433  3187   	fcall	_EUSART_SetFramingErrorHandler
  5394                           
  5395                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5396     07BD  3014               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5397     07BE  00C0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5398     07BF  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5399     07C0  00C1               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5400     07C1  318C  2438  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5401                           
  5402                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5403     07C4  300D               	movlw	low _EUSART_DefaultErrorHandler
  5404     07C5  00C0               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5405     07C6  300C               	movlw	high _EUSART_DefaultErrorHandler
  5406     07C7  00C1               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5407     07C8  318C  242E         	fcall	_EUSART_SetErrorHandler
  5408                           
  5409                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
  5410     07CA  0020               	movlb	0	; select bank0
  5411     07CB  01B6               	clrf	_eusartRxLastError	;volatile
  5412                           
  5413                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
  5414     07CC  01B9               	clrf	_eusartRxHead	;volatile
  5415                           
  5416                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
  5417     07CD  01B8               	clrf	_eusartRxTail	;volatile
  5418                           
  5419                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
  5420     07CE  01B7               	clrf	_eusartRxCount	;volatile
  5421                           
  5422                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
  5423     07CF  0021               	movlb	1	; select bank1
  5424     07D0  1691               	bsf	17,5	;volatile
  5425     07D1  0008               	return
  5426     07D2                     __end_of_EUSART_Initialize:
  5427                           
  5428                           	psect	text19
  5429     0C3D                     __ptext19:	
  5430 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5431 ;; Defined at:
  5432 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5435 ;;		 -> Read_UART(1), EUSART_Receive_ISR(1), 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg
  5442 ;; Tracked objects:
  5443 ;;		On entry : 1F/1
  5444 ;;		On exit  : 1F/1
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5447 ;;      Params:         0       0       2       0       0       0
  5448 ;;      Locals:         0       0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0
  5450 ;;      Totals:         0       0       2       0       0       0
  5451 ;;Total ram usage:        2 bytes
  5452 ;; Hardware stack levels used: 1
  5453 ;; Hardware stack levels required when called: 8
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_EUSART_Initialize
  5458 ;;		_main
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462     0C3D                     _EUSART_SetRxInterruptHandler:	
  5463                           ;psect for function _EUSART_SetRxInterruptHandler
  5464                           
  5465                           
  5466                           ;mcc_generated_files/eusart.c: 235:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5467                           
  5468                           ;incstack = 0
  5469                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5470     0C3D  0841               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5471     0C3E  00E2               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5472     0C3F  0840               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5473     0C40  00E1               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5474     0C41  0008               	return
  5475     0C42                     __end_of_EUSART_SetRxInterruptHandler:
  5476                           
  5477                           	psect	text20
  5478     0C38                     __ptext20:	
  5479 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5480 ;; Defined at:
  5481 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5484 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		wreg
  5491 ;; Tracked objects:
  5492 ;;		On entry : 1F/1
  5493 ;;		On exit  : 1F/1
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5496 ;;      Params:         0       0       2       0       0       0
  5497 ;;      Locals:         0       0       0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0       0
  5499 ;;      Totals:         0       0       2       0       0       0
  5500 ;;Total ram usage:        2 bytes
  5501 ;; Hardware stack levels used: 1
  5502 ;; Hardware stack levels required when called: 8
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_EUSART_Initialize
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510     0C38                     _EUSART_SetOverrunErrorHandler:	
  5511                           ;psect for function _EUSART_SetOverrunErrorHandler
  5512                           
  5513                           
  5514                           ;mcc_generated_files/eusart.c: 226:     EUSART_OverrunErrorHandler = interruptHandler;
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5518     0C38  0841               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5519     0C39  00DE               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5520     0C3A  0840               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5521     0C3B  00DD               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5522     0C3C  0008               	return
  5523     0C3D                     __end_of_EUSART_SetOverrunErrorHandler:
  5524                           
  5525                           	psect	text21
  5526     0C33                     __ptext21:	
  5527 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5528 ;; Defined at:
  5529 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5532 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg
  5539 ;; Tracked objects:
  5540 ;;		On entry : 1F/1
  5541 ;;		On exit  : 1F/1
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5544 ;;      Params:         0       0       2       0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0
  5547 ;;      Totals:         0       0       2       0       0       0
  5548 ;;Total ram usage:        2 bytes
  5549 ;; Hardware stack levels used: 1
  5550 ;; Hardware stack levels required when called: 8
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_EUSART_Initialize
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558     0C33                     _EUSART_SetFramingErrorHandler:	
  5559                           ;psect for function _EUSART_SetFramingErrorHandler
  5560                           
  5561                           
  5562                           ;mcc_generated_files/eusart.c: 222:     EUSART_FramingErrorHandler = interruptHandler;
  5563                           
  5564                           ;incstack = 0
  5565                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5566     0C33  0841               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5567     0C34  00E0               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5568     0C35  0840               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5569     0C36  00DF               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5570     0C37  0008               	return
  5571     0C38                     __end_of_EUSART_SetFramingErrorHandler:
  5572                           
  5573                           	psect	text22
  5574     0C2E                     __ptext22:	
  5575 ;; *************** function _EUSART_SetErrorHandler *****************
  5576 ;; Defined at:
  5577 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5580 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg
  5587 ;; Tracked objects:
  5588 ;;		On entry : 1F/1
  5589 ;;		On exit  : 1F/1
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5592 ;;      Params:         0       0       2       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0
  5595 ;;      Totals:         0       0       2       0       0       0
  5596 ;;Total ram usage:        2 bytes
  5597 ;; Hardware stack levels used: 1
  5598 ;; Hardware stack levels required when called: 8
  5599 ;; This function calls:
  5600 ;;		Nothing
  5601 ;; This function is called by:
  5602 ;;		_EUSART_Initialize
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606     0C2E                     _EUSART_SetErrorHandler:	
  5607                           ;psect for function _EUSART_SetErrorHandler
  5608                           
  5609                           
  5610                           ;mcc_generated_files/eusart.c: 230:     EUSART_ErrorHandler = interruptHandler;
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5614     0C2E  0841               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5615     0C2F  00DC               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5616     0C30  0840               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5617     0C31  00DB               	movwf	_EUSART_ErrorHandler^(0+128)
  5618     0C32  0008               	return
  5619     0C33                     __end_of_EUSART_SetErrorHandler:
  5620                           
  5621                           	psect	text23
  5622     0CD3                     __ptext23:	
  5623 ;; *************** function _CMP2_Initialize *****************
  5624 ;; Defined at:
  5625 ;;		line 59 in file "mcc_generated_files/cmp2.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		None
  5634 ;; Tracked objects:
  5635 ;;		On entry : 1F/1
  5636 ;;		On exit  : 1F/1
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5639 ;;      Params:         0       0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used: 1
  5645 ;; Hardware stack levels required when called: 8
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_SYSTEM_Initialize
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653     0CD3                     _CMP2_Initialize:	
  5654                           ;psect for function _CMP2_Initialize
  5655                           
  5656                           
  5657                           ;mcc_generated_files/cmp2.c: 66:     PIE2bits.C2IE = 0;
  5658                           
  5659                           ;incstack = 0
  5660                           ; Regs used in _CMP2_Initialize: []
  5661     0CD3  1312               	bcf	18,6	;volatile
  5662                           
  5663                           ;mcc_generated_files/cmp2.c: 69:     CM2CON0 = 0x84;
  5664     0CD4  3084               	movlw	132
  5665     0CD5  0022               	movlb	2	; select bank2
  5666     0CD6  0093               	movwf	19	;volatile
  5667                           
  5668                           ;mcc_generated_files/cmp2.c: 72:     CM2CON1 = 0xA1;
  5669     0CD7  30A1               	movlw	161
  5670     0CD8  0094               	movwf	20	;volatile
  5671                           
  5672                           ;mcc_generated_files/cmp2.c: 75:     PIR2bits.C2IF = 0;
  5673     0CD9  0020               	movlb	0	; select bank0
  5674     0CDA  1312               	bcf	18,6	;volatile
  5675                           
  5676                           ;mcc_generated_files/cmp2.c: 78:     PIE2bits.C2IE = 1;
  5677     0CDB  0021               	movlb	1	; select bank1
  5678     0CDC  1712               	bsf	18,6	;volatile
  5679     0CDD  0008               	return
  5680     0CDE                     __end_of_CMP2_Initialize:
  5681                           
  5682                           	psect	text24
  5683     0CEA                     __ptext24:	
  5684 ;; *************** function _CMP1_Initialize *****************
  5685 ;; Defined at:
  5686 ;;		line 60 in file "mcc_generated_files/cmp1.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		None
  5695 ;; Tracked objects:
  5696 ;;		On entry : 1F/8
  5697 ;;		On exit  : 1F/1
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5700 ;;      Params:         0       0       0       0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0
  5703 ;;      Totals:         0       0       0       0       0       0
  5704 ;;Total ram usage:        0 bytes
  5705 ;; Hardware stack levels used: 1
  5706 ;; Hardware stack levels required when called: 8
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_SYSTEM_Initialize
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714     0CEA                     _CMP1_Initialize:	
  5715                           ;psect for function _CMP1_Initialize
  5716                           
  5717                           
  5718                           ;mcc_generated_files/cmp1.c: 67:     PIE2bits.C1IE = 0;
  5719                           
  5720                           ;incstack = 0
  5721                           ; Regs used in _CMP1_Initialize: []
  5722     0CEA  0021               	movlb	1	; select bank1
  5723     0CEB  1292               	bcf	18,5	;volatile
  5724                           
  5725                           ;mcc_generated_files/cmp1.c: 70:     CM1CON0 = 0x84;
  5726     0CEC  3084               	movlw	132
  5727     0CED  0022               	movlb	2	; select bank2
  5728     0CEE  0091               	movwf	17	;volatile
  5729                           
  5730                           ;mcc_generated_files/cmp1.c: 73:     CM1CON1 = 0xA0;
  5731     0CEF  30A0               	movlw	160
  5732     0CF0  0092               	movwf	18	;volatile
  5733                           
  5734                           ;mcc_generated_files/cmp1.c: 76:     PIR2bits.C1IF = 0;
  5735     0CF1  0020               	movlb	0	; select bank0
  5736     0CF2  1292               	bcf	18,5	;volatile
  5737                           
  5738                           ;mcc_generated_files/cmp1.c: 79:     PIE2bits.C1IE = 1;
  5739     0CF3  0021               	movlb	1	; select bank1
  5740     0CF4  1692               	bsf	18,5	;volatile
  5741     0CF5  0008               	return
  5742     0CF6                     __end_of_CMP1_Initialize:
  5743                           
  5744                           	psect	text25
  5745     0D51                     __ptext25:	
  5746 ;; *************** function _ADC_Initialize *****************
  5747 ;; Defined at:
  5748 ;;		line 67 in file "mcc_generated_files/adc.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;		None
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;		None
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      void 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 1F/1
  5759 ;;		On exit  : 1F/1
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5762 ;;      Params:         0       0       0       0       0       0
  5763 ;;      Locals:         0       0       0       0       0       0
  5764 ;;      Temps:          0       0       0       0       0       0
  5765 ;;      Totals:         0       0       0       0       0       0
  5766 ;;Total ram usage:        0 bytes
  5767 ;; Hardware stack levels used: 1
  5768 ;; Hardware stack levels required when called: 9
  5769 ;; This function calls:
  5770 ;;		_ADC_SetInterruptHandler
  5771 ;; This function is called by:
  5772 ;;		_SYSTEM_Initialize
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776     0D51                     _ADC_Initialize:	
  5777                           ;psect for function _ADC_Initialize
  5778                           
  5779                           
  5780                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x93;
  5781                           
  5782                           ;incstack = 0
  5783                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5784     0D51  3093               	movlw	147
  5785     0D52  009E               	movwf	30	;volatile
  5786                           
  5787                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  5788     0D53  019B               	clrf	27	;volatile
  5789                           
  5790                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  5791     0D54  019C               	clrf	28	;volatile
  5792                           
  5793                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x09;
  5794     0D55  3009               	movlw	9
  5795     0D56  009D               	movwf	29	;volatile
  5796                           
  5797                           ;mcc_generated_files/adc.c: 84:     PIE1bits.ADIE = 1;
  5798     0D57  1711               	bsf	17,6	;volatile
  5799                           
  5800                           ;mcc_generated_files/adc.c: 87:     ADC_SetInterruptHandler(ADC_DefaultInterruptHandler)
      +                          ;
  5801     0D58  3009               	movlw	low _ADC_DefaultInterruptHandler
  5802     0D59  00C0               	movwf	ADC_SetInterruptHandler@InterruptHandler^(0+128)
  5803     0D5A  300C               	movlw	high _ADC_DefaultInterruptHandler
  5804     0D5B  00C1               	movwf	(ADC_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5805     0D5C  318C  2429         	fcall	_ADC_SetInterruptHandler
  5806     0D5E  0008               	return
  5807     0D5F                     __end_of_ADC_Initialize:
  5808                           
  5809                           	psect	text26
  5810     0C29                     __ptext26:	
  5811 ;; *************** function _ADC_SetInterruptHandler *****************
  5812 ;; Defined at:
  5813 ;;		line 156 in file "mcc_generated_files/adc.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5816 ;;		 -> ADC_DefaultInterruptHandler(1), 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg
  5823 ;; Tracked objects:
  5824 ;;		On entry : 1F/1
  5825 ;;		On exit  : 1F/1
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5828 ;;      Params:         0       0       2       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0
  5831 ;;      Totals:         0       0       2       0       0       0
  5832 ;;Total ram usage:        2 bytes
  5833 ;; Hardware stack levels used: 1
  5834 ;; Hardware stack levels required when called: 8
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_ADC_Initialize
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842     0C29                     _ADC_SetInterruptHandler:	
  5843                           ;psect for function _ADC_SetInterruptHandler
  5844                           
  5845                           
  5846                           ;mcc_generated_files/adc.c: 157:     ADC_InterruptHandler = InterruptHandler;
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
  5850     0C29  0841               	movf	(ADC_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5851     0C2A  00D8               	movwf	(_ADC_InterruptHandler+1)^(0+128)
  5852     0C2B  0840               	movf	ADC_SetInterruptHandler@InterruptHandler^(0+128),w
  5853     0C2C  00D7               	movwf	_ADC_InterruptHandler^(0+128)
  5854     0C2D  0008               	return
  5855     0C2E                     __end_of_ADC_SetInterruptHandler:
  5856                           
  5857                           	psect	text27
  5858     04EC                     __ptext27:	
  5859 ;; *************** function _SPI1_Open *****************
  5860 ;; Defined at:
  5861 ;;		line 72 in file "mcc_generated_files/spi1.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  spi1UniqueCo    1    wreg     enum E358
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  spi1UniqueCo    1    3[BANK1 ] enum E358
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      _Bool 
  5868 ;; Registers used:
  5869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5870 ;; Tracked objects:
  5871 ;;		On entry : 1F/2
  5872 ;;		On exit  : 1F/4
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5875 ;;      Params:         0       0       0       0       0       0
  5876 ;;      Locals:         0       0       1       0       0       0
  5877 ;;      Temps:          0       0       3       0       0       0
  5878 ;;      Totals:         0       0       4       0       0       0
  5879 ;;Total ram usage:        4 bytes
  5880 ;; Hardware stack levels used: 1
  5881 ;; Hardware stack levels required when called: 8
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		_main
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889     04EC                     _SPI1_Open:	
  5890                           ;psect for function _SPI1_Open
  5891                           
  5892                           
  5893                           ;incstack = 0
  5894                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath]
  5895                           ;SPI1_Open@spi1UniqueConfiguration stored from wreg
  5896     04EC  0021               	movlb	1	; select bank1
  5897     04ED  00C3               	movwf	SPI1_Open@spi1UniqueConfiguration^(0+128)
  5898                           
  5899                           ;mcc_generated_files/spi1.c: 72: _Bool SPI1_Open(spi1_modes_t spi1UniqueConfiguration);m
      +                          cc_generated_files/spi1.c: 73: {;mcc_generated_files/spi1.c: 74:     if(!SSP1CON1bits.SS
      +                          PEN)
  5900     04EE  0024               	movlb	4	; select bank4
  5901     04EF  1A95               	btfsc	21,5	;volatile
  5902     04F0  0008               	return
  5903                           
  5904                           ;mcc_generated_files/spi1.c: 75:     {;mcc_generated_files/spi1.c: 76:         SSP1STAT 
      +                          = spi1_configuration[spi1UniqueConfiguration].stat;
  5905     04F1  0021               	movlb	1	; select bank1
  5906     04F2  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5907     04F3  00C0               	movwf	??_SPI1_Open^(0+128)
  5908     04F4  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5909     04F5  35C0               	lslf	??_SPI1_Open^(0+128),f
  5910     04F6  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5911     04F7  35C0               	lslf	??_SPI1_Open^(0+128),f
  5912     04F8  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5913     04F9  3028               	movlw	low (_spi1_configuration+1)
  5914     04FA  0740               	addwf	??_SPI1_Open^(0+128),w
  5915     04FB  0084               	movwf	4
  5916     04FC  3008               	movlw	high (_spi1_configuration+1)
  5917     04FD  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5918     04FE  3880               	iorlw	128
  5919     04FF  0085               	movwf	5
  5920     0500  0800               	movf	0,w	;code access
  5921     0501  0024               	movlb	4	; select bank4
  5922     0502  0094               	movwf	20	;volatile
  5923                           
  5924                           ;mcc_generated_files/spi1.c: 77:         SSP1CON1 = spi1_configuration[spi1UniqueConfigu
      +                          ration].con1;
  5925     0503  0021               	movlb	1	; select bank1
  5926     0504  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5927     0505  00C0               	movwf	??_SPI1_Open^(0+128)
  5928     0506  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5929     0507  35C0               	lslf	??_SPI1_Open^(0+128),f
  5930     0508  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5931     0509  35C0               	lslf	??_SPI1_Open^(0+128),f
  5932     050A  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5933     050B  3027               	movlw	low _spi1_configuration
  5934     050C  0740               	addwf	??_SPI1_Open^(0+128),w
  5935     050D  0084               	movwf	4
  5936     050E  3008               	movlw	high _spi1_configuration
  5937     050F  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5938     0510  3880               	iorlw	128
  5939     0511  0085               	movwf	5
  5940     0512  0800               	movf	0,w	;code access
  5941     0513  0024               	movlb	4	; select bank4
  5942     0514  0095               	movwf	21	;volatile
  5943                           
  5944                           ;mcc_generated_files/spi1.c: 78:         SSP1CON2 = 0x00;
  5945     0515  0196               	clrf	22	;volatile
  5946                           
  5947                           ;mcc_generated_files/spi1.c: 79:         SSP1ADD = spi1_configuration[spi1UniqueConfigur
      +                          ation].add;
  5948     0516  0021               	movlb	1	; select bank1
  5949     0517  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5950     0518  00C0               	movwf	??_SPI1_Open^(0+128)
  5951     0519  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5952     051A  35C0               	lslf	??_SPI1_Open^(0+128),f
  5953     051B  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5954     051C  35C0               	lslf	??_SPI1_Open^(0+128),f
  5955     051D  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5956     051E  3029               	movlw	low (_spi1_configuration+2)
  5957     051F  0740               	addwf	??_SPI1_Open^(0+128),w
  5958     0520  0084               	movwf	4
  5959     0521  3008               	movlw	high (_spi1_configuration+2)
  5960     0522  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5961     0523  3880               	iorlw	128
  5962     0524  0085               	movwf	5
  5963     0525  0800               	movf	0,w	;code access
  5964     0526  0024               	movlb	4	; select bank4
  5965     0527  0092               	movwf	18	;volatile
  5966                           
  5967                           ;mcc_generated_files/spi1.c: 80:         TRISBbits.TRISB4 = spi1_configuration[spi1Uniqu
      +                          eConfiguration].operation;
  5968     0528  0021               	movlb	1	; select bank1
  5969     0529  0843               	movf	SPI1_Open@spi1UniqueConfiguration^(0+128),w
  5970     052A  00C0               	movwf	??_SPI1_Open^(0+128)
  5971     052B  01C1               	clrf	(??_SPI1_Open^(0+128)+1)
  5972     052C  35C0               	lslf	??_SPI1_Open^(0+128),f
  5973     052D  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5974     052E  35C0               	lslf	??_SPI1_Open^(0+128),f
  5975     052F  0DC1               	rlf	(??_SPI1_Open^(0+128)+1),f
  5976     0530  302A               	movlw	low (_spi1_configuration+3)
  5977     0531  0740               	addwf	??_SPI1_Open^(0+128),w
  5978     0532  0084               	movwf	4
  5979     0533  3008               	movlw	high (_spi1_configuration+3)
  5980     0534  3D41               	addwfc	(??_SPI1_Open+1)^(0+128),w
  5981     0535  3880               	iorlw	128
  5982     0536  0085               	movwf	5
  5983     0537  0800               	movf	0,w	;code access
  5984     0538  00C2               	movwf	(??_SPI1_Open+2)^(0+128)
  5985     0539  0EC2               	swapf	(??_SPI1_Open+2)^(0+128),f
  5986     053A  080D               	movf	13,w	;volatile
  5987     053B  0642               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5988     053C  39EF               	andlw	-17
  5989     053D  0642               	xorwf	(??_SPI1_Open+2)^(0+128),w
  5990     053E  008D               	movwf	13	;volatile
  5991                           
  5992                           ;mcc_generated_files/spi1.c: 81:         SSP1CON1bits.SSPEN = 1;
  5993     053F  0024               	movlb	4	; select bank4
  5994     0540  1695               	bsf	21,5	;volatile
  5995     0541  0008               	return
  5996     0542                     __end_of_SPI1_Open:
  5997                           
  5998                           	psect	text28
  5999     0E91                     __ptext28:	
  6000 ;; *************** function _Route_empty *****************
  6001 ;; Defined at:
  6002 ;;		line 134 in file "main.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  i               2    1[BANK1 ] int 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      _Bool 
  6009 ;; Registers used:
  6010 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/1
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6016 ;;      Params:         0       0       0       0       0       0
  6017 ;;      Locals:         0       0       2       0       0       0
  6018 ;;      Temps:          0       0       1       0       0       0
  6019 ;;      Totals:         0       0       3       0       0       0
  6020 ;;Total ram usage:        3 bytes
  6021 ;; Hardware stack levels used: 1
  6022 ;; Hardware stack levels required when called: 8
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_main
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030     0E91                     _Route_empty:	
  6031                           ;psect for function _Route_empty
  6032                           
  6033                           
  6034                           ;main.c: 135:   for(int i=0; i<6; i++){
  6035                           
  6036                           ;incstack = 0
  6037                           ; Regs used in _Route_empty: [wreg+fsr1l+fsr1h+status,2+status,0]
  6038     0E91  0021               	movlb	1	; select bank1
  6039     0E92  01C1               	clrf	Route_empty@i^(0+128)
  6040     0E93  01C2               	clrf	(Route_empty@i+1)^(0+128)
  6041     0E94                     l4753:
  6042                           
  6043                           ;main.c: 136:       if (route[i] != 0) return 0;
  6044     0E94  0021               	movlb	1	; select bank1
  6045     0E95  0841               	movf	Route_empty@i^(0+128),w
  6046     0E96  3E27               	addlw	(low (_route| 0))& (0+255)
  6047     0E97  0086               	movwf	6
  6048     0E98  0187               	clrf	7
  6049     0E99  0801               	movf	1,w
  6050     0E9A  1903               	btfsc	3,2
  6051     0E9B  2E9E               	goto	l4759
  6052     0E9C  3000               	movlw	0
  6053     0E9D  0008               	return
  6054     0E9E                     l4759:
  6055                           
  6056                           ;main.c: 137:     }
  6057     0E9E  3001               	movlw	1
  6058     0E9F  07C1               	addwf	Route_empty@i^(0+128),f
  6059     0EA0  3000               	movlw	0
  6060     0EA1  3DC2               	addwfc	(Route_empty@i+1)^(0+128),f
  6061     0EA2  0842               	movf	(Route_empty@i+1)^(0+128),w
  6062     0EA3  3A80               	xorlw	128
  6063     0EA4  00C0               	movwf	??_Route_empty^(0+128)
  6064     0EA5  3080               	movlw	128
  6065     0EA6  0240               	subwf	??_Route_empty^(0+128),w
  6066     0EA7  1D03               	skipz
  6067     0EA8  2EAB               	goto	u3525
  6068     0EA9  3006               	movlw	6
  6069     0EAA  0241               	subwf	Route_empty@i^(0+128),w
  6070     0EAB                     u3525:
  6071     0EAB  1C03               	skipc
  6072     0EAC  2E94               	goto	l4753
  6073                           
  6074                           ;main.c: 138:   return 1;
  6075     0EAD  3001               	movlw	1
  6076     0EAE  0008               	return
  6077     0EAF                     __end_of_Route_empty:
  6078                           
  6079                           	psect	text29
  6080     070B                     __ptext29:	
  6081 ;; *************** function _Next_index *****************
  6082 ;; Defined at:
  6083 ;;		line 140 in file "main.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;  i               2    9[BANK1 ] int 
  6088 ;;  index_          2    7[BANK1 ] int 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      unsigned char 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 1F/0
  6095 ;;		On exit  : 1F/1
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6098 ;;      Params:         0       0       0       0       0       0
  6099 ;;      Locals:         0       0       4       0       0       0
  6100 ;;      Temps:          0       0       1       0       0       0
  6101 ;;      Totals:         0       0       5       0       0       0
  6102 ;;Total ram usage:        5 bytes
  6103 ;; Hardware stack levels used: 1
  6104 ;; Hardware stack levels required when called: 9
  6105 ;; This function calls:
  6106 ;;		___awmod
  6107 ;; This function is called by:
  6108 ;;		_main
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112     070B                     _Next_index:	
  6113                           ;psect for function _Next_index
  6114                           
  6115                           
  6116                           ;main.c: 142:     for(int i=1; i<6;i++){
  6117                           
  6118                           ;incstack = 0
  6119                           ; Regs used in _Next_index: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6120     070B  3001               	movlw	1
  6121     070C  0021               	movlb	1	; select bank1
  6122     070D  00C9               	movwf	Next_index@i^(0+128)
  6123     070E  3000               	movlw	0
  6124     070F  00CA               	movwf	(Next_index@i^(0+128)+1)
  6125     0710                     l4773:
  6126                           
  6127                           ;main.c: 143:         index_ = (index+i)%6;
  6128     0710  3006               	movlw	6
  6129     0711  0021               	movlb	1	; select bank1
  6130     0712  00C0               	movwf	___awmod@divisor^(0+128)
  6131     0713  3000               	movlw	0
  6132     0714  00C1               	movwf	(___awmod@divisor^(0+128)+1)
  6133     0715  0020               	movlb	0	; select bank0
  6134     0716  083E               	movf	_index,w
  6135     0717  0021               	movlb	1	; select bank1
  6136     0718  0749               	addwf	Next_index@i^(0+128),w
  6137     0719  00C2               	movwf	___awmod@dividend^(0+128)
  6138     071A  084A               	movf	(Next_index@i+1)^(0+128),w
  6139     071B  1803               	skipnc
  6140     071C  0A4A               	incf	(Next_index@i+1)^(0+128),w
  6141     071D  00C3               	movwf	(___awmod@dividend^(0+128)+1)
  6142     071E  3185  258F  3187   	fcall	___awmod
  6143     0721  0841               	movf	(?___awmod+1)^(0+128),w
  6144     0722  00C8               	movwf	(Next_index@index_+1)^(0+128)
  6145     0723  0840               	movf	?___awmod^(0+128),w
  6146     0724  00C7               	movwf	Next_index@index_^(0+128)
  6147                           
  6148                           ;main.c: 144:         if(route[index_]==1){
  6149     0725  0847               	movf	Next_index@index_^(0+128),w
  6150     0726  3E27               	addlw	(low (_route| 0))& (0+255)
  6151     0727  0086               	movwf	6
  6152     0728  0187               	clrf	7
  6153     0729  0301               	decf	1,w
  6154     072A  1D03               	btfss	3,2
  6155     072B  2F2F               	goto	l4781
  6156     072C                     l4777:
  6157                           
  6158                           ;main.c: 145:         return index_;
  6159     072C  0021               	movlb	1	; select bank1
  6160     072D  0847               	movf	Next_index@index_^(0+128),w
  6161     072E  0008               	return
  6162     072F                     l4781:
  6163                           
  6164                           ;main.c: 147:     }
  6165     072F  3001               	movlw	1
  6166     0730  07C9               	addwf	Next_index@i^(0+128),f
  6167     0731  3000               	movlw	0
  6168     0732  3DCA               	addwfc	(Next_index@i+1)^(0+128),f
  6169     0733  084A               	movf	(Next_index@i+1)^(0+128),w
  6170     0734  3A80               	xorlw	128
  6171     0735  00C6               	movwf	??_Next_index^(0+128)
  6172     0736  3080               	movlw	128
  6173     0737  0246               	subwf	??_Next_index^(0+128),w
  6174     0738  1D03               	skipz
  6175     0739  2F3C               	goto	u3545
  6176     073A  3006               	movlw	6
  6177     073B  0249               	subwf	Next_index@i^(0+128),w
  6178     073C                     u3545:
  6179     073C  1803               	btfsc	3,0
  6180     073D  2F2C               	goto	l4777
  6181     073E  2F10               	goto	l4773
  6182     073F                     __end_of_Next_index:
  6183                           
  6184                           	psect	text30
  6185     0657                     __ptext30:	
  6186 ;; *************** function _Next_floor *****************
  6187 ;; Defined at:
  6188 ;;		line 150 in file "main.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;		None
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  index_          2    7[BANK1 ] int 
  6193 ;;  i               2    9[BANK1 ] int 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      unsigned char 
  6196 ;; Registers used:
  6197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 1F/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6203 ;;      Params:         0       0       0       0       0       0
  6204 ;;      Locals:         0       0       4       0       0       0
  6205 ;;      Temps:          0       0       1       0       0       0
  6206 ;;      Totals:         0       0       5       0       0       0
  6207 ;;Total ram usage:        5 bytes
  6208 ;; Hardware stack levels used: 1
  6209 ;; Hardware stack levels required when called: 9
  6210 ;; This function calls:
  6211 ;;		___awmod
  6212 ;; This function is called by:
  6213 ;;		_main
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217     0657                     _Next_floor:	
  6218                           ;psect for function _Next_floor
  6219                           
  6220                           
  6221                           ;main.c: 151:     for(int i=1; i<6;i++){
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _Next_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6225     0657  3001               	movlw	1
  6226     0658  0021               	movlb	1	; select bank1
  6227     0659  00C9               	movwf	Next_floor@i^(0+128)
  6228     065A  3000               	movlw	0
  6229     065B  00CA               	movwf	(Next_floor@i^(0+128)+1)
  6230     065C                     l4791:
  6231                           
  6232                           ;main.c: 152:         int index_ = (index+i)%6;
  6233     065C  3006               	movlw	6
  6234     065D  0021               	movlb	1	; select bank1
  6235     065E  00C0               	movwf	___awmod@divisor^(0+128)
  6236     065F  3000               	movlw	0
  6237     0660  00C1               	movwf	(___awmod@divisor^(0+128)+1)
  6238     0661  0020               	movlb	0	; select bank0
  6239     0662  083E               	movf	_index,w
  6240     0663  0021               	movlb	1	; select bank1
  6241     0664  0749               	addwf	Next_floor@i^(0+128),w
  6242     0665  00C2               	movwf	___awmod@dividend^(0+128)
  6243     0666  084A               	movf	(Next_floor@i+1)^(0+128),w
  6244     0667  1803               	skipnc
  6245     0668  0A4A               	incf	(Next_floor@i+1)^(0+128),w
  6246     0669  00C3               	movwf	(___awmod@dividend^(0+128)+1)
  6247     066A  3185  258F  3186   	fcall	___awmod
  6248     066D  0841               	movf	(?___awmod+1)^(0+128),w
  6249     066E  00C8               	movwf	(Next_floor@index_+1)^(0+128)
  6250     066F  0840               	movf	?___awmod^(0+128),w
  6251     0670  00C7               	movwf	Next_floor@index_^(0+128)
  6252                           
  6253                           ;main.c: 153:         if(route[index_]==1){
  6254     0671  0847               	movf	Next_floor@index_^(0+128),w
  6255     0672  3E27               	addlw	(low (_route| 0))& (0+255)
  6256     0673  0086               	movwf	6
  6257     0674  0187               	clrf	7
  6258     0675  0301               	decf	1,w
  6259     0676  1D03               	btfss	3,2
  6260     0677  2E84               	goto	l4801
  6261                           
  6262                           ;main.c: 154:         next_floor = FLOORS[index_];
  6263     0678  3021               	movlw	low _FLOORS
  6264     0679  0747               	addwf	Next_floor@index_^(0+128),w
  6265     067A  0084               	movwf	4
  6266     067B  3008               	movlw	high _FLOORS
  6267     067C  3D48               	addwfc	(Next_floor@index_+1)^(0+128),w
  6268     067D  3880               	iorlw	128
  6269     067E  0085               	movwf	5
  6270     067F  0800               	movf	0,w	;code access
  6271     0680  0020               	movlb	0	; select bank0
  6272     0681  00BC               	movwf	_next_floor
  6273                           
  6274                           ;main.c: 155:         return next_floor;
  6275     0682  083C               	movf	_next_floor,w
  6276     0683  0008               	return
  6277     0684                     l4801:
  6278                           
  6279                           ;main.c: 157:     }
  6280     0684  3001               	movlw	1
  6281     0685  07C9               	addwf	Next_floor@i^(0+128),f
  6282     0686  3000               	movlw	0
  6283     0687  3DCA               	addwfc	(Next_floor@i+1)^(0+128),f
  6284     0688  084A               	movf	(Next_floor@i+1)^(0+128),w
  6285     0689  3A80               	xorlw	128
  6286     068A  00C6               	movwf	??_Next_floor^(0+128)
  6287     068B  3080               	movlw	128
  6288     068C  0246               	subwf	??_Next_floor^(0+128),w
  6289     068D  1D03               	skipz
  6290     068E  2E91               	goto	u3565
  6291     068F  3006               	movlw	6
  6292     0690  0249               	subwf	Next_floor@i^(0+128),w
  6293     0691                     u3565:
  6294     0691  1C03               	skipc
  6295     0692  2E5C               	goto	l4791
  6296                           
  6297                           ;main.c: 158:     next_floor = 0;
  6298     0693  0020               	movlb	0	; select bank0
  6299     0694  01BC               	clrf	_next_floor
  6300                           
  6301                           ;main.c: 159:     return next_floor;
  6302     0695  3000               	movlw	0
  6303     0696  0008               	return
  6304     0697                     __end_of_Next_floor:
  6305                           
  6306                           	psect	text31
  6307     058F                     __ptext31:	
  6308 ;; *************** function ___awmod *****************
  6309 ;; Defined at:
  6310 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  divisor         2    0[BANK1 ] int 
  6313 ;;  dividend        2    2[BANK1 ] int 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  sign            1    5[BANK1 ] unsigned char 
  6316 ;;  counter         1    4[BANK1 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  2    0[BANK1 ] int 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0
  6321 ;; Tracked objects:
  6322 ;;		On entry : 1F/1
  6323 ;;		On exit  : 1F/1
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6326 ;;      Params:         0       0       4       0       0       0
  6327 ;;      Locals:         0       0       2       0       0       0
  6328 ;;      Temps:          0       0       0       0       0       0
  6329 ;;      Totals:         0       0       6       0       0       0
  6330 ;;Total ram usage:        6 bytes
  6331 ;; Hardware stack levels used: 1
  6332 ;; Hardware stack levels required when called: 8
  6333 ;; This function calls:
  6334 ;;		Nothing
  6335 ;; This function is called by:
  6336 ;;		_Next_index
  6337 ;;		_Next_floor
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341     058F                     ___awmod:	
  6342                           ;psect for function ___awmod
  6343                           
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6347     058F  01C5               	clrf	___awmod@sign^(0+128)
  6348     0590  1FC3               	btfss	(___awmod@dividend+1)^(0+128),7
  6349     0591  2D99               	goto	l4645
  6350     0592  09C2               	comf	___awmod@dividend^(0+128),f
  6351     0593  09C3               	comf	(___awmod@dividend+1)^(0+128),f
  6352     0594  0AC2               	incf	___awmod@dividend^(0+128),f
  6353     0595  1903               	skipnz
  6354     0596  0AC3               	incf	(___awmod@dividend+1)^(0+128),f
  6355     0597  3001               	movlw	1
  6356     0598  00C5               	movwf	___awmod@sign^(0+128)
  6357     0599                     l4645:
  6358     0599  1FC1               	btfss	(___awmod@divisor+1)^(0+128),7
  6359     059A  2DA0               	goto	l4649
  6360     059B  09C0               	comf	___awmod@divisor^(0+128),f
  6361     059C  09C1               	comf	(___awmod@divisor+1)^(0+128),f
  6362     059D  0AC0               	incf	___awmod@divisor^(0+128),f
  6363     059E  1903               	skipnz
  6364     059F  0AC1               	incf	(___awmod@divisor+1)^(0+128),f
  6365     05A0                     l4649:
  6366     05A0  0840               	movf	___awmod@divisor^(0+128),w
  6367     05A1  0441               	iorwf	(___awmod@divisor+1)^(0+128),w
  6368     05A2  1903               	btfsc	3,2
  6369     05A3  2DC5               	goto	l4667
  6370     05A4  3001               	movlw	1
  6371     05A5  00C4               	movwf	___awmod@counter^(0+128)
  6372     05A6                     l4657:
  6373     05A6  1BC1               	btfsc	(___awmod@divisor+1)^(0+128),7
  6374     05A7  2DB0               	goto	l4659
  6375     05A8  3001               	movlw	1
  6376     05A9                     u3415:
  6377     05A9  35C0               	lslf	___awmod@divisor^(0+128),f
  6378     05AA  0DC1               	rlf	(___awmod@divisor+1)^(0+128),f
  6379     05AB  0B89               	decfsz	9,f
  6380     05AC  2DA9               	goto	u3415
  6381     05AD  3001               	movlw	1
  6382     05AE  07C4               	addwf	___awmod@counter^(0+128),f
  6383     05AF  2DA6               	goto	l4657
  6384     05B0                     l4659:
  6385     05B0  0841               	movf	(___awmod@divisor+1)^(0+128),w
  6386     05B1  0243               	subwf	(___awmod@dividend+1)^(0+128),w
  6387     05B2  1D03               	skipz
  6388     05B3  2DB6               	goto	u3435
  6389     05B4  0840               	movf	___awmod@divisor^(0+128),w
  6390     05B5  0242               	subwf	___awmod@dividend^(0+128),w
  6391     05B6                     u3435:
  6392     05B6  1C03               	skipc
  6393     05B7  2DBC               	goto	l4663
  6394     05B8  0840               	movf	___awmod@divisor^(0+128),w
  6395     05B9  02C2               	subwf	___awmod@dividend^(0+128),f
  6396     05BA  0841               	movf	(___awmod@divisor+1)^(0+128),w
  6397     05BB  3BC3               	subwfb	(___awmod@dividend+1)^(0+128),f
  6398     05BC                     l4663:
  6399     05BC  3001               	movlw	1
  6400     05BD                     u3445:
  6401     05BD  36C1               	lsrf	(___awmod@divisor+1)^(0+128),f
  6402     05BE  0CC0               	rrf	___awmod@divisor^(0+128),f
  6403     05BF  0B89               	decfsz	9,f
  6404     05C0  2DBD               	goto	u3445
  6405     05C1  3001               	movlw	1
  6406     05C2  02C4               	subwf	___awmod@counter^(0+128),f
  6407     05C3  1D03               	btfss	3,2
  6408     05C4  2DB0               	goto	l4659
  6409     05C5                     l4667:
  6410     05C5  0845               	movf	___awmod@sign^(0+128),w
  6411     05C6  1903               	btfsc	3,2
  6412     05C7  2DCD               	goto	l4671
  6413     05C8  09C2               	comf	___awmod@dividend^(0+128),f
  6414     05C9  09C3               	comf	(___awmod@dividend+1)^(0+128),f
  6415     05CA  0AC2               	incf	___awmod@dividend^(0+128),f
  6416     05CB  1903               	skipnz
  6417     05CC  0AC3               	incf	(___awmod@dividend+1)^(0+128),f
  6418     05CD                     l4671:
  6419     05CD  0843               	movf	(___awmod@dividend+1)^(0+128),w
  6420     05CE  00C1               	movwf	(?___awmod+1)^(0+128)
  6421     05CF  0842               	movf	___awmod@dividend^(0+128),w
  6422     05D0  00C0               	movwf	?___awmod^(0+128)
  6423     05D1  0008               	return
  6424     05D2                     __end_of___awmod:
  6425                           
  6426                           	psect	text32
  6427     0697                     __ptext32:	
  6428 ;; *************** function _Ini_matrix *****************
  6429 ;; Defined at:
  6430 ;;		line 210 in file "main.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  i               1   11[BANK1 ] unsigned char 
  6435 ;;  i               1    7[BANK1 ] unsigned char 
  6436 ;;  data            2    8[BANK1 ] unsigned char [2]
  6437 ;;  k               1   10[BANK1 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 1F/4
  6444 ;;		On exit  : 1F/1
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6447 ;;      Params:         0       0       0       0       0       0
  6448 ;;      Locals:         0       0       5       0       0       0
  6449 ;;      Temps:          0       0       0       0       0       0
  6450 ;;      Totals:         0       0       5       0       0       0
  6451 ;;Total ram usage:        5 bytes
  6452 ;; Hardware stack levels used: 1
  6453 ;; Hardware stack levels required when called: 10
  6454 ;; This function calls:
  6455 ;;		_Tx_spi
  6456 ;; This function is called by:
  6457 ;;		_main
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461     0697                     _Ini_matrix:	
  6462                           ;psect for function _Ini_matrix
  6463                           
  6464                           
  6465                           ;main.c: 211:     uint8_t data[2];;main.c: 212:     uint8_t k=0;
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _Ini_matrix: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6469     0697  0021               	movlb	1	; select bank1
  6470     0698  01CA               	clrf	Ini_matrix@k^(0+128)
  6471                           
  6472                           ;main.c: 214:     for(uint8_t i=0;i<6;i++){
  6473     0699  01C7               	clrf	Ini_matrix@i^(0+128)
  6474     069A                     l4861:
  6475                           
  6476                           ;main.c: 215:         data[0]= MATRIX_CONFIG[k];
  6477     069A  084A               	movf	Ini_matrix@k^(0+128),w
  6478     069B  3E0C               	addlw	low (_MATRIX_CONFIG| (0+32768))
  6479     069C  0084               	movwf	4
  6480     069D  3088               	movlw	high (_MATRIX_CONFIG| (0+32768))
  6481     069E  1803               	skipnc
  6482     069F  3E01               	addlw	1
  6483     06A0  0085               	movwf	5
  6484     06A1  0800               	movf	0,w	;code access
  6485     06A2  00C8               	movwf	Ini_matrix@data^(0+128)
  6486                           
  6487                           ;main.c: 216:         data[1]= MATRIX_CONFIG[k+1];
  6488     06A3  084A               	movf	Ini_matrix@k^(0+128),w
  6489     06A4  3E0D               	addlw	low ((_MATRIX_CONFIG+1)| (0+32768))
  6490     06A5  0084               	movwf	4
  6491     06A6  3088               	movlw	high ((_MATRIX_CONFIG+1)| (0+32768))
  6492     06A7  1803               	skipnc
  6493     06A8  3E01               	addlw	1
  6494     06A9  0085               	movwf	5
  6495     06AA  0800               	movf	0,w	;code access
  6496     06AB  00C9               	movwf	(Ini_matrix@data^(0+128)+1)
  6497                           
  6498                           ;main.c: 217:         k=k+2;
  6499     06AC  084A               	movf	Ini_matrix@k^(0+128),w
  6500     06AD  3E02               	addlw	2
  6501     06AE  00CA               	movwf	Ini_matrix@k^(0+128)
  6502                           
  6503                           ;main.c: 218:         Tx_spi(data, 2);
  6504     06AF  30C8               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6505     06B0  00C4               	movwf	Tx_spi@data^(0+128)
  6506     06B1  3002               	movlw	2
  6507     06B2  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6508     06B3  3000               	movlw	0
  6509     06B4  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6510     06B5  318D  258D  3186   	fcall	_Tx_spi
  6511                           
  6512                           ;main.c: 219:     }
  6513     06B8  3001               	movlw	1
  6514     06B9  0021               	movlb	1	; select bank1
  6515     06BA  07C7               	addwf	Ini_matrix@i^(0+128),f
  6516     06BB  3006               	movlw	6
  6517     06BC  0247               	subwf	Ini_matrix@i^(0+128),w
  6518     06BD  1C03               	skipc
  6519     06BE  2E9A               	goto	l4861
  6520                           
  6521                           ;main.c: 221:     data[1] = 0b00000000;
  6522     06BF  01C9               	clrf	(Ini_matrix@data^(0+128)+1)
  6523                           
  6524                           ;main.c: 222:     for(uint8_t i=1;i<9;i++){
  6525     06C0  3001               	movlw	1
  6526     06C1  00CB               	movwf	Ini_matrix@i_1791^(0+128)
  6527     06C2                     l4879:
  6528                           
  6529                           ;main.c: 223:     data[0] = i;
  6530     06C2  084B               	movf	Ini_matrix@i_1791^(0+128),w
  6531     06C3  00C8               	movwf	Ini_matrix@data^(0+128)
  6532                           
  6533                           ;main.c: 224:     Tx_spi(data, 2);
  6534     06C4  30C8               	movlw	(low (Ini_matrix@data| 0))& (0+255)
  6535     06C5  00C4               	movwf	Tx_spi@data^(0+128)
  6536     06C6  3002               	movlw	2
  6537     06C7  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6538     06C8  3000               	movlw	0
  6539     06C9  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6540     06CA  318D  258D  3186   	fcall	_Tx_spi
  6541                           
  6542                           ;main.c: 225:     }
  6543     06CD  3001               	movlw	1
  6544     06CE  0021               	movlb	1	; select bank1
  6545     06CF  07CB               	addwf	Ini_matrix@i_1791^(0+128),f
  6546     06D0  3009               	movlw	9
  6547     06D1  024B               	subwf	Ini_matrix@i_1791^(0+128),w
  6548     06D2  1803               	btfsc	3,0
  6549     06D3  0008               	return
  6550     06D4  2EC2               	goto	l4879
  6551     06D5                     __end_of_Ini_matrix:
  6552                           
  6553                           	psect	text33
  6554     0DBF                     __ptext33:	
  6555 ;; *************** function _Idle *****************
  6556 ;; Defined at:
  6557 ;;		line 189 in file "main.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 1F/2
  6568 ;;		On exit  : 18/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6571 ;;      Params:         0       0       0       0       0       0
  6572 ;;      Locals:         0       0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0
  6574 ;;      Totals:         0       0       0       0       0       0
  6575 ;;Total ram usage:        0 bytes
  6576 ;; Hardware stack levels used: 1
  6577 ;; Hardware stack levels required when called: 12
  6578 ;; This function calls:
  6579 ;;		_Motor_Turn_Off
  6580 ;;		_Motor_Turn_On
  6581 ;; This function is called by:
  6582 ;;		_main
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586     0DBF                     _Idle:	
  6587                           ;psect for function _Idle
  6588                           
  6589                           
  6590                           ;main.c: 190:   idle = 1;
  6591                           
  6592                           ;incstack = 0
  6593                           ; Regs used in _Idle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6594     0DBF  3001               	movlw	1
  6595     0DC0  0020               	movlb	0	; select bank0
  6596     0DC1  00BA               	movwf	_idle
  6597                           
  6598                           ;main.c: 191:   var.D =0;
  6599     0DC2  300F               	movlw	-241
  6600     0DC3  05A0               	andwf	_var,f
  6601                           
  6602                           ;main.c: 192:   if(current_floor == 0){
  6603     0DC4  083D               	movf	_current_floor,w
  6604     0DC5  1D03               	btfss	3,2
  6605     0DC6  2DCE               	goto	l948
  6606                           
  6607                           ;main.c: 193:       LATAbits.LATA7 = 1;
  6608     0DC7  0022               	movlb	2	; select bank2
  6609     0DC8  178C               	bsf	12,7	;volatile
  6610                           
  6611                           ;main.c: 194:       Motor_Turn_Off();
  6612     0DC9  318C  24C8         	fcall	_Motor_Turn_Off
  6613                           
  6614                           ;main.c: 195:       index = 0;
  6615     0DCB  0020               	movlb	0	; select bank0
  6616     0DCC  01BE               	clrf	_index
  6617                           
  6618                           ;main.c: 196:     }
  6619     0DCD  0008               	return
  6620     0DCE                     l948:	
  6621                           ;main.c: 197:   else{
  6622                           
  6623                           
  6624                           ;main.c: 198:       LATAbits.LATA7 = 0;
  6625     0DCE  0022               	movlb	2	; select bank2
  6626     0DCF  138C               	bcf	12,7	;volatile
  6627                           
  6628                           ;main.c: 199:       Motor_Turn_On();
  6629     0DD0  318D  2529         	fcall	_Motor_Turn_On
  6630     0DD2  0008               	return
  6631     0DD3                     __end_of_Idle:
  6632                           
  6633                           	psect	text34
  6634     0D29                     __ptext34:	
  6635 ;; *************** function _Motor_Turn_On *****************
  6636 ;; Defined at:
  6637 ;;		line 12 in file "main.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 1F/2
  6648 ;;		On exit  : 18/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6651 ;;      Params:         0       0       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0
  6654 ;;      Totals:         0       0       0       0       0       0
  6655 ;;Total ram usage:        0 bytes
  6656 ;; Hardware stack levels used: 1
  6657 ;; Hardware stack levels required when called: 11
  6658 ;; This function calls:
  6659 ;;		_Matrix_update_dir
  6660 ;; This function is called by:
  6661 ;;		_Start
  6662 ;;		_Idle
  6663 ;;		_main
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667     0D29                     _Motor_Turn_On:	
  6668                           ;psect for function _Motor_Turn_On
  6669                           
  6670                           
  6671                           ;main.c: 13:     if(CCP3CONbits.CCP3M != 0x0C){
  6672                           
  6673                           ;incstack = 0
  6674                           ; Regs used in _Motor_Turn_On: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6675     0D29  0026               	movlb	6	; select bank6
  6676     0D2A  0813               	movf	19,w	;volatile
  6677     0D2B  390F               	andlw	15
  6678     0D2C  3A0C               	xorlw	12
  6679     0D2D  1903               	skipnz
  6680     0D2E  0008               	return
  6681                           
  6682                           ;main.c: 14:         CCP3CONbits.CCP3M = 0x0C;
  6683     0D2F  0813               	movf	19,w	;volatile
  6684     0D30  39F0               	andlw	-16
  6685     0D31  380C               	iorlw	12
  6686     0D32  0093               	movwf	19	;volatile
  6687                           
  6688                           ;main.c: 15:         Matrix_update_dir();
  6689     0D33  3183  23F2         	fcall	_Matrix_update_dir
  6690     0D35  0008               	return
  6691     0D36                     __end_of_Motor_Turn_On:
  6692                           
  6693                           	psect	text35
  6694     0CC8                     __ptext35:	
  6695 ;; *************** function _Motor_Turn_Off *****************
  6696 ;; Defined at:
  6697 ;;		line 5 in file "main.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 18/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6711 ;;      Params:         0       0       0       0       0       0
  6712 ;;      Locals:         0       0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0
  6714 ;;      Totals:         0       0       0       0       0       0
  6715 ;;Total ram usage:        0 bytes
  6716 ;; Hardware stack levels used: 1
  6717 ;; Hardware stack levels required when called: 11
  6718 ;; This function calls:
  6719 ;;		_Matrix_update_dir
  6720 ;; This function is called by:
  6721 ;;		_Start
  6722 ;;		_Idle
  6723 ;;		_main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727     0CC8                     _Motor_Turn_Off:	
  6728                           ;psect for function _Motor_Turn_Off
  6729                           
  6730                           
  6731                           ;main.c: 6:     if(CCP3CONbits.CCP3M != 0x00){
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _Motor_Turn_Off: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6735     0CC8  0026               	movlb	6	; select bank6
  6736     0CC9  0813               	movf	19,w	;volatile
  6737     0CCA  390F               	andlw	15
  6738     0CCB  3A00               	xorlw	0
  6739     0CCC  1903               	skipnz
  6740     0CCD  0008               	return
  6741                           
  6742                           ;main.c: 7:         CCP3CONbits.CCP3M = 0x00;
  6743     0CCE  30F0               	movlw	-16
  6744     0CCF  0593               	andwf	19,f	;volatile
  6745                           
  6746                           ;main.c: 8:         Matrix_update_dir();
  6747     0CD0  3183  23F2         	fcall	_Matrix_update_dir
  6748     0CD2  0008               	return
  6749     0CD3                     __end_of_Motor_Turn_Off:
  6750                           
  6751                           	psect	text36
  6752     03F2                     __ptext36:	
  6753 ;; *************** function _Matrix_update_dir *****************
  6754 ;; Defined at:
  6755 ;;		line 238 in file "main.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  i               1   16[BANK1 ] unsigned char 
  6760 ;;  i               2   17[BANK1 ] int 
  6761 ;;  route_          4    8[BANK1 ] _Bool [4]
  6762 ;;  data            2   14[BANK1 ] unsigned char [2]
  6763 ;;  display_dir     1   13[BANK1 ] unsigned char 
  6764 ;;  route_leds      1   12[BANK1 ] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 1F/6
  6771 ;;		On exit  : 1F/1
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6774 ;;      Params:         0       0       0       0       0       0
  6775 ;;      Locals:         0       0      11       0       0       0
  6776 ;;      Temps:          0       0       1       0       0       0
  6777 ;;      Totals:         0       0      12       0       0       0
  6778 ;;Total ram usage:       12 bytes
  6779 ;; Hardware stack levels used: 1
  6780 ;; Hardware stack levels required when called: 10
  6781 ;; This function calls:
  6782 ;;		_Tx_spi
  6783 ;;		___bmul
  6784 ;; This function is called by:
  6785 ;;		_Motor_Turn_Off
  6786 ;;		_Motor_Turn_On
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790     03F2                     _Matrix_update_dir:	
  6791                           ;psect for function _Matrix_update_dir
  6792                           
  6793                           
  6794                           ;main.c: 239:     uint8_t data[2];;main.c: 240:     uint8_t display_dir;;main.c: 242:   
      +                            _Bool route_[4];;main.c: 243:     route_[0] = route[0];
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in _Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6798     03F2  0020               	movlb	0	; select bank0
  6799     03F3  0827               	movf	_route,w
  6800     03F4  0021               	movlb	1	; select bank1
  6801     03F5  00C8               	movwf	Matrix_update_dir@route_^(0+128)
  6802                           
  6803                           ;main.c: 244:     route_[1] = route[1] | route[5];
  6804     03F6  0020               	movlb	0	; select bank0
  6805     03F7  0828               	movf	_route+1,w
  6806     03F8  042C               	iorwf	_route+5,w
  6807     03F9  0021               	movlb	1	; select bank1
  6808     03FA  00C9               	movwf	(Matrix_update_dir@route_^(0+128)+1)
  6809                           
  6810                           ;main.c: 245:     route_[2] = route[2] | route[4];
  6811     03FB  0020               	movlb	0	; select bank0
  6812     03FC  0829               	movf	_route+2,w
  6813     03FD  042B               	iorwf	_route+4,w
  6814     03FE  0021               	movlb	1	; select bank1
  6815     03FF  00CA               	movwf	(Matrix_update_dir@route_^(0+128)+2)
  6816                           
  6817                           ;main.c: 246:     route_[3] = route[3];
  6818     0400  0020               	movlb	0	; select bank0
  6819     0401  082A               	movf	_route+3,w
  6820     0402  0021               	movlb	1	; select bank1
  6821     0403  00CB               	movwf	(Matrix_update_dir@route_^(0+128)+3)
  6822                           
  6823                           ;main.c: 248:     uint8_t route_leds = 0;
  6824     0404  01CC               	clrf	Matrix_update_dir@route_leds^(0+128)
  6825                           
  6826                           ;main.c: 250:     for (int i = 0; i < 4; i++) {
  6827     0405  01D1               	clrf	Matrix_update_dir@i^(0+128)
  6828     0406  01D2               	clrf	(Matrix_update_dir@i+1)^(0+128)
  6829     0407                     l4269:
  6830                           
  6831                           ;main.c: 251:         if (route_[i]) route_leds |= (1 << i);
  6832     0407  0021               	movlb	1	; select bank1
  6833     0408  0851               	movf	Matrix_update_dir@i^(0+128),w
  6834     0409  3EC8               	addlw	(low (Matrix_update_dir@route_| 0))& (0+255)
  6835     040A  0086               	movwf	6
  6836     040B  0187               	clrf	7
  6837     040C  0801               	movf	1,w
  6838     040D  1903               	btfsc	3,2
  6839     040E  2C18               	goto	l4273
  6840     040F  3001               	movlw	1
  6841     0410  00C7               	movwf	??_Matrix_update_dir^(0+128)
  6842     0411  0A51               	incf	Matrix_update_dir@i^(0+128),w
  6843     0412  2C14               	goto	u3134
  6844     0413                     u3135:
  6845     0413  35C7               	lslf	??_Matrix_update_dir^(0+128),f
  6846     0414                     u3134:
  6847     0414  0B89               	decfsz	9,f
  6848     0415  2C13               	goto	u3135
  6849     0416  0847               	movf	??_Matrix_update_dir^(0+128),w
  6850     0417  04CC               	iorwf	Matrix_update_dir@route_leds^(0+128),f
  6851     0418                     l4273:
  6852                           
  6853                           ;main.c: 252:     }
  6854     0418  3001               	movlw	1
  6855     0419  07D1               	addwf	Matrix_update_dir@i^(0+128),f
  6856     041A  3000               	movlw	0
  6857     041B  3DD2               	addwfc	(Matrix_update_dir@i+1)^(0+128),f
  6858     041C  0852               	movf	(Matrix_update_dir@i+1)^(0+128),w
  6859     041D  3A80               	xorlw	128
  6860     041E  00C7               	movwf	??_Matrix_update_dir^(0+128)
  6861     041F  3080               	movlw	128
  6862     0420  0247               	subwf	??_Matrix_update_dir^(0+128),w
  6863     0421  1D03               	skipz
  6864     0422  2C25               	goto	u3145
  6865     0423  3004               	movlw	4
  6866     0424  0251               	subwf	Matrix_update_dir@i^(0+128),w
  6867     0425                     u3145:
  6868     0425  1C03               	skipc
  6869     0426  2C07               	goto	l4269
  6870                           
  6871                           ;main.c: 254:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
  6872     0427  0026               	movlb	6	; select bank6
  6873     0428  0813               	movf	19,w	;volatile
  6874     0429  390F               	andlw	15
  6875     042A  3A00               	xorlw	0
  6876     042B  1D03               	skipz
  6877     042C  2C30               	goto	l4281
  6878     042D  3006               	movlw	6
  6879     042E  0021               	movlb	1	; select bank1
  6880     042F  2C3A               	goto	L1
  6881     0430                     l4281:
  6882     0430  3003               	movlw	3
  6883     0431  0021               	movlb	1	; select bank1
  6884     0432  00C0               	movwf	___bmul@multiplicand^(0+128)
  6885     0433  0022               	movlb	2	; select bank2
  6886     0434  0D0C               	rlf	12,w	;volatile
  6887     0435  0D0C               	rlf	12,w	;volatile
  6888     0436  3901               	andlw	1
  6889     0437  318D  259D  3183   	fcall	___bmul
  6890     043A                     L1:
  6891     043A  00CD               	movwf	Matrix_update_dir@display_dir^(0+128)
  6892                           
  6893                           ;main.c: 256:     data[0] = 1;
  6894     043B  3001               	movlw	1
  6895     043C  00CE               	movwf	Matrix_update_dir@data^(0+128)
  6896                           
  6897                           ;main.c: 257:     data[1] = MATRIX_DIR[display_dir] | route_leds;
  6898     043D  084D               	movf	Matrix_update_dir@display_dir^(0+128),w
  6899     043E  3E18               	addlw	low (_MATRIX_DIR| (0+32768))
  6900     043F  0084               	movwf	4
  6901     0440  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6902     0441  1803               	skipnc
  6903     0442  3E01               	addlw	1
  6904     0443  0085               	movwf	5
  6905     0444  0800               	movf	0,w	;code access
  6906     0445  044C               	iorwf	Matrix_update_dir@route_leds^(0+128),w
  6907     0446  00CF               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6908                           
  6909                           ;main.c: 258:     Tx_spi(data, 2);
  6910     0447  30CE               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6911     0448  00C4               	movwf	Tx_spi@data^(0+128)
  6912     0449  3002               	movlw	2
  6913     044A  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6914     044B  3000               	movlw	0
  6915     044C  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6916     044D  318D  258D  3183   	fcall	_Tx_spi
  6917                           
  6918                           ;main.c: 259:     display_dir++;
  6919     0450  3001               	movlw	1
  6920     0451  0021               	movlb	1	; select bank1
  6921     0452  07CD               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6922                           
  6923                           ;main.c: 261:     for(uint8_t i=2;i<=3;i++){
  6924     0453  3002               	movlw	2
  6925     0454  00D0               	movwf	Matrix_update_dir@i_1802^(0+128)
  6926     0455                     l4297:
  6927                           
  6928                           ;main.c: 262:         data[0] = i;
  6929     0455  0850               	movf	Matrix_update_dir@i_1802^(0+128),w
  6930     0456  00CE               	movwf	Matrix_update_dir@data^(0+128)
  6931                           
  6932                           ;main.c: 263:         data[1] = MATRIX_DIR[display_dir];
  6933     0457  084D               	movf	Matrix_update_dir@display_dir^(0+128),w
  6934     0458  3E18               	addlw	low (_MATRIX_DIR| (0+32768))
  6935     0459  0084               	movwf	4
  6936     045A  3088               	movlw	high (_MATRIX_DIR| (0+32768))
  6937     045B  1803               	skipnc
  6938     045C  3E01               	addlw	1
  6939     045D  0085               	movwf	5
  6940     045E  0800               	movf	0,w	;code access
  6941     045F  00CF               	movwf	(Matrix_update_dir@data^(0+128)+1)
  6942                           
  6943                           ;main.c: 264:         Tx_spi(data, 2);
  6944     0460  30CE               	movlw	(low (Matrix_update_dir@data| 0))& (0+255)
  6945     0461  00C4               	movwf	Tx_spi@data^(0+128)
  6946     0462  3002               	movlw	2
  6947     0463  00C5               	movwf	Tx_spi@dataSize^(0+128)
  6948     0464  3000               	movlw	0
  6949     0465  00C6               	movwf	(Tx_spi@dataSize^(0+128)+1)
  6950     0466  318D  258D  3183   	fcall	_Tx_spi
  6951                           
  6952                           ;main.c: 265:         display_dir++;
  6953     0469  3001               	movlw	1
  6954     046A  0021               	movlb	1	; select bank1
  6955     046B  07CD               	addwf	Matrix_update_dir@display_dir^(0+128),f
  6956                           
  6957                           ;main.c: 267:     }
  6958     046C  3001               	movlw	1
  6959     046D  07D0               	addwf	Matrix_update_dir@i_1802^(0+128),f
  6960     046E  3004               	movlw	4
  6961     046F  0250               	subwf	Matrix_update_dir@i_1802^(0+128),w
  6962     0470  1803               	btfsc	3,0
  6963     0471  0008               	return
  6964     0472  2C55               	goto	l4297
  6965     0473                     __end_of_Matrix_update_dir:
  6966                           
  6967                           	psect	text37
  6968     0D9D                     __ptext37:	
  6969 ;; *************** function ___bmul *****************
  6970 ;; Defined at:
  6971 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  multiplier      1    wreg     unsigned char 
  6974 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  multiplier      1    2[BANK1 ] unsigned char 
  6977 ;;  product         1    1[BANK1 ] unsigned char 
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  1    wreg      unsigned char 
  6980 ;; Registers used:
  6981 ;;		wreg, status,2, status,0
  6982 ;; Tracked objects:
  6983 ;;		On entry : 1F/2
  6984 ;;		On exit  : 1F/1
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6987 ;;      Params:         0       0       1       0       0       0
  6988 ;;      Locals:         0       0       2       0       0       0
  6989 ;;      Temps:          0       0       0       0       0       0
  6990 ;;      Totals:         0       0       3       0       0       0
  6991 ;;Total ram usage:        3 bytes
  6992 ;; Hardware stack levels used: 1
  6993 ;; Hardware stack levels required when called: 8
  6994 ;; This function calls:
  6995 ;;		Nothing
  6996 ;; This function is called by:
  6997 ;;		_Matrix_update_dir
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001     0D9D                     ___bmul:	
  7002                           ;psect for function ___bmul
  7003                           
  7004                           
  7005                           ;incstack = 0
  7006                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7007                           ;___bmul@multiplier stored from wreg
  7008     0D9D  0021               	movlb	1	; select bank1
  7009     0D9E  00C2               	movwf	___bmul@multiplier^(0+128)
  7010     0D9F  01C1               	clrf	___bmul@product^(0+128)
  7011     0DA0                     l4193:
  7012     0DA0  1C42               	btfss	___bmul@multiplier^(0+128),0
  7013     0DA1  2DA4               	goto	l4197
  7014     0DA2  0840               	movf	___bmul@multiplicand^(0+128),w
  7015     0DA3  07C1               	addwf	___bmul@product^(0+128),f
  7016     0DA4                     l4197:
  7017     0DA4  1003               	clrc
  7018     0DA5  0DC0               	rlf	___bmul@multiplicand^(0+128),f
  7019     0DA6  1003               	clrc
  7020     0DA7  0CC2               	rrf	___bmul@multiplier^(0+128),f
  7021     0DA8  0842               	movf	___bmul@multiplier^(0+128),w
  7022     0DA9  1D03               	btfss	3,2
  7023     0DAA  2DA0               	goto	l4193
  7024     0DAB  0841               	movf	___bmul@product^(0+128),w
  7025     0DAC  0008               	return
  7026     0DAD                     __end_of___bmul:
  7027                           
  7028                           	psect	text38
  7029     0D8D                     __ptext38:	
  7030 ;; *************** function _Tx_spi *****************
  7031 ;; Defined at:
  7032 ;;		line 203 in file "main.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  data            1    4[BANK1 ] PTR unsigned char 
  7035 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  7036 ;;  dataSize        2    5[BANK1 ] unsigned int 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7043 ;; Tracked objects:
  7044 ;;		On entry : 1F/1
  7045 ;;		On exit  : 1F/2
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7048 ;;      Params:         0       0       3       0       0       0
  7049 ;;      Locals:         0       0       0       0       0       0
  7050 ;;      Temps:          0       0       0       0       0       0
  7051 ;;      Totals:         0       0       3       0       0       0
  7052 ;;Total ram usage:        3 bytes
  7053 ;; Hardware stack levels used: 1
  7054 ;; Hardware stack levels required when called: 9
  7055 ;; This function calls:
  7056 ;;		_SPI1_ExchangeBlock
  7057 ;; This function is called by:
  7058 ;;		_Ini_matrix
  7059 ;;		_Matrix_update_floor
  7060 ;;		_Matrix_update_dir
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064     0D8D                     _Tx_spi:	
  7065                           ;psect for function _Tx_spi
  7066                           
  7067                           
  7068                           ;main.c: 204:     LATBbits.LATB1 = 0;
  7069                           
  7070                           ;incstack = 0
  7071                           ; Regs used in _Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7072     0D8D  0022               	movlb	2	; select bank2
  7073     0D8E  108D               	bcf	13,1	;volatile
  7074                           
  7075                           ;main.c: 205:     __nop();
  7076     0D8F  0000               	nop
  7077                           
  7078                           ;main.c: 206:     __nop();
  7079     0D90  0000               	nop
  7080                           
  7081                           ;main.c: 207:     SPI1_ExchangeBlock(data,dataSize);
  7082     0D91  0021               	movlb	1	; select bank1
  7083     0D92  0844               	movf	Tx_spi@data^(0+128),w
  7084     0D93  00C0               	movwf	SPI1_ExchangeBlock@block^(0+128)
  7085     0D94  0846               	movf	(Tx_spi@dataSize+1)^(0+128),w
  7086     0D95  00C2               	movwf	(SPI1_ExchangeBlock@blockSize+1)^(0+128)
  7087     0D96  0845               	movf	Tx_spi@dataSize^(0+128),w
  7088     0D97  00C1               	movwf	SPI1_ExchangeBlock@blockSize^(0+128)
  7089     0D98  318F  270E         	fcall	_SPI1_ExchangeBlock
  7090                           
  7091                           ;main.c: 208:     LATBbits.LATB1 = 1;
  7092     0D9A  0022               	movlb	2	; select bank2
  7093     0D9B  148D               	bsf	13,1	;volatile
  7094     0D9C  0008               	return
  7095     0D9D                     __end_of_Tx_spi:
  7096                           
  7097                           	psect	text39
  7098     0F0E                     __ptext39:	
  7099 ;; *************** function _SPI1_ExchangeBlock *****************
  7100 ;; Defined at:
  7101 ;;		line 100 in file "mcc_generated_files/spi1.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  block           1    0[BANK1 ] PTR void 
  7104 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  7105 ;;  blockSize       2    1[BANK1 ] unsigned int 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  data            1    3[BANK1 ] PTR unsigned char 
  7108 ;;		 -> Matrix_update_dir@data(2), Matrix_update_floor@data(2), Ini_matrix@data(2), 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7113 ;; Tracked objects:
  7114 ;;		On entry : 1F/1
  7115 ;;		On exit  : 1F/1
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7118 ;;      Params:         0       0       3       0       0       0
  7119 ;;      Locals:         0       0       1       0       0       0
  7120 ;;      Temps:          0       0       0       0       0       0
  7121 ;;      Totals:         0       0       4       0       0       0
  7122 ;;Total ram usage:        4 bytes
  7123 ;; Hardware stack levels used: 1
  7124 ;; Hardware stack levels required when called: 8
  7125 ;; This function calls:
  7126 ;;		Nothing
  7127 ;; This function is called by:
  7128 ;;		_Tx_spi
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132     0F0E                     _SPI1_ExchangeBlock:	
  7133                           ;psect for function _SPI1_ExchangeBlock
  7134                           
  7135                           
  7136                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
  7137                           
  7138                           ;incstack = 0
  7139                           ; Regs used in _SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
  7140     0F0E  0840               	movf	SPI1_ExchangeBlock@block^(0+128),w
  7141     0F0F  00C3               	movwf	SPI1_ExchangeBlock@data^(0+128)
  7142     0F10                     l4131:	
  7143                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  7144                           
  7145                           
  7146                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
  7147     0F10  3001               	movlw	1
  7148     0F11  02C1               	subwf	SPI1_ExchangeBlock@blockSize^(0+128),f
  7149     0F12  3000               	movlw	0
  7150     0F13  3BC2               	subwfb	(SPI1_ExchangeBlock@blockSize+1)^(0+128),f
  7151     0F14  0A41               	incf	SPI1_ExchangeBlock@blockSize^(0+128),w
  7152     0F15  1903               	btfsc	3,2
  7153     0F16  0A42               	incf	(SPI1_ExchangeBlock@blockSize+1)^(0+128),w
  7154     0F17  1903               	btfsc	3,2
  7155     0F18  0008               	return
  7156                           
  7157                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
  7158     0F19  0843               	movf	SPI1_ExchangeBlock@data^(0+128),w
  7159     0F1A  0086               	movwf	6
  7160     0F1B  0187               	clrf	7
  7161     0F1C  0801               	movf	1,w
  7162     0F1D  0024               	movlb	4	; select bank4
  7163     0F1E  0091               	movwf	17	;volatile
  7164     0F1F                     l484:	
  7165                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
  7166                           
  7167     0F1F  0020               	movlb	0	; select bank0
  7168     0F20  1991               	btfsc	17,3	;volatile
  7169     0F21  2F25               	goto	l486
  7170     0F22  0022               	movlb	2	; select bank2
  7171     0F23  108D               	bcf	13,1	;volatile
  7172     0F24  2F1F               	goto	l484
  7173     0F25                     l486:
  7174                           
  7175                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
  7176     0F25  1191               	bcf	17,3	;volatile
  7177                           
  7178                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
  7179     0F26  0021               	movlb	1	; select bank1
  7180     0F27  0843               	movf	SPI1_ExchangeBlock@data^(0+128),w
  7181     0F28  0086               	movwf	6
  7182     0F29  0187               	clrf	7
  7183     0F2A  0024               	movlb	4	; select bank4
  7184     0F2B  0811               	movf	17,w	;volatile
  7185     0F2C  0081               	movwf	1
  7186     0F2D  3001               	movlw	1
  7187     0F2E  0021               	movlb	1	; select bank1
  7188     0F2F  07C3               	addwf	SPI1_ExchangeBlock@data^(0+128),f
  7189     0F30  2F10               	goto	l4131
  7190     0F31                     __end_of_SPI1_ExchangeBlock:
  7191                           
  7192                           	psect	intentry
  7193     0004                     __pintentry:	
  7194 ;; *************** function _INTERRUPT_InterruptManager *****************
  7195 ;; Defined at:
  7196 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;		None
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7210 ;;      Params:         0       0       0       0       0       0
  7211 ;;      Locals:         0       0       0       0       0       0
  7212 ;;      Temps:          0       0       0       0       0       0
  7213 ;;      Totals:         0       0       0       0       0       0
  7214 ;;Total ram usage:        0 bytes
  7215 ;; Hardware stack levels used: 1
  7216 ;; Hardware stack levels required when called: 7
  7217 ;; This function calls:
  7218 ;;		NULL
  7219 ;;		_ADC_ISR
  7220 ;;		_CMP1_ISR
  7221 ;;		_CMP2_ISR
  7222 ;;		_EUSART_Receive_ISR
  7223 ;;		_PIN_MANAGER_IOC
  7224 ;;		_Read_UART
  7225 ;;		_TMR1_ISR
  7226 ;; This function is called by:
  7227 ;;		Interrupt level 1
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231     0004                     _INTERRUPT_InterruptManager:
  7232                           
  7233                           ;incstack = 0
  7234     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7235                           
  7236                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7237     0005  3180               	pagesel	$
  7238                           
  7239                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  7240     0006  198B               	btfsc	11,3	;volatile
  7241     0007  1C0B               	btfss	11,0	;volatile
  7242     0008  280C               	goto	i1l4893
  7243                           
  7244                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  7245     0009  318C  24B2  3180   	fcall	_PIN_MANAGER_IOC
  7246     000C                     i1l4893:
  7247                           
  7248                           ;mcc_generated_files/interrupt_manager.c: 59:     if(INTCONbits.PEIE == 1)
  7249     000C  1F0B               	btfss	11,6	;volatile
  7250     000D  283D               	goto	i1l279
  7251                           
  7252                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7253     000E  0021               	movlb	1	; select bank1
  7254     000F  1F11               	btfss	17,6	;volatile
  7255     0010  2817               	goto	i1l4901
  7256     0011  0020               	movlb	0	; select bank0
  7257     0012  1F11               	btfss	17,6	;volatile
  7258     0013  2817               	goto	i1l4901
  7259                           
  7260                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             ADC_ISR();
  7261     0014  318C  24DE  3180   	fcall	_ADC_ISR
  7262     0017                     i1l4901:
  7263                           
  7264                           ;mcc_generated_files/interrupt_manager.c: 65:         if(PIE1bits.RCIE == 1 && PIR1bits.
      +                          RCIF == 1)
  7265     0017  0021               	movlb	1	; select bank1
  7266     0018  1E91               	btfss	17,5	;volatile
  7267     0019  2823               	goto	i1l4907
  7268     001A  0020               	movlb	0	; select bank0
  7269     001B  1E91               	btfss	17,5	;volatile
  7270     001C  2823               	goto	i1l4907
  7271                           
  7272                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
  7273     001D  0021               	movlb	1	; select bank1
  7274     001E  0862               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  7275     001F  008A               	movwf	10
  7276     0020  0861               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  7277     0021  000A               	callw
  7278     0022  3180               	pagesel	$
  7279     0023                     i1l4907:
  7280                           
  7281                           ;mcc_generated_files/interrupt_manager.c: 69:         if(PIE2bits.C1IE == 1 && PIR2bits.
      +                          C1IF == 1)
  7282     0023  0021               	movlb	1	; select bank1
  7283     0024  1E92               	btfss	18,5	;volatile
  7284     0025  282C               	goto	i1l4913
  7285     0026  0020               	movlb	0	; select bank0
  7286     0027  1E92               	btfss	18,5	;volatile
  7287     0028  282C               	goto	i1l4913
  7288                           
  7289                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             CMP1_ISR();
  7290     0029  318C  2481  3180   	fcall	_CMP1_ISR
  7291     002C                     i1l4913:
  7292                           
  7293                           ;mcc_generated_files/interrupt_manager.c: 73:         if(PIE2bits.C2IE == 1 && PIR2bits.
      +                          C2IF == 1)
  7294     002C  0021               	movlb	1	; select bank1
  7295     002D  1F12               	btfss	18,6	;volatile
  7296     002E  2835               	goto	i1l4919
  7297     002F  0020               	movlb	0	; select bank0
  7298     0030  1F12               	btfss	18,6	;volatile
  7299     0031  2835               	goto	i1l4919
  7300                           
  7301                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             CMP2_ISR();
  7302     0032  318C  248A  3180   	fcall	_CMP2_ISR
  7303     0035                     i1l4919:
  7304                           
  7305                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1)
  7306     0035  0021               	movlb	1	; select bank1
  7307     0036  1C11               	btfss	17,0	;volatile
  7308     0037  283D               	goto	i1l279
  7309     0038  0020               	movlb	0	; select bank0
  7310     0039  1C11               	btfss	17,0	;volatile
  7311     003A  283D               	goto	i1l279
  7312                           
  7313                           ;mcc_generated_files/interrupt_manager.c: 78:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 79:             TMR1_ISR();
  7314     003B  318E  2642         	fcall	_TMR1_ISR
  7315     003D                     i1l279:
  7316     003D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7317     003E  0009               	retfie
  7318     003F                     __end_of_INTERRUPT_InterruptManager:
  7319                           
  7320                           	psect	text41
  7321     0E42                     __ptext41:	
  7322 ;; *************** function _TMR1_ISR *****************
  7323 ;; Defined at:
  7324 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;		None
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;		None
  7329 ;; Return value:  Size  Location     Type
  7330 ;;                  1    wreg      void 
  7331 ;; Registers used:
  7332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7333 ;; Tracked objects:
  7334 ;;		On entry : 1F/0
  7335 ;;		On exit  : 1F/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7338 ;;      Params:         0       0       0       0       0       0
  7339 ;;      Locals:         0       0       0       0       0       0
  7340 ;;      Temps:          0       0       0       0       0       0
  7341 ;;      Totals:         0       0       0       0       0       0
  7342 ;;Total ram usage:        0 bytes
  7343 ;; Hardware stack levels used: 1
  7344 ;; Hardware stack levels required when called: 4
  7345 ;; This function calls:
  7346 ;;		_TMR1_CallBack
  7347 ;;		_TMR1_WriteTimer
  7348 ;; This function is called by:
  7349 ;;		_INTERRUPT_InterruptManager
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353     0E42                     _TMR1_ISR:	
  7354                           ;psect for function _TMR1_ISR
  7355                           
  7356                           
  7357                           ;mcc_generated_files/tmr1.c: 159:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr1.c: 162:     PIR1bits.TMR1IF = 0;
  7358                           
  7359                           ;incstack = 0
  7360                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7361     0E42  1011               	bcf	17,0	;volatile
  7362                           
  7363                           ;mcc_generated_files/tmr1.c: 163:     TMR1_WriteTimer(timer1ReloadVal);
  7364     0E43  0830               	movf	_timer1ReloadVal+1,w	;volatile
  7365     0E44  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7366     0E45  082F               	movf	_timer1ReloadVal,w	;volatile
  7367     0E46  00F0               	movwf	TMR1_WriteTimer@timerVal
  7368     0E47  318D  2543  318E   	fcall	_TMR1_WriteTimer
  7369                           
  7370                           ;mcc_generated_files/tmr1.c: 166:     if (++CountCallBack >= 10)
  7371     0E4A  3001               	movlw	1
  7372     0E4B  07AD               	addwf	TMR1_ISR@CountCallBack,f	;volatile
  7373     0E4C  3000               	movlw	0
  7374     0E4D  3DAE               	addwfc	TMR1_ISR@CountCallBack+1,f	;volatile
  7375     0E4E  3000               	movlw	0
  7376     0E4F  022E               	subwf	TMR1_ISR@CountCallBack+1,w	;volatile
  7377     0E50  300A               	movlw	10
  7378     0E51  1903               	skipnz
  7379     0E52  022D               	subwf	TMR1_ISR@CountCallBack,w	;volatile
  7380     0E53  1C03               	skipc
  7381     0E54  0008               	return
  7382                           
  7383                           ;mcc_generated_files/tmr1.c: 167:     {;mcc_generated_files/tmr1.c: 169:         TMR1_Ca
      +                          llBack();
  7384     0E55  318C  24BD         	fcall	_TMR1_CallBack
  7385                           
  7386                           ;mcc_generated_files/tmr1.c: 172:         CountCallBack = 0;
  7387     0E57  0020               	movlb	0	; select bank0
  7388     0E58  01AD               	clrf	TMR1_ISR@CountCallBack	;volatile
  7389     0E59  01AE               	clrf	TMR1_ISR@CountCallBack+1	;volatile
  7390     0E5A  0008               	return
  7391     0E5B                     __end_of_TMR1_ISR:
  7392                           
  7393                           	psect	text42
  7394     0D43                     __ptext42:	
  7395 ;; *************** function _TMR1_WriteTimer *****************
  7396 ;; Defined at:
  7397 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  timerVal        2    0[COMMON] unsigned short 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;		None
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg
  7406 ;; Tracked objects:
  7407 ;;		On entry : 1F/0
  7408 ;;		On exit  : 1F/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7411 ;;      Params:         2       0       0       0       0       0
  7412 ;;      Locals:         0       0       0       0       0       0
  7413 ;;      Temps:          0       0       0       0       0       0
  7414 ;;      Totals:         2       0       0       0       0       0
  7415 ;;Total ram usage:        2 bytes
  7416 ;; Hardware stack levels used: 1
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_TMR1_ISR
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424     0D43                     _TMR1_WriteTimer:	
  7425                           ;psect for function _TMR1_WriteTimer
  7426                           
  7427                           
  7428                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _TMR1_WriteTimer: [wreg]
  7432     0D43  1D18               	btfss	24,2	;volatile
  7433     0D44  2D4C               	goto	i1l3621
  7434                           
  7435                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7436     0D45  1018               	bcf	24,0	;volatile
  7437                           
  7438                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  7439     0D46  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7440     0D47  0097               	movwf	23	;volatile
  7441                           
  7442                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  7443     0D48  0870               	movf	TMR1_WriteTimer@timerVal,w
  7444     0D49  0096               	movwf	22	;volatile
  7445                           
  7446                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7447     0D4A  1418               	bsf	24,0	;volatile
  7448                           
  7449                           ;mcc_generated_files/tmr1.c: 133:     }
  7450     0D4B  0008               	return
  7451     0D4C                     i1l3621:
  7452                           
  7453                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  7454     0D4C  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7455     0D4D  0097               	movwf	23	;volatile
  7456                           
  7457                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  7458     0D4E  0870               	movf	TMR1_WriteTimer@timerVal,w
  7459     0D4F  0096               	movwf	22	;volatile
  7460     0D50  0008               	return
  7461     0D51                     __end_of_TMR1_WriteTimer:
  7462                           
  7463                           	psect	text43
  7464     0CBD                     __ptext43:	
  7465 ;; *************** function _TMR1_CallBack *****************
  7466 ;; Defined at:
  7467 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 1F/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7481 ;;      Params:         0       0       0       0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0
  7483 ;;      Temps:          0       0       0       0       0       0
  7484 ;;      Totals:         0       0       0       0       0       0
  7485 ;;Total ram usage:        0 bytes
  7486 ;; Hardware stack levels used: 1
  7487 ;; Hardware stack levels required when called: 3
  7488 ;; This function calls:
  7489 ;;		NULL
  7490 ;;		_TMR1_DefaultInterruptHandler
  7491 ;;		_Write_UART
  7492 ;; This function is called by:
  7493 ;;		_TMR1_ISR
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497     0CBD                     _TMR1_CallBack:	
  7498                           ;psect for function _TMR1_CallBack
  7499                           
  7500                           
  7501                           ;mcc_generated_files/tmr1.c: 179:     if(TMR1_InterruptHandler)
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in _TMR1_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7505     0CBD  0021               	movlb	1	; select bank1
  7506     0CBE  0859               	movf	_TMR1_InterruptHandler^(0+128),w
  7507     0CBF  045A               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  7508     0CC0  1903               	btfsc	3,2
  7509     0CC1  0008               	return
  7510                           
  7511                           ;mcc_generated_files/tmr1.c: 180:     {;mcc_generated_files/tmr1.c: 181:         TMR1_In
      +                          terruptHandler();
  7512     0CC2  085A               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  7513     0CC3  008A               	movwf	10
  7514     0CC4  0859               	movf	_TMR1_InterruptHandler^(0+128),w
  7515     0CC5  000A               	callw
  7516     0CC6  318C               	pagesel	$
  7517     0CC7  0008               	return
  7518     0CC8                     __end_of_TMR1_CallBack:
  7519                           
  7520                           	psect	text44
  7521     0003                     __ptext44:	
  7522 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7523 ;; Defined at:
  7524 ;;		line 189 in file "mcc_generated_files/tmr1.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      void 
  7531 ;; Registers used:
  7532 ;;		None
  7533 ;; Tracked objects:
  7534 ;;		On entry : 1F/1
  7535 ;;		On exit  : 1F/1
  7536 ;;		Unchanged: 1F/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7538 ;;      Params:         0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0
  7541 ;;      Totals:         0       0       0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used: 1
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_TMR1_Initialize
  7548 ;;		_TMR1_CallBack
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552     0003                     _TMR1_DefaultInterruptHandler:	
  7553                           ;psect for function _TMR1_DefaultInterruptHandler
  7554                           
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7558     0003  0008               	return
  7559     0004                     __end_of_TMR1_DefaultInterruptHandler:
  7560                           
  7561                           	psect	text45
  7562     0F31                     __ptext45:	
  7563 ;; *************** function _Write_UART *****************
  7564 ;; Defined at:
  7565 ;;		line 126 in file "main.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;		None
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;  i               2    8[BANK0 ] int 
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1    wreg      void 
  7572 ;; Registers used:
  7573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7574 ;; Tracked objects:
  7575 ;;		On entry : 1F/1
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7579 ;;      Params:         0       0       0       0       0       0
  7580 ;;      Locals:         0       2       0       0       0       0
  7581 ;;      Temps:          0       1       0       0       0       0
  7582 ;;      Totals:         0       3       0       0       0       0
  7583 ;;Total ram usage:        3 bytes
  7584 ;; Hardware stack levels used: 1
  7585 ;; Hardware stack levels required when called: 2
  7586 ;; This function calls:
  7587 ;;		_EUSART_Write
  7588 ;;		_EUSART_is_tx_ready
  7589 ;;		_Update_tx_buffer
  7590 ;; This function is called by:
  7591 ;;		_main
  7592 ;;		_TMR1_CallBack
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596     0F31                     _Write_UART:	
  7597                           ;psect for function _Write_UART
  7598                           
  7599                           
  7600                           ;main.c: 127:   Update_tx_buffer();
  7601                           
  7602                           ;incstack = 0
  7603                           ; Regs used in _Write_UART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7604     0F31  3180  206C  318F   	fcall	_Update_tx_buffer
  7605                           
  7606                           ;main.c: 128:     for(int i=0; i<21; i++){
  7607     0F34  0020               	movlb	0	; select bank0
  7608     0F35  01C7               	clrf	Write_UART@i
  7609     0F36  01C8               	clrf	Write_UART@i+1
  7610     0F37                     i1l3325:
  7611                           
  7612                           ;main.c: 129:         EUSART_is_tx_ready();
  7613     0F37  318C  246A  318F   	fcall	_EUSART_is_tx_ready
  7614                           
  7615                           ;main.c: 130:         EUSART_Write(uart_write_buffer[i]);
  7616     0F3A  0020               	movlb	0	; select bank0
  7617     0F3B  0847               	movf	Write_UART@i,w
  7618     0F3C  3E20               	addlw	(low (_uart_write_buffer| (0+256)))& (0+255)
  7619     0F3D  0086               	movwf	6
  7620     0F3E  3001               	movlw	1	; select bank2/3
  7621     0F3F  0087               	movwf	7
  7622     0F40  0801               	movf	1,w
  7623     0F41  318C  2463  318F   	fcall	_EUSART_Write
  7624                           
  7625                           ;main.c: 131:       }
  7626     0F44  3001               	movlw	1
  7627     0F45  0020               	movlb	0	; select bank0
  7628     0F46  07C7               	addwf	Write_UART@i,f
  7629     0F47  3000               	movlw	0
  7630     0F48  3DC8               	addwfc	Write_UART@i+1,f
  7631     0F49  0848               	movf	Write_UART@i+1,w
  7632     0F4A  3A80               	xorlw	128
  7633     0F4B  00C6               	movwf	??_Write_UART
  7634     0F4C  3080               	movlw	128
  7635     0F4D  0246               	subwf	??_Write_UART,w
  7636     0F4E  1D03               	skipz
  7637     0F4F  2F52               	goto	u218_25
  7638     0F50  3015               	movlw	21
  7639     0F51  0247               	subwf	Write_UART@i,w
  7640     0F52                     u218_25:
  7641     0F52  1803               	btfsc	3,0
  7642     0F53  0008               	return
  7643     0F54  2F37               	goto	i1l3325
  7644     0F55                     __end_of_Write_UART:
  7645                           
  7646                           	psect	text46
  7647     006C                     __ptext46:	
  7648 ;; *************** function _Update_tx_buffer *****************
  7649 ;; Defined at:
  7650 ;;		line 95 in file "main.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;		None
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;		None
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  1    wreg      void 
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, status,0, pclath, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 1F/1
  7661 ;;		On exit  : 1F/2
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7664 ;;      Params:         0       0       0       0       0       0
  7665 ;;      Locals:         0       0       0       0       0       0
  7666 ;;      Temps:          0       2       0       0       0       0
  7667 ;;      Totals:         0       2       0       0       0       0
  7668 ;;Total ram usage:        2 bytes
  7669 ;; Hardware stack levels used: 1
  7670 ;; Hardware stack levels required when called: 1
  7671 ;; This function calls:
  7672 ;;		_TMR0_ReadTimer
  7673 ;;		___awdiv
  7674 ;;		___lbdiv
  7675 ;;		___lbmod
  7676 ;;		___lwdiv
  7677 ;;		___lwmod
  7678 ;;		___wmul
  7679 ;;		i1_TMR0_Reload
  7680 ;; This function is called by:
  7681 ;;		_Write_UART
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685     006C                     _Update_tx_buffer:	
  7686                           ;psect for function _Update_tx_buffer
  7687                           
  7688                           
  7689                           ;main.c: 96:     var.A = current_floor;
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in _Update_tx_buffer: [wreg+status,2+status,0+pclath+cstack]
  7693     006C  0020               	movlb	0	; select bank0
  7694     006D  0821               	movf	_var+1,w
  7695     006E  063D               	xorwf	_current_floor,w
  7696     006F  39F0               	andlw	-16
  7697     0070  063D               	xorwf	_current_floor,w
  7698     0071  00A1               	movwf	_var+1
  7699                           
  7700                           ;main.c: 97:     if(CCP3CONbits.CCP3M && LATAbits.LATA7==0) var.M = 2;
  7701     0072  0026               	movlb	6	; select bank6
  7702     0073  0813               	movf	19,w	;volatile
  7703     0074  390F               	andlw	15
  7704     0075  3A00               	xorlw	0
  7705     0076  1903               	skipnz
  7706     0077  2881               	goto	i1l3133
  7707     0078  0022               	movlb	2	; select bank2
  7708     0079  1B8C               	btfsc	12,7	;volatile
  7709     007A  2881               	goto	i1l3133
  7710     007B  0020               	movlb	0	; select bank0
  7711     007C  0821               	movf	_var+1,w
  7712     007D  39CF               	andlw	-49
  7713     007E  3820               	iorlw	32
  7714     007F  00A1               	movwf	_var+1
  7715     0080  2891               	goto	i1l3141
  7716     0081                     i1l3133:
  7717     0081  0026               	movlb	6	; select bank6
  7718     0082  0813               	movf	19,w	;volatile
  7719     0083  390F               	andlw	15
  7720     0084  3A00               	xorlw	0
  7721     0085  1903               	skipnz
  7722     0086  288E               	goto	i1l3139
  7723     0087  0022               	movlb	2	; select bank2
  7724     0088  1F8C               	btfss	12,7	;volatile
  7725     0089  288E               	goto	i1l3139
  7726     008A  3030               	movlw	48
  7727     008B  0020               	movlb	0	; select bank0
  7728     008C  04A1               	iorwf	_var+1,f
  7729     008D  2891               	goto	i1l3141
  7730     008E                     i1l3139:
  7731     008E  30CF               	movlw	-49
  7732     008F  0020               	movlb	0	; select bank0
  7733     0090  05A1               	andwf	_var+1,f
  7734     0091                     i1l3141:
  7735                           
  7736                           ;main.c: 100:     if(TMR0_ReadTimer() < 3) TMR0_Reload();
  7737     0091  318C  2424  3180   	fcall	_TMR0_ReadTimer
  7738     0094  00C4               	movwf	??_Update_tx_buffer
  7739     0095  3003               	movlw	3
  7740     0096  0244               	subwf	??_Update_tx_buffer,w
  7741     0097  1803               	skipnc
  7742     0098  289C               	goto	i1l3145
  7743     0099  318C  2410  3180   	fcall	i1_TMR0_Reload
  7744     009C                     i1l3145:
  7745                           
  7746                           ;main.c: 101:     position0 = var.HHH;
  7747     009C  0822               	movf	_var+2,w
  7748     009D  00C4               	movwf	??_Update_tx_buffer
  7749     009E  01C5               	clrf	??_Update_tx_buffer+1
  7750     009F  0844               	movf	??_Update_tx_buffer,w
  7751     00A0  00B1               	movwf	_position0
  7752     00A1  0845               	movf	??_Update_tx_buffer+1,w
  7753     00A2  00B2               	movwf	_position0+1
  7754                           
  7755                           ;main.c: 102:     if(LATAbits.LATA7 != 0) var.HHH += (TMR0_ReadTimer()*1655)/1000;
  7756     00A3  0022               	movlb	2	; select bank2
  7757     00A4  1F8C               	btfss	12,7	;volatile
  7758     00A5  28C3               	goto	i1l3151
  7759     00A6  30E8               	movlw	232
  7760     00A7  00F7               	movwf	___awdiv@divisor
  7761     00A8  3003               	movlw	3
  7762     00A9  00F8               	movwf	___awdiv@divisor+1
  7763     00AA  318C  2424  3180   	fcall	_TMR0_ReadTimer
  7764     00AD  00C4               	movwf	??_Update_tx_buffer
  7765     00AE  01C5               	clrf	??_Update_tx_buffer+1
  7766     00AF  0844               	movf	??_Update_tx_buffer,w
  7767     00B0  00F1               	movwf	___wmul@multiplier
  7768     00B1  0845               	movf	??_Update_tx_buffer+1,w
  7769     00B2  00F2               	movwf	___wmul@multiplier+1
  7770     00B3  3077               	movlw	119
  7771     00B4  00F3               	movwf	___wmul@multiplicand
  7772     00B5  3006               	movlw	6
  7773     00B6  00F4               	movwf	___wmul@multiplicand+1
  7774     00B7  318E  2676  3180   	fcall	___wmul
  7775     00BA  0872               	movf	?___wmul+1,w
  7776     00BB  00FA               	movwf	___awdiv@dividend+1
  7777     00BC  0871               	movf	?___wmul,w
  7778     00BD  00F9               	movwf	___awdiv@dividend
  7779     00BE  3185  2542  3180   	fcall	___awdiv
  7780     00C1  0877               	movf	?___awdiv,w
  7781     00C2  07A2               	addwf	_var+2,f
  7782     00C3                     i1l3151:
  7783                           
  7784                           ;main.c: 103:     if(LATAbits.LATA7 == 0) var.HHH -= (TMR0_ReadTimer()*1655)/1000;
  7785     00C3  0022               	movlb	2	; select bank2
  7786     00C4  1B8C               	btfsc	12,7	;volatile
  7787     00C5  28E3               	goto	i1l913
  7788     00C6  30E8               	movlw	232
  7789     00C7  00F7               	movwf	___awdiv@divisor
  7790     00C8  3003               	movlw	3
  7791     00C9  00F8               	movwf	___awdiv@divisor+1
  7792     00CA  318C  2424  3180   	fcall	_TMR0_ReadTimer
  7793     00CD  00C4               	movwf	??_Update_tx_buffer
  7794     00CE  01C5               	clrf	??_Update_tx_buffer+1
  7795     00CF  0844               	movf	??_Update_tx_buffer,w
  7796     00D0  00F1               	movwf	___wmul@multiplier
  7797     00D1  0845               	movf	??_Update_tx_buffer+1,w
  7798     00D2  00F2               	movwf	___wmul@multiplier+1
  7799     00D3  3077               	movlw	119
  7800     00D4  00F3               	movwf	___wmul@multiplicand
  7801     00D5  3006               	movlw	6
  7802     00D6  00F4               	movwf	___wmul@multiplicand+1
  7803     00D7  318E  2676  3180   	fcall	___wmul
  7804     00DA  0872               	movf	?___wmul+1,w
  7805     00DB  00FA               	movwf	___awdiv@dividend+1
  7806     00DC  0871               	movf	?___wmul,w
  7807     00DD  00F9               	movwf	___awdiv@dividend
  7808     00DE  3185  2542  3180   	fcall	___awdiv
  7809     00E1  0877               	movf	?___awdiv,w
  7810     00E2  02A2               	subwf	_var+2,f
  7811     00E3                     i1l913:
  7812                           
  7813                           ;main.c: 104:     TMR0_Reload();
  7814     00E3  318C  2410  3180   	fcall	i1_TMR0_Reload
  7815                           
  7816                           ;main.c: 105:     if(var.HHH >= position0) var.VVV = ((var.HHH - position0)*100/3)&0x01F
      +                          F;
  7817     00E6  0822               	movf	_var+2,w
  7818     00E7  00C4               	movwf	??_Update_tx_buffer
  7819     00E8  0832               	movf	_position0+1,w
  7820     00E9  1D03               	skipz
  7821     00EA  28ED               	goto	u205_25
  7822     00EB  0831               	movf	_position0,w
  7823     00EC  0244               	subwf	??_Update_tx_buffer,w
  7824     00ED                     u205_25:
  7825     00ED  1C03               	skipc
  7826     00EE  28FC               	goto	i1l3159
  7827     00EF  3003               	movlw	3
  7828     00F0  00F7               	movwf	___lwdiv@divisor
  7829     00F1  3000               	movlw	0
  7830     00F2  00F8               	movwf	___lwdiv@divisor+1
  7831     00F3  0822               	movf	_var+2,w
  7832     00F4  00C4               	movwf	??_Update_tx_buffer
  7833     00F5  0831               	movf	_position0,w
  7834     00F6  0244               	subwf	??_Update_tx_buffer,w
  7835     00F7  00F1               	movwf	___wmul@multiplier
  7836     00F8  0932               	comf	_position0+1,w
  7837     00F9  1803               	skipnc
  7838     00FA  0A89               	incf	9,f
  7839     00FB  2905               	goto	L2
  7840     00FC                     i1l3159:
  7841     00FC  3003               	movlw	3
  7842     00FD  00F7               	movwf	___lwdiv@divisor
  7843     00FE  3000               	movlw	0
  7844     00FF  00F8               	movwf	___lwdiv@divisor+1
  7845     0100  0822               	movf	_var+2,w
  7846     0101  0231               	subwf	_position0,w
  7847     0102  00F1               	movwf	___wmul@multiplier
  7848     0103  3000               	movlw	0
  7849     0104  3B32               	subwfb	_position0+1,w
  7850     0105                     L2:
  7851     0105  00F2               	movwf	___wmul@multiplier+1
  7852     0106  3064               	movlw	100
  7853     0107  00F3               	movwf	___wmul@multiplicand
  7854     0108  3000               	movlw	0
  7855     0109  00F4               	movwf	___wmul@multiplicand+1
  7856     010A  318E  2676  3180   	fcall	___wmul
  7857     010D  0872               	movf	?___wmul+1,w
  7858     010E  00FA               	movwf	___lwdiv@dividend+1
  7859     010F  0871               	movf	?___wmul,w
  7860     0110  00F9               	movwf	___lwdiv@dividend
  7861     0111  3187  273F  3180   	fcall	___lwdiv
  7862     0114  30FF               	movlw	255
  7863     0115  0577               	andwf	?___lwdiv,w
  7864     0116  00A3               	movwf	_var+3
  7865     0117  3001               	movlw	1
  7866     0118  0578               	andwf	?___lwdiv+1,w
  7867     0119  00A4               	movwf	_var+4
  7868                           
  7869                           ;main.c: 109:     ADCON0bits.GO_nDONE = 1;
  7870     011A  0021               	movlb	1	; select bank1
  7871     011B  149D               	bsf	29,1	;volatile
  7872     011C                     i1l916:	
  7873                           ;main.c: 110:     while (ADCON0bits.GO_nDONE);
  7874                           
  7875     011C  189D               	btfsc	29,1	;volatile
  7876     011D  291C               	goto	i1l916
  7877                           
  7878                           ;main.c: 111:     var.TTT = ((ADRESH << 8) + ADRESL);
  7879     011E  081C               	movf	28,w	;volatile
  7880     011F  0020               	movlb	0	; select bank0
  7881     0120  00A6               	movwf	_var+6
  7882     0121  0021               	movlb	1	; select bank1
  7883     0122  081B               	movf	27,w	;volatile
  7884     0123  0020               	movlb	0	; select bank0
  7885     0124  00A5               	movwf	_var+5
  7886                           
  7887                           ;main.c: 113:     uart_write_buffer[1] = var.A + 1 + '0';
  7888     0125  0821               	movf	_var+1,w
  7889     0126  390F               	andlw	15
  7890     0127  3E31               	addlw	49
  7891     0128  0022               	movlb	2	; select bank2
  7892     0129  00A1               	movwf	(_uart_write_buffer^(0+256)+1)
  7893                           
  7894                           ;main.c: 114:     uart_write_buffer[3] = var.D + 1 + '0';
  7895     012A  0020               	movlb	0	; select bank0
  7896     012B  0E20               	swapf	_var,w
  7897     012C  390F               	andlw	15
  7898     012D  3E31               	addlw	49
  7899     012E  0022               	movlb	2	; select bank2
  7900     012F  00A3               	movwf	(_uart_write_buffer^(0+256)+3)
  7901                           
  7902                           ;main.c: 115:     uart_write_buffer[5] = var.M + '0';
  7903     0130  0020               	movlb	0	; select bank0
  7904     0131  0E21               	swapf	_var+1,w
  7905     0132  3903               	andlw	3
  7906     0133  3E30               	addlw	48
  7907     0134  0022               	movlb	2	; select bank2
  7908     0135  00A5               	movwf	(_uart_write_buffer^(0+256)+5)
  7909                           
  7910                           ;main.c: 116:     uart_write_buffer[7] = (var.HHH / 100) % 10 + '0';
  7911     0136  300A               	movlw	10
  7912     0137  00F4               	movwf	___lbmod@divisor
  7913     0138  3064               	movlw	100
  7914     0139  00F0               	movwf	___lbdiv@divisor
  7915     013A  0020               	movlb	0	; select bank0
  7916     013B  0822               	movf	_var+2,w
  7917     013C  318E  26CE  3180   	fcall	___lbdiv
  7918     013F  318E  265B  3180   	fcall	___lbmod
  7919     0142  3E30               	addlw	48
  7920     0143  0022               	movlb	2	; select bank2
  7921     0144  00A7               	movwf	(_uart_write_buffer^(0+256)+7)
  7922                           
  7923                           ;main.c: 117:     uart_write_buffer[8]= (var.HHH/ 10) % 10 + '0';
  7924     0145  300A               	movlw	10
  7925     0146  00F4               	movwf	___lbmod@divisor
  7926     0147  300A               	movlw	10
  7927     0148  00F0               	movwf	___lbdiv@divisor
  7928     0149  0020               	movlb	0	; select bank0
  7929     014A  0822               	movf	_var+2,w
  7930     014B  318E  26CE  3180   	fcall	___lbdiv
  7931     014E  318E  265B  3180   	fcall	___lbmod
  7932     0151  3E30               	addlw	48
  7933     0152  0022               	movlb	2	; select bank2
  7934     0153  00A8               	movwf	(_uart_write_buffer^(0+256)+8)
  7935                           
  7936                           ;main.c: 118:     uart_write_buffer[9]=var.HHH % 10 + '0';
  7937     0154  300A               	movlw	10
  7938     0155  00F4               	movwf	___lbmod@divisor
  7939     0156  0020               	movlb	0	; select bank0
  7940     0157  0822               	movf	_var+2,w
  7941     0158  318E  265B  3180   	fcall	___lbmod
  7942     015B  3E30               	addlw	48
  7943     015C  0022               	movlb	2	; select bank2
  7944     015D  00A9               	movwf	(_uart_write_buffer^(0+256)+9)
  7945                           
  7946                           ;main.c: 119:     uart_write_buffer[11]= (var.VVV/100)%10 + '0';
  7947     015E  300A               	movlw	10
  7948     015F  0020               	movlb	0	; select bank0
  7949     0160  00BF               	movwf	___lwmod@divisor
  7950     0161  3000               	movlw	0
  7951     0162  00C0               	movwf	___lwmod@divisor+1
  7952     0163  3064               	movlw	100
  7953     0164  00F7               	movwf	___lwdiv@divisor
  7954     0165  3000               	movlw	0
  7955     0166  00F8               	movwf	___lwdiv@divisor+1
  7956     0167  0824               	movf	_var+4,w
  7957     0168  00FA               	movwf	___lwdiv@dividend+1
  7958     0169  0823               	movf	_var+3,w
  7959     016A  00F9               	movwf	___lwdiv@dividend
  7960     016B  3187  273F  3180   	fcall	___lwdiv
  7961     016E  0878               	movf	?___lwdiv+1,w
  7962     016F  00C2               	movwf	___lwmod@dividend+1
  7963     0170  0877               	movf	?___lwdiv,w
  7964     0171  00C1               	movwf	___lwmod@dividend
  7965     0172  318F  277D  3180   	fcall	___lwmod
  7966     0175  083F               	movf	?___lwmod,w
  7967     0176  3E30               	addlw	48
  7968     0177  0022               	movlb	2	; select bank2
  7969     0178  00AB               	movwf	(_uart_write_buffer^(0+256)+11)
  7970                           
  7971                           ;main.c: 120:     uart_write_buffer[12]= ((var.VVV/10)%10) + '0';
  7972     0179  300A               	movlw	10
  7973     017A  0020               	movlb	0	; select bank0
  7974     017B  00BF               	movwf	___lwmod@divisor
  7975     017C  3000               	movlw	0
  7976     017D  00C0               	movwf	___lwmod@divisor+1
  7977     017E  300A               	movlw	10
  7978     017F  00F7               	movwf	___lwdiv@divisor
  7979     0180  3000               	movlw	0
  7980     0181  00F8               	movwf	___lwdiv@divisor+1
  7981     0182  0824               	movf	_var+4,w
  7982     0183  00FA               	movwf	___lwdiv@dividend+1
  7983     0184  0823               	movf	_var+3,w
  7984     0185  00F9               	movwf	___lwdiv@dividend
  7985     0186  3187  273F  3180   	fcall	___lwdiv
  7986     0189  0878               	movf	?___lwdiv+1,w
  7987     018A  00C2               	movwf	___lwmod@dividend+1
  7988     018B  0877               	movf	?___lwdiv,w
  7989     018C  00C1               	movwf	___lwmod@dividend
  7990     018D  318F  277D  3180   	fcall	___lwmod
  7991     0190  083F               	movf	?___lwmod,w
  7992     0191  3E30               	addlw	48
  7993     0192  0022               	movlb	2	; select bank2
  7994     0193  00AC               	movwf	(_uart_write_buffer^(0+256)+12)
  7995                           
  7996                           ;main.c: 121:     uart_write_buffer[14]= (var.VVV)%10 + '0';
  7997     0194  300A               	movlw	10
  7998     0195  0020               	movlb	0	; select bank0
  7999     0196  00BF               	movwf	___lwmod@divisor
  8000     0197  3000               	movlw	0
  8001     0198  00C0               	movwf	___lwmod@divisor+1
  8002     0199  0824               	movf	_var+4,w
  8003     019A  00C2               	movwf	___lwmod@dividend+1
  8004     019B  0823               	movf	_var+3,w
  8005     019C  00C1               	movwf	___lwmod@dividend
  8006     019D  318F  277D  3180   	fcall	___lwmod
  8007     01A0  083F               	movf	?___lwmod,w
  8008     01A1  3E30               	addlw	48
  8009     01A2  0022               	movlb	2	; select bank2
  8010     01A3  00AE               	movwf	(_uart_write_buffer^(0+256)+14)
  8011                           
  8012                           ;main.c: 122:     uart_write_buffer[16]= (var.TTT/100)%10 + '0';
  8013     01A4  300A               	movlw	10
  8014     01A5  0020               	movlb	0	; select bank0
  8015     01A6  00BF               	movwf	___lwmod@divisor
  8016     01A7  3000               	movlw	0
  8017     01A8  00C0               	movwf	___lwmod@divisor+1
  8018     01A9  3064               	movlw	100
  8019     01AA  00F7               	movwf	___lwdiv@divisor
  8020     01AB  3000               	movlw	0
  8021     01AC  00F8               	movwf	___lwdiv@divisor+1
  8022     01AD  0826               	movf	_var+6,w
  8023     01AE  00FA               	movwf	___lwdiv@dividend+1
  8024     01AF  0825               	movf	_var+5,w
  8025     01B0  00F9               	movwf	___lwdiv@dividend
  8026     01B1  3187  273F  3180   	fcall	___lwdiv
  8027     01B4  0878               	movf	?___lwdiv+1,w
  8028     01B5  00C2               	movwf	___lwmod@dividend+1
  8029     01B6  0877               	movf	?___lwdiv,w
  8030     01B7  00C1               	movwf	___lwmod@dividend
  8031     01B8  318F  277D  3180   	fcall	___lwmod
  8032     01BB  083F               	movf	?___lwmod,w
  8033     01BC  3E30               	addlw	48
  8034     01BD  0022               	movlb	2	; select bank2
  8035     01BE  00B0               	movwf	(_uart_write_buffer^(0+256)+16)
  8036                           
  8037                           ;main.c: 123:     uart_write_buffer[17]= (var.TTT/10)%10 + '0';
  8038     01BF  300A               	movlw	10
  8039     01C0  0020               	movlb	0	; select bank0
  8040     01C1  00BF               	movwf	___lwmod@divisor
  8041     01C2  3000               	movlw	0
  8042     01C3  00C0               	movwf	___lwmod@divisor+1
  8043     01C4  300A               	movlw	10
  8044     01C5  00F7               	movwf	___lwdiv@divisor
  8045     01C6  3000               	movlw	0
  8046     01C7  00F8               	movwf	___lwdiv@divisor+1
  8047     01C8  0826               	movf	_var+6,w
  8048     01C9  00FA               	movwf	___lwdiv@dividend+1
  8049     01CA  0825               	movf	_var+5,w
  8050     01CB  00F9               	movwf	___lwdiv@dividend
  8051     01CC  3187  273F  3180   	fcall	___lwdiv
  8052     01CF  0878               	movf	?___lwdiv+1,w
  8053     01D0  00C2               	movwf	___lwmod@dividend+1
  8054     01D1  0877               	movf	?___lwdiv,w
  8055     01D2  00C1               	movwf	___lwmod@dividend
  8056     01D3  318F  277D  3180   	fcall	___lwmod
  8057     01D6  083F               	movf	?___lwmod,w
  8058     01D7  3E30               	addlw	48
  8059     01D8  0022               	movlb	2	; select bank2
  8060     01D9  00B1               	movwf	(_uart_write_buffer^(0+256)+17)
  8061                           
  8062                           ;main.c: 124:     uart_write_buffer[19]= (var.TTT%10) + '0';
  8063     01DA  300A               	movlw	10
  8064     01DB  0020               	movlb	0	; select bank0
  8065     01DC  00BF               	movwf	___lwmod@divisor
  8066     01DD  3000               	movlw	0
  8067     01DE  00C0               	movwf	___lwmod@divisor+1
  8068     01DF  0826               	movf	_var+6,w
  8069     01E0  00C2               	movwf	___lwmod@dividend+1
  8070     01E1  0825               	movf	_var+5,w
  8071     01E2  00C1               	movwf	___lwmod@dividend
  8072     01E3  318F  277D         	fcall	___lwmod
  8073     01E5  083F               	movf	?___lwmod,w
  8074     01E6  3E30               	addlw	48
  8075     01E7  0022               	movlb	2	; select bank2
  8076     01E8  00B3               	movwf	(_uart_write_buffer^(0+256)+19)
  8077     01E9  0008               	return
  8078     01EA                     __end_of_Update_tx_buffer:
  8079                           
  8080                           	psect	text47
  8081     0E76                     __ptext47:	
  8082 ;; *************** function ___wmul *****************
  8083 ;; Defined at:
  8084 ;;		line 15 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;  multiplier      2    1[COMMON] unsigned int 
  8087 ;;  multiplicand    2    3[COMMON] unsigned int 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  product         2    5[COMMON] unsigned int 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  2    1[COMMON] unsigned int 
  8092 ;; Registers used:
  8093 ;;		wreg, status,2, status,0
  8094 ;; Tracked objects:
  8095 ;;		On entry : 1F/0
  8096 ;;		On exit  : 1F/0
  8097 ;;		Unchanged: 1F/0
  8098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8099 ;;      Params:         4       0       0       0       0       0
  8100 ;;      Locals:         2       0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0       0
  8102 ;;      Totals:         6       0       0       0       0       0
  8103 ;;Total ram usage:        6 bytes
  8104 ;; Hardware stack levels used: 1
  8105 ;; This function calls:
  8106 ;;		Nothing
  8107 ;; This function is called by:
  8108 ;;		_Update_tx_buffer
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112     0E76                     ___wmul:	
  8113                           ;psect for function ___wmul
  8114                           
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8118     0E76  01F5               	clrf	___wmul@product
  8119     0E77  01F6               	clrf	___wmul@product+1
  8120     0E78                     i1l2905:
  8121     0E78  1C71               	btfss	___wmul@multiplier,0
  8122     0E79  2E7E               	goto	i1l1155
  8123     0E7A  0873               	movf	___wmul@multiplicand,w
  8124     0E7B  07F5               	addwf	___wmul@product,f
  8125     0E7C  0874               	movf	___wmul@multiplicand+1,w
  8126     0E7D  3DF6               	addwfc	___wmul@product+1,f
  8127     0E7E                     i1l1155:
  8128     0E7E  3001               	movlw	1
  8129     0E7F                     u156_25:
  8130     0E7F  35F3               	lslf	___wmul@multiplicand,f
  8131     0E80  0DF4               	rlf	___wmul@multiplicand+1,f
  8132     0E81  0B89               	decfsz	9,f
  8133     0E82  2E7F               	goto	u156_25
  8134     0E83  3001               	movlw	1
  8135     0E84                     u157_25:
  8136     0E84  36F2               	lsrf	___wmul@multiplier+1,f
  8137     0E85  0CF1               	rrf	___wmul@multiplier,f
  8138     0E86  0B89               	decfsz	9,f
  8139     0E87  2E84               	goto	u157_25
  8140     0E88  0871               	movf	___wmul@multiplier,w
  8141     0E89  0472               	iorwf	___wmul@multiplier+1,w
  8142     0E8A  1D03               	btfss	3,2
  8143     0E8B  2E78               	goto	i1l2905
  8144     0E8C  0876               	movf	___wmul@product+1,w
  8145     0E8D  00F2               	movwf	?___wmul+1
  8146     0E8E  0875               	movf	___wmul@product,w
  8147     0E8F  00F1               	movwf	?___wmul
  8148     0E90  0008               	return
  8149     0E91                     __end_of___wmul:
  8150                           
  8151                           	psect	text48
  8152     0F7D                     __ptext48:	
  8153 ;; *************** function ___lwmod *****************
  8154 ;; Defined at:
  8155 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  divisor         2    0[BANK0 ] unsigned int 
  8158 ;;  dividend        2    2[BANK0 ] unsigned int 
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;  counter         1    4[BANK0 ] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  2    0[BANK0 ] unsigned int 
  8163 ;; Registers used:
  8164 ;;		wreg, status,2, status,0
  8165 ;; Tracked objects:
  8166 ;;		On entry : 1F/0
  8167 ;;		On exit  : 1F/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8170 ;;      Params:         0       4       0       0       0       0
  8171 ;;      Locals:         0       1       0       0       0       0
  8172 ;;      Temps:          0       0       0       0       0       0
  8173 ;;      Totals:         0       5       0       0       0       0
  8174 ;;Total ram usage:        5 bytes
  8175 ;; Hardware stack levels used: 1
  8176 ;; This function calls:
  8177 ;;		Nothing
  8178 ;; This function is called by:
  8179 ;;		_Update_tx_buffer
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183     0F7D                     ___lwmod:	
  8184                           ;psect for function ___lwmod
  8185                           
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8189     0F7D  083F               	movf	___lwmod@divisor,w
  8190     0F7E  0440               	iorwf	___lwmod@divisor+1,w
  8191     0F7F  1903               	btfsc	3,2
  8192     0F80  2FA2               	goto	i1l3047
  8193     0F81  3001               	movlw	1
  8194     0F82  00C3               	movwf	___lwmod@counter
  8195     0F83                     i1l3037:
  8196     0F83  1BC0               	btfsc	___lwmod@divisor+1,7
  8197     0F84  2F8D               	goto	i1l3039
  8198     0F85  3001               	movlw	1
  8199     0F86                     u184_25:
  8200     0F86  35BF               	lslf	___lwmod@divisor,f
  8201     0F87  0DC0               	rlf	___lwmod@divisor+1,f
  8202     0F88  0B89               	decfsz	9,f
  8203     0F89  2F86               	goto	u184_25
  8204     0F8A  3001               	movlw	1
  8205     0F8B  07C3               	addwf	___lwmod@counter,f
  8206     0F8C  2F83               	goto	i1l3037
  8207     0F8D                     i1l3039:
  8208     0F8D  0840               	movf	___lwmod@divisor+1,w
  8209     0F8E  0242               	subwf	___lwmod@dividend+1,w
  8210     0F8F  1D03               	skipz
  8211     0F90  2F93               	goto	u186_25
  8212     0F91  083F               	movf	___lwmod@divisor,w
  8213     0F92  0241               	subwf	___lwmod@dividend,w
  8214     0F93                     u186_25:
  8215     0F93  1C03               	skipc
  8216     0F94  2F99               	goto	i1l3043
  8217     0F95  083F               	movf	___lwmod@divisor,w
  8218     0F96  02C1               	subwf	___lwmod@dividend,f
  8219     0F97  0840               	movf	___lwmod@divisor+1,w
  8220     0F98  3BC2               	subwfb	___lwmod@dividend+1,f
  8221     0F99                     i1l3043:
  8222     0F99  3001               	movlw	1
  8223     0F9A                     u187_25:
  8224     0F9A  36C0               	lsrf	___lwmod@divisor+1,f
  8225     0F9B  0CBF               	rrf	___lwmod@divisor,f
  8226     0F9C  0B89               	decfsz	9,f
  8227     0F9D  2F9A               	goto	u187_25
  8228     0F9E  3001               	movlw	1
  8229     0F9F  02C3               	subwf	___lwmod@counter,f
  8230     0FA0  1D03               	btfss	3,2
  8231     0FA1  2F8D               	goto	i1l3039
  8232     0FA2                     i1l3047:
  8233     0FA2  0842               	movf	___lwmod@dividend+1,w
  8234     0FA3  00C0               	movwf	?___lwmod+1
  8235     0FA4  0841               	movf	___lwmod@dividend,w
  8236     0FA5  00BF               	movwf	?___lwmod
  8237     0FA6  0008               	return
  8238     0FA7                     __end_of___lwmod:
  8239                           
  8240                           	psect	text49
  8241     073F                     __ptext49:	
  8242 ;; *************** function ___lwdiv *****************
  8243 ;; Defined at:
  8244 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  divisor         2    7[COMMON] unsigned int 
  8247 ;;  dividend        2    9[COMMON] unsigned int 
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  quotient        2   11[COMMON] unsigned int 
  8250 ;;  counter         1   13[COMMON] unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  2    7[COMMON] unsigned int 
  8253 ;; Registers used:
  8254 ;;		wreg, status,2, status,0
  8255 ;; Tracked objects:
  8256 ;;		On entry : 1F/0
  8257 ;;		On exit  : 1F/0
  8258 ;;		Unchanged: 1F/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8260 ;;      Params:         4       0       0       0       0       0
  8261 ;;      Locals:         3       0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0
  8263 ;;      Totals:         7       0       0       0       0       0
  8264 ;;Total ram usage:        7 bytes
  8265 ;; Hardware stack levels used: 1
  8266 ;; This function calls:
  8267 ;;		Nothing
  8268 ;; This function is called by:
  8269 ;;		_Update_tx_buffer
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273     073F                     ___lwdiv:	
  8274                           ;psect for function ___lwdiv
  8275                           
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8279     073F  01FB               	clrf	___lwdiv@quotient
  8280     0740  01FC               	clrf	___lwdiv@quotient+1
  8281     0741  0877               	movf	___lwdiv@divisor,w
  8282     0742  0478               	iorwf	___lwdiv@divisor+1,w
  8283     0743  1903               	btfsc	3,2
  8284     0744  2F6C               	goto	i1l3025
  8285     0745  3001               	movlw	1
  8286     0746  00FD               	movwf	___lwdiv@counter
  8287     0747                     i1l3013:
  8288     0747  1BF8               	btfsc	___lwdiv@divisor+1,7
  8289     0748  2F51               	goto	i1l3015
  8290     0749  3001               	movlw	1
  8291     074A                     u177_25:
  8292     074A  35F7               	lslf	___lwdiv@divisor,f
  8293     074B  0DF8               	rlf	___lwdiv@divisor+1,f
  8294     074C  0B89               	decfsz	9,f
  8295     074D  2F4A               	goto	u177_25
  8296     074E  3001               	movlw	1
  8297     074F  07FD               	addwf	___lwdiv@counter,f
  8298     0750  2F47               	goto	i1l3013
  8299     0751                     i1l3015:
  8300     0751  3001               	movlw	1
  8301     0752                     u179_25:
  8302     0752  35FB               	lslf	___lwdiv@quotient,f
  8303     0753  0DFC               	rlf	___lwdiv@quotient+1,f
  8304     0754  0B89               	decfsz	9,f
  8305     0755  2F52               	goto	u179_25
  8306     0756  0878               	movf	___lwdiv@divisor+1,w
  8307     0757  027A               	subwf	___lwdiv@dividend+1,w
  8308     0758  1D03               	skipz
  8309     0759  2F5C               	goto	u180_25
  8310     075A  0877               	movf	___lwdiv@divisor,w
  8311     075B  0279               	subwf	___lwdiv@dividend,w
  8312     075C                     u180_25:
  8313     075C  1C03               	skipc
  8314     075D  2F63               	goto	i1l3021
  8315     075E  0877               	movf	___lwdiv@divisor,w
  8316     075F  02F9               	subwf	___lwdiv@dividend,f
  8317     0760  0878               	movf	___lwdiv@divisor+1,w
  8318     0761  3BFA               	subwfb	___lwdiv@dividend+1,f
  8319     0762  147B               	bsf	___lwdiv@quotient,0
  8320     0763                     i1l3021:
  8321     0763  3001               	movlw	1
  8322     0764                     u181_25:
  8323     0764  36F8               	lsrf	___lwdiv@divisor+1,f
  8324     0765  0CF7               	rrf	___lwdiv@divisor,f
  8325     0766  0B89               	decfsz	9,f
  8326     0767  2F64               	goto	u181_25
  8327     0768  3001               	movlw	1
  8328     0769  02FD               	subwf	___lwdiv@counter,f
  8329     076A  1D03               	btfss	3,2
  8330     076B  2F51               	goto	i1l3015
  8331     076C                     i1l3025:
  8332     076C  087C               	movf	___lwdiv@quotient+1,w
  8333     076D  00F8               	movwf	?___lwdiv+1
  8334     076E  087B               	movf	___lwdiv@quotient,w
  8335     076F  00F7               	movwf	?___lwdiv
  8336     0770  0008               	return
  8337     0771                     __end_of___lwdiv:
  8338                           
  8339                           	psect	text50
  8340     0E5B                     __ptext50:	
  8341 ;; *************** function ___lbmod *****************
  8342 ;; Defined at:
  8343 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lbmod.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;  dividend        1    wreg     unsigned char 
  8346 ;;  divisor         1    4[COMMON] unsigned char 
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  dividend        1    6[COMMON] unsigned char 
  8349 ;;  rem             1    8[COMMON] unsigned char 
  8350 ;;  counter         1    7[COMMON] unsigned char 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  1    wreg      unsigned char 
  8353 ;; Registers used:
  8354 ;;		wreg, status,2, status,0
  8355 ;; Tracked objects:
  8356 ;;		On entry : 1F/0
  8357 ;;		On exit  : 1F/0
  8358 ;;		Unchanged: 1F/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8360 ;;      Params:         1       0       0       0       0       0
  8361 ;;      Locals:         3       0       0       0       0       0
  8362 ;;      Temps:          1       0       0       0       0       0
  8363 ;;      Totals:         5       0       0       0       0       0
  8364 ;;Total ram usage:        5 bytes
  8365 ;; Hardware stack levels used: 1
  8366 ;; This function calls:
  8367 ;;		Nothing
  8368 ;; This function is called by:
  8369 ;;		_Update_tx_buffer
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373     0E5B                     ___lbmod:	
  8374                           ;psect for function ___lbmod
  8375                           
  8376                           
  8377                           ;incstack = 0
  8378                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  8379                           ;___lbmod@dividend stored from wreg
  8380     0E5B  00F6               	movwf	___lbmod@dividend
  8381     0E5C  3008               	movlw	8
  8382     0E5D  00F7               	movwf	___lbmod@counter
  8383     0E5E  01F8               	clrf	___lbmod@rem
  8384     0E5F                     i1l2991:
  8385     0E5F  0876               	movf	___lbmod@dividend,w
  8386     0E60  00F5               	movwf	??___lbmod
  8387     0E61  3007               	movlw	7
  8388     0E62                     u173_25:
  8389     0E62  36F5               	lsrf	??___lbmod,f
  8390     0E63  0B89               	decfsz	9,f
  8391     0E64  2E62               	goto	u173_25
  8392     0E65  3578               	lslf	___lbmod@rem,w
  8393     0E66  0475               	iorwf	??___lbmod,w
  8394     0E67  00F8               	movwf	___lbmod@rem
  8395     0E68  1003               	clrc
  8396     0E69  0DF6               	rlf	___lbmod@dividend,f
  8397     0E6A  0874               	movf	___lbmod@divisor,w
  8398     0E6B  0278               	subwf	___lbmod@rem,w
  8399     0E6C  1C03               	skipc
  8400     0E6D  2E70               	goto	i1l1373
  8401     0E6E  0874               	movf	___lbmod@divisor,w
  8402     0E6F  02F8               	subwf	___lbmod@rem,f
  8403     0E70                     i1l1373:
  8404     0E70  3001               	movlw	1
  8405     0E71  02F7               	subwf	___lbmod@counter,f
  8406     0E72  1D03               	btfss	3,2
  8407     0E73  2E5F               	goto	i1l2991
  8408     0E74  0878               	movf	___lbmod@rem,w
  8409     0E75  0008               	return
  8410     0E76                     __end_of___lbmod:
  8411                           
  8412                           	psect	text51
  8413     0ECE                     __ptext51:	
  8414 ;; *************** function ___lbdiv *****************
  8415 ;; Defined at:
  8416 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\lbdiv.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  dividend        1    wreg     unsigned char 
  8419 ;;  divisor         1    0[COMMON] unsigned char 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  dividend        1    1[COMMON] unsigned char 
  8422 ;;  quotient        1    3[COMMON] unsigned char 
  8423 ;;  counter         1    2[COMMON] unsigned char 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      unsigned char 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 1F/0
  8430 ;;		On exit  : 1F/0
  8431 ;;		Unchanged: 1F/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8433 ;;      Params:         1       0       0       0       0       0
  8434 ;;      Locals:         3       0       0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0
  8436 ;;      Totals:         4       0       0       0       0       0
  8437 ;;Total ram usage:        4 bytes
  8438 ;; Hardware stack levels used: 1
  8439 ;; This function calls:
  8440 ;;		Nothing
  8441 ;; This function is called by:
  8442 ;;		_Update_tx_buffer
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446     0ECE                     ___lbdiv:	
  8447                           ;psect for function ___lbdiv
  8448                           
  8449                           
  8450                           ;incstack = 0
  8451                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  8452                           ;___lbdiv@dividend stored from wreg
  8453     0ECE  00F1               	movwf	___lbdiv@dividend
  8454     0ECF  01F3               	clrf	___lbdiv@quotient
  8455     0ED0  0870               	movf	___lbdiv@divisor,w
  8456     0ED1  1903               	btfsc	3,2
  8457     0ED2  2EEB               	goto	i1l2983
  8458     0ED3  3001               	movlw	1
  8459     0ED4  00F2               	movwf	___lbdiv@counter
  8460     0ED5                     i1l2971:
  8461     0ED5  1BF0               	btfsc	___lbdiv@divisor,7
  8462     0ED6  2EDC               	goto	i1l2973
  8463     0ED7  1003               	clrc
  8464     0ED8  0DF0               	rlf	___lbdiv@divisor,f
  8465     0ED9  3001               	movlw	1
  8466     0EDA  07F2               	addwf	___lbdiv@counter,f
  8467     0EDB  2ED5               	goto	i1l2971
  8468     0EDC                     i1l2973:
  8469     0EDC  1003               	clrc
  8470     0EDD  0DF3               	rlf	___lbdiv@quotient,f
  8471     0EDE  0870               	movf	___lbdiv@divisor,w
  8472     0EDF  0271               	subwf	___lbdiv@dividend,w
  8473     0EE0  1C03               	skipc
  8474     0EE1  2EE6               	goto	L3
  8475     0EE2  0870               	movf	___lbdiv@divisor,w
  8476     0EE3  02F1               	subwf	___lbdiv@dividend,f
  8477     0EE4  1473               	bsf	___lbdiv@quotient,0
  8478     0EE5  1003               	clrc
  8479     0EE6                     L3:
  8480     0EE6  0CF0               	rrf	___lbdiv@divisor,f
  8481     0EE7  3001               	movlw	1
  8482     0EE8  02F2               	subwf	___lbdiv@counter,f
  8483     0EE9  1D03               	btfss	3,2
  8484     0EEA  2EDC               	goto	i1l2973
  8485     0EEB                     i1l2983:
  8486     0EEB  0873               	movf	___lbdiv@quotient,w
  8487     0EEC  0008               	return
  8488     0EED                     __end_of___lbdiv:
  8489                           
  8490                           	psect	text52
  8491     0542                     __ptext52:	
  8492 ;; *************** function ___awdiv *****************
  8493 ;; Defined at:
  8494 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  divisor         2    7[COMMON] int 
  8497 ;;  dividend        2    9[COMMON] int 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  quotient        2    2[BANK0 ] int 
  8500 ;;  sign            1    1[BANK0 ] unsigned char 
  8501 ;;  counter         1    0[BANK0 ] unsigned char 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  2    7[COMMON] int 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2, status,0
  8506 ;; Tracked objects:
  8507 ;;		On entry : 1F/0
  8508 ;;		On exit  : 1F/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8511 ;;      Params:         4       0       0       0       0       0
  8512 ;;      Locals:         0       4       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0
  8514 ;;      Totals:         4       4       0       0       0       0
  8515 ;;Total ram usage:        8 bytes
  8516 ;; Hardware stack levels used: 1
  8517 ;; This function calls:
  8518 ;;		Nothing
  8519 ;; This function is called by:
  8520 ;;		_Update_tx_buffer
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524     0542                     ___awdiv:	
  8525                           ;psect for function ___awdiv
  8526                           
  8527                           
  8528                           ;incstack = 0
  8529                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8530     0542  01C0               	clrf	___awdiv@sign
  8531     0543  1FF8               	btfss	___awdiv@divisor+1,7
  8532     0544  2D4C               	goto	i1l2925
  8533     0545  09F7               	comf	___awdiv@divisor,f
  8534     0546  09F8               	comf	___awdiv@divisor+1,f
  8535     0547  0AF7               	incf	___awdiv@divisor,f
  8536     0548  1903               	skipnz
  8537     0549  0AF8               	incf	___awdiv@divisor+1,f
  8538     054A  3001               	movlw	1
  8539     054B  00C0               	movwf	___awdiv@sign
  8540     054C                     i1l2925:
  8541     054C  1FFA               	btfss	___awdiv@dividend+1,7
  8542     054D  2D55               	goto	i1l2931
  8543     054E  09F9               	comf	___awdiv@dividend,f
  8544     054F  09FA               	comf	___awdiv@dividend+1,f
  8545     0550  0AF9               	incf	___awdiv@dividend,f
  8546     0551  1903               	skipnz
  8547     0552  0AFA               	incf	___awdiv@dividend+1,f
  8548     0553  3001               	movlw	1
  8549     0554  06C0               	xorwf	___awdiv@sign,f
  8550     0555                     i1l2931:
  8551     0555  01C1               	clrf	___awdiv@quotient
  8552     0556  01C2               	clrf	___awdiv@quotient+1
  8553     0557  0877               	movf	___awdiv@divisor,w
  8554     0558  0478               	iorwf	___awdiv@divisor+1,w
  8555     0559  1903               	btfsc	3,2
  8556     055A  2D82               	goto	i1l2953
  8557     055B  3001               	movlw	1
  8558     055C  00BF               	movwf	___awdiv@counter
  8559     055D                     i1l2941:
  8560     055D  1BF8               	btfsc	___awdiv@divisor+1,7
  8561     055E  2D67               	goto	i1l2943
  8562     055F  3001               	movlw	1
  8563     0560                     u162_25:
  8564     0560  35F7               	lslf	___awdiv@divisor,f
  8565     0561  0DF8               	rlf	___awdiv@divisor+1,f
  8566     0562  0B89               	decfsz	9,f
  8567     0563  2D60               	goto	u162_25
  8568     0564  3001               	movlw	1
  8569     0565  07BF               	addwf	___awdiv@counter,f
  8570     0566  2D5D               	goto	i1l2941
  8571     0567                     i1l2943:
  8572     0567  3001               	movlw	1
  8573     0568                     u164_25:
  8574     0568  35C1               	lslf	___awdiv@quotient,f
  8575     0569  0DC2               	rlf	___awdiv@quotient+1,f
  8576     056A  0B89               	decfsz	9,f
  8577     056B  2D68               	goto	u164_25
  8578     056C  0878               	movf	___awdiv@divisor+1,w
  8579     056D  027A               	subwf	___awdiv@dividend+1,w
  8580     056E  1D03               	skipz
  8581     056F  2D72               	goto	u165_25
  8582     0570  0877               	movf	___awdiv@divisor,w
  8583     0571  0279               	subwf	___awdiv@dividend,w
  8584     0572                     u165_25:
  8585     0572  1C03               	skipc
  8586     0573  2D79               	goto	i1l2949
  8587     0574  0877               	movf	___awdiv@divisor,w
  8588     0575  02F9               	subwf	___awdiv@dividend,f
  8589     0576  0878               	movf	___awdiv@divisor+1,w
  8590     0577  3BFA               	subwfb	___awdiv@dividend+1,f
  8591     0578  1441               	bsf	___awdiv@quotient,0
  8592     0579                     i1l2949:
  8593     0579  3001               	movlw	1
  8594     057A                     u166_25:
  8595     057A  36F8               	lsrf	___awdiv@divisor+1,f
  8596     057B  0CF7               	rrf	___awdiv@divisor,f
  8597     057C  0B89               	decfsz	9,f
  8598     057D  2D7A               	goto	u166_25
  8599     057E  3001               	movlw	1
  8600     057F  02BF               	subwf	___awdiv@counter,f
  8601     0580  1D03               	btfss	3,2
  8602     0581  2D67               	goto	i1l2943
  8603     0582                     i1l2953:
  8604     0582  0840               	movf	___awdiv@sign,w
  8605     0583  1903               	btfsc	3,2
  8606     0584  2D8A               	goto	i1l2957
  8607     0585  09C1               	comf	___awdiv@quotient,f
  8608     0586  09C2               	comf	___awdiv@quotient+1,f
  8609     0587  0AC1               	incf	___awdiv@quotient,f
  8610     0588  1903               	skipnz
  8611     0589  0AC2               	incf	___awdiv@quotient+1,f
  8612     058A                     i1l2957:
  8613     058A  0842               	movf	___awdiv@quotient+1,w
  8614     058B  00F8               	movwf	?___awdiv+1
  8615     058C  0841               	movf	___awdiv@quotient,w
  8616     058D  00F7               	movwf	?___awdiv
  8617     058E  0008               	return
  8618     058F                     __end_of___awdiv:
  8619                           
  8620                           	psect	text53
  8621     0C24                     __ptext53:	
  8622 ;; *************** function _TMR0_ReadTimer *****************
  8623 ;; Defined at:
  8624 ;;		line 80 in file "mcc_generated_files/tmr0.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;		None
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;  readVal         1    0[COMMON] unsigned char 
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      unsigned char 
  8631 ;; Registers used:
  8632 ;;		wreg
  8633 ;; Tracked objects:
  8634 ;;		On entry : 1D/0
  8635 ;;		On exit  : 1F/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8638 ;;      Params:         0       0       0       0       0       0
  8639 ;;      Locals:         1       0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0
  8641 ;;      Totals:         1       0       0       0       0       0
  8642 ;;Total ram usage:        1 bytes
  8643 ;; Hardware stack levels used: 1
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_Update_tx_buffer
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651     0C24                     _TMR0_ReadTimer:	
  8652                           ;psect for function _TMR0_ReadTimer
  8653                           
  8654                           
  8655                           ;mcc_generated_files/tmr0.c: 82:     uint8_t readVal;;mcc_generated_files/tmr0.c: 84:   
      +                            readVal = TMR0;
  8656                           
  8657                           ;incstack = 0
  8658                           ; Regs used in _TMR0_ReadTimer: [wreg]
  8659     0C24  0020               	movlb	0	; select bank0
  8660     0C25  0815               	movf	21,w	;volatile
  8661     0C26  00F0               	movwf	TMR0_ReadTimer@readVal
  8662                           
  8663                           ;mcc_generated_files/tmr0.c: 86:     return readVal;
  8664     0C27  0870               	movf	TMR0_ReadTimer@readVal,w
  8665     0C28  0008               	return
  8666     0C29                     __end_of_TMR0_ReadTimer:
  8667                           
  8668                           	psect	text54
  8669     0C6A                     __ptext54:	
  8670 ;; *************** function _EUSART_is_tx_ready *****************
  8671 ;; Defined at:
  8672 ;;		line 121 in file "mcc_generated_files/eusart.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;		None
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      _Bool 
  8679 ;; Registers used:
  8680 ;;		status,2
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 1C/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8686 ;;      Params:         0       0       0       0       0       0
  8687 ;;      Locals:         0       0       0       0       0       0
  8688 ;;      Temps:          0       0       0       0       0       0
  8689 ;;      Totals:         0       0       0       0       0       0
  8690 ;;Total ram usage:        0 bytes
  8691 ;; Hardware stack levels used: 1
  8692 ;; This function calls:
  8693 ;;		Nothing
  8694 ;; This function is called by:
  8695 ;;		_Write_UART
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699     0C6A                     _EUSART_is_tx_ready:	
  8700                           ;psect for function _EUSART_is_tx_ready
  8701                           
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _EUSART_is_tx_ready: [status,2]
  8705     0C6A  0020               	movlb	0	; select bank0
  8706     0C6B  1E11               	btfss	17,4	;volatile
  8707     0C6C  0008               	return
  8708     0C6D  0023               	movlb	3	; select bank3
  8709     0C6E  1A9E               	btfsc	30,5	;volatile
  8710     0C6F  0008               	return
  8711     0C70  0008               	return
  8712     0C71                     __end_of_EUSART_is_tx_ready:
  8713                           
  8714                           	psect	text55
  8715     0C63                     __ptext55:	
  8716 ;; *************** function _EUSART_Write *****************
  8717 ;; Defined at:
  8718 ;;		line 162 in file "mcc_generated_files/eusart.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  txData          1    wreg     unsigned char 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  txData          1    0[COMMON] unsigned char 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg
  8727 ;; Tracked objects:
  8728 ;;		On entry : 1F/0
  8729 ;;		On exit  : 1F/3
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8732 ;;      Params:         0       0       0       0       0       0
  8733 ;;      Locals:         1       0       0       0       0       0
  8734 ;;      Temps:          0       0       0       0       0       0
  8735 ;;      Totals:         1       0       0       0       0       0
  8736 ;;Total ram usage:        1 bytes
  8737 ;; Hardware stack levels used: 1
  8738 ;; This function calls:
  8739 ;;		Nothing
  8740 ;; This function is called by:
  8741 ;;		_Write_UART
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745     0C63                     _EUSART_Write:	
  8746                           ;psect for function _EUSART_Write
  8747                           
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _EUSART_Write: [wreg]
  8751                           ;EUSART_Write@txData stored from wreg
  8752     0C63  00F0               	movwf	EUSART_Write@txData
  8753     0C64                     i1l593:	
  8754                           ;mcc_generated_files/eusart.c: 165:     {;mcc_generated_files/eusart.c: 166:     }
  8755                           
  8756                           
  8757                           ;mcc_generated_files/eusart.c: 164:     while(0 == PIR1bits.TXIF)
  8758     0C64  1E11               	btfss	17,4	;volatile
  8759     0C65  2C64               	goto	i1l593
  8760                           
  8761                           ;mcc_generated_files/eusart.c: 168:     TXREG = txData;
  8762     0C66  0870               	movf	EUSART_Write@txData,w
  8763     0C67  0023               	movlb	3	; select bank3
  8764     0C68  009A               	movwf	26	;volatile
  8765     0C69  0008               	return
  8766     0C6A                     __end_of_EUSART_Write:
  8767                           
  8768                           	psect	text56
  8769     06D5                     __ptext56:	
  8770 ;; *************** function _EUSART_Receive_ISR *****************
  8771 ;; Defined at:
  8772 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;		None
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  1    wreg      void 
  8779 ;; Registers used:
  8780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 1F/1
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8786 ;;      Params:         0       0       0       0       0       0
  8787 ;;      Locals:         0       0       0       0       0       0
  8788 ;;      Temps:          0       0       0       0       0       0
  8789 ;;      Totals:         0       0       0       0       0       0
  8790 ;;Total ram usage:        0 bytes
  8791 ;; Hardware stack levels used: 1
  8792 ;; Hardware stack levels required when called: 2
  8793 ;; This function calls:
  8794 ;;		NULL
  8795 ;;		_EUSART_DefaultErrorHandler
  8796 ;;		_EUSART_DefaultFramingErrorHandler
  8797 ;;		_EUSART_DefaultOverrunErrorHandler
  8798 ;;		_EUSART_RxDataHandler
  8799 ;; This function is called by:
  8800 ;;		_EUSART_Initialize
  8801 ;;		_Read_UART
  8802 ;;		_INTERRUPT_InterruptManager
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806     06D5                     _EUSART_Receive_ISR:	
  8807                           ;psect for function _EUSART_Receive_ISR
  8808                           
  8809                           
  8810                           ;mcc_generated_files/eusart.c: 176:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8811                           
  8812                           ;incstack = 0
  8813                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8814     06D5  0020               	movlb	0	; select bank0
  8815     06D6  0839               	movf	_eusartRxHead,w	;volatile
  8816     06D7  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8817     06D8  0086               	movwf	6
  8818     06D9  0187               	clrf	7
  8819     06DA  0181               	clrf	1
  8820                           
  8821                           ;mcc_generated_files/eusart.c: 178:     if(RCSTAbits.FERR){
  8822     06DB  0023               	movlb	3	; select bank3
  8823     06DC  1D1D               	btfss	29,2	;volatile
  8824     06DD  2EEA               	goto	i1l3601
  8825                           
  8826                           ;mcc_generated_files/eusart.c: 179:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8827     06DE  0020               	movlb	0	; select bank0
  8828     06DF  0839               	movf	_eusartRxHead,w	;volatile
  8829     06E0  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8830     06E1  0086               	movwf	6
  8831     06E2  0187               	clrf	7
  8832     06E3  1481               	bsf	1,1
  8833                           
  8834                           ;mcc_generated_files/eusart.c: 180:         EUSART_FramingErrorHandler();
  8835     06E4  0021               	movlb	1	; select bank1
  8836     06E5  0860               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  8837     06E6  008A               	movwf	10
  8838     06E7  085F               	movf	_EUSART_FramingErrorHandler^(0+128),w
  8839     06E8  000A               	callw
  8840     06E9  3186               	pagesel	$
  8841     06EA                     i1l3601:
  8842                           
  8843                           ;mcc_generated_files/eusart.c: 183:     if(RCSTAbits.OERR){
  8844     06EA  0023               	movlb	3	; select bank3
  8845     06EB  1C9D               	btfss	29,1	;volatile
  8846     06EC  2EF9               	goto	i1l3607
  8847                           
  8848                           ;mcc_generated_files/eusart.c: 184:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8849     06ED  0020               	movlb	0	; select bank0
  8850     06EE  0839               	movf	_eusartRxHead,w	;volatile
  8851     06EF  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8852     06F0  0086               	movwf	6
  8853     06F1  0187               	clrf	7
  8854     06F2  1501               	bsf	1,2
  8855                           
  8856                           ;mcc_generated_files/eusart.c: 185:         EUSART_OverrunErrorHandler();
  8857     06F3  0021               	movlb	1	; select bank1
  8858     06F4  085E               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  8859     06F5  008A               	movwf	10
  8860     06F6  085D               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  8861     06F7  000A               	callw
  8862     06F8  3186               	pagesel	$
  8863     06F9                     i1l3607:
  8864                           
  8865                           ;mcc_generated_files/eusart.c: 188:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8866     06F9  0020               	movlb	0	; select bank0
  8867     06FA  0839               	movf	_eusartRxHead,w	;volatile
  8868     06FB  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8869     06FC  0086               	movwf	6
  8870     06FD  0187               	clrf	7
  8871     06FE  0801               	movf	1,w
  8872     06FF  1903               	btfsc	3,2
  8873     0700  2F08               	goto	i1l3611
  8874                           
  8875                           ;mcc_generated_files/eusart.c: 189:         EUSART_ErrorHandler();
  8876     0701  0021               	movlb	1	; select bank1
  8877     0702  085C               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  8878     0703  008A               	movwf	10
  8879     0704  085B               	movf	_EUSART_ErrorHandler^(0+128),w
  8880     0705  000A               	callw
  8881     0706  3186               	pagesel	$
  8882                           
  8883                           ;mcc_generated_files/eusart.c: 190:     } else {
  8884     0707  0008               	return
  8885     0708                     i1l3611:
  8886                           
  8887                           ;mcc_generated_files/eusart.c: 191:         EUSART_RxDataHandler();
  8888     0708  318D  25AD         	fcall	_EUSART_RxDataHandler
  8889     070A  0008               	return
  8890     070B                     __end_of_EUSART_Receive_ISR:
  8891                           
  8892                           	psect	text57
  8893     0615                     __ptext57:	
  8894 ;; *************** function _Read_UART *****************
  8895 ;; Defined at:
  8896 ;;		line 77 in file "main.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  dest            2   28[BANK0 ] int 
  8901 ;;  ori             2   26[BANK0 ] int 
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      void 
  8904 ;; Registers used:
  8905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 1F/1
  8908 ;;		On exit  : 1F/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8911 ;;      Params:         0       0       0       0       0       0
  8912 ;;      Locals:         0       4       0       0       0       0
  8913 ;;      Temps:          1       0       0       0       0       0
  8914 ;;      Totals:         1       4       0       0       0       0
  8915 ;;Total ram usage:        5 bytes
  8916 ;; Hardware stack levels used: 1
  8917 ;; Hardware stack levels required when called: 4
  8918 ;; This function calls:
  8919 ;;		_EUSART_Read
  8920 ;;		_EUSART_Receive_ISR
  8921 ;;		_New_request
  8922 ;; This function is called by:
  8923 ;;		_main
  8924 ;;		_INTERRUPT_InterruptManager
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928     0615                     _Read_UART:	
  8929                           ;psect for function _Read_UART
  8930                           
  8931                           
  8932                           ;main.c: 78:     EUSART_Receive_ISR();
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in _Read_UART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8936     0615  3186  26D5  3186   	fcall	_EUSART_Receive_ISR
  8937                           
  8938                           ;main.c: 79:     uart_read_buffer[uart_read_buffer_count] = EUSART_Read();
  8939     0618  318E  26AF  3186   	fcall	_EUSART_Read
  8940     061B  00FC               	movwf	??_Read_UART
  8941     061C  0020               	movlb	0	; select bank0
  8942     061D  0833               	movf	_uart_read_buffer_count,w
  8943     061E  3EA0               	addlw	(low (_uart_read_buffer| 0))& (0+255)
  8944     061F  0086               	movwf	6
  8945     0620  0187               	clrf	7
  8946     0621  087C               	movf	??_Read_UART,w
  8947     0622  0081               	movwf	1
  8948                           
  8949                           ;main.c: 80:     if(uart_read_buffer[uart_read_buffer_count] =='\r'){
  8950     0623  0833               	movf	_uart_read_buffer_count,w
  8951     0624  3EA0               	addlw	(low (_uart_read_buffer| 0))& (0+255)
  8952     0625  0086               	movwf	6
  8953     0626  0187               	clrf	7
  8954     0627  300D               	movlw	13
  8955     0628  0601               	xorwf	1,w
  8956     0629  1D03               	btfss	3,2
  8957     062A  2E52               	goto	i1l4743
  8958                           
  8959                           ;main.c: 81:         int ori = uart_read_buffer[0] - '0';
  8960     062B  0021               	movlb	1	; select bank1
  8961     062C  0820               	movf	_uart_read_buffer^(0+128),w
  8962     062D  3ED0               	addlw	208
  8963     062E  0020               	movlb	0	; select bank0
  8964     062F  00D9               	movwf	Read_UART@ori
  8965     0630  30FF               	movlw	255
  8966     0631  1803               	skipnc
  8967     0632  3000               	movlw	0
  8968     0633  00DA               	movwf	Read_UART@ori+1
  8969                           
  8970                           ;main.c: 82:         int dest = uart_read_buffer[1] - '0';
  8971     0634  0021               	movlb	1	; select bank1
  8972     0635  0821               	movf	(_uart_read_buffer^(0+128)+1),w
  8973     0636  3ED0               	addlw	208
  8974     0637  0020               	movlb	0	; select bank0
  8975     0638  00DB               	movwf	Read_UART@dest
  8976     0639  30FF               	movlw	255
  8977     063A  1803               	skipnc
  8978     063B  3000               	movlw	0
  8979     063C  00DC               	movwf	Read_UART@dest+1
  8980                           
  8981                           ;main.c: 83:         ori--;
  8982     063D  30FF               	movlw	255
  8983     063E  07D9               	addwf	Read_UART@ori,f
  8984     063F  30FF               	movlw	255
  8985     0640  3DDA               	addwfc	Read_UART@ori+1,f
  8986                           
  8987                           ;main.c: 84:         dest--;
  8988     0641  30FF               	movlw	255
  8989     0642  07DB               	addwf	Read_UART@dest,f
  8990     0643  30FF               	movlw	255
  8991     0644  3DDC               	addwfc	Read_UART@dest+1,f
  8992                           
  8993                           ;main.c: 85:         New_request(ori,dest);
  8994     0645  085A               	movf	Read_UART@ori+1,w
  8995     0646  00F9               	movwf	New_request@origin+1
  8996     0647  0859               	movf	Read_UART@ori,w
  8997     0648  00F8               	movwf	New_request@origin
  8998     0649  085C               	movf	Read_UART@dest+1,w
  8999     064A  00FB               	movwf	New_request@dest+1
  9000     064B  085B               	movf	Read_UART@dest,w
  9001     064C  00FA               	movwf	New_request@dest
  9002     064D  3181  21EA         	fcall	_New_request
  9003                           
  9004                           ;main.c: 86:         uart_read_buffer_count = 0;
  9005     064F  01B3               	clrf	_uart_read_buffer_count
  9006     0650  01B4               	clrf	_uart_read_buffer_count+1
  9007     0651  0008               	return
  9008     0652                     i1l4743:
  9009                           
  9010                           ;main.c: 90:     uart_read_buffer_count++;
  9011     0652  3001               	movlw	1
  9012     0653  07B3               	addwf	_uart_read_buffer_count,f
  9013     0654  3000               	movlw	0
  9014     0655  3DB4               	addwfc	_uart_read_buffer_count+1,f
  9015     0656  0008               	return
  9016     0657                     __end_of_Read_UART:
  9017                           
  9018                           	psect	text58
  9019     01EA                     __ptext58:	
  9020 ;; *************** function _New_request *****************
  9021 ;; Defined at:
  9022 ;;		line 19 in file "main.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;  origin          2    8[COMMON] int 
  9025 ;;  dest            2   10[COMMON] int 
  9026 ;; Auto vars:     Size  Location     Type
  9027 ;;  i               2   22[BANK0 ] int 
  9028 ;;  i               2   20[BANK0 ] int 
  9029 ;;  i               2   18[BANK0 ] int 
  9030 ;;  i               2   16[BANK0 ] int 
  9031 ;;  index_          2   24[BANK0 ] int 
  9032 ;;  index_ori       2   14[BANK0 ] int 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  1    wreg      void 
  9035 ;; Registers used:
  9036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 1F/0
  9039 ;;		On exit  : 1F/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9042 ;;      Params:         4       0       0       0       0       0
  9043 ;;      Locals:         0      12       0       0       0       0
  9044 ;;      Temps:          0       3       0       0       0       0
  9045 ;;      Totals:         4      15       0       0       0       0
  9046 ;;Total ram usage:       19 bytes
  9047 ;; Hardware stack levels used: 1
  9048 ;; Hardware stack levels required when called: 3
  9049 ;; This function calls:
  9050 ;;		i1_Matrix_update_dir
  9051 ;;		i1___awmod
  9052 ;; This function is called by:
  9053 ;;		_Read_UART
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057     01EA                     _New_request:	
  9058                           ;psect for function _New_request
  9059                           
  9060                           
  9061                           ;main.c: 20:   int index_ori;;main.c: 21:   if(origin == dest){return;}
  9062                           
  9063                           ;incstack = 0
  9064                           ; Regs used in _New_request: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9065     01EA  087B               	movf	New_request@dest+1,w
  9066     01EB  0679               	xorwf	New_request@origin+1,w
  9067     01EC  1D03               	skipz
  9068     01ED  29F0               	goto	u321_25
  9069     01EE  087A               	movf	New_request@dest,w
  9070     01EF  0678               	xorwf	New_request@origin,w
  9071     01F0                     u321_25:
  9072     01F0  1903               	btfsc	3,2
  9073     01F1  0008               	return
  9074                           
  9075                           ;main.c: 22:   int index_;;main.c: 23:   if(origin < dest){
  9076     01F2  0879               	movf	New_request@origin+1,w
  9077     01F3  3A80               	xorlw	128
  9078     01F4  00CA               	movwf	??_New_request
  9079     01F5  087B               	movf	New_request@dest+1,w
  9080     01F6  3A80               	xorlw	128
  9081     01F7  024A               	subwf	??_New_request,w
  9082     01F8  1D03               	skipz
  9083     01F9  29FC               	goto	u322_25
  9084     01FA  087A               	movf	New_request@dest,w
  9085     01FB  0278               	subwf	New_request@origin,w
  9086     01FC                     u322_25:
  9087     01FC  1803               	skipnc
  9088     01FD  2A87               	goto	i1l4567
  9089                           
  9090                           ;main.c: 24:       index_ = index + 1;
  9091     01FE  0020               	movlb	0	; select bank0
  9092     01FF  083E               	movf	_index,w
  9093     0200  3E01               	addlw	1
  9094     0201  00D7               	movwf	New_request@index_
  9095     0202  3000               	movlw	0
  9096     0203  1803               	skipnc
  9097     0204  3001               	movlw	1
  9098     0205  00D8               	movwf	New_request@index_+1
  9099                           
  9100                           ;main.c: 25:       for(int i=0; i<6; i++){
  9101     0206  01CF               	clrf	New_request@i
  9102     0207  01D0               	clrf	New_request@i+1
  9103     0208                     i1l4541:
  9104                           
  9105                           ;main.c: 26:           index_ = index_ % 6;
  9106     0208  3006               	movlw	6
  9107     0209  00F0               	movwf	i1___awmod@divisor
  9108     020A  3000               	movlw	0
  9109     020B  00F1               	movwf	i1___awmod@divisor+1
  9110     020C  0020               	movlb	0	; select bank0
  9111     020D  0858               	movf	New_request@index_+1,w
  9112     020E  00F3               	movwf	i1___awmod@dividend+1
  9113     020F  0857               	movf	New_request@index_,w
  9114     0210  00F2               	movwf	i1___awmod@dividend
  9115     0211  3185  25D2  3181   	fcall	i1___awmod
  9116     0214  0871               	movf	?i1___awmod+1,w
  9117     0215  00D8               	movwf	New_request@index_+1
  9118     0216  0870               	movf	?i1___awmod,w
  9119     0217  00D7               	movwf	New_request@index_
  9120                           
  9121                           ;main.c: 27:           if(FLOORS[index_] == origin){
  9122     0218  3021               	movlw	low _FLOORS
  9123     0219  0757               	addwf	New_request@index_,w
  9124     021A  0084               	movwf	4
  9125     021B  3008               	movlw	high _FLOORS
  9126     021C  3D58               	addwfc	New_request@index_+1,w
  9127     021D  3880               	iorlw	128
  9128     021E  0085               	movwf	5
  9129     021F  0800               	movf	0,w	;code access
  9130     0220  00CA               	movwf	??_New_request
  9131     0221  01CB               	clrf	??_New_request+1
  9132     0222  0879               	movf	New_request@origin+1,w
  9133     0223  064B               	xorwf	??_New_request+1,w
  9134     0224  1D03               	skipz
  9135     0225  2A28               	goto	u323_25
  9136     0226  0878               	movf	New_request@origin,w
  9137     0227  064A               	xorwf	??_New_request,w
  9138     0228                     u323_25:
  9139     0228  1D03               	skipz
  9140     0229  2A35               	goto	i1l4549
  9141                           
  9142                           ;main.c: 28:               route[index_]=1;
  9143     022A  0857               	movf	New_request@index_,w
  9144     022B  3E27               	addlw	(low (_route| 0))& (0+255)
  9145     022C  0086               	movwf	6
  9146     022D  0187               	clrf	7
  9147     022E  3001               	movlw	1
  9148     022F  0081               	movwf	1
  9149                           
  9150                           ;main.c: 29:               index_ori = index_;
  9151     0230  0858               	movf	New_request@index_+1,w
  9152     0231  00CE               	movwf	New_request@index_ori+1
  9153     0232  0857               	movf	New_request@index_,w
  9154     0233  00CD               	movwf	New_request@index_ori
  9155                           
  9156                           ;main.c: 30:               break;
  9157     0234  2A48               	goto	i1l4551
  9158     0235                     i1l4549:
  9159                           
  9160                           ;main.c: 32:           index_++;
  9161     0235  3001               	movlw	1
  9162     0236  07D7               	addwf	New_request@index_,f
  9163     0237  3000               	movlw	0
  9164     0238  3DD8               	addwfc	New_request@index_+1,f
  9165                           
  9166                           ;main.c: 33:         }
  9167     0239  3001               	movlw	1
  9168     023A  07CF               	addwf	New_request@i,f
  9169     023B  3000               	movlw	0
  9170     023C  3DD0               	addwfc	New_request@i+1,f
  9171     023D  0850               	movf	New_request@i+1,w
  9172     023E  3A80               	xorlw	128
  9173     023F  00CA               	movwf	??_New_request
  9174     0240  3080               	movlw	128
  9175     0241  024A               	subwf	??_New_request,w
  9176     0242  1D03               	skipz
  9177     0243  2A46               	goto	u324_25
  9178     0244  3006               	movlw	6
  9179     0245  024F               	subwf	New_request@i,w
  9180     0246                     u324_25:
  9181     0246  1C03               	skipc
  9182     0247  2A08               	goto	i1l4541
  9183     0248                     i1l4551:
  9184                           
  9185                           ;main.c: 34:       for(int i=0; i<6; i++){
  9186     0248  0020               	movlb	0	; select bank0
  9187     0249  01D1               	clrf	New_request@i_1746
  9188     024A  01D2               	clrf	New_request@i_1746+1
  9189     024B                     i1l4557:
  9190                           
  9191                           ;main.c: 35:           index_++;
  9192     024B  3001               	movlw	1
  9193     024C  0020               	movlb	0	; select bank0
  9194     024D  07D7               	addwf	New_request@index_,f
  9195     024E  3000               	movlw	0
  9196     024F  3DD8               	addwfc	New_request@index_+1,f
  9197                           
  9198                           ;main.c: 36:           index_ = index_ % 6;
  9199     0250  3006               	movlw	6
  9200     0251  00F0               	movwf	i1___awmod@divisor
  9201     0252  3000               	movlw	0
  9202     0253  00F1               	movwf	i1___awmod@divisor+1
  9203     0254  0858               	movf	New_request@index_+1,w
  9204     0255  00F3               	movwf	i1___awmod@dividend+1
  9205     0256  0857               	movf	New_request@index_,w
  9206     0257  00F2               	movwf	i1___awmod@dividend
  9207     0258  3185  25D2  3181   	fcall	i1___awmod
  9208     025B  0871               	movf	?i1___awmod+1,w
  9209     025C  00D8               	movwf	New_request@index_+1
  9210     025D  0870               	movf	?i1___awmod,w
  9211     025E  00D7               	movwf	New_request@index_
  9212                           
  9213                           ;main.c: 37:           if(FLOORS[index_]== dest)
  9214     025F  3021               	movlw	low _FLOORS
  9215     0260  0757               	addwf	New_request@index_,w
  9216     0261  0084               	movwf	4
  9217     0262  3008               	movlw	high _FLOORS
  9218     0263  3D58               	addwfc	New_request@index_+1,w
  9219     0264  3880               	iorlw	128
  9220     0265  0085               	movwf	5
  9221     0266  0800               	movf	0,w	;code access
  9222     0267  00CA               	movwf	??_New_request
  9223     0268  01CB               	clrf	??_New_request+1
  9224     0269  087B               	movf	New_request@dest+1,w
  9225     026A  064B               	xorwf	??_New_request+1,w
  9226     026B  1D03               	skipz
  9227     026C  2A6F               	goto	u325_25
  9228     026D  087A               	movf	New_request@dest,w
  9229     026E  064A               	xorwf	??_New_request,w
  9230     026F                     u325_25:
  9231     026F  1D03               	skipz
  9232     0270  2A78               	goto	i1l4565
  9233                           
  9234                           ;main.c: 38:             {;main.c: 39:               route[index_] = 1;
  9235     0271  0857               	movf	New_request@index_,w
  9236     0272  3E27               	addlw	(low (_route| 0))& (0+255)
  9237     0273  0086               	movwf	6
  9238     0274  0187               	clrf	7
  9239     0275  3001               	movlw	1
  9240     0276  0081               	movwf	1
  9241                           
  9242                           ;main.c: 40:               break;
  9243     0277  2A87               	goto	i1l4567
  9244     0278                     i1l4565:
  9245                           
  9246                           ;main.c: 42:         }
  9247     0278  3001               	movlw	1
  9248     0279  07D1               	addwf	New_request@i_1746,f
  9249     027A  3000               	movlw	0
  9250     027B  3DD2               	addwfc	New_request@i_1746+1,f
  9251     027C  0852               	movf	New_request@i_1746+1,w
  9252     027D  3A80               	xorlw	128
  9253     027E  00CA               	movwf	??_New_request
  9254     027F  3080               	movlw	128
  9255     0280  024A               	subwf	??_New_request,w
  9256     0281  1D03               	skipz
  9257     0282  2A85               	goto	u326_25
  9258     0283  3006               	movlw	6
  9259     0284  0251               	subwf	New_request@i_1746,w
  9260     0285                     u326_25:
  9261     0285  1C03               	skipc
  9262     0286  2A4B               	goto	i1l4557
  9263     0287                     i1l4567:
  9264                           
  9265                           ;main.c: 45:     if(origin >= dest){
  9266     0287  0879               	movf	New_request@origin+1,w
  9267     0288  3A80               	xorlw	128
  9268     0289  0020               	movlb	0	; select bank0
  9269     028A  00CA               	movwf	??_New_request
  9270     028B  087B               	movf	New_request@dest+1,w
  9271     028C  3A80               	xorlw	128
  9272     028D  024A               	subwf	??_New_request,w
  9273     028E  1D03               	skipz
  9274     028F  2A92               	goto	u327_25
  9275     0290  087A               	movf	New_request@dest,w
  9276     0291  0278               	subwf	New_request@origin,w
  9277     0292                     u327_25:
  9278     0292  1C03               	skipc
  9279     0293  2B21               	goto	i1l4605
  9280                           
  9281                           ;main.c: 46:       if(index > 3)index_ = index+1;
  9282     0294  3004               	movlw	4
  9283     0295  0020               	movlb	0	; select bank0
  9284     0296  023E               	subwf	_index,w
  9285     0297  1C03               	skipc
  9286     0298  2AA0               	goto	i1l4573
  9287     0299  083E               	movf	_index,w
  9288     029A  3E01               	addlw	1
  9289     029B  00D7               	movwf	New_request@index_
  9290     029C  3000               	movlw	0
  9291     029D  1803               	skipnc
  9292     029E  3001               	movlw	1
  9293     029F  2AA3               	goto	L4
  9294     02A0                     i1l4573:
  9295     02A0  3003               	movlw	3
  9296     02A1  00D7               	movwf	New_request@index_
  9297     02A2  3000               	movlw	0
  9298     02A3                     L4:
  9299     02A3  00D8               	movwf	New_request@index_+1
  9300                           
  9301                           ;main.c: 49:       for(int i=0; i<6; i++){
  9302     02A4  01D3               	clrf	New_request@i_1747
  9303     02A5  01D4               	clrf	New_request@i_1747+1
  9304     02A6                     i1l4581:
  9305                           
  9306                           ;main.c: 50:           index_ = index_ % 6;
  9307     02A6  3006               	movlw	6
  9308     02A7  00F0               	movwf	i1___awmod@divisor
  9309     02A8  3000               	movlw	0
  9310     02A9  00F1               	movwf	i1___awmod@divisor+1
  9311     02AA  0020               	movlb	0	; select bank0
  9312     02AB  0858               	movf	New_request@index_+1,w
  9313     02AC  00F3               	movwf	i1___awmod@dividend+1
  9314     02AD  0857               	movf	New_request@index_,w
  9315     02AE  00F2               	movwf	i1___awmod@dividend
  9316     02AF  3185  25D2  3181   	fcall	i1___awmod
  9317     02B2  0871               	movf	?i1___awmod+1,w
  9318     02B3  00D8               	movwf	New_request@index_+1
  9319     02B4  0870               	movf	?i1___awmod,w
  9320     02B5  00D7               	movwf	New_request@index_
  9321                           
  9322                           ;main.c: 51:           if(FLOORS[index_] == origin){
  9323     02B6  3021               	movlw	low _FLOORS
  9324     02B7  0757               	addwf	New_request@index_,w
  9325     02B8  0084               	movwf	4
  9326     02B9  3008               	movlw	high _FLOORS
  9327     02BA  3D58               	addwfc	New_request@index_+1,w
  9328     02BB  3880               	iorlw	128
  9329     02BC  0085               	movwf	5
  9330     02BD  0800               	movf	0,w	;code access
  9331     02BE  00CA               	movwf	??_New_request
  9332     02BF  01CB               	clrf	??_New_request+1
  9333     02C0  0879               	movf	New_request@origin+1,w
  9334     02C1  064B               	xorwf	??_New_request+1,w
  9335     02C2  1D03               	skipz
  9336     02C3  2AC6               	goto	u329_25
  9337     02C4  0878               	movf	New_request@origin,w
  9338     02C5  064A               	xorwf	??_New_request,w
  9339     02C6                     u329_25:
  9340     02C6  1D03               	skipz
  9341     02C7  2ACF               	goto	i1l4587
  9342                           
  9343                           ;main.c: 52:               route[index_]=1;
  9344     02C8  0857               	movf	New_request@index_,w
  9345     02C9  3E27               	addlw	(low (_route| 0))& (0+255)
  9346     02CA  0086               	movwf	6
  9347     02CB  0187               	clrf	7
  9348     02CC  3001               	movlw	1
  9349     02CD  0081               	movwf	1
  9350                           
  9351                           ;main.c: 53:               break;
  9352     02CE  2AE2               	goto	i1l4589
  9353     02CF                     i1l4587:
  9354                           
  9355                           ;main.c: 55:           index_++;
  9356     02CF  3001               	movlw	1
  9357     02D0  07D7               	addwf	New_request@index_,f
  9358     02D1  3000               	movlw	0
  9359     02D2  3DD8               	addwfc	New_request@index_+1,f
  9360                           
  9361                           ;main.c: 56:         }
  9362     02D3  3001               	movlw	1
  9363     02D4  07D3               	addwf	New_request@i_1747,f
  9364     02D5  3000               	movlw	0
  9365     02D6  3DD4               	addwfc	New_request@i_1747+1,f
  9366     02D7  0854               	movf	New_request@i_1747+1,w
  9367     02D8  3A80               	xorlw	128
  9368     02D9  00CA               	movwf	??_New_request
  9369     02DA  3080               	movlw	128
  9370     02DB  024A               	subwf	??_New_request,w
  9371     02DC  1D03               	skipz
  9372     02DD  2AE0               	goto	u330_25
  9373     02DE  3006               	movlw	6
  9374     02DF  0253               	subwf	New_request@i_1747,w
  9375     02E0                     u330_25:
  9376     02E0  1C03               	skipc
  9377     02E1  2AA6               	goto	i1l4581
  9378     02E2                     i1l4589:
  9379                           
  9380                           ;main.c: 57:       for(int i=0; i<6; i++){
  9381     02E2  0020               	movlb	0	; select bank0
  9382     02E3  01D5               	clrf	New_request@i_1748
  9383     02E4  01D6               	clrf	New_request@i_1748+1
  9384     02E5                     i1l4595:
  9385                           
  9386                           ;main.c: 58:           index_++;
  9387     02E5  3001               	movlw	1
  9388     02E6  0020               	movlb	0	; select bank0
  9389     02E7  07D7               	addwf	New_request@index_,f
  9390     02E8  3000               	movlw	0
  9391     02E9  3DD8               	addwfc	New_request@index_+1,f
  9392                           
  9393                           ;main.c: 59:           index_ = index_ % 6;
  9394     02EA  3006               	movlw	6
  9395     02EB  00F0               	movwf	i1___awmod@divisor
  9396     02EC  3000               	movlw	0
  9397     02ED  00F1               	movwf	i1___awmod@divisor+1
  9398     02EE  0858               	movf	New_request@index_+1,w
  9399     02EF  00F3               	movwf	i1___awmod@dividend+1
  9400     02F0  0857               	movf	New_request@index_,w
  9401     02F1  00F2               	movwf	i1___awmod@dividend
  9402     02F2  3185  25D2  3181   	fcall	i1___awmod
  9403     02F5  0871               	movf	?i1___awmod+1,w
  9404     02F6  00D8               	movwf	New_request@index_+1
  9405     02F7  0870               	movf	?i1___awmod,w
  9406     02F8  00D7               	movwf	New_request@index_
  9407                           
  9408                           ;main.c: 60:           if(FLOORS[index_]== dest)
  9409     02F9  3021               	movlw	low _FLOORS
  9410     02FA  0757               	addwf	New_request@index_,w
  9411     02FB  0084               	movwf	4
  9412     02FC  3008               	movlw	high _FLOORS
  9413     02FD  3D58               	addwfc	New_request@index_+1,w
  9414     02FE  3880               	iorlw	128
  9415     02FF  0085               	movwf	5
  9416     0300  0800               	movf	0,w	;code access
  9417     0301  00CA               	movwf	??_New_request
  9418     0302  01CB               	clrf	??_New_request+1
  9419     0303  087B               	movf	New_request@dest+1,w
  9420     0304  064B               	xorwf	??_New_request+1,w
  9421     0305  1D03               	skipz
  9422     0306  2B09               	goto	u331_25
  9423     0307  087A               	movf	New_request@dest,w
  9424     0308  064A               	xorwf	??_New_request,w
  9425     0309                     u331_25:
  9426     0309  1D03               	skipz
  9427     030A  2B12               	goto	i1l4603
  9428                           
  9429                           ;main.c: 61:             {;main.c: 62:               route[index_] = 1;
  9430     030B  0857               	movf	New_request@index_,w
  9431     030C  3E27               	addlw	(low (_route| 0))& (0+255)
  9432     030D  0086               	movwf	6
  9433     030E  0187               	clrf	7
  9434     030F  3001               	movlw	1
  9435     0310  0081               	movwf	1
  9436                           
  9437                           ;main.c: 63:               break;
  9438     0311  2B21               	goto	i1l4605
  9439     0312                     i1l4603:
  9440                           
  9441                           ;main.c: 65:         }
  9442     0312  3001               	movlw	1
  9443     0313  07D5               	addwf	New_request@i_1748,f
  9444     0314  3000               	movlw	0
  9445     0315  3DD6               	addwfc	New_request@i_1748+1,f
  9446     0316  0856               	movf	New_request@i_1748+1,w
  9447     0317  3A80               	xorlw	128
  9448     0318  00CA               	movwf	??_New_request
  9449     0319  3080               	movlw	128
  9450     031A  024A               	subwf	??_New_request,w
  9451     031B  1D03               	skipz
  9452     031C  2B1F               	goto	u332_25
  9453     031D  3006               	movlw	6
  9454     031E  0255               	subwf	New_request@i_1748,w
  9455     031F                     u332_25:
  9456     031F  1C03               	skipc
  9457     0320  2AE5               	goto	i1l4595
  9458     0321                     i1l4605:
  9459                           
  9460                           ;main.c: 68:   Matrix_update_dir();
  9461     0321  3184  2473  3181   	fcall	i1_Matrix_update_dir
  9462                           
  9463                           ;main.c: 69:   if(origin == current_floor & CCP3CONbits.CCP3M==0)
  9464     0324  0026               	movlb	6	; select bank6
  9465     0325  0813               	movf	19,w	;volatile
  9466     0326  390F               	andlw	15
  9467     0327  3A00               	xorlw	0
  9468     0328  1D03               	btfss	3,2
  9469     0329  2B2C               	goto	u333_20
  9470     032A  3001               	movlw	1
  9471     032B  2B2D               	goto	u333_22
  9472     032C                     u333_20:
  9473     032C  3000               	movlw	0
  9474     032D                     u333_22:
  9475     032D  0020               	movlb	0	; select bank0
  9476     032E  00CA               	movwf	??_New_request
  9477     032F  083D               	movf	_current_floor,w
  9478     0330  00CB               	movwf	??_New_request+1
  9479     0331  01CC               	clrf	??_New_request+2
  9480     0332  0879               	movf	New_request@origin+1,w
  9481     0333  064C               	xorwf	??_New_request+2,w
  9482     0334  1D03               	skipz
  9483     0335  2B38               	goto	u334_25
  9484     0336  0878               	movf	New_request@origin,w
  9485     0337  064B               	xorwf	??_New_request+1,w
  9486     0338                     u334_25:
  9487     0338  1D03               	btfss	3,2
  9488     0339  2B3C               	goto	u334_20
  9489     033A  3001               	movlw	1
  9490     033B  2B3D               	goto	u334_22
  9491     033C                     u334_20:
  9492     033C  3000               	movlw	0
  9493     033D                     u334_22:
  9494     033D  054A               	andwf	??_New_request,w
  9495     033E  3800               	iorlw	0
  9496     033F  1903               	skipnz
  9497     0340  0008               	return
  9498                           
  9499                           ;main.c: 70:     {;main.c: 71:       _delay((unsigned long)((2000)*(8000000/4000.0)));
  9500     0341  3015               	movlw	21
  9501     0342  0020               	movlb	0	; select bank0
  9502     0343  00CB               	movwf	??_New_request+1
  9503     0344  304B               	movlw	75
  9504     0345  00CA               	movwf	??_New_request
  9505     0346  30BE               	movlw	190
  9506     0347                     u380_27:
  9507     0347  0B89               	decfsz	9,f
  9508     0348  2B47               	goto	u380_27
  9509     0349  0BCA               	decfsz	??_New_request,f
  9510     034A  2B47               	goto	u380_27
  9511     034B  0BCB               	decfsz	??_New_request+1,f
  9512     034C  2B47               	goto	u380_27
  9513     034D  0000               	nop
  9514                           
  9515                           ;main.c: 72:       route[index_ori] = 0;
  9516     034E  0020               	movlb	0	; select bank0
  9517     034F  084D               	movf	New_request@index_ori,w
  9518     0350  3E27               	addlw	(low (_route| 0))& (0+255)
  9519     0351  0086               	movwf	6
  9520     0352  0187               	clrf	7
  9521     0353  0181               	clrf	1
  9522                           
  9523                           ;main.c: 73:       Matrix_update_dir();
  9524     0354  3184  2473         	fcall	i1_Matrix_update_dir
  9525     0356  0008               	return
  9526     0357                     __end_of_New_request:
  9527                           
  9528                           	psect	text59
  9529     05D2                     __ptext59:	
  9530 ;; *************** function i1___awmod *****************
  9531 ;; Defined at:
  9532 ;;		line 5 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\awmod.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;  divisor         2    0[COMMON] int 
  9535 ;;  dividend        2    2[COMMON] int 
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;  sign            1    5[COMMON] unsigned char 
  9538 ;;  counter         1    4[COMMON] unsigned char 
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  2    0[COMMON] int 
  9541 ;; Registers used:
  9542 ;;		wreg, status,2, status,0
  9543 ;; Tracked objects:
  9544 ;;		On entry : 1F/0
  9545 ;;		On exit  : 1F/0
  9546 ;;		Unchanged: 1F/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9548 ;;      Params:         4       0       0       0       0       0
  9549 ;;      Locals:         2       0       0       0       0       0
  9550 ;;      Temps:          0       0       0       0       0       0
  9551 ;;      Totals:         6       0       0       0       0       0
  9552 ;;Total ram usage:        6 bytes
  9553 ;; Hardware stack levels used: 1
  9554 ;; This function calls:
  9555 ;;		Nothing
  9556 ;; This function is called by:
  9557 ;;		_New_request
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561     05D2                     i1___awmod:	
  9562                           ;psect for function i1___awmod
  9563                           
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  9567     05D2  01F5               	clrf	i1___awmod@sign
  9568     05D3  1FF3               	btfss	i1___awmod@dividend+1,7
  9569     05D4  2DDC               	goto	i1l3377
  9570     05D5  09F2               	comf	i1___awmod@dividend,f
  9571     05D6  09F3               	comf	i1___awmod@dividend+1,f
  9572     05D7  0AF2               	incf	i1___awmod@dividend,f
  9573     05D8  1903               	skipnz
  9574     05D9  0AF3               	incf	i1___awmod@dividend+1,f
  9575     05DA  3001               	movlw	1
  9576     05DB  00F5               	movwf	i1___awmod@sign
  9577     05DC                     i1l3377:
  9578     05DC  1FF1               	btfss	i1___awmod@divisor+1,7
  9579     05DD  2DE3               	goto	i1l3381
  9580     05DE  09F0               	comf	i1___awmod@divisor,f
  9581     05DF  09F1               	comf	i1___awmod@divisor+1,f
  9582     05E0  0AF0               	incf	i1___awmod@divisor,f
  9583     05E1  1903               	skipnz
  9584     05E2  0AF1               	incf	i1___awmod@divisor+1,f
  9585     05E3                     i1l3381:
  9586     05E3  0870               	movf	i1___awmod@divisor,w
  9587     05E4  0471               	iorwf	i1___awmod@divisor+1,w
  9588     05E5  1903               	btfsc	3,2
  9589     05E6  2E08               	goto	i1l3399
  9590     05E7  3001               	movlw	1
  9591     05E8  00F4               	movwf	i1___awmod@counter
  9592     05E9                     i1l3389:
  9593     05E9  1BF1               	btfsc	i1___awmod@divisor+1,7
  9594     05EA  2DF3               	goto	i1l3391
  9595     05EB  3001               	movlw	1
  9596     05EC                     u222_25:
  9597     05EC  35F0               	lslf	i1___awmod@divisor,f
  9598     05ED  0DF1               	rlf	i1___awmod@divisor+1,f
  9599     05EE  0B89               	decfsz	9,f
  9600     05EF  2DEC               	goto	u222_25
  9601     05F0  3001               	movlw	1
  9602     05F1  07F4               	addwf	i1___awmod@counter,f
  9603     05F2  2DE9               	goto	i1l3389
  9604     05F3                     i1l3391:
  9605     05F3  0871               	movf	i1___awmod@divisor+1,w
  9606     05F4  0273               	subwf	i1___awmod@dividend+1,w
  9607     05F5  1D03               	skipz
  9608     05F6  2DF9               	goto	u224_25
  9609     05F7  0870               	movf	i1___awmod@divisor,w
  9610     05F8  0272               	subwf	i1___awmod@dividend,w
  9611     05F9                     u224_25:
  9612     05F9  1C03               	skipc
  9613     05FA  2DFF               	goto	i1l3395
  9614     05FB  0870               	movf	i1___awmod@divisor,w
  9615     05FC  02F2               	subwf	i1___awmod@dividend,f
  9616     05FD  0871               	movf	i1___awmod@divisor+1,w
  9617     05FE  3BF3               	subwfb	i1___awmod@dividend+1,f
  9618     05FF                     i1l3395:
  9619     05FF  3001               	movlw	1
  9620     0600                     u225_25:
  9621     0600  36F1               	lsrf	i1___awmod@divisor+1,f
  9622     0601  0CF0               	rrf	i1___awmod@divisor,f
  9623     0602  0B89               	decfsz	9,f
  9624     0603  2E00               	goto	u225_25
  9625     0604  3001               	movlw	1
  9626     0605  02F4               	subwf	i1___awmod@counter,f
  9627     0606  1D03               	btfss	3,2
  9628     0607  2DF3               	goto	i1l3391
  9629     0608                     i1l3399:
  9630     0608  0875               	movf	i1___awmod@sign,w
  9631     0609  1903               	btfsc	3,2
  9632     060A  2E10               	goto	i1l3403
  9633     060B  09F2               	comf	i1___awmod@dividend,f
  9634     060C  09F3               	comf	i1___awmod@dividend+1,f
  9635     060D  0AF2               	incf	i1___awmod@dividend,f
  9636     060E  1903               	skipnz
  9637     060F  0AF3               	incf	i1___awmod@dividend+1,f
  9638     0610                     i1l3403:
  9639     0610  0873               	movf	i1___awmod@dividend+1,w
  9640     0611  00F1               	movwf	?i1___awmod+1
  9641     0612  0872               	movf	i1___awmod@dividend,w
  9642     0613  00F0               	movwf	?i1___awmod
  9643     0614  0008               	return
  9644     0615                     __end_ofi1___awmod:
  9645                           
  9646                           	psect	text60
  9647     0C14                     __ptext60:	
  9648 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9649 ;; Defined at:
  9650 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;		None
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;		None
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      void 
  9657 ;; Registers used:
  9658 ;;		None
  9659 ;; Tracked objects:
  9660 ;;		On entry : 1F/1
  9661 ;;		On exit  : 1F/3
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9664 ;;      Params:         0       0       0       0       0       0
  9665 ;;      Locals:         0       0       0       0       0       0
  9666 ;;      Temps:          0       0       0       0       0       0
  9667 ;;      Totals:         0       0       0       0       0       0
  9668 ;;Total ram usage:        0 bytes
  9669 ;; Hardware stack levels used: 1
  9670 ;; This function calls:
  9671 ;;		Nothing
  9672 ;; This function is called by:
  9673 ;;		_EUSART_Initialize
  9674 ;;		_EUSART_Receive_ISR
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678     0C14                     _EUSART_DefaultOverrunErrorHandler:	
  9679                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9680                           
  9681                           
  9682                           ;mcc_generated_files/eusart.c: 212:     RCSTAbits.CREN = 0;
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9686     0C14  0023               	movlb	3	; select bank3
  9687     0C15  121D               	bcf	29,4	;volatile
  9688                           
  9689                           ;mcc_generated_files/eusart.c: 213:     RCSTAbits.CREN = 1;
  9690     0C16  161D               	bsf	29,4	;volatile
  9691     0C17  0008               	return
  9692     0C18                     __end_of_EUSART_DefaultOverrunErrorHandler:
  9693                           
  9694                           	psect	text61
  9695     0C0C                     __ptext61:	
  9696 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9697 ;; Defined at:
  9698 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9699 ;; Parameters:    Size  Location     Type
  9700 ;;		None
  9701 ;; Auto vars:     Size  Location     Type
  9702 ;;		None
  9703 ;; Return value:  Size  Location     Type
  9704 ;;                  1    wreg      void 
  9705 ;; Registers used:
  9706 ;;		None
  9707 ;; Tracked objects:
  9708 ;;		On entry : 1F/1
  9709 ;;		On exit  : 1F/1
  9710 ;;		Unchanged: 1F/0
  9711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9712 ;;      Params:         0       0       0       0       0       0
  9713 ;;      Locals:         0       0       0       0       0       0
  9714 ;;      Temps:          0       0       0       0       0       0
  9715 ;;      Totals:         0       0       0       0       0       0
  9716 ;;Total ram usage:        0 bytes
  9717 ;; Hardware stack levels used: 1
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_EUSART_Initialize
  9722 ;;		_EUSART_Receive_ISR
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726     0C0C                     _EUSART_DefaultFramingErrorHandler:	
  9727                           ;psect for function _EUSART_DefaultFramingErrorHandler
  9728                           
  9729                           
  9730                           ;incstack = 0
  9731                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  9732     0C0C  0008               	return
  9733     0C0D                     __end_of_EUSART_DefaultFramingErrorHandler:
  9734                           
  9735                           	psect	text62
  9736     0C0D                     __ptext62:	
  9737 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9738 ;; Defined at:
  9739 ;;		line 217 in file "mcc_generated_files/eusart.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;		None
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;		None
  9744 ;; Return value:  Size  Location     Type
  9745 ;;                  1    wreg      void 
  9746 ;; Registers used:
  9747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9748 ;; Tracked objects:
  9749 ;;		On entry : 1F/1
  9750 ;;		On exit  : 1F/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9753 ;;      Params:         0       0       0       0       0       0
  9754 ;;      Locals:         0       0       0       0       0       0
  9755 ;;      Temps:          0       0       0       0       0       0
  9756 ;;      Totals:         0       0       0       0       0       0
  9757 ;;Total ram usage:        0 bytes
  9758 ;; Hardware stack levels used: 1
  9759 ;; Hardware stack levels required when called: 1
  9760 ;; This function calls:
  9761 ;;		_EUSART_RxDataHandler
  9762 ;; This function is called by:
  9763 ;;		_EUSART_Initialize
  9764 ;;		_EUSART_Receive_ISR
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768     0C0D                     _EUSART_DefaultErrorHandler:	
  9769                           ;psect for function _EUSART_DefaultErrorHandler
  9770                           
  9771                           
  9772                           ;mcc_generated_files/eusart.c: 218:     EUSART_RxDataHandler();
  9773                           
  9774                           ;incstack = 0
  9775                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9776     0C0D  318D  25AD         	fcall	_EUSART_RxDataHandler
  9777     0C0F  0008               	return
  9778     0C10                     __end_of_EUSART_DefaultErrorHandler:
  9779                           
  9780                           	psect	text63
  9781     0DAD                     __ptext63:	
  9782 ;; *************** function _EUSART_RxDataHandler *****************
  9783 ;; Defined at:
  9784 ;;		line 197 in file "mcc_generated_files/eusart.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      void 
  9791 ;; Registers used:
  9792 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9793 ;; Tracked objects:
  9794 ;;		On entry : 1E/0
  9795 ;;		On exit  : 1F/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9798 ;;      Params:         0       0       0       0       0       0
  9799 ;;      Locals:         0       0       0       0       0       0
  9800 ;;      Temps:          0       0       0       0       0       0
  9801 ;;      Totals:         0       0       0       0       0       0
  9802 ;;Total ram usage:        0 bytes
  9803 ;; Hardware stack levels used: 1
  9804 ;; This function calls:
  9805 ;;		Nothing
  9806 ;; This function is called by:
  9807 ;;		_EUSART_Receive_ISR
  9808 ;;		_EUSART_DefaultErrorHandler
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812     0DAD                     _EUSART_RxDataHandler:	
  9813                           ;psect for function _EUSART_RxDataHandler
  9814                           
  9815                           
  9816                           ;mcc_generated_files/eusart.c: 199:     eusartRxBuffer[eusartRxHead++] = RCREG;
  9817                           
  9818                           ;incstack = 0
  9819                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  9820     0DAD  0020               	movlb	0	; select bank0
  9821     0DAE  0839               	movf	_eusartRxHead,w
  9822     0DAF  3EB2               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9823     0DB0  0086               	movwf	6
  9824     0DB1  0187               	clrf	7
  9825     0DB2  0023               	movlb	3	; select bank3
  9826     0DB3  0819               	movf	25,w	;volatile
  9827     0DB4  0081               	movwf	1
  9828     0DB5  3001               	movlw	1
  9829     0DB6  0020               	movlb	0	; select bank0
  9830     0DB7  07B9               	addwf	_eusartRxHead,f	;volatile
  9831                           
  9832                           ;mcc_generated_files/eusart.c: 200:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9833     0DB8  3008               	movlw	8
  9834     0DB9  0239               	subwf	_eusartRxHead,w
  9835     0DBA  1803               	btfsc	3,0
  9836                           
  9837                           ;mcc_generated_files/eusart.c: 201:     {;mcc_generated_files/eusart.c: 202:         eus
      +                          artRxHead = 0;
  9838     0DBB  01B9               	clrf	_eusartRxHead	;volatile
  9839                           
  9840                           ;mcc_generated_files/eusart.c: 204:     eusartRxCount++;
  9841     0DBC  3001               	movlw	1
  9842     0DBD  07B7               	addwf	_eusartRxCount,f	;volatile
  9843     0DBE  0008               	return
  9844     0DBF                     __end_of_EUSART_RxDataHandler:
  9845                           
  9846                           	psect	text64
  9847     0EAF                     __ptext64:	
  9848 ;; *************** function _EUSART_Read *****************
  9849 ;; Defined at:
  9850 ;;		line 140 in file "mcc_generated_files/eusart.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  readValue       1    0[COMMON] unsigned char 
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  1    wreg      unsigned char 
  9857 ;; Registers used:
  9858 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/1
  9861 ;;		On exit  : 1F/1
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9864 ;;      Params:         0       0       0       0       0       0
  9865 ;;      Locals:         1       0       0       0       0       0
  9866 ;;      Temps:          0       0       0       0       0       0
  9867 ;;      Totals:         1       0       0       0       0       0
  9868 ;;Total ram usage:        1 bytes
  9869 ;; Hardware stack levels used: 1
  9870 ;; This function calls:
  9871 ;;		Nothing
  9872 ;; This function is called by:
  9873 ;;		_Read_UART
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877     0EAF                     _EUSART_Read:	
  9878                           ;psect for function _EUSART_Read
  9879                           
  9880     0EAF                     i1l3573:	
  9881                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
  9882                           
  9883                           ;incstack = 0
  9884                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9885                           
  9886                           
  9887                           ;mcc_generated_files/eusart.c: 144:     while(0 == eusartRxCount)
  9888     0EAF  0020               	movlb	0	; select bank0
  9889     0EB0  0837               	movf	_eusartRxCount,w	;volatile
  9890     0EB1  1903               	btfsc	3,2
  9891     0EB2  2EAF               	goto	i1l3573
  9892                           
  9893                           ;mcc_generated_files/eusart.c: 148:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  9894     0EB3  0838               	movf	_eusartRxTail,w	;volatile
  9895     0EB4  3EAA               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9896     0EB5  0086               	movwf	6
  9897     0EB6  0187               	clrf	7
  9898     0EB7  0801               	movf	1,w
  9899     0EB8  00B6               	movwf	_eusartRxLastError	;volatile
  9900                           
  9901                           ;mcc_generated_files/eusart.c: 150:     readValue = eusartRxBuffer[eusartRxTail++];
  9902     0EB9  0838               	movf	_eusartRxTail,w
  9903     0EBA  3EB2               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9904     0EBB  0086               	movwf	6
  9905     0EBC  0187               	clrf	7
  9906     0EBD  0801               	movf	1,w
  9907     0EBE  00F0               	movwf	EUSART_Read@readValue
  9908     0EBF  3001               	movlw	1
  9909     0EC0  07B8               	addwf	_eusartRxTail,f	;volatile
  9910                           
  9911                           ;mcc_generated_files/eusart.c: 151:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  9912     0EC1  3008               	movlw	8
  9913     0EC2  0238               	subwf	_eusartRxTail,w
  9914     0EC3  1803               	btfsc	3,0
  9915                           
  9916                           ;mcc_generated_files/eusart.c: 152:     {;mcc_generated_files/eusart.c: 153:         eus
      +                          artRxTail = 0;
  9917     0EC4  01B8               	clrf	_eusartRxTail	;volatile
  9918                           
  9919                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 0;
  9920     0EC5  0021               	movlb	1	; select bank1
  9921     0EC6  1291               	bcf	17,5	;volatile
  9922                           
  9923                           ;mcc_generated_files/eusart.c: 156:     eusartRxCount--;
  9924     0EC7  3001               	movlw	1
  9925     0EC8  0020               	movlb	0	; select bank0
  9926     0EC9  02B7               	subwf	_eusartRxCount,f	;volatile
  9927                           
  9928                           ;mcc_generated_files/eusart.c: 157:     PIE1bits.RCIE = 1;
  9929     0ECA  0021               	movlb	1	; select bank1
  9930     0ECB  1691               	bsf	17,5	;volatile
  9931                           
  9932                           ;mcc_generated_files/eusart.c: 159:     return readValue;
  9933     0ECC  0870               	movf	EUSART_Read@readValue,w
  9934     0ECD  0008               	return
  9935     0ECE                     __end_of_EUSART_Read:
  9936                           
  9937                           	psect	text65
  9938     0CB2                     __ptext65:	
  9939 ;; *************** function _PIN_MANAGER_IOC *****************
  9940 ;; Defined at:
  9941 ;;		line 119 in file "mcc_generated_files/pin_manager.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;		None
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;		None
  9946 ;; Return value:  Size  Location     Type
  9947 ;;                  1    wreg      void 
  9948 ;; Registers used:
  9949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 1F/7
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9955 ;;      Params:         0       0       0       0       0       0
  9956 ;;      Locals:         0       0       0       0       0       0
  9957 ;;      Temps:          0       0       0       0       0       0
  9958 ;;      Totals:         0       0       0       0       0       0
  9959 ;;Total ram usage:        0 bytes
  9960 ;; Hardware stack levels used: 1
  9961 ;; Hardware stack levels required when called: 6
  9962 ;; This function calls:
  9963 ;;		_IOCBF0_ISR
  9964 ;;		_IOCBF3_ISR
  9965 ;; This function is called by:
  9966 ;;		_INTERRUPT_InterruptManager
  9967 ;; This function uses a non-reentrant model
  9968 ;;
  9969                           
  9970     0CB2                     _PIN_MANAGER_IOC:	
  9971                           ;psect for function _PIN_MANAGER_IOC
  9972                           
  9973                           
  9974                           ;mcc_generated_files/pin_manager.c: 122:     if(IOCBFbits.IOCBF0 == 1)
  9975                           
  9976                           ;incstack = 0
  9977                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9978     0CB2  0027               	movlb	7	; select bank7
  9979     0CB3  1C16               	btfss	22,0	;volatile
  9980     0CB4  2CB8               	goto	i1l4697
  9981                           
  9982                           ;mcc_generated_files/pin_manager.c: 123:     {;mcc_generated_files/pin_manager.c: 124:  
      +                                 IOCBF0_ISR();
  9983     0CB5  318D  250F  318C   	fcall	_IOCBF0_ISR
  9984     0CB8                     i1l4697:
  9985                           
  9986                           ;mcc_generated_files/pin_manager.c: 127:     if(IOCBFbits.IOCBF3 == 1)
  9987     0CB8  1D96               	btfss	22,3	;volatile
  9988     0CB9  0008               	return
  9989                           
  9990                           ;mcc_generated_files/pin_manager.c: 128:     {;mcc_generated_files/pin_manager.c: 129:  
      +                                 IOCBF3_ISR();
  9991     0CBA  318D  251C         	fcall	_IOCBF3_ISR
  9992     0CBC  0008               	return
  9993     0CBD                     __end_of_PIN_MANAGER_IOC:
  9994                           
  9995                           	psect	text66
  9996     0D1C                     __ptext66:	
  9997 ;; *************** function _IOCBF3_ISR *****************
  9998 ;; Defined at:
  9999 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      void 
 10006 ;; Registers used:
 10007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 1F/7
 10010 ;;		On exit  : 1F/7
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10013 ;;      Params:         0       0       0       0       0       0
 10014 ;;      Locals:         0       0       0       0       0       0
 10015 ;;      Temps:          0       0       0       0       0       0
 10016 ;;      Totals:         0       0       0       0       0       0
 10017 ;;Total ram usage:        0 bytes
 10018 ;; Hardware stack levels used: 1
 10019 ;; Hardware stack levels required when called: 5
 10020 ;; This function calls:
 10021 ;;		NULL
 10022 ;;		_IOCBF3_DefaultInterruptHandler
 10023 ;;		_ISR_Floor2
 10024 ;; This function is called by:
 10025 ;;		_PIN_MANAGER_IOC
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029     0D1C                     _IOCBF3_ISR:	
 10030                           ;psect for function _IOCBF3_ISR
 10031                           
 10032                           
 10033                           ;mcc_generated_files/pin_manager.c: 171:     if(IOCBF3_InterruptHandler)
 10034                           
 10035                           ;incstack = 0
 10036                           ; Regs used in _IOCBF3_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10037     0D1C  0021               	movlb	1	; select bank1
 10038     0D1D  0863               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10039     0D1E  0464               	iorwf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10040     0D1F  1903               	btfsc	3,2
 10041     0D20  2D26               	goto	i1l4481
 10042                           
 10043                           ;mcc_generated_files/pin_manager.c: 172:     {;mcc_generated_files/pin_manager.c: 173:  
      +                                 IOCBF3_InterruptHandler();
 10044     0D21  0864               	movf	(_IOCBF3_InterruptHandler+1)^(0+128),w
 10045     0D22  008A               	movwf	10
 10046     0D23  0863               	movf	_IOCBF3_InterruptHandler^(0+128),w
 10047     0D24  000A               	callw
 10048     0D25  318D               	pagesel	$
 10049     0D26                     i1l4481:
 10050                           
 10051                           ;mcc_generated_files/pin_manager.c: 175:     IOCBFbits.IOCBF3 = 0;
 10052     0D26  0027               	movlb	7	; select bank7
 10053     0D27  1196               	bcf	22,3	;volatile
 10054     0D28  0008               	return
 10055     0D29                     __end_of_IOCBF3_ISR:
 10056                           
 10057                           	psect	text67
 10058     0C0B                     __ptext67:	
 10059 ;; *************** function _IOCBF3_DefaultInterruptHandler *****************
 10060 ;; Defined at:
 10061 ;;		line 188 in file "mcc_generated_files/pin_manager.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;		None
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  1    wreg      void 
 10068 ;; Registers used:
 10069 ;;		None
 10070 ;; Tracked objects:
 10071 ;;		On entry : 1F/1
 10072 ;;		On exit  : 1F/1
 10073 ;;		Unchanged: 1F/0
 10074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10075 ;;      Params:         0       0       0       0       0       0
 10076 ;;      Locals:         0       0       0       0       0       0
 10077 ;;      Temps:          0       0       0       0       0       0
 10078 ;;      Totals:         0       0       0       0       0       0
 10079 ;;Total ram usage:        0 bytes
 10080 ;; Hardware stack levels used: 1
 10081 ;; This function calls:
 10082 ;;		Nothing
 10083 ;; This function is called by:
 10084 ;;		_PIN_MANAGER_Initialize
 10085 ;;		_IOCBF3_ISR
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089     0C0B                     _IOCBF3_DefaultInterruptHandler:	
 10090                           ;psect for function _IOCBF3_DefaultInterruptHandler
 10091                           
 10092                           
 10093                           ;incstack = 0
 10094                           ; Regs used in _IOCBF3_DefaultInterruptHandler: []
 10095     0C0B  0008               	return
 10096     0C0C                     __end_of_IOCBF3_DefaultInterruptHandler:
 10097                           
 10098                           	psect	text68
 10099     0DFD                     __ptext68:	
 10100 ;; *************** function _ISR_Floor2 *****************
 10101 ;; Defined at:
 10102 ;;		line 296 in file "main.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;		None
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  1    wreg      void 
 10109 ;; Registers used:
 10110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10111 ;; Tracked objects:
 10112 ;;		On entry : 1F/1
 10113 ;;		On exit  : 1F/7
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10116 ;;      Params:         0       0       0       0       0       0
 10117 ;;      Locals:         0       0       0       0       0       0
 10118 ;;      Temps:          0       0       0       0       0       0
 10119 ;;      Totals:         0       0       0       0       0       0
 10120 ;;Total ram usage:        0 bytes
 10121 ;; Hardware stack levels used: 1
 10122 ;; Hardware stack levels required when called: 4
 10123 ;; This function calls:
 10124 ;;		i1_Matrix_update_floor
 10125 ;;		i1_Motor_Turn_Off
 10126 ;;		i1_Motor_Turn_On
 10127 ;; This function is called by:
 10128 ;;		_main
 10129 ;;		_IOCBF3_ISR
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133     0DFD                     _ISR_Floor2:	
 10134                           ;psect for function _ISR_Floor2
 10135                           
 10136                           
 10137                           ;main.c: 297:     IOCBNbits.IOCBN3 = 0;
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _ISR_Floor2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10141     0DFD  0027               	movlb	7	; select bank7
 10142     0DFE  1195               	bcf	21,3	;volatile
 10143                           
 10144                           ;main.c: 298:     IOCBFbits.IOCBF3 = 0;
 10145     0DFF  1196               	bcf	22,3	;volatile
 10146                           
 10147                           ;main.c: 299:     current_floor = 1;
 10148     0E00  3001               	movlw	1
 10149     0E01  0020               	movlb	0	; select bank0
 10150     0E02  00BD               	movwf	_current_floor
 10151                           
 10152                           ;main.c: 300:     index++;
 10153     0E03  3001               	movlw	1
 10154     0E04  07BE               	addwf	_index,f
 10155                           
 10156                           ;main.c: 302:     Motor_Turn_Off();
 10157     0E05  318C  24A7  318D   	fcall	i1_Motor_Turn_Off
 10158                           
 10159                           ;main.c: 303:     __nop ();
 10160     0E08  0000               	nop
 10161                           
 10162                           ;main.c: 304:     Motor_Turn_On();
 10163     0E09  318D  2502  318D   	fcall	i1_Motor_Turn_On
 10164                           
 10165                           ;main.c: 306:     Matrix_update_floor(current_floor);
 10166     0E0C  0020               	movlb	0	; select bank0
 10167     0E0D  083D               	movf	_current_floor,w
 10168     0E0E  318F  2755         	fcall	i1_Matrix_update_floor
 10169                           
 10170                           ;main.c: 308:     IOCBNbits.IOCBN3 = 1;
 10171     0E10  0027               	movlb	7	; select bank7
 10172     0E11  1595               	bsf	21,3	;volatile
 10173     0E12  0008               	return
 10174     0E13                     __end_of_ISR_Floor2:
 10175                           
 10176                           	psect	text69
 10177     0D0F                     __ptext69:	
 10178 ;; *************** function _IOCBF0_ISR *****************
 10179 ;; Defined at:
 10180 ;;		line 136 in file "mcc_generated_files/pin_manager.c"
 10181 ;; Parameters:    Size  Location     Type
 10182 ;;		None
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 1F/7
 10191 ;;		On exit  : 1F/7
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10194 ;;      Params:         0       0       0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0
 10196 ;;      Temps:          0       0       0       0       0       0
 10197 ;;      Totals:         0       0       0       0       0       0
 10198 ;;Total ram usage:        0 bytes
 10199 ;; Hardware stack levels used: 1
 10200 ;; Hardware stack levels required when called: 5
 10201 ;; This function calls:
 10202 ;;		NULL
 10203 ;;		_IOCBF0_DefaultInterruptHandler
 10204 ;;		_ISR_Floor1
 10205 ;; This function is called by:
 10206 ;;		_PIN_MANAGER_IOC
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210     0D0F                     _IOCBF0_ISR:	
 10211                           ;psect for function _IOCBF0_ISR
 10212                           
 10213                           
 10214                           ;mcc_generated_files/pin_manager.c: 141:     if(IOCBF0_InterruptHandler)
 10215                           
 10216                           ;incstack = 0
 10217                           ; Regs used in _IOCBF0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10218     0D0F  0021               	movlb	1	; select bank1
 10219     0D10  0865               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10220     0D11  0466               	iorwf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10221     0D12  1903               	btfsc	3,2
 10222     0D13  2D19               	goto	i1l4475
 10223                           
 10224                           ;mcc_generated_files/pin_manager.c: 142:     {;mcc_generated_files/pin_manager.c: 143:  
      +                                 IOCBF0_InterruptHandler();
 10225     0D14  0866               	movf	(_IOCBF0_InterruptHandler+1)^(0+128),w
 10226     0D15  008A               	movwf	10
 10227     0D16  0865               	movf	_IOCBF0_InterruptHandler^(0+128),w
 10228     0D17  000A               	callw
 10229     0D18  318D               	pagesel	$
 10230     0D19                     i1l4475:
 10231                           
 10232                           ;mcc_generated_files/pin_manager.c: 145:     IOCBFbits.IOCBF0 = 0;
 10233     0D19  0027               	movlb	7	; select bank7
 10234     0D1A  1016               	bcf	22,0	;volatile
 10235     0D1B  0008               	return
 10236     0D1C                     __end_of_IOCBF0_ISR:
 10237                           
 10238                           	psect	text70
 10239     0C0A                     __ptext70:	
 10240 ;; *************** function _IOCBF0_DefaultInterruptHandler *****************
 10241 ;; Defined at:
 10242 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;		None
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  1    wreg      void 
 10249 ;; Registers used:
 10250 ;;		None
 10251 ;; Tracked objects:
 10252 ;;		On entry : 1F/1
 10253 ;;		On exit  : 1F/1
 10254 ;;		Unchanged: 1F/0
 10255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10256 ;;      Params:         0       0       0       0       0       0
 10257 ;;      Locals:         0       0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0
 10259 ;;      Totals:         0       0       0       0       0       0
 10260 ;;Total ram usage:        0 bytes
 10261 ;; Hardware stack levels used: 1
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_PIN_MANAGER_Initialize
 10266 ;;		_IOCBF0_ISR
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270     0C0A                     _IOCBF0_DefaultInterruptHandler:	
 10271                           ;psect for function _IOCBF0_DefaultInterruptHandler
 10272                           
 10273                           
 10274                           ;incstack = 0
 10275                           ; Regs used in _IOCBF0_DefaultInterruptHandler: []
 10276     0C0A  0008               	return
 10277     0C0B                     __end_of_IOCBF0_DefaultInterruptHandler:
 10278                           
 10279                           	psect	text71
 10280     0E2A                     __ptext71:	
 10281 ;; *************** function _ISR_Floor1 *****************
 10282 ;; Defined at:
 10283 ;;		line 311 in file "main.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;		None
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;		None
 10288 ;; Return value:  Size  Location     Type
 10289 ;;                  1    wreg      void 
 10290 ;; Registers used:
 10291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10292 ;; Tracked objects:
 10293 ;;		On entry : 1F/1
 10294 ;;		On exit  : 1F/7
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10297 ;;      Params:         0       0       0       0       0       0
 10298 ;;      Locals:         0       0       0       0       0       0
 10299 ;;      Temps:          0       0       0       0       0       0
 10300 ;;      Totals:         0       0       0       0       0       0
 10301 ;;Total ram usage:        0 bytes
 10302 ;; Hardware stack levels used: 1
 10303 ;; Hardware stack levels required when called: 4
 10304 ;; This function calls:
 10305 ;;		i1_Matrix_update_floor
 10306 ;;		i1_Motor_Turn_Off
 10307 ;;		i1_Motor_Turn_On
 10308 ;;		i1_TMR0_Reload
 10309 ;; This function is called by:
 10310 ;;		_main
 10311 ;;		_IOCBF0_ISR
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315     0E2A                     _ISR_Floor1:	
 10316                           ;psect for function _ISR_Floor1
 10317                           
 10318                           
 10319                           ;main.c: 312:     IOCBNbits.IOCBN0 = 0;
 10320                           
 10321                           ;incstack = 0
 10322                           ; Regs used in _ISR_Floor1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10323     0E2A  0027               	movlb	7	; select bank7
 10324     0E2B  1015               	bcf	21,0	;volatile
 10325                           
 10326                           ;main.c: 313:     IOCBFbits.IOCBF0 = 0;
 10327     0E2C  1016               	bcf	22,0	;volatile
 10328                           
 10329                           ;main.c: 314:     current_floor = 0;
 10330     0E2D  0020               	movlb	0	; select bank0
 10331     0E2E  01BD               	clrf	_current_floor
 10332                           
 10333                           ;main.c: 315:     index=0;
 10334     0E2F  01BE               	clrf	_index
 10335                           
 10336                           ;main.c: 317:     Motor_Turn_Off();
 10337     0E30  318C  24A7  318E   	fcall	i1_Motor_Turn_Off
 10338                           
 10339                           ;main.c: 318:     __nop ();
 10340     0E33  0000               	nop
 10341                           
 10342                           ;main.c: 319:     Motor_Turn_On();
 10343     0E34  318D  2502  318E   	fcall	i1_Motor_Turn_On
 10344                           
 10345                           ;main.c: 321:     Matrix_update_floor(current_floor);
 10346     0E37  0020               	movlb	0	; select bank0
 10347     0E38  083D               	movf	_current_floor,w
 10348     0E39  318F  2755  318E   	fcall	i1_Matrix_update_floor
 10349                           
 10350                           ;main.c: 322:     TMR0_Reload();
 10351     0E3C  318C  2410         	fcall	i1_TMR0_Reload
 10352                           
 10353                           ;main.c: 323:     var.HHH = 0;
 10354     0E3E  01A2               	clrf	_var+2
 10355                           
 10356                           ;main.c: 325:     IOCBNbits.IOCBN0 = 1;
 10357     0E3F  0027               	movlb	7	; select bank7
 10358     0E40  1415               	bsf	21,0	;volatile
 10359     0E41  0008               	return
 10360     0E42                     __end_of_ISR_Floor1:
 10361                           
 10362                           	psect	text72
 10363     0C8A                     __ptext72:	
 10364 ;; *************** function _CMP2_ISR *****************
 10365 ;; Defined at:
 10366 ;;		line 86 in file "mcc_generated_files/cmp2.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;		None
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  1    wreg      void 
 10373 ;; Registers used:
 10374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10375 ;; Tracked objects:
 10376 ;;		On entry : 1F/0
 10377 ;;		On exit  : 1F/1
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10380 ;;      Params:         0       0       0       0       0       0
 10381 ;;      Locals:         0       0       0       0       0       0
 10382 ;;      Temps:          0       0       0       0       0       0
 10383 ;;      Totals:         0       0       0       0       0       0
 10384 ;;Total ram usage:        0 bytes
 10385 ;; Hardware stack levels used: 1
 10386 ;; Hardware stack levels required when called: 5
 10387 ;; This function calls:
 10388 ;;		_ISR_Floor4
 10389 ;; This function is called by:
 10390 ;;		_INTERRUPT_InterruptManager
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394     0C8A                     _CMP2_ISR:	
 10395                           ;psect for function _CMP2_ISR
 10396                           
 10397                           
 10398                           ;mcc_generated_files/cmp2.c: 88:     PIE2bits.C2IE = 0;
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _CMP2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10402     0C8A  0021               	movlb	1	; select bank1
 10403     0C8B  1312               	bcf	18,6	;volatile
 10404                           
 10405                           ;mcc_generated_files/cmp2.c: 89:     PIR2bits.C2IF = 0;
 10406     0C8C  0020               	movlb	0	; select bank0
 10407     0C8D  1312               	bcf	18,6	;volatile
 10408                           
 10409                           ;mcc_generated_files/cmp2.c: 90:     ISR_Floor4();
 10410     0C8E  318D  25D3         	fcall	_ISR_Floor4
 10411                           
 10412                           ;mcc_generated_files/cmp2.c: 91:     PIE2bits.C2IE = 1;
 10413     0C90  0021               	movlb	1	; select bank1
 10414     0C91  1712               	bsf	18,6	;volatile
 10415     0C92  0008               	return
 10416     0C93                     __end_of_CMP2_ISR:
 10417                           
 10418                           	psect	text73
 10419     0DD3                     __ptext73:	
 10420 ;; *************** function _ISR_Floor4 *****************
 10421 ;; Defined at:
 10422 ;;		line 269 in file "main.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;		None
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;		None
 10427 ;; Return value:  Size  Location     Type
 10428 ;;                  1    wreg      void 
 10429 ;; Registers used:
 10430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10431 ;; Tracked objects:
 10432 ;;		On entry : 1F/0
 10433 ;;		On exit  : 1F/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10436 ;;      Params:         0       0       0       0       0       0
 10437 ;;      Locals:         0       0       0       0       0       0
 10438 ;;      Temps:          0       0       0       0       0       0
 10439 ;;      Totals:         0       0       0       0       0       0
 10440 ;;Total ram usage:        0 bytes
 10441 ;; Hardware stack levels used: 1
 10442 ;; Hardware stack levels required when called: 4
 10443 ;; This function calls:
 10444 ;;		i1_Matrix_update_floor
 10445 ;;		i1_Motor_Turn_Off
 10446 ;;		i1_Motor_Turn_On
 10447 ;;		i1_TMR0_Reload
 10448 ;; This function is called by:
 10449 ;;		_CMP2_ISR
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453     0DD3                     _ISR_Floor4:	
 10454                           ;psect for function _ISR_Floor4
 10455                           
 10456                           
 10457                           ;main.c: 270:     current_floor = 3;
 10458                           
 10459                           ;incstack = 0
 10460                           ; Regs used in _ISR_Floor4: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10461     0DD3  3003               	movlw	3
 10462     0DD4  00BD               	movwf	_current_floor
 10463                           
 10464                           ;main.c: 271:     index = 3;
 10465     0DD5  3003               	movlw	3
 10466     0DD6  00BE               	movwf	_index
 10467                           
 10468                           ;main.c: 273:     Motor_Turn_Off();
 10469     0DD7  318C  24A7  318D   	fcall	i1_Motor_Turn_Off
 10470                           
 10471                           ;main.c: 274:     __nop ();
 10472     0DDA  0000               	nop
 10473                           
 10474                           ;main.c: 275:     Motor_Turn_On();
 10475     0DDB  318D  2502  318D   	fcall	i1_Motor_Turn_On
 10476                           
 10477                           ;main.c: 277:     Matrix_update_floor(current_floor);
 10478     0DDE  0020               	movlb	0	; select bank0
 10479     0DDF  083D               	movf	_current_floor,w
 10480     0DE0  318F  2755  318D   	fcall	i1_Matrix_update_floor
 10481                           
 10482                           ;main.c: 278:     TMR0_Reload();
 10483     0DE3  318C  2410         	fcall	i1_TMR0_Reload
 10484                           
 10485                           ;main.c: 279:     var.HHH = 180;
 10486     0DE5  30B4               	movlw	180
 10487     0DE6  00A2               	movwf	_var+2
 10488     0DE7  0008               	return
 10489     0DE8                     __end_of_ISR_Floor4:
 10490                           
 10491                           	psect	text74
 10492     0C10                     __ptext74:	
 10493 ;; *************** function i1_TMR0_Reload *****************
 10494 ;; Defined at:
 10495 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;		None
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;		None
 10500 ;; Return value:  Size  Location     Type
 10501 ;;                  1    wreg      void 
 10502 ;; Registers used:
 10503 ;;		wreg
 10504 ;; Tracked objects:
 10505 ;;		On entry : 1D/0
 10506 ;;		On exit  : 1F/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10509 ;;      Params:         0       0       0       0       0       0
 10510 ;;      Locals:         0       0       0       0       0       0
 10511 ;;      Temps:          0       0       0       0       0       0
 10512 ;;      Totals:         0       0       0       0       0       0
 10513 ;;Total ram usage:        0 bytes
 10514 ;; Hardware stack levels used: 1
 10515 ;; This function calls:
 10516 ;;		Nothing
 10517 ;; This function is called by:
 10518 ;;		_Update_tx_buffer
 10519 ;;		_ISR_Floor4
 10520 ;;		_ISR_Floor1
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524     0C10                     i1_TMR0_Reload:	
 10525                           ;psect for function i1_TMR0_Reload
 10526                           
 10527                           
 10528                           ;mcc_generated_files/tmr0.c: 98:     TMR0 = timer0ReloadVal;
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in i1_TMR0_Reload: [wreg]
 10532     0C10  0020               	movlb	0	; select bank0
 10533     0C11  0835               	movf	_timer0ReloadVal,w	;volatile
 10534     0C12  0095               	movwf	21	;volatile
 10535     0C13  0008               	return
 10536     0C14                     __end_ofi1_TMR0_Reload:
 10537                           
 10538                           	psect	text75
 10539     0C81                     __ptext75:	
 10540 ;; *************** function _CMP1_ISR *****************
 10541 ;; Defined at:
 10542 ;;		line 88 in file "mcc_generated_files/cmp1.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;		None
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;		None
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  1    wreg      void 
 10549 ;; Registers used:
 10550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : 1F/0
 10553 ;;		On exit  : 1F/1
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10556 ;;      Params:         0       0       0       0       0       0
 10557 ;;      Locals:         0       0       0       0       0       0
 10558 ;;      Temps:          0       0       0       0       0       0
 10559 ;;      Totals:         0       0       0       0       0       0
 10560 ;;Total ram usage:        0 bytes
 10561 ;; Hardware stack levels used: 1
 10562 ;; Hardware stack levels required when called: 5
 10563 ;; This function calls:
 10564 ;;		_ISR_Floor3
 10565 ;; This function is called by:
 10566 ;;		_INTERRUPT_InterruptManager
 10567 ;; This function uses a non-reentrant model
 10568 ;;
 10569                           
 10570     0C81                     _CMP1_ISR:	
 10571                           ;psect for function _CMP1_ISR
 10572                           
 10573                           
 10574                           ;mcc_generated_files/cmp1.c: 90:     PIE2bits.C1IE = 0;
 10575                           
 10576                           ;incstack = 0
 10577                           ; Regs used in _CMP1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10578     0C81  0021               	movlb	1	; select bank1
 10579     0C82  1292               	bcf	18,5	;volatile
 10580                           
 10581                           ;mcc_generated_files/cmp1.c: 91:     PIR2bits.C1IF = 0;
 10582     0C83  0020               	movlb	0	; select bank0
 10583     0C84  1292               	bcf	18,5	;volatile
 10584                           
 10585                           ;mcc_generated_files/cmp1.c: 92:     ISR_Floor3();
 10586     0C85  318D  257D         	fcall	_ISR_Floor3
 10587                           
 10588                           ;mcc_generated_files/cmp1.c: 93:     PIE2bits.C1IE = 1;
 10589     0C87  0021               	movlb	1	; select bank1
 10590     0C88  1692               	bsf	18,5	;volatile
 10591     0C89  0008               	return
 10592     0C8A                     __end_of_CMP1_ISR:
 10593                           
 10594                           	psect	text76
 10595     0D7D                     __ptext76:	
 10596 ;; *************** function _ISR_Floor3 *****************
 10597 ;; Defined at:
 10598 ;;		line 284 in file "main.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;		None
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      void 
 10605 ;; Registers used:
 10606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10607 ;; Tracked objects:
 10608 ;;		On entry : 1F/0
 10609 ;;		On exit  : 1F/2
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10612 ;;      Params:         0       0       0       0       0       0
 10613 ;;      Locals:         0       0       0       0       0       0
 10614 ;;      Temps:          0       0       0       0       0       0
 10615 ;;      Totals:         0       0       0       0       0       0
 10616 ;;Total ram usage:        0 bytes
 10617 ;; Hardware stack levels used: 1
 10618 ;; Hardware stack levels required when called: 4
 10619 ;; This function calls:
 10620 ;;		i1_Matrix_update_floor
 10621 ;;		i1_Motor_Turn_Off
 10622 ;;		i1_Motor_Turn_On
 10623 ;; This function is called by:
 10624 ;;		_CMP1_ISR
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628     0D7D                     _ISR_Floor3:	
 10629                           ;psect for function _ISR_Floor3
 10630                           
 10631                           
 10632                           ;main.c: 285:     current_floor = 2;
 10633                           
 10634                           ;incstack = 0
 10635                           ; Regs used in _ISR_Floor3: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10636     0D7D  3002               	movlw	2
 10637     0D7E  00BD               	movwf	_current_floor
 10638                           
 10639                           ;main.c: 286:     index++;
 10640     0D7F  3001               	movlw	1
 10641     0D80  07BE               	addwf	_index,f
 10642                           
 10643                           ;main.c: 288:     Motor_Turn_Off();
 10644     0D81  318C  24A7  318D   	fcall	i1_Motor_Turn_Off
 10645                           
 10646                           ;main.c: 289:     __nop ();
 10647     0D84  0000               	nop
 10648                           
 10649                           ;main.c: 290:     Motor_Turn_On();
 10650     0D85  318D  2502  318D   	fcall	i1_Motor_Turn_On
 10651                           
 10652                           ;main.c: 292:     Matrix_update_floor(current_floor);
 10653     0D88  0020               	movlb	0	; select bank0
 10654     0D89  083D               	movf	_current_floor,w
 10655     0D8A  318F  2755         	fcall	i1_Matrix_update_floor
 10656     0D8C  0008               	return
 10657     0D8D                     __end_of_ISR_Floor3:
 10658                           
 10659                           	psect	text77
 10660     0D02                     __ptext77:	
 10661 ;; *************** function i1_Motor_Turn_On *****************
 10662 ;; Defined at:
 10663 ;;		line 12 in file "main.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;		None
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      void 
 10670 ;; Registers used:
 10671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 19/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10677 ;;      Params:         0       0       0       0       0       0
 10678 ;;      Locals:         0       0       0       0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0
 10680 ;;      Totals:         0       0       0       0       0       0
 10681 ;;Total ram usage:        0 bytes
 10682 ;; Hardware stack levels used: 1
 10683 ;; Hardware stack levels required when called: 3
 10684 ;; This function calls:
 10685 ;;		i1_Matrix_update_dir
 10686 ;; This function is called by:
 10687 ;;		_ISR_Floor4
 10688 ;;		_ISR_Floor3
 10689 ;;		_ISR_Floor2
 10690 ;;		_ISR_Floor1
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694     0D02                     i1_Motor_Turn_On:	
 10695                           ;psect for function i1_Motor_Turn_On
 10696                           
 10697                           
 10698                           ;main.c: 13:     if(CCP3CONbits.CCP3M != 0x0C){
 10699                           
 10700                           ;incstack = 0
 10701                           ; Regs used in i1_Motor_Turn_On: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10702     0D02  0026               	movlb	6	; select bank6
 10703     0D03  0813               	movf	19,w	;volatile
 10704     0D04  390F               	andlw	15
 10705     0D05  3A0C               	xorlw	12
 10706     0D06  1903               	skipnz
 10707     0D07  0008               	return
 10708                           
 10709                           ;main.c: 14:         CCP3CONbits.CCP3M = 0x0C;
 10710     0D08  0813               	movf	19,w	;volatile
 10711     0D09  39F0               	andlw	-16
 10712     0D0A  380C               	iorlw	12
 10713     0D0B  0093               	movwf	19	;volatile
 10714                           
 10715                           ;main.c: 15:         Matrix_update_dir();
 10716     0D0C  3184  2473         	fcall	i1_Matrix_update_dir
 10717     0D0E  0008               	return
 10718     0D0F                     __end_ofi1_Motor_Turn_On:
 10719                           
 10720                           	psect	text78
 10721     0CA7                     __ptext78:	
 10722 ;; *************** function i1_Motor_Turn_Off *****************
 10723 ;; Defined at:
 10724 ;;		line 5 in file "main.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;		None
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1    wreg      void 
 10731 ;; Registers used:
 10732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 1F/0
 10735 ;;		On exit  : 19/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10738 ;;      Params:         0       0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0
 10741 ;;      Totals:         0       0       0       0       0       0
 10742 ;;Total ram usage:        0 bytes
 10743 ;; Hardware stack levels used: 1
 10744 ;; Hardware stack levels required when called: 3
 10745 ;; This function calls:
 10746 ;;		i1_Matrix_update_dir
 10747 ;; This function is called by:
 10748 ;;		_ISR_Floor4
 10749 ;;		_ISR_Floor3
 10750 ;;		_ISR_Floor2
 10751 ;;		_ISR_Floor1
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755     0CA7                     i1_Motor_Turn_Off:	
 10756                           ;psect for function i1_Motor_Turn_Off
 10757                           
 10758                           
 10759                           ;main.c: 6:     if(CCP3CONbits.CCP3M != 0x00){
 10760                           
 10761                           ;incstack = 0
 10762                           ; Regs used in i1_Motor_Turn_Off: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10763     0CA7  0026               	movlb	6	; select bank6
 10764     0CA8  0813               	movf	19,w	;volatile
 10765     0CA9  390F               	andlw	15
 10766     0CAA  3A00               	xorlw	0
 10767     0CAB  1903               	skipnz
 10768     0CAC  0008               	return
 10769                           
 10770                           ;main.c: 7:         CCP3CONbits.CCP3M = 0x00;
 10771     0CAD  30F0               	movlw	-16
 10772     0CAE  0593               	andwf	19,f	;volatile
 10773                           
 10774                           ;main.c: 8:         Matrix_update_dir();
 10775     0CAF  3184  2473         	fcall	i1_Matrix_update_dir
 10776     0CB1  0008               	return
 10777     0CB2                     __end_ofi1_Motor_Turn_Off:
 10778                           
 10779                           	psect	text79
 10780     0473                     __ptext79:	
 10781 ;; *************** function i1_Matrix_update_dir *****************
 10782 ;; Defined at:
 10783 ;;		line 238 in file "main.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  route_          4    0[BANK0 ] _Bool [4]
 10788 ;;  data            2    5[BANK0 ] unsigned char [2]
 10789 ;;  i               2    9[BANK0 ] int 
 10790 ;;  i               1    8[BANK0 ] unsigned char 
 10791 ;;  display_dir     1    7[BANK0 ] unsigned char 
 10792 ;;  route_leds      1    4[BANK0 ] unsigned char 
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  1    wreg      void 
 10795 ;; Registers used:
 10796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10797 ;; Tracked objects:
 10798 ;;		On entry : 0/0
 10799 ;;		On exit  : 1F/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 10802 ;;      Params:         0       0       0       0       0       0
 10803 ;;      Locals:         0      11       0       0       0       0
 10804 ;;      Temps:          1       0       0       0       0       0
 10805 ;;      Totals:         1      11       0       0       0       0
 10806 ;;Total ram usage:       12 bytes
 10807 ;; Hardware stack levels used: 1
 10808 ;; Hardware stack levels required when called: 2
 10809 ;; This function calls:
 10810 ;;		i1_Tx_spi
 10811 ;;		i1___bmul
 10812 ;; This function is called by:
 10813 ;;		_New_request
 10814 ;;		i1_Motor_Turn_Off
 10815 ;;		i1_Motor_Turn_On
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819     0473                     i1_Matrix_update_dir:	
 10820                           ;psect for function i1_Matrix_update_dir
 10821                           
 10822                           
 10823                           ;main.c: 239:     uint8_t data[2];;main.c: 240:     uint8_t display_dir;;main.c: 242:   
      +                            _Bool route_[4];;main.c: 243:     route_[0] = route[0];
 10824                           
 10825                           ;incstack = 0
 10826                           ; Regs used in i1_Matrix_update_dir: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10827     0473  0020               	movlb	0	; select bank0
 10828     0474  0827               	movf	_route,w
 10829     0475  00BF               	movwf	i1Matrix_update_dir@route_
 10830                           
 10831                           ;main.c: 244:     route_[1] = route[1] | route[5];
 10832     0476  0828               	movf	_route+1,w
 10833     0477  042C               	iorwf	_route+5,w
 10834     0478  00C0               	movwf	i1Matrix_update_dir@route_+1
 10835                           
 10836                           ;main.c: 245:     route_[2] = route[2] | route[4];
 10837     0479  0829               	movf	_route+2,w
 10838     047A  042B               	iorwf	_route+4,w
 10839     047B  00C1               	movwf	i1Matrix_update_dir@route_+2
 10840                           
 10841                           ;main.c: 246:     route_[3] = route[3];
 10842     047C  082A               	movf	_route+3,w
 10843     047D  00C2               	movwf	i1Matrix_update_dir@route_+3
 10844                           
 10845                           ;main.c: 248:     uint8_t route_leds = 0;
 10846     047E  01C3               	clrf	i1Matrix_update_dir@route_leds
 10847                           
 10848                           ;main.c: 250:     for (int i = 0; i < 4; i++) {
 10849     047F  01C8               	clrf	i1Matrix_update_dir@i
 10850     0480  01C9               	clrf	i1Matrix_update_dir@i+1
 10851     0481                     i1l4145:
 10852                           
 10853                           ;main.c: 251:         if (route_[i]) route_leds |= (1 << i);
 10854     0481  0020               	movlb	0	; select bank0
 10855     0482  0848               	movf	i1Matrix_update_dir@i,w
 10856     0483  3E3F               	addlw	(low (i1Matrix_update_dir@route_| 0))& (0+255)
 10857     0484  0086               	movwf	6
 10858     0485  0187               	clrf	7
 10859     0486  0801               	movf	1,w
 10860     0487  1903               	btfsc	3,2
 10861     0488  2C92               	goto	i1l4149
 10862     0489  3001               	movlw	1
 10863     048A  00F7               	movwf	??i1_Matrix_update_dir
 10864     048B  0A48               	incf	i1Matrix_update_dir@i,w
 10865     048C  2C8E               	goto	u302_24
 10866     048D                     u302_25:
 10867     048D  35F7               	lslf	??i1_Matrix_update_dir,f
 10868     048E                     u302_24:
 10869     048E  0B89               	decfsz	9,f
 10870     048F  2C8D               	goto	u302_25
 10871     0490  0877               	movf	??i1_Matrix_update_dir,w
 10872     0491  04C3               	iorwf	i1Matrix_update_dir@route_leds,f
 10873     0492                     i1l4149:
 10874                           
 10875                           ;main.c: 252:     }
 10876     0492  3001               	movlw	1
 10877     0493  07C8               	addwf	i1Matrix_update_dir@i,f
 10878     0494  3000               	movlw	0
 10879     0495  3DC9               	addwfc	i1Matrix_update_dir@i+1,f
 10880     0496  0849               	movf	i1Matrix_update_dir@i+1,w
 10881     0497  3A80               	xorlw	128
 10882     0498  00F7               	movwf	??i1_Matrix_update_dir
 10883     0499  3080               	movlw	128
 10884     049A  0277               	subwf	??i1_Matrix_update_dir,w
 10885     049B  1D03               	skipz
 10886     049C  2C9F               	goto	u303_25
 10887     049D  3004               	movlw	4
 10888     049E  0248               	subwf	i1Matrix_update_dir@i,w
 10889     049F                     u303_25:
 10890     049F  1C03               	skipc
 10891     04A0  2C81               	goto	i1l4145
 10892                           
 10893                           ;main.c: 254:     if(CCP3CONbits.CCP3M == 0) display_dir = 6;
 10894     04A1  0026               	movlb	6	; select bank6
 10895     04A2  0813               	movf	19,w	;volatile
 10896     04A3  390F               	andlw	15
 10897     04A4  3A00               	xorlw	0
 10898     04A5  1D03               	skipz
 10899     04A6  2CA9               	goto	i1l4157
 10900     04A7  3006               	movlw	6
 10901     04A8  2CB2               	goto	L5
 10902     04A9                     i1l4157:
 10903     04A9  3003               	movlw	3
 10904     04AA  00F0               	movwf	i1___bmul@multiplicand
 10905     04AB  0022               	movlb	2	; select bank2
 10906     04AC  0D0C               	rlf	12,w	;volatile
 10907     04AD  0D0C               	rlf	12,w	;volatile
 10908     04AE  3901               	andlw	1
 10909     04AF  318D  256E  3184   	fcall	i1___bmul
 10910     04B2                     L5:
 10911     04B2  0020               	movlb	0	; select bank0
 10912     04B3  00C6               	movwf	i1Matrix_update_dir@display_dir
 10913                           
 10914                           ;main.c: 256:     data[0] = 1;
 10915     04B4  3001               	movlw	1
 10916     04B5  00C4               	movwf	i1Matrix_update_dir@data
 10917                           
 10918                           ;main.c: 257:     data[1] = MATRIX_DIR[display_dir] | route_leds;
 10919     04B6  0846               	movf	i1Matrix_update_dir@display_dir,w
 10920     04B7  3E18               	addlw	low (_MATRIX_DIR| (0+32768))
 10921     04B8  0084               	movwf	4
 10922     04B9  3088               	movlw	high (_MATRIX_DIR| (0+32768))
 10923     04BA  1803               	skipnc
 10924     04BB  3E01               	addlw	1
 10925     04BC  0085               	movwf	5
 10926     04BD  0800               	movf	0,w	;code access
 10927     04BE  0443               	iorwf	i1Matrix_update_dir@route_leds,w
 10928     04BF  00C5               	movwf	i1Matrix_update_dir@data+1
 10929                           
 10930                           ;main.c: 258:     Tx_spi(data, 2);
 10931     04C0  3044               	movlw	(low (i1Matrix_update_dir@data| 0))& (0+255)
 10932     04C1  00F4               	movwf	i1Tx_spi@data
 10933     04C2  3002               	movlw	2
 10934     04C3  00F5               	movwf	i1Tx_spi@dataSize
 10935     04C4  3000               	movlw	0
 10936     04C5  00F6               	movwf	i1Tx_spi@dataSize+1
 10937     04C6  318D  255F  3184   	fcall	i1_Tx_spi
 10938                           
 10939                           ;main.c: 259:     display_dir++;
 10940     04C9  3001               	movlw	1
 10941     04CA  0020               	movlb	0	; select bank0
 10942     04CB  07C6               	addwf	i1Matrix_update_dir@display_dir,f
 10943                           
 10944                           ;main.c: 261:     for(uint8_t i=2;i<=3;i++){
 10945     04CC  3002               	movlw	2
 10946     04CD  00C7               	movwf	i1Matrix_update_dir@i_1802
 10947     04CE                     i1l4173:
 10948                           
 10949                           ;main.c: 262:         data[0] = i;
 10950     04CE  0847               	movf	i1Matrix_update_dir@i_1802,w
 10951     04CF  00C4               	movwf	i1Matrix_update_dir@data
 10952                           
 10953                           ;main.c: 263:         data[1] = MATRIX_DIR[display_dir];
 10954     04D0  0846               	movf	i1Matrix_update_dir@display_dir,w
 10955     04D1  3E18               	addlw	low (_MATRIX_DIR| (0+32768))
 10956     04D2  0084               	movwf	4
 10957     04D3  3088               	movlw	high (_MATRIX_DIR| (0+32768))
 10958     04D4  1803               	skipnc
 10959     04D5  3E01               	addlw	1
 10960     04D6  0085               	movwf	5
 10961     04D7  0800               	movf	0,w	;code access
 10962     04D8  00C5               	movwf	i1Matrix_update_dir@data+1
 10963                           
 10964                           ;main.c: 264:         Tx_spi(data, 2);
 10965     04D9  3044               	movlw	(low (i1Matrix_update_dir@data| 0))& (0+255)
 10966     04DA  00F4               	movwf	i1Tx_spi@data
 10967     04DB  3002               	movlw	2
 10968     04DC  00F5               	movwf	i1Tx_spi@dataSize
 10969     04DD  3000               	movlw	0
 10970     04DE  00F6               	movwf	i1Tx_spi@dataSize+1
 10971     04DF  318D  255F  3184   	fcall	i1_Tx_spi
 10972                           
 10973                           ;main.c: 265:         display_dir++;
 10974     04E2  3001               	movlw	1
 10975     04E3  0020               	movlb	0	; select bank0
 10976     04E4  07C6               	addwf	i1Matrix_update_dir@display_dir,f
 10977                           
 10978                           ;main.c: 267:     }
 10979     04E5  3001               	movlw	1
 10980     04E6  07C7               	addwf	i1Matrix_update_dir@i_1802,f
 10981     04E7  3004               	movlw	4
 10982     04E8  0247               	subwf	i1Matrix_update_dir@i_1802,w
 10983     04E9  1803               	btfsc	3,0
 10984     04EA  0008               	return
 10985     04EB  2CCE               	goto	i1l4173
 10986     04EC                     __end_ofi1_Matrix_update_dir:
 10987                           
 10988                           	psect	text80
 10989     0D6E                     __ptext80:	
 10990 ;; *************** function i1___bmul *****************
 10991 ;; Defined at:
 10992 ;;		line 4 in file "D:\Microchip\MPLABX\v6.25\xc8\v3.00\pic\sources\c99\common\Umul8.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  multiplier      1    wreg     unsigned char 
 10995 ;;  multiplicand    1    0[COMMON] unsigned char 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  multiplier      1    2[COMMON] unsigned char 
 10998 ;;  product         1    1[COMMON] unsigned char 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  1    wreg      unsigned char 
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0
 11003 ;; Tracked objects:
 11004 ;;		On entry : 1F/2
 11005 ;;		On exit  : 1F/2
 11006 ;;		Unchanged: 1F/0
 11007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11008 ;;      Params:         1       0       0       0       0       0
 11009 ;;      Locals:         2       0       0       0       0       0
 11010 ;;      Temps:          0       0       0       0       0       0
 11011 ;;      Totals:         3       0       0       0       0       0
 11012 ;;Total ram usage:        3 bytes
 11013 ;; Hardware stack levels used: 1
 11014 ;; This function calls:
 11015 ;;		Nothing
 11016 ;; This function is called by:
 11017 ;;		i1_Matrix_update_dir
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021     0D6E                     i1___bmul:	
 11022                           ;psect for function i1___bmul
 11023                           
 11024                           
 11025                           ;incstack = 0
 11026                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 11027                           ;i1___bmul@multiplier stored from wreg
 11028     0D6E  00F2               	movwf	i1___bmul@multiplier
 11029     0D6F  01F1               	clrf	i1___bmul@product
 11030     0D70                     i1l2877:
 11031     0D70  1C72               	btfss	i1___bmul@multiplier,0
 11032     0D71  2D74               	goto	i1l2881
 11033     0D72  0870               	movf	i1___bmul@multiplicand,w
 11034     0D73  07F1               	addwf	i1___bmul@product,f
 11035     0D74                     i1l2881:
 11036     0D74  1003               	clrc
 11037     0D75  0DF0               	rlf	i1___bmul@multiplicand,f
 11038     0D76  1003               	clrc
 11039     0D77  0CF2               	rrf	i1___bmul@multiplier,f
 11040     0D78  0872               	movf	i1___bmul@multiplier,w
 11041     0D79  1D03               	btfss	3,2
 11042     0D7A  2D70               	goto	i1l2877
 11043     0D7B  0871               	movf	i1___bmul@product,w
 11044     0D7C  0008               	return
 11045     0D7D                     __end_ofi1___bmul:
 11046                           
 11047                           	psect	text81
 11048     0F55                     __ptext81:	
 11049 ;; *************** function i1_Matrix_update_floor *****************
 11050 ;; Defined at:
 11051 ;;		line 227 in file "main.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  display_floo    1    wreg     unsigned char 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  display_floo    1   10[COMMON] unsigned char 
 11056 ;;  data            2    8[COMMON] unsigned char [2]
 11057 ;;  i               1   11[COMMON] unsigned char 
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      void 
 11060 ;; Registers used:
 11061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11062 ;; Tracked objects:
 11063 ;;		On entry : 1F/0
 11064 ;;		On exit  : 1F/2
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11067 ;;      Params:         0       0       0       0       0       0
 11068 ;;      Locals:         4       0       0       0       0       0
 11069 ;;      Temps:          1       0       0       0       0       0
 11070 ;;      Totals:         5       0       0       0       0       0
 11071 ;;Total ram usage:        5 bytes
 11072 ;; Hardware stack levels used: 1
 11073 ;; Hardware stack levels required when called: 2
 11074 ;; This function calls:
 11075 ;;		i1_Tx_spi
 11076 ;; This function is called by:
 11077 ;;		_ISR_Floor4
 11078 ;;		_ISR_Floor3
 11079 ;;		_ISR_Floor2
 11080 ;;		_ISR_Floor1
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084     0F55                     i1_Matrix_update_floor:	
 11085                           ;psect for function i1_Matrix_update_floor
 11086                           
 11087                           
 11088                           ;incstack = 0
 11089                           ; Regs used in i1_Matrix_update_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11090                           ;i1Matrix_update_floor@display_floor stored from wreg
 11091     0F55  00FA               	movwf	i1Matrix_update_floor@display_floor
 11092                           
 11093                           ;main.c: 228:     uint8_t data[2];;main.c: 229:     display_floor = display_floor*4;
 11094     0F56  087A               	movf	i1Matrix_update_floor@display_floor,w
 11095     0F57  00F7               	movwf	??i1_Matrix_update_floor
 11096     0F58  3002               	movlw	2
 11097     0F59                     u310_25:
 11098     0F59  35F7               	lslf	??i1_Matrix_update_floor,f
 11099     0F5A  0B89               	decfsz	9,f
 11100     0F5B  2F59               	goto	u310_25
 11101     0F5C  0877               	movf	??i1_Matrix_update_floor,w
 11102     0F5D  00FA               	movwf	i1Matrix_update_floor@display_floor
 11103                           
 11104                           ;main.c: 231:    for(uint8_t i=5;i<=8;i++){
 11105     0F5E  3005               	movlw	5
 11106     0F5F  00FB               	movwf	i1Matrix_update_floor@i
 11107     0F60                     i1l4229:
 11108                           
 11109                           ;main.c: 232:         data[0] = i;
 11110     0F60  087B               	movf	i1Matrix_update_floor@i,w
 11111     0F61  00F8               	movwf	i1Matrix_update_floor@data
 11112                           
 11113                           ;main.c: 233:         data[1] = MATRIX_FLOOR[display_floor];
 11114     0F62  087A               	movf	i1Matrix_update_floor@display_floor,w
 11115     0F63  3EFC               	addlw	low (_MATRIX_FLOOR| (0+32768))
 11116     0F64  0084               	movwf	4
 11117     0F65  3087               	movlw	high (_MATRIX_FLOOR| (0+32768))
 11118     0F66  1803               	skipnc
 11119     0F67  3E01               	addlw	1
 11120     0F68  0085               	movwf	5
 11121     0F69  0800               	movf	0,w	;code access
 11122     0F6A  00F9               	movwf	i1Matrix_update_floor@data+1
 11123                           
 11124                           ;main.c: 234:         Tx_spi(data, 2);
 11125     0F6B  3078               	movlw	(low (i1Matrix_update_floor@data| 0))& (0+255)
 11126     0F6C  00F4               	movwf	i1Tx_spi@data
 11127     0F6D  3002               	movlw	2
 11128     0F6E  00F5               	movwf	i1Tx_spi@dataSize
 11129     0F6F  3000               	movlw	0
 11130     0F70  00F6               	movwf	i1Tx_spi@dataSize+1
 11131     0F71  318D  255F  318F   	fcall	i1_Tx_spi
 11132                           
 11133                           ;main.c: 235:         display_floor++;
 11134     0F74  3001               	movlw	1
 11135     0F75  07FA               	addwf	i1Matrix_update_floor@display_floor,f
 11136                           
 11137                           ;main.c: 236:     }
 11138     0F76  3001               	movlw	1
 11139     0F77  07FB               	addwf	i1Matrix_update_floor@i,f
 11140     0F78  3009               	movlw	9
 11141     0F79  027B               	subwf	i1Matrix_update_floor@i,w
 11142     0F7A  1803               	btfsc	3,0
 11143     0F7B  0008               	return
 11144     0F7C  2F60               	goto	i1l4229
 11145     0F7D                     __end_ofi1_Matrix_update_floor:
 11146                           
 11147                           	psect	text82
 11148     0D5F                     __ptext82:	
 11149 ;; *************** function i1_Tx_spi *****************
 11150 ;; Defined at:
 11151 ;;		line 203 in file "main.c"
 11152 ;; Parameters:    Size  Location     Type
 11153 ;;  data            1    4[COMMON] PTR unsigned char 
 11154 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 11155 ;;		 -> Ini_matrix@data(2), 
 11156 ;;  dataSize        2    5[COMMON] unsigned int 
 11157 ;; Auto vars:     Size  Location     Type
 11158 ;;		None
 11159 ;; Return value:  Size  Location     Type
 11160 ;;                  1    wreg      void 
 11161 ;; Registers used:
 11162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 1D/0
 11165 ;;		On exit  : 1F/2
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11168 ;;      Params:         3       0       0       0       0       0
 11169 ;;      Locals:         0       0       0       0       0       0
 11170 ;;      Temps:          0       0       0       0       0       0
 11171 ;;      Totals:         3       0       0       0       0       0
 11172 ;;Total ram usage:        3 bytes
 11173 ;; Hardware stack levels used: 1
 11174 ;; Hardware stack levels required when called: 1
 11175 ;; This function calls:
 11176 ;;		i1_SPI1_ExchangeBlock
 11177 ;; This function is called by:
 11178 ;;		i1_Matrix_update_floor
 11179 ;;		i1_Matrix_update_dir
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183     0D5F                     i1_Tx_spi:	
 11184                           ;psect for function i1_Tx_spi
 11185                           
 11186                           
 11187                           ;main.c: 204:     LATBbits.LATB1 = 0;
 11188                           
 11189                           ;incstack = 0
 11190                           ; Regs used in i1_Tx_spi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11191     0D5F  0022               	movlb	2	; select bank2
 11192     0D60  108D               	bcf	13,1	;volatile
 11193                           
 11194                           ;main.c: 205:     __nop();
 11195     0D61  0000               	nop
 11196                           
 11197                           ;main.c: 206:     __nop();
 11198     0D62  0000               	nop
 11199                           
 11200                           ;main.c: 207:     SPI1_ExchangeBlock(data,dataSize);
 11201     0D63  0874               	movf	i1Tx_spi@data,w
 11202     0D64  00F0               	movwf	i1SPI1_ExchangeBlock@block
 11203     0D65  0876               	movf	i1Tx_spi@dataSize+1,w
 11204     0D66  00F2               	movwf	i1SPI1_ExchangeBlock@blockSize+1
 11205     0D67  0875               	movf	i1Tx_spi@dataSize,w
 11206     0D68  00F1               	movwf	i1SPI1_ExchangeBlock@blockSize
 11207     0D69  318E  26ED         	fcall	i1_SPI1_ExchangeBlock
 11208                           
 11209                           ;main.c: 208:     LATBbits.LATB1 = 1;
 11210     0D6B  0022               	movlb	2	; select bank2
 11211     0D6C  148D               	bsf	13,1	;volatile
 11212     0D6D  0008               	return
 11213     0D6E                     __end_ofi1_Tx_spi:
 11214                           
 11215                           	psect	text83
 11216     0EED                     __ptext83:	
 11217 ;; *************** function i1_SPI1_ExchangeBlock *****************
 11218 ;; Defined at:
 11219 ;;		line 100 in file "mcc_generated_files/spi1.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  block           1    0[COMMON] PTR void 
 11222 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 11223 ;;		 -> Ini_matrix@data(2), 
 11224 ;;  blockSize       2    1[COMMON] unsigned int 
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;  data            1    3[COMMON] PTR unsigned char 
 11227 ;;		 -> i1Matrix_update_dir@data(2), i1Matrix_update_floor@data(2), Matrix_update_dir@data(2), Matrix_update_floor@data(
      +2), 
 11228 ;;		 -> Ini_matrix@data(2), 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11238 ;;      Params:         3       0       0       0       0       0
 11239 ;;      Locals:         1       0       0       0       0       0
 11240 ;;      Temps:          0       0       0       0       0       0
 11241 ;;      Totals:         4       0       0       0       0       0
 11242 ;;Total ram usage:        4 bytes
 11243 ;; Hardware stack levels used: 1
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		i1_Tx_spi
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251     0EED                     i1_SPI1_ExchangeBlock:	
 11252                           ;psect for function i1_SPI1_ExchangeBlock
 11253                           
 11254                           
 11255                           ;mcc_generated_files/spi1.c: 100: void SPI1_ExchangeBlock(void *block, size_t blockSize)
      +                          ;mcc_generated_files/spi1.c: 101: {;mcc_generated_files/spi1.c: 102:     uint8_t *data =
      +                           block;
 11256                           
 11257                           ;incstack = 0
 11258                           ; Regs used in i1_SPI1_ExchangeBlock: [wreg+fsr1l+fsr1h+status,2+status,0]
 11259     0EED  0870               	movf	i1SPI1_ExchangeBlock@block,w
 11260     0EEE  00F3               	movwf	i1SPI1_ExchangeBlock@data
 11261     0EEF                     i1l4115:	
 11262                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11263                           
 11264                           
 11265                           ;mcc_generated_files/spi1.c: 103:     while(blockSize--)
 11266     0EEF  3001               	movlw	1
 11267     0EF0  02F1               	subwf	i1SPI1_ExchangeBlock@blockSize,f
 11268     0EF1  3000               	movlw	0
 11269     0EF2  3BF2               	subwfb	i1SPI1_ExchangeBlock@blockSize+1,f
 11270     0EF3  0A71               	incf	i1SPI1_ExchangeBlock@blockSize,w
 11271     0EF4  1903               	btfsc	3,2
 11272     0EF5  0A72               	incf	i1SPI1_ExchangeBlock@blockSize+1,w
 11273     0EF6  1903               	btfsc	3,2
 11274     0EF7  0008               	return
 11275                           
 11276                           ;mcc_generated_files/spi1.c: 104:     {;mcc_generated_files/spi1.c: 105:         SSP1BUF
      +                           = *data;
 11277     0EF8  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11278     0EF9  0086               	movwf	6
 11279     0EFA  0187               	clrf	7
 11280     0EFB  0801               	movf	1,w
 11281     0EFC  0024               	movlb	4	; select bank4
 11282     0EFD  0091               	movwf	17	;volatile
 11283     0EFE                     i1l484:	
 11284                           ;mcc_generated_files/spi1.c: 106:         while(!PIR1bits.SSP1IF){LATBbits.LATB1 = 0;};
 11285                           
 11286     0EFE  0020               	movlb	0	; select bank0
 11287     0EFF  1991               	btfsc	17,3	;volatile
 11288     0F00  2F04               	goto	i1l486
 11289     0F01  0022               	movlb	2	; select bank2
 11290     0F02  108D               	bcf	13,1	;volatile
 11291     0F03  2EFE               	goto	i1l484
 11292     0F04                     i1l486:
 11293                           
 11294                           ;mcc_generated_files/spi1.c: 107:         PIR1bits.SSP1IF = 0;
 11295     0F04  1191               	bcf	17,3	;volatile
 11296                           
 11297                           ;mcc_generated_files/spi1.c: 108:         *data++ = SSP1BUF;
 11298     0F05  0873               	movf	i1SPI1_ExchangeBlock@data,w
 11299     0F06  0086               	movwf	6
 11300     0F07  0187               	clrf	7
 11301     0F08  0024               	movlb	4	; select bank4
 11302     0F09  0811               	movf	17,w	;volatile
 11303     0F0A  0081               	movwf	1
 11304     0F0B  3001               	movlw	1
 11305     0F0C  07F3               	addwf	i1SPI1_ExchangeBlock@data,f
 11306     0F0D  2EEF               	goto	i1l4115
 11307     0F0E                     __end_ofi1_SPI1_ExchangeBlock:
 11308                           
 11309                           	psect	text84
 11310     0CDE                     __ptext84:	
 11311 ;; *************** function _ADC_ISR *****************
 11312 ;; Defined at:
 11313 ;;		line 145 in file "mcc_generated_files/adc.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;		None
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  1    wreg      void 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0, pclath, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 1F/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11327 ;;      Params:         0       0       0       0       0       0
 11328 ;;      Locals:         0       0       0       0       0       0
 11329 ;;      Temps:          0       0       0       0       0       0
 11330 ;;      Totals:         0       0       0       0       0       0
 11331 ;;Total ram usage:        0 bytes
 11332 ;; Hardware stack levels used: 1
 11333 ;; Hardware stack levels required when called: 1
 11334 ;; This function calls:
 11335 ;;		NULL
 11336 ;;		_ADC_DefaultInterruptHandler
 11337 ;; This function is called by:
 11338 ;;		_INTERRUPT_InterruptManager
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342     0CDE                     _ADC_ISR:	
 11343                           ;psect for function _ADC_ISR
 11344                           
 11345                           
 11346                           ;mcc_generated_files/adc.c: 148:     PIR1bits.ADIF = 0;
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
 11350     0CDE  1311               	bcf	17,6	;volatile
 11351                           
 11352                           ;mcc_generated_files/adc.c: 150:  if(ADC_InterruptHandler)
 11353     0CDF  0021               	movlb	1	; select bank1
 11354     0CE0  0857               	movf	_ADC_InterruptHandler^(0+128),w
 11355     0CE1  0458               	iorwf	(_ADC_InterruptHandler+1)^(0+128),w
 11356     0CE2  1903               	btfsc	3,2
 11357     0CE3  0008               	return
 11358                           
 11359                           ;mcc_generated_files/adc.c: 151:     {;mcc_generated_files/adc.c: 152:         ADC_Inter
      +                          ruptHandler();
 11360     0CE4  0858               	movf	(_ADC_InterruptHandler+1)^(0+128),w
 11361     0CE5  008A               	movwf	10
 11362     0CE6  0857               	movf	_ADC_InterruptHandler^(0+128),w
 11363     0CE7  000A               	callw
 11364     0CE8  318C               	pagesel	$
 11365     0CE9  0008               	return
 11366     0CEA                     __end_of_ADC_ISR:
 11367                           
 11368                           	psect	text85
 11369     0C09                     __ptext85:	
 11370 ;; *************** function _ADC_DefaultInterruptHandler *****************
 11371 ;; Defined at:
 11372 ;;		line 160 in file "mcc_generated_files/adc.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;		None
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		None
 11381 ;; Tracked objects:
 11382 ;;		On entry : 1F/1
 11383 ;;		On exit  : 1F/1
 11384 ;;		Unchanged: 1F/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
 11386 ;;      Params:         0       0       0       0       0       0
 11387 ;;      Locals:         0       0       0       0       0       0
 11388 ;;      Temps:          0       0       0       0       0       0
 11389 ;;      Totals:         0       0       0       0       0       0
 11390 ;;Total ram usage:        0 bytes
 11391 ;; Hardware stack levels used: 1
 11392 ;; This function calls:
 11393 ;;		Nothing
 11394 ;; This function is called by:
 11395 ;;		_ADC_Initialize
 11396 ;;		_ADC_ISR
 11397 ;; This function uses a non-reentrant model
 11398 ;;
 11399                           
 11400     0C09                     _ADC_DefaultInterruptHandler:	
 11401                           ;psect for function _ADC_DefaultInterruptHandler
 11402                           
 11403                           
 11404                           ;incstack = 0
 11405                           ; Regs used in _ADC_DefaultInterruptHandler: []
 11406     0C09  0008               	return
 11407     0C0A                     __end_of_ADC_DefaultInterruptHandler:
 11408     0001                     ___latbits      equ	1
 11409     007E                     btemp           set	126	;btemp
 11410     007E                     int$flags       set	126
 11411     007E                     wtemp0          set	126
 11412                           
 11413                           	psect	config
 11414                           
 11415                           ;Config register CONFIG1 @ 0x8007
 11416                           ;	Oscillator Selection
 11417                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 11418                           ;	Watchdog Timer Enable
 11419                           ;	WDTE = OFF, WDT disabled
 11420                           ;	Power-up Timer Enable
 11421                           ;	PWRTE = OFF, PWRT disabled
 11422                           ;	MCLR Pin Function Select
 11423                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 11424                           ;	Flash Program Memory Code Protection
 11425                           ;	CP = OFF, Program memory code protection is disabled
 11426                           ;	Data Memory Code Protection
 11427                           ;	CPD = OFF, Data memory code protection is disabled
 11428                           ;	Brown-out Reset Enable
 11429                           ;	BOREN = ON, Brown-out Reset enabled
 11430                           ;	Clock Out Enable
 11431                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 11432                           ;	Internal/External Switchover
 11433                           ;	IESO = ON, Internal/External Switchover mode is enabled
 11434                           ;	Fail-Safe Clock Monitor Enable
 11435                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 11436     8007                     	org	32775
 11437     8007  3FE4               	dw	16356
 11438                           
 11439                           ;Config register CONFIG2 @ 0x8008
 11440                           ;	Flash Memory Self-Write Protection
 11441                           ;	WRT = OFF, Write protection off
 11442                           ;	PLL Enable
 11443                           ;	PLLEN = OFF, 4x PLL disabled
 11444                           ;	Stack Overflow/Underflow Reset Enable
 11445                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 11446                           ;	Brown-out Reset Voltage Selection
 11447                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 11448                           ;	In-Circuit Debugger Mode
 11449                           ;	DEBUG = 0x1, unprogrammed default
 11450                           ;	Low-Voltage Programming Enable
 11451                           ;	LVP = ON, Low-voltage programming enabled
 11452     8008                     	org	32776
 11453     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    47
    Data        29
    BSS         63
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      61
    BANK1            80     23      79
    BANK2            80      3      24
    BANK3            80      0       0
    BANK4            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), NULL(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Read_UART(), 

    IOCBF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), NULL(), 

    IOCBF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF0_DefaultInterruptHandler(), ISR_Floor1(), 

    IOCBF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), NULL(), 

    IOCBF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF3_DefaultInterruptHandler(), ISR_Floor2(), 

    SPI1_ExchangeBlock@block	PTR void  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    SPI1_ExchangeBlock@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Write_UART(), 

    Tx_spi@data	PTR unsigned char  size(1) Largest target is 2
		 -> Ini_matrix@data(BANK1[2]), Matrix_update_dir@data(BANK1[2]), Matrix_update_floor@data(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _Update_tx_buffer->___lwdiv
    ___wmul->_TMR0_ReadTimer
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    ___lbmod->___lbdiv
    ___awdiv->___wmul
    _Read_UART->_New_request
    _New_request->i1_Matrix_update_dir
    _ISR_Floor2->i1_Matrix_update_floor
    _ISR_Floor1->i1_Matrix_update_floor
    _ISR_Floor4->i1_Matrix_update_floor
    _ISR_Floor3->i1_Matrix_update_floor
    i1_Motor_Turn_On->i1_Matrix_update_dir
    i1_Motor_Turn_Off->i1_Matrix_update_dir
    i1_Matrix_update_dir->i1_Tx_spi
    i1_Matrix_update_floor->i1_Tx_spi
    i1_Tx_spi->i1_SPI1_ExchangeBlock

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_Read_UART
    _TMR1_CallBack->_Write_UART
    _Write_UART->_Update_tx_buffer
    _Update_tx_buffer->___lwmod
    _Read_UART->_New_request
    _New_request->i1_Matrix_update_dir
    i1_Motor_Turn_On->i1_Matrix_update_dir
    i1_Motor_Turn_Off->i1_Matrix_update_dir

Critical Paths under _main in BANK1

    _main->_Start
    _Matrix_update_floor->_Tx_spi
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF3_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _ADC_Initialize->_ADC_SetInterruptHandler
    _Next_index->___awmod
    _Next_floor->___awmod
    _Ini_matrix->_Tx_spi
    _Motor_Turn_On->_Matrix_update_dir
    _Motor_Turn_Off->_Matrix_update_dir
    _Matrix_update_dir->_Tx_spi
    _Tx_spi->_SPI1_ExchangeBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    9515
                                             21 BANK1      2     2      0
                                              0 BANK2      3     3      0
       _EUSART_SetRxInterruptHandler
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
                               _Idle
                         _Ini_matrix
                     _Motor_Turn_Off
                      _Motor_Turn_On
                         _Next_floor
                         _Next_index
                        _Route_empty
                          _SPI1_Open
                  _SYSTEM_Initialize
                              _Start
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _Start                                                2     2      0    2622
                                             19 BANK1      2     2      0
                _Matrix_update_floor
                     _Motor_Turn_Off
                      _Motor_Turn_On
                        _TMR0_Reload
 ---------------------------------------------------------------------------------
 (2) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Matrix_update_floor                                  5     5      0     522
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     284
                     _ADC_Initialize
                    _CMP1_Initialize
                    _CMP2_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR6_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      37
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      74
         _IOCBF0_SetInterruptHandler
         _IOCBF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF3_SetInterruptHandler                           2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCBF0_SetInterruptHandler                           2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     139
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      37
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CMP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0      34
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC_SetInterruptHandler                              2     0      2      34
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _SPI1_Open                                            4     4      0     188
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Route_empty                                          3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Next_index                                           5     5      0     643
                                              6 BANK1      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Next_floor                                           5     5      0     609
                                              6 BANK1      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     445
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Ini_matrix                                           5     5      0     654
                                              7 BANK1      5     5      0
                             _Tx_spi
 ---------------------------------------------------------------------------------
 (1) _Idle                                                 0     0      0    2100
                     _Motor_Turn_Off
                      _Motor_Turn_On
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_On                                        0     0      0    1050
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (2) _Motor_Turn_Off                                       0     0      0    1050
                  _Matrix_update_dir
 ---------------------------------------------------------------------------------
 (3) _Matrix_update_dir                                   12    12      0    1050
                                              7 BANK1     12    12      0
                             _Tx_spi
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     174
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Tx_spi                                               3     0      3     228
                                              4 BANK1      3     0      3
                 _SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (5) _SPI1_ExchangeBlock                                   4     1      3     136
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0   13472
                                NULL *
                            _ADC_ISR
                           _CMP1_ISR
                           _CMP2_ISR
                 _EUSART_Receive_ISR *
                    _PIN_MANAGER_IOC
                          _Read_UART *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0    1310
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (8) _TMR1_WriteTimer                                      2     0      2      91
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0    1219
                                NULL *
       _TMR1_DefaultInterruptHandler *
                         _Write_UART *
 ---------------------------------------------------------------------------------
 (9) _Write_UART                                           3     3      0    1219
                                              7 BANK0      3     3      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
                   _Update_tx_buffer
 ---------------------------------------------------------------------------------
 (10) _Update_tx_buffer                                    2     2      0    1114
                                              5 BANK0      2     2      0
                     _TMR0_ReadTimer
                            ___awdiv
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             ___wmul
                      i1_TMR0_Reload
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     100
                                              1 COMMON     6     2      4
                     _TMR0_ReadTimer (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     171
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     174
                                              7 COMMON     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             5     4      1     170
                                              4 COMMON     5     4      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lbdiv                                             4     3      1     172
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             8     4      4     304
                                              7 COMMON     4     0      4
                                              0 BANK0      4     4      0
                     _TMR0_ReadTimer (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) _TMR0_ReadTimer                                      1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_is_tx_ready                                  1     1      0       8
 ---------------------------------------------------------------------------------
 (10) _EUSART_Write                                        1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Read_UART                                            5     5      0    2454
                                             12 COMMON     1     1      0
                                             26 BANK0      4     4      0
                        _EUSART_Read
                 _EUSART_Receive_ISR
                        _New_request
 ---------------------------------------------------------------------------------
 (8) _New_request                                         19    15      4    2356
                                              8 COMMON     4     0      4
                                             11 BANK0     15    15      0
                i1_Matrix_update_dir
                          i1___awmod
 ---------------------------------------------------------------------------------
 (9) i1___awmod                                            6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (9) _EUSART_RxDataHandler                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Read                                          1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0    4854
                         _IOCBF0_ISR
                         _IOCBF3_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCBF3_ISR                                           0     0      0    2427
                                NULL *
     _IOCBF3_DefaultInterruptHandler *
                         _ISR_Floor2 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor2                                           0     0      0    2427
              i1_Matrix_update_floor
                   i1_Motor_Turn_Off
                    i1_Motor_Turn_On
 ---------------------------------------------------------------------------------
 (9) _IOCBF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCBF0_ISR                                           0     0      0    2427
                                NULL *
     _IOCBF0_DefaultInterruptHandler *
                         _ISR_Floor1 *
 ---------------------------------------------------------------------------------
 (9) _ISR_Floor1                                           0     0      0    2427
              i1_Matrix_update_floor
                   i1_Motor_Turn_Off
                    i1_Motor_Turn_On
                      i1_TMR0_Reload
 ---------------------------------------------------------------------------------
 (9) _IOCBF0_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CMP2_ISR                                             0     0      0    2427
                         _ISR_Floor4
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor4                                           0     0      0    2427
              i1_Matrix_update_floor
                   i1_Motor_Turn_Off
                    i1_Motor_Turn_On
                      i1_TMR0_Reload
 ---------------------------------------------------------------------------------
 (11) i1_TMR0_Reload                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CMP1_ISR                                             0     0      0    2427
                         _ISR_Floor3
 ---------------------------------------------------------------------------------
 (8) _ISR_Floor3                                           0     0      0    2427
              i1_Matrix_update_floor
                   i1_Motor_Turn_Off
                    i1_Motor_Turn_On
 ---------------------------------------------------------------------------------
 (10) i1_Motor_Turn_On                                     0     0      0     963
                i1_Matrix_update_dir
 ---------------------------------------------------------------------------------
 (10) i1_Motor_Turn_Off                                    0     0      0     963
                i1_Matrix_update_dir
 ---------------------------------------------------------------------------------
 (9) i1_Matrix_update_dir                                 12    12      0     963
                                              7 COMMON     1     1      0
                                              0 BANK0     11    11      0
                           i1_Tx_spi
                           i1___bmul
 ---------------------------------------------------------------------------------
 (10) i1___bmul                                            3     2      1     108
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_Matrix_update_floor                               5     5      0     501
                                              7 COMMON     5     5      0
                           i1_Tx_spi
 ---------------------------------------------------------------------------------
 (10) i1_Tx_spi                                            3     0      3     216
                                              4 COMMON     3     0      3
               i1_SPI1_ExchangeBlock
 ---------------------------------------------------------------------------------
 (11) i1_SPI1_ExchangeBlock                                4     1      3     136
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
                                NULL *
        _ADC_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _ADC_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _IOCBF0_SetInterruptHandler
   _IOCBF3_SetInterruptHandler
   _Idle
     _Motor_Turn_Off
       _Matrix_update_dir
         _Tx_spi
           _SPI1_ExchangeBlock
         ___bmul
     _Motor_Turn_On
       _Matrix_update_dir
   _Ini_matrix
     _Tx_spi
   _Motor_Turn_Off
   _Motor_Turn_On
   _Next_floor
     ___awmod
   _Next_index
     ___awmod
   _Route_empty
   _SPI1_Open
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _CMP1_Initialize
     _CMP2_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF0_SetInterruptHandler
       _IOCBF3_SetInterruptHandler
     _PWM3_Initialize
     _SPI1_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR6_Initialize
     _WDT_Initialize
   _Start
     _Matrix_update_floor
       _Tx_spi
     _Motor_Turn_Off
     _Motor_Turn_On
     _TMR0_Reload
   _TMR1_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _ADC_ISR *
     NULL(Fake) *
     _ADC_DefaultInterruptHandler *
   _CMP1_ISR *
     _ISR_Floor3
       i1_Matrix_update_floor
         i1_Tx_spi
           i1_SPI1_ExchangeBlock
       i1_Motor_Turn_Off
         i1_Matrix_update_dir
           i1_Tx_spi
           i1___bmul
       i1_Motor_Turn_On
         i1_Matrix_update_dir
   _CMP2_ISR *
     _ISR_Floor4
       i1_Matrix_update_floor
       i1_Motor_Turn_Off
       i1_Motor_Turn_On
       i1_TMR0_Reload
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _PIN_MANAGER_IOC *
     _IOCBF0_ISR
       NULL(Fake) *
       _IOCBF0_DefaultInterruptHandler *
       _ISR_Floor1 *
         i1_Matrix_update_floor
         i1_Motor_Turn_Off
         i1_Motor_Turn_On
         i1_TMR0_Reload
     _IOCBF3_ISR
       NULL(Fake) *
       _IOCBF3_DefaultInterruptHandler *
       _ISR_Floor2 *
         i1_Matrix_update_floor
         i1_Motor_Turn_Off
         i1_Motor_Turn_On
   _Read_UART *
     _EUSART_Read
     _EUSART_Receive_ISR
     _New_request
       i1_Matrix_update_dir
       i1___awmod
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Write_UART *
         _EUSART_Write
         _EUSART_is_tx_ready
         _Update_tx_buffer
           _TMR0_ReadTimer
           ___awdiv
             _TMR0_ReadTimer (ARG)
             ___wmul (ARG)
               _TMR0_ReadTimer (ARG)
           ___lbdiv
           ___lbmod
             ___lbdiv (ARG)
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           i1_TMR0_Reload
     _TMR1_WriteTimer

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            32      0       0      0.0%
BIGRAM             352      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     30      61     76.2%
BANK1               80     23      79     98.8%
BANK2               80      3      24     30.0%
BANK3               80      0       0      0.0%
BANK4               32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     178      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Jul 15 08:32:08 2025

                ?_EUSART_SetRxInterruptHandler 00C0                          __end_ofi1_TMR0_Reload 0C14  
             ??_IOCBF3_DefaultInterruptHandler 0070                ?_IOCBF3_DefaultInterruptHandler 0070  
                           _SPI1_ExchangeBlock 0F0E                                 ___bmul@product 00C1  
                            ??_CMP1_Initialize 00C0                                   ___awdiv@sign 0040  
                       __end_of_FVR_Initialize 0C1C                            ___wmul@multiplicand 0073  
                              _timer0ReloadVal 0035                                            l484 0F1F  
                                          l486 0F25                                            l948 0DCE  
                                          l997 03C2                                            _PR2 001B  
                                          _PR6 041D                            ?_SPI1_ExchangeBlock 00C0  
                              _timer1ReloadVal 002F                         ??_EUSART_RxDataHandler 0070  
                              __end_of_ADC_ISR 0CEA                                            _var 0020  
               ?_EUSART_SetFramingErrorHandler 00C0                __end_of_ADC_SetInterruptHandler 0C2E  
                                 ___awmod@sign 00C5                                _TMR2_Initialize 0C71  
                                          wreg 0009                               ?i1_Motor_Turn_On 0070  
                      SPI1_ExchangeBlock@block 00C0                   ?_ADC_DefaultInterruptHandler 0070  
                     __end_of_Update_tx_buffer 01EA                                   ?_EUSART_Read 0070  
                                         l4131 0F10                                           l4193 0DA0  
                                         l4281 0430                                           l4273 0418  
                                         l4197 0DA4                                           l4269 0407  
                                         l4297 0455                                           l4801 0684  
                                         l4625 07DE                                           l4645 0599  
                                         l4671 05CD                                           l4663 05BC  
                                         l4657 05A6                                           l4649 05A0  
                                         l4753 0E94                                           l4659 05B0  
                                         l4667 05C5                                           l4861 069A  
                                         l4781 072F                                           l4773 0710  
                                         l4791 065C                                           l4759 0E9E  
                                         l4951 039A                                           l4943 0385  
                                         l4777 072C                                           l4961 03C7  
                                         l4939 03E6                                           l4879 06C2  
                                         l4959 03C4                                           _LATA 010C  
                                         _LATB 010D                                           u3134 0414  
                                         u3135 0413                                           u3145 0425  
                                         u3415 05A9                              ??_CMP2_Initialize 00C0  
                                         u3435 05B6                                           u3445 05BD  
                                         u3525 0EAB                                           u3365 07D7  
                                         u3545 073C                                           u3565 0691  
                                         u3777 0393                                           u3787 03DF  
                                         u3797 0784                                           _TMR0 0015  
                                         _TMR2 001A                                           _TMR6 041C  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _Idle 0DBF                                           _idle 003A  
                                         _main 0357                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                         ??_SPI1_ExchangeBlock 00C3                      i1SPI1_ExchangeBlock@block 0070  
                                         start 003F                              ?i1_Motor_Turn_Off 0070  
                             __end_of_CMP1_ISR 0C8A                               __end_of_CMP2_ISR 0C93  
                   ??_TMR1_SetInterruptHandler 00C2                              ___bmul@multiplier 00C2  
                                _MATRIX_CONFIG 080C                                   i1Tx_spi@data 0074  
                           ??i1_Motor_Turn_Off 0078                   Matrix_update_dir@display_dir 00CD  
                                  Ini_matrix@i 00C7                                    Ini_matrix@k 00CA  
                                  ?_ISR_Floor1 0070                                    ?_ISR_Floor2 0070  
                                  ?_ISR_Floor3 0070                                    ?_ISR_Floor4 0070  
                      __end_of_TMR0_Initialize 0C9D                                ?_FVR_Initialize 0070  
                                ?_EUSART_Write 0070                                          ?_Idle 0070  
                __end_of_OSCILLATOR_Initialize 0C57                                          ?_main 0070  
                              __end_of___awdiv 058F                                __end_of___lbdiv 0EED  
                              __end_of___awmod 05D2                                __end_of___lbmod 0E76  
             SPI1_Open@spi1UniqueConfiguration 00C3                                ___awdiv@divisor 0077  
                                        _T1CON 0018                                          _T2CON 001C  
                                        _T6CON 041E                                __end_of___lwdiv 0771  
                              __end_of___lwmod 0FA7                                          i1l279 003D  
                                        i1l484 0EFE                                          i1l486 0F04  
                                        i1l593 0C64                                          i1l913 00E3  
                                        i1l916 011C                                ___awdiv@counter 003F  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _TRISA 008C                                          _TRISB 008D  
                                 main@is_empty 0137                                          _TXREG 019A  
                                        _TXSTA 019E                               __end_of_TMR1_ISR 0E5B  
                                        _Start 0771                                 i1___awmod@sign 0075  
                             i1Tx_spi@dataSize 0075                        __end_of_PIN_MANAGER_IOC 0CBD  
                               _WDT_Initialize 0C1C                                          _index 003E  
                                        _route 0027                    __end_ofi1_Matrix_update_dir 04EC  
                             __end_ofi1___bmul 0D7D                               __end_ofi1_Tx_spi 0D6E  
                      __end_of_PWM3_Initialize 0D43                        __end_of_TMR1_Initialize 0E2A  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                ___lbdiv@divisor 0070  
                                 Route_empty@i 00C1                                _TMR1_WriteTimer 0D43  
                              ___lbdiv@counter 0072                                  ??_New_request 004A  
                                   _Ini_matrix 0697                                   __end_of_Idle 0DD3  
                              __initialization 0041                                   __end_of_main 03F2  
                               ??_EUSART_Write 0070                        __end_of_TMR2_Initialize 0C79  
                                    ??_ADC_ISR 0070                    ?_INTERRUPT_InterruptManager 0070  
                                       ??_Idle 00D3                 ??_EUSART_SetRxInterruptHandler 00C2  
                                       ??_main 00D5                          __end_of_Motor_Turn_On 0D36  
                      _IOCBF0_InterruptHandler 00E5                         __end_of_WDT_Initialize 0C20  
                              _TMR6_Initialize 0C9D                                         ?_Start 0070  
                      ??i1_Matrix_update_floor 0077      __end_of_EUSART_DefaultFramingErrorHandler 0C0D  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0C0C                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 00DD  
                                       _ADRESH 009C                                         _ADRESL 009B  
                                       _CCPR3H 0312                                         _CCPR3L 0311  
                             ___awdiv@dividend 0079                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                                     _Next_floor 0657  
                                   _Next_index 070B                                         _FLOORS 0821  
                      TMR1_WriteTimer@timerVal 0070                                         i1l1155 0E7E  
                                       i1l3021 0763                                         i1l3013 0747  
                                       i1l3015 0751                                         i1l3025 076C  
                                       i1l3043 0F99                                         i1l1373 0E70  
                                       i1l3037 0F83                                         i1l3141 0091  
                                       i1l3133 0081                                         i1l3039 0F8D  
                                       i1l3047 0FA2                                         i1l3151 00C3  
                                       i1l3145 009C                                         i1l4115 0EEF  
                                       i1l3403 0610                                         i1l3139 008E  
                                       i1l3325 0F37                                         i1l3159 00FC  
                                       i1l4145 0481                                         i1l3601 06EA  
                                       i1l3611 0708                                         i1l4229 0F60  
                                       i1l4173 04CE                                         i1l4157 04A9  
                                       i1l4149 0492                                         i1l3381 05E3  
                                       i1l3621 0D4C                                         i1l3391 05F3  
                                       i1l3607 06F9                                         i1l3377 05DC  
                                       i1l2905 0E78                                         i1l3395 05FF  
                                       i1l4603 0312                                         i1l2931 0555  
                                       i1l3573 0EAF                                         i1l3389 05E9  
                                       i1l4605 0321                                         i1l4541 0208  
                                       i1l2941 055D                                         i1l2925 054C  
                                       i1l3399 0608                                         i1l4551 0248  
                                       i1l2943 0567                                         i1l2881 0D74  
                                       i1l4481 0D26                                         i1l2953 0582  
                                       i1l4475 0D19                                         i1l2971 0ED5  
                                       i1l2877 0D70                                         i1l4581 02A6  
                                       i1l4573 02A0                                         i1l4565 0278  
                                       i1l4557 024B                                         i1l4549 0235  
                                       i1l2957 058A                                         i1l2949 0579  
                                       i1l2973 0EDC                                         i1l4901 0017  
                                       i1l4567 0287                                         i1l4743 0652  
                                       i1l2983 0EEB                                         i1l2991 0E5F  
                                       i1l4913 002C                                         i1l4595 02E5  
                                       i1l4587 02CF                                         i1l4907 0023  
                                       i1l4589 02E2                                         u205_25 00ED  
                                       i1l4919 0035                                         i1l4697 0CB8  
                                       u302_24 048E                                         u310_25 0F59  
                                       u302_25 048D                                         u222_25 05EC  
                                       i1l4893 000C                                         u303_25 049F  
                                       u224_25 05F9                                         u225_25 0600  
                                       u321_25 01F0                                         u330_25 02E0  
                                       u322_25 01FC                                         u162_25 0560  
                                       u218_25 0F52                                         _FVRCON 0117  
                                       u331_25 0309                                         u323_25 0228  
                                       u332_25 031F                                         u324_25 0246  
                                       u164_25 0568                                         u180_25 075C  
                                       u156_25 0E7F                     __end_of_EUSART_is_tx_ready 0C71  
                                       u333_20 032C                                         u333_22 032D  
                                       u325_25 026F                                         u165_25 0572  
                                       u173_25 0E62                                         u181_25 0764  
                                       u157_25 0E84                                         u334_20 033C  
                                       u334_22 033D                                         u334_25 0338  
                                       u326_25 0285                                         u166_25 057A  
                                       u327_25 0292                                         u184_25 0F86  
                                       u329_25 02C6                                         u177_25 074A  
                                       u186_25 0F93                                         u179_25 0752  
                                       u187_25 0F9A                                         u380_27 0347  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                            __end_of_SPI1_Open 0542                                   Read_UART@ori 0059  
         __end_of_TMR1_DefaultInterruptHandler 0004                   _TMR1_DefaultInterruptHandler 0003  
                                 _CCPTMRS0bits 029E                                   ?_TMR0_Reload 0070  
                                       ___bmul 0D9D                                         _Tx_spi 0D8D  
                                       ___wmul 0E76                                      ??___awdiv 007B  
                                    ??___lbdiv 0071                                      ??___awmod 00C4  
                                    ??___lbmod 0075                                      ??___lwdiv 007B  
                                    ??___lwmod 007E                            __end_of_New_request 0357  
                             ?_TMR0_Initialize 0070                               ___awdiv@quotient 0041  
                              ___awmod@divisor 00C0                                ___awmod@counter 00C4  
                            __end_ofi1___awmod 0615                                ?_WDT_Initialize 0070  
                     i1SPI1_ExchangeBlock@data 0073                                      ?_CMP1_ISR 0070  
                                    ?_CMP2_ISR 0070        ADC_SetInterruptHandler@InterruptHandler 00C0  
     TMR1_SetInterruptHandler@InterruptHandler 00C0     IOCBF3_SetInterruptHandler@InterruptHandler 00C0  
   IOCBF0_SetInterruptHandler@InterruptHandler 00C0                               ?_PIN_MANAGER_IOC 0070  
                      __end_of_TMR1_WriteTimer 0D51                               ___lbdiv@dividend 0071  
                                 ??_IOCBF0_ISR 007C                                   ??_IOCBF3_ISR 007C  
                        __end_of_TMR1_CallBack 0CC8                               ?_TMR1_Initialize 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 0FA7  
                              ___lbmod@divisor 0074                        __end_of__initialization 0068  
                              ___lbmod@counter 0077                                _CMP1_Initialize 0CEA  
                           ?_SYSTEM_Initialize 0070                                    ?_Ini_matrix 0070  
                               _Motor_Turn_Off 0CC8                            ___bmul@multiplicand 00C0  
                               __pcstackCOMMON 0070                                  __end_of_Start 07A2  
                                   _Write_UART 0F31                                   __pidataBANK1 0C79  
                                 __pidataBANK2 0DE8                            ??_SYSTEM_Initialize 00C2  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                            ??_SPI1_Initialize 00C0         __end_of_IOCBF0_DefaultInterruptHandler 0C0B  
               _IOCBF0_DefaultInterruptHandler 0C0A                  i1Matrix_update_dir@route_leds 0043  
                                  Next_floor@i 00C9                                    Next_index@i 00C9  
                             ?_TMR2_Initialize 0070                        __end_of_TMR6_Initialize 0CA7  
                             ___lbdiv@quotient 0073                                      ?i1___bmul 0070  
                                    ?i1_Tx_spi 0074                             __end_of_IOCBF0_ISR 0D1C  
                           __end_of_IOCBF3_ISR 0D29                              __end_of_Read_UART 0657  
                              _CMP2_Initialize 0CD3                             _spi1_configuration 0827  
                               _OPTION_REGbits 0095                                  ??_Route_empty 00C0  
                         _eusartRxStatusBuffer 00AA                              _velocidade_string 00E7  
                         __end_of_MATRIX_FLOOR 080C                                     Tx_spi@data 00C4  
                                      ??_Start 00D3                ??_EUSART_SetOverrunErrorHandler 00C2  
       __end_of_IOCBF3_DefaultInterruptHandler 0C0C                 _IOCBF3_DefaultInterruptHandler 0C0B  
                                   ??_CMP1_ISR 007C                                     ??_CMP2_ISR 007C  
                             i1___bmul@product 0071                              ?_Update_tx_buffer 0070  
                    __end_of_SYSTEM_Initialize 0FD1             i1Matrix_update_floor@display_floor 007A  
             Matrix_update_floor@display_floor 00CA                                    ?_Next_floor 0070  
                                  ?_Next_index 0070                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                                  _current_floor 003D  
                         __end_of_EUSART_Write 0C6A                             ??_Update_tx_buffer 0044  
                       __end_of_Motor_Turn_Off 0CD3                            _Matrix_update_floor 07D2  
                           __end_of_MATRIX_DIR 0821                                    _New_request 01EA  
                            _Matrix_update_dir 03F2                               ??_FVR_Initialize 00C0  
                                   __pmaintext 0357                                        ?___bmul 00C0  
                                      ?_Tx_spi 00C4                             ?_Matrix_update_dir 0070  
                                      ?___wmul 0071                                     ??_TMR1_ISR 007E  
                                   __pintentry 0004                                   ??_ISR_Floor1 007C  
                                 ??_ISR_Floor2 007C                                   ??_ISR_Floor3 007C  
                                 ??_ISR_Floor4 007C                                        _CM1CON0 0111  
                                      _CM1CON1 0112                                        _CM2CON0 0113  
                                      _CM2CON1 0114                                        _CCP3CON 0313  
                                      _ADC_ISR 0CDE                                        _BAUDCON 019F  
                                      _APFCON0 011D                                        _APFCON1 011E  
                 ??_EUSART_DefaultErrorHandler 0070                                     ??i1___bmul 0071  
                                   ??i1_Tx_spi 0077                            ??_Matrix_update_dir 00C7  
                         ?_Matrix_update_floor 0070                                  _eusartRxCount 0037  
                                      _OSCTUNE 0098                                        _SSP1ADD 0212  
                                      _SSP1BUF 0211                        __end_of_CMP1_Initialize 0CF6  
                     ??_EUSART_SetErrorHandler 00C2                               ?_TMR1_WriteTimer 0070  
                          __end_of_Route_empty 0EAF                             __end_of_ISR_Floor1 0E42  
                           __end_of_ISR_Floor2 0E13                             __end_of_ISR_Floor3 0D8D  
                           __end_of_ISR_Floor4 0DE8                                ?_Motor_Turn_Off 0070  
                    __end_of_Matrix_update_dir 0473                           _ADC_InterruptHandler 00D7  
                                Read_UART@dest 005B                        _ADC_SetInterruptHandler 0C29  
                       _uart_read_buffer_count 0033                                    ?_Write_UART 0070  
                      __end_of_CMP2_Initialize 0CDE                                        ___awdiv 0542  
                                      ___lbdiv 0ECE                                        ___awmod 058F  
                                      ___lbmod 0E5B                                        ___lwdiv 073F  
                                      ___lwmod 0F7D                                 main@next_index 0135  
                             ?_TMR6_Initialize 0070                          ??_Matrix_update_floor 00C7  
                                      __ptext1 0771                                        __ptext2 0C20  
                                      __ptext3 07D2                                        __ptext4 0FA7  
                                      __ptext5 0C1C                                        __ptext6 0C9D  
                                      __ptext7 0C71                                        __ptext8 0E13  
                                      __ptext9 0C4C                 ??_TMR1_DefaultInterruptHandler 0070  
                                    _T1CONbits 0018                          _OSCILLATOR_Initialize 0C51  
                             Ini_matrix@i_1791 00CB                               ___awmod@dividend 00C2  
                     ??_PIN_MANAGER_Initialize 00C2                      ?_TMR1_SetInterruptHandler 00C0  
                                    _IOCBFbits 0396                            i1___bmul@multiplier 0072  
                                    _IOCBNbits 0395                                      _IOCBPbits 0394  
                                      _stop_2s 003B                                        clrloop0 0C58  
                         end_of_initialization 0068                  __end_ofi1_Matrix_update_floor 0F7D  
                            New_request@i_1746 0051                              New_request@i_1747 0053  
                            New_request@i_1748 0055                                     _next_floor 003C  
        __end_of_EUSART_SetOverrunErrorHandler 0C3D                  _EUSART_SetOverrunErrorHandler 0C38  
                                      init_ram 0C5D                                   New_request@i 004F  
                                      initloop 0C5E                              _EUSART_Initialize 07A2  
                            New_request@index_ 0057                             ?_EUSART_Initialize 0070  
                        TMR0_ReadTimer@readVal 0070                              New_request@origin 0078  
                                    _RCSTAbits 019D                             _EUSART_is_tx_ready 0C6A  
                                i1_TMR0_Reload 0C10                                      _SPI1_Open 04EC  
                               _TMR0_ReadTimer 0C24                            ??_EUSART_Initialize 00C2  
                             ??_WDT_Initialize 00C0                                     _velocidade 00BA  
                          ?_EUSART_is_tx_ready 0070                               ___lbmod@dividend 0076  
          __end_of_ADC_DefaultInterruptHandler 0C0A                    _ADC_DefaultInterruptHandler 0C09  
                                  _Route_empty 0E91                                      _TRISBbits 008D  
                                    i1___awmod 05D2                   ??_IOCBF0_SetInterruptHandler 00C2  
                 ??_IOCBF3_SetInterruptHandler 00C2                               ?_CMP1_Initialize 0070  
                       SPI1_ExchangeBlock@data 00C3                                    ___lbmod@rem 0078  
                    __end_of_EUSART_Initialize 07D2                  ??_ADC_DefaultInterruptHandler 0070  
                               __end_of_FLOORS 0827                      ??_ADC_SetInterruptHandler 00C2  
                              _SPI1_Initialize 0CF6                           ??_EUSART_is_tx_ready 0070  
                                    _TXSTAbits 019E                                    _CCP3CONbits 0313  
                                 ??_Ini_matrix 00C7                              ??i1_Motor_Turn_On 0078  
                                 _MATRIX_FLOOR 07FC                         __end_of_TMR0_ReadTimer 0C29  
                               ?i1_TMR0_Reload 0070                               ?_CMP2_Initialize 0070  
                               __end_of___bmul 0DAD                                     ?_SPI1_Open 0070  
                               __end_of_Tx_spi 0D9D             __end_of_EUSART_DefaultErrorHandler 0C10  
                   _EUSART_DefaultErrorHandler 0C0D                                 __end_of___wmul 0E91  
                                 _EUSART_Write 0C63                                 _ADC_Initialize 0D51  
                       ?_OSCILLATOR_Initialize 0070                               i1_Motor_Turn_Off 0CA7  
                      i1Matrix_update_dir@data 0044                            start_initialization 0041  
                                    _Read_UART 0615                             __end_of_Ini_matrix 06D5  
                 __end_ofi1_SPI1_ExchangeBlock 0F0E                                     ?i1___awmod 0070  
                                ??_EUSART_Read 0070   EUSART_SetRxInterruptHandler@interruptHandler 00C0  
                                 ??_Next_floor 00C6                                   ??_Next_index 00C6  
                                 ?_New_request 0078                          __end_of_MATRIX_CONFIG 0818  
               ?_EUSART_SetOverrunErrorHandler 00C0                     _EUSART_FramingErrorHandler 00DF  
                                     ??___bmul 00C1                                       ??_Tx_spi 00C7  
                              ?_TMR0_ReadTimer 0070                                       ??___wmul 0075  
                       _EUSART_SetErrorHandler 0C2E                         __end_of_ADC_Initialize 0D5F  
                               Ini_matrix@data 00C8                                    __pdataBANK1 00E7  
                                  __pdataBANK2 0120                             i1___awmod@dividend 0072  
                                     ?_ADC_ISR 0070                                New_request@dest 007A  
                           __end_of_Next_floor 0697                             __end_of_Next_index 073F  
                        TMR1_ISR@CountCallBack 002D                                      ___latbits 0001  
                                _Motor_Turn_On 0D29                                  __pcstackBANK0 003F  
                                __pcstackBANK1 00C0                                  __pcstackBANK2 0135  
                                   ?_Read_UART 0070                        __end_of_SPI1_Initialize 0D02  
                             ??_Motor_Turn_Off 00D3                     __end_of_EUSART_Receive_ISR 070B  
                                  Write_UART@i 0047               _EUSART_RxDefaultInterruptHandler 00E1  
                          __end_of_EUSART_Read 0ECE                                      __pnvBANK1 00D7  
                      _IOCBF3_InterruptHandler 00E3                   __end_of_EUSART_RxDataHandler 0DBF  
                              ??i1_TMR0_Reload 0070                               ___lwdiv@dividend 0079  
                       _PIN_MANAGER_Initialize 0FD1                           EUSART_Read@readValue 0070  
                                 ??_Write_UART 0046               __end_of_TMR1_SetInterruptHandler 0C51  
                                     ?___awdiv 0077                                       ?___lbdiv 0070  
                                     ?___awmod 00C0                                       ?___lbmod 0074  
                                     ?___lwdiv 0077                                    ??_SPI1_Open 00C0  
                                     ?___lwmod 003F                                ?_ADC_Initialize 0070  
                                 _eusartRxHead 0039                                   _eusartRxTail 0038  
                 ??_INTERRUPT_InterruptManager 007E                               _uart_read_buffer 00A0  
                               ?_Motor_Turn_On 0070                           i1Matrix_update_dir@i 0048  
                          i1_Matrix_update_dir 0473             __end_of_IOCBF0_SetInterruptHandler 0C47  
                   _IOCBF0_SetInterruptHandler 0C42                          Matrix_update_dir@data 00CE  
           __end_of_IOCBF3_SetInterruptHandler 0C4C                     _IOCBF3_SetInterruptHandler 0C47  
                                  ??i1___awmod 0074                                       _CMP1_ISR 0C81  
                                     _CMP2_ISR 0C8A                               ___lwdiv@quotient 007B  
                           __end_of_Write_UART 0F55                                 _eusartRxBuffer 00B2  
                   __end_of_SPI1_ExchangeBlock 0F31                           New_request@index_ori 004D  
                                _TMR1_CallBack 0CBD                              ??_TMR0_Initialize 00C0  
                               ___wmul@product 0075                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00C0                                       _LATBbits 010D  
                                    clear_ram0 0C57                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 0036  
                        i1___bmul@multiplicand 0070                           ?i1_Matrix_update_dir 0070  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00C2  
                                     _PIR2bits 0012                                       _PIR3bits 0013  
                                ??_TMR0_Reload 00C0                    __end_of_Matrix_update_floor 07FC  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
                         i1_SPI1_ExchangeBlock 0EED      __end_of_EUSART_DefaultOverrunErrorHandler 0C18  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0C14                                       _TMR1_ISR 0E42  
                                     _SSP1STAT 0214                              ??_PIN_MANAGER_IOC 007C  
                                    _position0 0031                                      _positionf 00BC  
                            ??_TMR1_Initialize 00C2                              ??_PWM3_Initialize 00C0  
                                     i1___bmul 0D6E                                       i1_Tx_spi 0D5F  
                                   _ADCON0bits 009D                              ___wmul@multiplier 0071  
                                 ?_Route_empty 0070                                    ??_Read_UART 007C  
                                  _EUSART_Read 0EAF                               ?_SPI1_Initialize 0070  
                              i1_Motor_Turn_On 0D02                                 ?_TMR1_CallBack 0070  
                      Matrix_update_dir@i_1802 00D0                              ??_TMR2_Initialize 00C0  
                        i1_Matrix_update_floor 0F55                         i1Matrix_update_floor@i 007B  
                     __end_ofi1_Motor_Turn_Off 0CB2                          ??i1_Matrix_update_dir 0077  
                             _Update_tx_buffer 006C                          ?i1_SPI1_ExchangeBlock 0070  
                            i1___awmod@divisor 0070                      i1Matrix_update_dir@i_1802 0047  
                      Matrix_update_dir@route_ 00C8                        ??_OSCILLATOR_Initialize 00C0  
                               Tx_spi@dataSize 00C5                            _EUSART_ErrorHandler 00DB  
                            i1___awmod@counter 0074                    ?_EUSART_DefaultErrorHandler 0070  
                     _TMR1_SetInterruptHandler 0C4C                            __end_of_TMR0_Reload 0C24  
                              ??_Motor_Turn_On 00D3                          _TMR1_InterruptHandler 00D9  
                    i1Matrix_update_dir@route_ 003F                                ___lwdiv@divisor 0077  
                         _EUSART_RxDataHandler 0DAD                                ___lwdiv@counter 007D  
                                     __ptext10 0C93                                       __ptext11 0CF6  
                                     __ptext20 0C38                                       __ptext12 0D36  
                                     __ptext21 0C33                                       __ptext13 0FD1  
                                     __ptext30 0657                                       __ptext22 0C2E  
                                     __ptext14 0C47                                       __ptext31 058F  
                                     __ptext23 0CD3                                       __ptext15 0C42  
                                     __ptext32 0697                                       __ptext24 0CEA  
                                     __ptext16 0C51                                       __ptext41 0E42  
                                     __ptext33 0DBF                                       __ptext25 0D51  
                                     __ptext17 0C18                                       __ptext50 0E5B  
                                     __ptext42 0D43                                       __ptext34 0D29  
                                     __ptext26 0C29                                       __ptext18 07A2  
                                     __ptext51 0ECE                                       __ptext43 0CBD  
                                     __ptext35 0CC8                                       __ptext27 04EC  
                                     __ptext19 0C3D                                       __ptext60 0C14  
                                     __ptext52 0542                                       __ptext44 0003  
                                     __ptext36 03F2                                       __ptext28 0E91  
                                     __ptext61 0C0C                                       __ptext53 0C24  
                                     __ptext45 0F31                                       __ptext37 0D9D  
                                     __ptext29 070B                                       __ptext70 0C0A  
                                     __ptext62 0C0D                                       __ptext54 0C6A  
                                     __ptext46 006C                                       __ptext38 0D8D  
                                     __ptext71 0E2A                                       __ptext63 0DAD  
                                     __ptext55 0C63                                       __ptext47 0E76  
                                     __ptext39 0F0E                                       __ptext80 0D6E  
                                     __ptext72 0C8A                                       __ptext64 0EAF  
                                     __ptext56 06D5                                       __ptext48 0F7D  
                                     __ptext81 0F55                                       __ptext73 0DD3  
                                     __ptext65 0CB2                                       __ptext57 0615  
                                     __ptext49 073F                                       __ptext82 0D5F  
                                     __ptext74 0C10                                       __ptext66 0D1C  
                                     __ptext58 01EA                                       __ptext83 0EED  
                                     __ptext75 0C81                                       __ptext67 0C0B  
                                     __ptext59 05D2                                       __ptext84 0CDE  
                                     __ptext76 0D7D                                       __ptext68 0DFD  
                                     __ptext85 0C09                                       __ptext77 0D02  
                                     __ptext69 0D0F                                       __ptext78 0CA7  
                                     __ptext79 0473                                   _SSP1CON1bits 0215  
                                   _IOCBF0_ISR 0D0F                                     _IOCBF3_ISR 0D1C  
               i1Matrix_update_dir@display_dir 0046                               ??_TMR0_ReadTimer 0070  
                         Matrix_update_floor@i 00CB                        ?_EUSART_SetErrorHandler 00C0  
                i1SPI1_ExchangeBlock@blockSize 0071                        Matrix_update_floor@data 00C8  
EUSART_SetOverrunErrorHandler@interruptHandler 00C0                                       int$flags 007E  
                                     _position 00BE             __end_of_INTERRUPT_InterruptManager 003F  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0C38  
                _EUSART_SetFramingErrorHandler 0C33                              ??_TMR1_WriteTimer 0072  
                                   _MATRIX_DIR 0818                    SPI1_ExchangeBlock@blockSize 00C1  
                  Matrix_update_dir@route_leds 00CC                      i1Matrix_update_floor@data 0078  
                                   _INTCONbits 000B                        __end_ofi1_Motor_Turn_On 0D0F  
                        ?_EUSART_RxDataHandler 0070                                ??_TMR1_CallBack 007E  
                     ?_ADC_SetInterruptHandler 00C0                                       intlevel1 0000  
                       ?i1_Matrix_update_floor 0070                              _uart_write_buffer 0120  
                             ___lwmod@dividend 0041                        ?_PIN_MANAGER_Initialize 0070  
                            ??_TMR6_Initialize 00C0                 __end_of_EUSART_SetErrorHandler 0C33  
                             ??_ADC_Initialize 00C2           __end_of_EUSART_SetRxInterruptHandler 0C42  
                 _EUSART_SetRxInterruptHandler 0C3D                         ??i1_SPI1_ExchangeBlock 0073  
                                  _TMR0_Reload 0C20                             _EUSART_Receive_ISR 06D5  
EUSART_SetFramingErrorHandler@interruptHandler 00C0                                _position_string 00EB  
                                   _ISR_Floor1 0E2A                                     _ISR_Floor2 0DFD  
                                   _ISR_Floor3 0D7D                                     _ISR_Floor4 0DD3  
                                __pstringtext1 07FC                                  __pstringtext2 080C  
                                __pstringtext3 0818                                  __pstringtext4 0821  
                                __pstringtext5 0827                                 _FVR_Initialize 0C18  
                                   _OPTION_REG 0095                            ?_EUSART_Receive_ISR 0070  
                              ___lwmod@divisor 003F                                _TMR0_Initialize 0C93  
                           Matrix_update_dir@i 00D1                                ___lwmod@counter 0043  
                             Next_floor@index_ 00C7                    ?_IOCBF0_SetInterruptHandler 00C0  
                  ?_IOCBF3_SetInterruptHandler 00C0                                    ?_IOCBF0_ISR 0070  
                           EUSART_Write@txData 0070                                    ?_IOCBF3_ISR 0070  
                             Next_index@index_ 00C7                 __end_of_PIN_MANAGER_Initialize 1000  
             ??_IOCBF0_DefaultInterruptHandler 0070                ?_IOCBF0_DefaultInterruptHandler 0070  
                              _PIN_MANAGER_IOC 0CB2                           ??_EUSART_Receive_ISR 0070  
                              _TMR1_Initialize 0E13                                _PWM3_Initialize 0D36  
                   __end_of_spi1_configuration 082B  
